<Type Name="String" FullName="System.String">
  <Metadata><Meta Name="ms.openlocfilehash" Value="977a13348cdf33fbdeaceb78cf993f6f036917fe" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82285408" /></Metadata><TypeSignature Language="C#" Value="public sealed class String : IComparable, IComparable&lt;string&gt;, IConvertible, IEquatable&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;char&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit string extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;char&gt;, class System.Collections.IEnumerable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IConvertible, class System.IEquatable`1&lt;string&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.String" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements IComparable, IComparable(Of String), IConvertible, IEnumerable(Of Char), IEquatable(Of String)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : IComparable, IComparable&lt;System::String ^&gt;, IConvertible, IEquatable&lt;System::String ^&gt;, System::Collections::Generic::IEnumerable&lt;char&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface seq&lt;char&gt;&#xA;    interface IEnumerable&#xA;    interface IComparable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface IConvertible&#xA;    interface IEquatable&lt;string&gt;" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class String : ICloneable, IComparable, IComparable&lt;string&gt;, IConvertible, IEquatable&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;char&gt;" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit string extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;char&gt;, class System.Collections.IEnumerable, class System.ICloneable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IConvertible, class System.IEquatable`1&lt;string&gt;" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements ICloneable, IComparable, IComparable(Of String), IConvertible, IEnumerable(Of Char), IEquatable(Of String)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : ICloneable, IComparable, IComparable&lt;System::String ^&gt;, IConvertible, IEquatable&lt;System::String ^&gt;, System::Collections::Generic::IEnumerable&lt;char&gt;" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface seq&lt;char&gt;&#xA;    interface IEnumerable&#xA;    interface ICloneable&#xA;    interface IComparable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface IConvertible&#xA;    interface IEquatable&lt;string&gt;" FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface seq&lt;char&gt;&#xA;    interface IEnumerable&#xA;    interface IComparable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface IConvertible&#xA;    interface IEquatable&lt;string&gt;&#xA;    interface ICloneable" FrameworkAlternate="netcore-2.0" />
  <TypeSignature Language="C#" Value="public sealed class String : ICloneable, IComparable, IConvertible, System.Collections.IEnumerable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit string extends System.Object implements class System.Collections.IEnumerable, class System.ICloneable, class System.IComparable, class System.IConvertible" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements ICloneable, IComparable, IConvertible, IEnumerable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : ICloneable, IComparable, IConvertible, System::Collections::IEnumerable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface IComparable&#xA;    interface ICloneable&#xA;    interface IConvertible&#xA;    interface IEnumerable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit string extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;char&gt;, class System.Collections.IEnumerable, class System.ICloneable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IConvertible, class System.IEquatable`1&lt;string&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface IComparable&#xA;    interface ICloneable&#xA;    interface IConvertible&#xA;    interface IComparable&lt;string&gt;&#xA;    interface seq&lt;char&gt;&#xA;    interface IEnumerable&#xA;    interface IEquatable&lt;string&gt;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface IComparable&#xA;    interface ICloneable&#xA;    interface IConvertible&#xA;    interface IEnumerable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface seq&lt;char&gt;&#xA;    interface IEquatable&lt;string&gt;" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public sealed class String : IComparable, IComparable&lt;string&gt;, IEquatable&lt;string&gt;, System.Collections.IEnumerable" FrameworkAlternate="netstandard-1.0;netstandard-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit string extends System.Object implements class System.Collections.IEnumerable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IEquatable`1&lt;string&gt;" FrameworkAlternate="netstandard-1.0;netstandard-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements IComparable, IComparable(Of String), IEnumerable, IEquatable(Of String)" FrameworkAlternate="netstandard-1.0;netstandard-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : IComparable, IComparable&lt;System::String ^&gt;, IEquatable&lt;System::String ^&gt;, System::Collections::IEnumerable" FrameworkAlternate="netstandard-1.0;netstandard-1.1" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface IEnumerable&#xA;    interface IComparable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface IEquatable&lt;string&gt;" FrameworkAlternate="netstandard-1.0;netstandard-1.1" />
  <TypeSignature Language="C#" Value="public sealed class String : IComparable, IComparable&lt;string&gt;, IEquatable&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;char&gt;" FrameworkAlternate="netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit string extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;char&gt;, class System.Collections.IEnumerable, class System.IComparable, class System.IComparable`1&lt;string&gt;, class System.IEquatable`1&lt;string&gt;" FrameworkAlternate="netstandard-1.2" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class String&#xA;Implements IComparable, IComparable(Of String), IEnumerable(Of Char), IEquatable(Of String)" FrameworkAlternate="netstandard-1.2" />
  <TypeSignature Language="C++ CLI" Value="public ref class String sealed : IComparable, IComparable&lt;System::String ^&gt;, IEquatable&lt;System::String ^&gt;, System::Collections::Generic::IEnumerable&lt;char&gt;" FrameworkAlternate="netstandard-1.2" />
  <TypeSignature Language="F#" Value="type string = class&#xA;    interface IComparable&#xA;    interface IComparable&lt;string&gt;&#xA;    interface IEquatable&lt;string&gt;&#xA;    interface seq&lt;char&gt;&#xA;    interface IEnumerable" FrameworkAlternate="netstandard-1.2" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.String&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d5817-101">テキストを一連の UTF-16 コード単位として表現します。</span><span class="sxs-lookup"><span data-stu-id="d5817-101">Represents text as a sequence of UTF-16 code units.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

 <span data-ttu-id="d5817-102">文字列は、テキストを表すために使用される文字のシーケンシャルコレクションです。</span><span class="sxs-lookup"><span data-stu-id="d5817-102">A string is a sequential collection of characters that is used to represent text.</span></span> <span data-ttu-id="d5817-103"><xref:System.String> オブジェクトは、文字列を表す <xref:System.Char?displayProperty=nameWithType> オブジェクトのシーケンシャルコレクションです。<xref:System.Char?displayProperty=nameWithType> オブジェクトは UTF-16 コード単位に対応します。</span><span class="sxs-lookup"><span data-stu-id="d5817-103">A <xref:System.String> object is a sequential collection of <xref:System.Char?displayProperty=nameWithType> objects that represent a string; a <xref:System.Char?displayProperty=nameWithType> object corresponds to a UTF-16 code unit.</span></span> <span data-ttu-id="d5817-104"><xref:System.String> オブジェクトの値は <xref:System.Char?displayProperty=nameWithType> オブジェクトのシーケンシャルコレクションの内容であり、その値は変更できません (つまり、読み取り専用です)。</span><span class="sxs-lookup"><span data-stu-id="d5817-104">The value of the <xref:System.String> object is the content of the sequential collection of <xref:System.Char?displayProperty=nameWithType> objects, and that value is immutable (that is, it is read-only).</span></span> <span data-ttu-id="d5817-105">文字列の不変性の詳細については、このトピックで後述する「[不変クラスと StringBuilder クラス](#Immutability)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-105">For more information about the immutability of strings, see the [Immutability and the StringBuilder class](#Immutability) section later in this topic.</span></span> <span data-ttu-id="d5817-106">メモリ内の <xref:System.String> オブジェクトの最大サイズは 2 GB、または約10億文字です。</span><span class="sxs-lookup"><span data-stu-id="d5817-106">The maximum size of a <xref:System.String> object in memory is 2GB, or about 1 billion characters.</span></span>

 <span data-ttu-id="d5817-107">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="d5817-107">In this section:</span></span>

 <span data-ttu-id="d5817-108">[文字列オブジェクトのインスタンス化](#Instantiation)</span><span class="sxs-lookup"><span data-stu-id="d5817-108">[Instantiate a String object](#Instantiation)</span></span>\
 <span data-ttu-id="d5817-109">[Char オブジェクトと Unicode 文字](#Characters)</span><span class="sxs-lookup"><span data-stu-id="d5817-109">[Char objects and Unicode characters](#Characters)</span></span>\
 <span data-ttu-id="d5817-110">[文字列と Unicode 標準](#Unicode)</span><span class="sxs-lookup"><span data-stu-id="d5817-110">[Strings and The Unicode Standard](#Unicode)</span></span>\
 <span data-ttu-id="d5817-111">[文字列と埋め込まれた null 文字](#EmbeddedNulls)</span><span class="sxs-lookup"><span data-stu-id="d5817-111">[Strings and embedded null characters](#EmbeddedNulls)</span></span>\
 <span data-ttu-id="d5817-112">[文字列とインデックス](#Indexes)</span><span class="sxs-lookup"><span data-stu-id="d5817-112">[Strings and indexes](#Indexes)</span></span>\
 <span data-ttu-id="d5817-113">[Null 文字列と空の文字列](#Nulls)</span><span class="sxs-lookup"><span data-stu-id="d5817-113">[Null strings and empty strings](#Nulls)</span></span>\
 <span data-ttu-id="d5817-114">[不変性と StringBuilder クラス](#Immutability)</span><span class="sxs-lookup"><span data-stu-id="d5817-114">[Immutability and the StringBuilder class](#Immutability)</span></span>\
 <span data-ttu-id="d5817-115">[序数およびカルチャに依存した操作](#CultureSensitive)</span><span class="sxs-lookup"><span data-stu-id="d5817-115">[Ordinal vs. culture-sensitive operations](#CultureSensitive)</span></span>\
 <span data-ttu-id="d5817-116">[正規化](#Normalization)</span><span class="sxs-lookup"><span data-stu-id="d5817-116">[Normalization](#Normalization)</span></span>\
 [<span data-ttu-id="d5817-117">カテゴリ別の文字列操作</span><span class="sxs-lookup"><span data-stu-id="d5817-117">String operations by category</span></span>](#ByCategory)

<a name="Instantiation"></a>
## <a name="instantiate-a-string-object"></a><span data-ttu-id="d5817-118">String オブジェクトのインスタンス化</span><span class="sxs-lookup"><span data-stu-id="d5817-118">Instantiate a String object</span></span>
 <span data-ttu-id="d5817-119"><xref:System.String> オブジェクトは、次の方法でインスタンス化できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-119">You can instantiate a <xref:System.String> object in the following ways:</span></span>

-   <span data-ttu-id="d5817-120"><xref:System.String> 変数に文字列リテラルを代入する。</span><span class="sxs-lookup"><span data-stu-id="d5817-120">By assigning a string literal to a <xref:System.String> variable.</span></span> <span data-ttu-id="d5817-121">これは、文字列を作成するために最もよく使用されるメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5817-121">This is the most commonly used method for creating a string.</span></span> <span data-ttu-id="d5817-122">次の例では、割り当てを使用して複数の文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-122">The following example uses assignment to create several strings.</span></span> <span data-ttu-id="d5817-123">でC#は、円記号 (\\) はエスケープ文字なので、文字列内のリテラルの円記号はエスケープする必要があります。また、文字列全体を @-quotedする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-123">Note that in C#, because the backslash (\\) is an escape character, literal backslashes in a string must be escaped or the entire string must be @-quoted.</span></span>

     [!code-cpp[System.String.Class.Instantiate#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate1.cpp#1)]
     [!code-csharp-interactive[System.String.Class.Instantiate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#1)]
     [!code-vb[System.String.Class.Instantiate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#1)]

-   <span data-ttu-id="d5817-124"><xref:System.String> クラスコンストラクターを呼び出す。</span><span class="sxs-lookup"><span data-stu-id="d5817-124">By calling a <xref:System.String> class constructor.</span></span> <span data-ttu-id="d5817-125">次の例では、複数のクラスコンストラクターを呼び出すことによって文字列をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-125">The following example instantiates strings by calling several class constructors.</span></span> <span data-ttu-id="d5817-126">一部のコンストラクターには、パラメーターとしての文字配列または符号付きバイト配列へのポインターが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-126">Note that some of the constructors include pointers to character arrays or signed byte arrays as parameters.</span></span> <span data-ttu-id="d5817-127">Visual Basic は、これらのコンストラクターの呼び出しをサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="d5817-127">Visual Basic does not support calls to these constructors.</span></span> <span data-ttu-id="d5817-128"><xref:System.String> コンストラクターの詳細については、「<xref:System.String.%23ctor%2A> コンストラクターの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-128">For detailed information about <xref:System.String> constructors, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

     [!code-cpp[System.String.Class.Instantiate#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate2.cpp#2)]
     [!code-csharp[System.String.Class.Instantiate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#2)]
     [!code-vb[System.String.Class.Instantiate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#2)]

-   <span data-ttu-id="d5817-129">文字列連結演算子 (+ in C#および & または + in Visual Basic) を使用して、<xref:System.String> インスタンスと文字列リテラルの任意の組み合わせから1つの文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-129">By using the string concatenation operator (+ in C# and & or + in Visual Basic) to create a single string from any combination of <xref:System.String> instances and string literals.</span></span> <span data-ttu-id="d5817-130">次の例は、文字列連結演算子の使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-130">The following example illustrates the use of the string concatenation operator.</span></span>

     [!code-cpp[System.String.Class.Instantiate#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#3)]
     [!code-csharp-interactive[System.String.Class.Instantiate#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#3)]
     [!code-vb[System.String.Class.Instantiate#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#3)]

-   <span data-ttu-id="d5817-131">プロパティを取得するか、文字列を返すメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-131">By retrieving a property or calling a method that returns a string.</span></span> <span data-ttu-id="d5817-132">次の例では、<xref:System.String> クラスのメソッドを使用して、より大きな文字列から部分文字列を抽出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-132">The following example uses the methods of the <xref:System.String> class to extract a substring from a larger string.</span></span>

     [!code-cpp[System.String.Class.Instantiate#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#4)]
     [!code-csharp-interactive[System.String.Class.Instantiate#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#4)]
     [!code-vb[System.String.Class.Instantiate#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#4)]

-   <span data-ttu-id="d5817-133">書式指定メソッドを呼び出して、値またはオブジェクトをその文字列形式に変換する。</span><span class="sxs-lookup"><span data-stu-id="d5817-133">By calling a formatting method to convert a value or object to its string representation.</span></span> <span data-ttu-id="d5817-134">次の例では、[複合書式指定](~/docs/standard/base-types/composite-formatting.md)機能を使用して、2つのオブジェクトの文字列形式を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-134">The following example uses the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature to embed the string representation of two objects into a string.</span></span>

     [!code-cpp[System.String.Class.Instantiate#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.instantiate/cpp/string.instantiate3.cpp#5)]
     [!code-csharp[System.String.Class.Instantiate#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.instantiate/cs/program.cs#5)]
     [!code-vb[System.String.Class.Instantiate#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.instantiate/vb/instantiate1.vb#5)]

<a name="Characters"></a>
## <a name="char-objects-and-unicode-characters"></a><span data-ttu-id="d5817-135">Char オブジェクトと Unicode 文字</span><span class="sxs-lookup"><span data-stu-id="d5817-135">Char objects and Unicode characters</span></span>
 <span data-ttu-id="d5817-136">文字列内の各文字は、unicode スカラー値 (Unicode コードポイントまたは unicode 文字の序数 (numeric) 値) によって定義されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-136">Each character in a string is defined by a Unicode scalar value, also called a Unicode code point or the ordinal (numeric) value of the Unicode character.</span></span> <span data-ttu-id="d5817-137">各コードポイントは UTF-16 エンコーディングを使用してエンコードされ、エンコーディングの各要素の数値は <xref:System.Char> オブジェクトによって表されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-137">Each code point is encoded by using UTF-16 encoding, and the numeric value of each element of the encoding is represented by a <xref:System.Char> object.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-138"><xref:System.String> インスタンスは UTF-16 コード単位のシーケンシャルコレクションで構成されているため、整形式の Unicode 文字列ではない <xref:System.String> オブジェクトを作成することができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-138">Note that, because a <xref:System.String> instance consists of a sequential collection of UTF-16 code units, it is possible to create a <xref:System.String> object that is not a well-formed Unicode string.</span></span> <span data-ttu-id="d5817-139">たとえば、対応する上位サロゲートを持たない下位サロゲートを持つ文字列を作成できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-139">For example, it is possible to create a string that has a low surrogate without a corresponding high surrogate.</span></span> <span data-ttu-id="d5817-140"><xref:System.Text> 名前空間のオブジェクトをエンコードおよびデコードするメソッドなどの一部のメソッドでは、文字列が適切な <xref:System.String> 形式であることを確認するために、文字列が適切な形式であることを確認するためのチェックが実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-140">Although some methods, such as the methods of encoding and decoding objects in the <xref:System.Text> namespace, may performs checks to ensure that strings are well-formed, <xref:System.String> class members don't ensure that a string is well-formed.</span></span>

 <span data-ttu-id="d5817-141">1つの <xref:System.Char> オブジェクトは、通常、単一のコードポイントを表します。つまり、<xref:System.Char> の数値はコードポイントと同じになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-141">A single <xref:System.Char> object usually represents a single code point; that is, the numeric value of the <xref:System.Char> equals the code point.</span></span> <span data-ttu-id="d5817-142">たとえば、文字 "a" のコードポイントは U + 0061 です。</span><span class="sxs-lookup"><span data-stu-id="d5817-142">For example, the code point for the character "a" is U+0061.</span></span> <span data-ttu-id="d5817-143">ただし、コードポイントでは、複数のエンコードされた要素 (複数の <xref:System.Char> オブジェクト) が必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-143">However, a code point might require more than one encoded element (more than one <xref:System.Char> object).</span></span> <span data-ttu-id="d5817-144">Unicode 規格では、複数の <xref:System.Char> オブジェクトに対応する2種類の文字が定義されています。 graphemes と、Unicode 補助プレーンの文字に対応する Unicode 補助コードポイントです。</span><span class="sxs-lookup"><span data-stu-id="d5817-144">The Unicode standard defines two types of characters that correspond to multiple <xref:System.Char> objects: graphemes, and Unicode supplementary code points that correspond to characters in the Unicode supplementary planes.</span></span>

-   <span data-ttu-id="d5817-145">書記素は、基本文字とそれに続く1つ以上の組み合わせ文字で表されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-145">A grapheme is represented by a base character followed by one or more combining characters.</span></span> <span data-ttu-id="d5817-146">たとえば、äという文字は、コードポイントが U + 0061 の後に、そのコードポイントが U + 0308 である <xref:System.Char> オブジェクトが続く <xref:System.Char> オブジェクトによって表されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-146">For example, the character ä is represented by a <xref:System.Char> object whose code point is U+0061 followed by a <xref:System.Char> object whose code point is U+0308.</span></span> <span data-ttu-id="d5817-147">この文字は、コードポイントが U + 00E4 の単一の <xref:System.Char> オブジェクトによって定義することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-147">This character can also be defined by a single <xref:System.Char> object that has a code point of U+00E4.</span></span> <span data-ttu-id="d5817-148">次の例に示すように、カルチャに依存した等値比較では、これら2つの表現が等しいことを示していますが、通常の序数の比較は同じではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-148">As the following example shows, a culture-sensitive comparison for equality indicates that these two representations are equal, although an ordinary ordinal comparison does not.</span></span> <span data-ttu-id="d5817-149">ただし、2つの文字列が正規化されている場合は、序数に基づく比較でも等しいことが示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-149">However, if the two strings are normalized, an ordinal comparison also indicates that they are equal.</span></span> <span data-ttu-id="d5817-150">(文字列の正規化の詳細については、「[正規化](#Normalization)」セクションを参照してください)。</span><span class="sxs-lookup"><span data-stu-id="d5817-150">(For more information on normalizing strings, see the [Normalization](#Normalization) section.)</span></span>

     [!code-cpp[System.String.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char1.cpp#2)]
     [!code-csharp[System.String.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/grapheme1.cs#2)]
     [!code-vb[System.String.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/grapheme1.vb#2)]

-   <span data-ttu-id="d5817-151">Unicode 補助コードポイント (サロゲートペア) は、コードポイントが上位サロゲートで、その後にコードポイントが下位サロゲートである <xref:System.Char> オブジェクトによって表される、<xref:System.Char> のオブジェクトによって表されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-151">A Unicode supplementary code point (a surrogate pair) is represented by a <xref:System.Char> object whose code point is a high surrogate followed by a <xref:System.Char> object whose code point is a low surrogate.</span></span> <span data-ttu-id="d5817-152">高いサロゲートのコード単位は、U + D800 から U + DBFF までの範囲です。</span><span class="sxs-lookup"><span data-stu-id="d5817-152">The code units of high surrogates range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="d5817-153">下限サロゲートのコード単位は、U + DC00 から U + DFFF までの範囲です。</span><span class="sxs-lookup"><span data-stu-id="d5817-153">The code units of low surrogates range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="d5817-154">サロゲートペアは、16の Unicode 補助プレーンの文字を表すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-154">Surrogate pairs are used to represent characters in the 16 Unicode supplementary planes.</span></span> <span data-ttu-id="d5817-155">次の例では、サロゲート文字を作成し、それを <xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=nameWithType> メソッドに渡して、サロゲートペアであるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-155">The following example creates a surrogate character and passes it to the <xref:System.Char.IsSurrogatePair%28System.Char%2CSystem.Char%29?displayProperty=nameWithType> method to determine whether it is a surrogate pair.</span></span>

     [!code-cpp[System.String.Class#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.char2.cpp#3)]
     [!code-csharp-interactive[System.String.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/surrogate1.cs#3)]
     [!code-vb[System.String.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/surrogate1.vb#3)]

<a name="Unicode"></a>
## <a name="strings-and-the-unicode-standard"></a><span data-ttu-id="d5817-156">文字列と Unicode 標準</span><span class="sxs-lookup"><span data-stu-id="d5817-156">Strings and the Unicode Standard</span></span>
 <span data-ttu-id="d5817-157">文字列内の文字は、<xref:System.Char> 値に対応する UTF-16 でエンコードされたコード単位で表されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-157">Characters in a string are represented by UTF-16 encoded code units, which correspond to <xref:System.Char> values.</span></span>

 <span data-ttu-id="d5817-158">文字列内の各文字には、関連付けられている Unicode 文字カテゴリがあります。これは、<xref:System.Globalization.UnicodeCategory> 列挙体によって .NET で表されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-158">Each character in a string has an associated Unicode character category, which is represented in .NET by the <xref:System.Globalization.UnicodeCategory> enumeration.</span></span> <span data-ttu-id="d5817-159">文字またはサロゲートペアのカテゴリは、<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> メソッドを呼び出すことによって決定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-159">The category of a character or a surrogate pair can be determined by calling the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=nameWithType> method.</span></span>

[!INCLUDE[character-categories](~/includes/unicode-categories.md)]

 <span data-ttu-id="d5817-160">また、.NET では、Unicode 標準に基づく文字列比較と並べ替えがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="d5817-160">In addition, .NET supports string comparison and sorting based on the Unicode standard.</span></span> <span data-ttu-id="d5817-161">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]を通じて .NET Framework のバージョンでは、.NET Framework は文字列データの独自のテーブルを保持します。</span><span class="sxs-lookup"><span data-stu-id="d5817-161">In versions of the .NET Framework through the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the .NET Framework maintains its own table of string data.</span></span> <span data-ttu-id="d5817-162">これは、Windows 7 で実行されている [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 以降の .NET Framework のバージョンにも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="d5817-162">This is also true of versions of the .NET Framework starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Windows 7.</span></span> <span data-ttu-id="d5817-163">Windows オペレーティングシステムの Windows 8 以降のバージョンで実行されている [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 以降では、ランタイムは文字列の比較と並べ替えの操作をオペレーティングシステムに委任します。</span><span class="sxs-lookup"><span data-stu-id="d5817-163">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] running on Window 8 and later versions of the Windows operating system, the runtime delegates string comparison and sorting operations to the operating system.</span></span> <span data-ttu-id="d5817-164">.NET Core では、 [Unicode ライブラリの国際化コンポーネント](http://site.icu-project.org/)によって、文字列の比較と並べ替えの情報が提供されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-164">On .NET Core, string comparison and sorting information is provided by [International Components for Unicode](http://site.icu-project.org/) libraries.</span></span> <span data-ttu-id="d5817-165">次の表に、.NET のバージョンと、文字の比較と並べ替えの基準となる Unicode 標準のバージョンを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-165">The following table lists the versions of .NET and the versions of the Unicode Standard on which character comparison and sorting are based.</span></span>

|<span data-ttu-id="d5817-166">.NET のバージョン</span><span class="sxs-lookup"><span data-stu-id="d5817-166">.NET version</span></span>|<span data-ttu-id="d5817-167">Unicode 標準のバージョン</span><span class="sxs-lookup"><span data-stu-id="d5817-167">Version of the Unicode Standard</span></span>|
|----------------------------|-------------------------------------|
|[!INCLUDE[net_v11_long](~/includes/net-v11-long-md.md)]|[<span data-ttu-id="d5817-168">Unicode 標準、バージョン 4.0.0</span><span class="sxs-lookup"><span data-stu-id="d5817-168">The Unicode Standard, Version 4.0.0</span></span>](https://www.unicode.org/versions/Unicode4.0.0/)|
|<span data-ttu-id="d5817-169">.NET Framework 2.0</span><span class="sxs-lookup"><span data-stu-id="d5817-169">.NET Framework 2.0</span></span>|[<span data-ttu-id="d5817-170">Unicode 標準、バージョン 5.0.0</span><span class="sxs-lookup"><span data-stu-id="d5817-170">The Unicode Standard, Version 5.0.0</span></span>](https://www.unicode.org/versions/Unicode5.0.0)|
|[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]|[<span data-ttu-id="d5817-171">Unicode 標準、バージョン 5.0.0</span><span class="sxs-lookup"><span data-stu-id="d5817-171">The Unicode Standard, Version 5.0.0</span></span>](https://www.unicode.org/versions/Unicode5.0.0)|
|[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]|[<span data-ttu-id="d5817-172">Unicode 標準、バージョン 5.0.0</span><span class="sxs-lookup"><span data-stu-id="d5817-172">The Unicode Standard, Version 5.0.0</span></span>](https://www.unicode.org/versions/Unicode5.0.0)|
|<span data-ttu-id="d5817-173">Windows 7 の [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 以降</span><span class="sxs-lookup"><span data-stu-id="d5817-173">[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later on Windows 7</span></span>|[<span data-ttu-id="d5817-174">Unicode 標準、バージョン 5.0.0</span><span class="sxs-lookup"><span data-stu-id="d5817-174">The Unicode Standard, Version 5.0.0</span></span>](https://www.unicode.org/versions/Unicode5.0.0)|
|<span data-ttu-id="d5817-175">Windows 8 以降の windows オペレーティングシステムでの [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 以降</span><span class="sxs-lookup"><span data-stu-id="d5817-175">[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later on Windows 8 and later Windows operating systems</span></span>|[<span data-ttu-id="d5817-176">Unicode 標準、バージョン 6.3.0</span><span class="sxs-lookup"><span data-stu-id="d5817-176">The Unicode Standard, Version 6.3.0</span></span>](https://www.unicode.org/versions/Unicode6.3.0/)|
|<span data-ttu-id="d5817-177">.NET Core (すべてのバージョン)</span><span class="sxs-lookup"><span data-stu-id="d5817-177">.NET Core (all versions)</span></span>|<span data-ttu-id="d5817-178">基になるオペレーティング システムでサポートされている Unicode 標準のバージョンによって異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-178">Depends on the version of the Unicode Standard supported by the underlying operating system.</span></span>|

<a name="EmbeddedNulls"></a>
## <a name="strings-and-embedded-null-characters"></a><span data-ttu-id="d5817-179">文字列と埋め込まれた null 文字</span><span class="sxs-lookup"><span data-stu-id="d5817-179">Strings and embedded null characters</span></span>
 <span data-ttu-id="d5817-180">.NET では、<xref:System.String> オブジェクトに、文字列の長さの一部としてカウントされる埋め込み null 文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-180">In .NET, a <xref:System.String> object can include embedded null characters, which count as a part of the string's length.</span></span> <span data-ttu-id="d5817-181">ただし、C やC++などの一部の言語では、null 文字は文字列の末尾を示します。文字列の一部とは見なされず、文字列の長さの一部としてカウントされません。</span><span class="sxs-lookup"><span data-stu-id="d5817-181">However, in some languages such as C and C++, a null character indicates the end of a string; it is not considered a part of the string and is not counted as part of the string's length.</span></span> <span data-ttu-id="d5817-182">これは、c、プログラマー、またはC++ C++ c で記述されたプログラマやライブラリが、<xref:System.String> オブジェクトに適用した場合には必ずしも有効でないという一般的な仮定を意味します。</span><span class="sxs-lookup"><span data-stu-id="d5817-182">This means that the following common assumptions that C and C++ programmers or libraries written in C or C++ might make about strings are not necessarily valid when applied to <xref:System.String> objects:</span></span>

-   <span data-ttu-id="d5817-183">`strlen` または `wcslen` 関数によって返される値は、必ずしも <xref:System.String.Length%2A?displayProperty=nameWithType>と同じではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-183">The value returned by the `strlen` or `wcslen` functions does not necessarily equal <xref:System.String.Length%2A?displayProperty=nameWithType>.</span></span>

-   <span data-ttu-id="d5817-184">`strcpy_s` または `wcscpy_s` 関数によって作成された文字列は、必ずしも <xref:System.String.Copy%2A?displayProperty=nameWithType> メソッドによって作成された文字列と同一ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-184">The string created by the `strcpy_s` or `wcscpy_s` functions is not necessarily identical to the string created by the <xref:System.String.Copy%2A?displayProperty=nameWithType> method.</span></span>

 <span data-ttu-id="d5817-185"><xref:System.String> オブジェクトをインスタンス化するネイティブC++ C とコード、およびプラットフォーム呼び出しによってオブジェクト <xref:System.String> 渡されるコードは、埋め込まれた null 文字が文字列の末尾を示すと想定していないことを確認してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-185">You should ensure that native C and C++ code that instantiates <xref:System.String> objects, and code that is passed <xref:System.String> objects through platform invoke, don't assume that an embedded null character marks the end of the string.</span></span>

 <span data-ttu-id="d5817-186">文字列の並べ替え (または比較) と文字列の検索時には、文字列の埋め込み null 文字も異なる方法で処理されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-186">Embedded null characters in a string are also treated differently when a string is sorted (or compared) and when a string is searched.</span></span> <span data-ttu-id="d5817-187">2つの文字列の間でカルチャに依存した比較を実行する場合、Null 文字は無視されます (インバリアントカルチャを使用した比較を含む)。</span><span class="sxs-lookup"><span data-stu-id="d5817-187">Null characters are ignored when performing culture-sensitive comparisons between two strings, including comparisons using the invariant culture.</span></span> <span data-ttu-id="d5817-188">序数または大文字と小文字を区別しない序数比較の場合にのみ考慮されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-188">They are considered only for ordinal or case-insensitive ordinal comparisons.</span></span> <span data-ttu-id="d5817-189">一方、<xref:System.String.Contains%2A>、<xref:System.String.StartsWith%2A>、<xref:System.String.IndexOf%2A>などのメソッドを使用して文字列を検索する場合は、埋め込み null 文字が常に考慮されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-189">On the other hand, embedded null characters are always considered when searching a string with methods such as <xref:System.String.Contains%2A>, <xref:System.String.StartsWith%2A>, and <xref:System.String.IndexOf%2A>.</span></span>

<a name="Indexes"></a>
## <a name="strings-and-indexes"></a><span data-ttu-id="d5817-190">文字列とインデックス</span><span class="sxs-lookup"><span data-stu-id="d5817-190">Strings and indexes</span></span>
 <span data-ttu-id="d5817-191">インデックスは、<xref:System.String>内の <xref:System.Char> オブジェクト (Unicode 文字ではない) の位置です。</span><span class="sxs-lookup"><span data-stu-id="d5817-191">An index is the position of a <xref:System.Char> object (not a Unicode character) in a <xref:System.String>.</span></span> <span data-ttu-id="d5817-192">インデックスは、0から始まる、負でない数値で、文字列内の最初の位置から始まります。インデックス位置は0です。</span><span class="sxs-lookup"><span data-stu-id="d5817-192">An index is a zero-based, nonnegative number that starts from the first position in the string, which is index position zero.</span></span> <span data-ttu-id="d5817-193"><xref:System.String.IndexOf%2A> や <xref:System.String.LastIndexOf%2A>などのいくつかの検索方法では、文字列インスタンス内の文字または部分文字列のインデックスが返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-193">A number of search methods, such as <xref:System.String.IndexOf%2A> and <xref:System.String.LastIndexOf%2A>, return the index of a character or substring in the string instance.</span></span>

 <span data-ttu-id="d5817-194"><xref:System.String.Chars%2A> プロパティを使用すると、文字列内のインデックス位置によって個々の <xref:System.Char> オブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-194">The <xref:System.String.Chars%2A> property lets you access individual <xref:System.Char> objects by their index position in the string.</span></span> <span data-ttu-id="d5817-195"><xref:System.String.Chars%2A> プロパティは既定のプロパティ (Visual Basic) またはインデクサー (でC#は) であるため、次のようなコードを使用して、文字列内の個々の <xref:System.Char> オブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-195">Because the <xref:System.String.Chars%2A> property is the default property (in Visual Basic) or the indexer (in C#), you can access the individual <xref:System.Char> objects in a string by using code such as the following.</span></span> <span data-ttu-id="d5817-196">このコードでは、文字列内の空白文字または句読点を検索して、文字列に含まれる単語の数を確認します。</span><span class="sxs-lookup"><span data-stu-id="d5817-196">This code looks for white space or punctuation characters in a string to determine how many words the string contains.</span></span>

 [!code-cpp[System.String.Class#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index1.cpp#4)]
 [!code-csharp-interactive[System.String.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index1.cs#4)]
 [!code-vb[System.String.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index1.vb#4)]

 <span data-ttu-id="d5817-197"><xref:System.String> クラスは <xref:System.Collections.IEnumerable> インターフェイスを実装するため、次の例に示すように、`foreach` コンストラクトを使用して文字列内の <xref:System.Char> オブジェクトを反復処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-197">Because the <xref:System.String> class implements the <xref:System.Collections.IEnumerable> interface, you can also iterate through the <xref:System.Char> objects in a string by using a `foreach` construct, as the following example shows.</span></span>

 [!code-cpp[System.String.Class#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index2.cpp#5)]
 [!code-csharp-interactive[System.String.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index2.cs#5)]
 [!code-vb[System.String.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index2.vb#5)]

 <span data-ttu-id="d5817-198">Unicode 文字は複数の <xref:System.Char> オブジェクトとしてエンコードされる可能性があるため、連続したインデックス値が連続する Unicode 文字に対応しないことがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-198">Consecutive index values might not correspond to consecutive Unicode characters, because a Unicode character might be encoded as more than one <xref:System.Char> object.</span></span> <span data-ttu-id="d5817-199">特に、文字列には、基本文字で構成され、1つ以上の組み合わせ文字またはサロゲートペアによって形成される複数文字のテキスト単位を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-199">In particular, a string may contain multi-character units of text that are formed by a base character followed by one or more combining characters or by surrogate pairs.</span></span> <span data-ttu-id="d5817-200"><xref:System.Char> オブジェクトではなく Unicode 文字を操作するには、<xref:System.Globalization.StringInfo?displayProperty=nameWithType> クラスと <xref:System.Globalization.TextElementEnumerator> クラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-200">To work with Unicode characters instead of <xref:System.Char> objects, use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> and <xref:System.Globalization.TextElementEnumerator> classes.</span></span> <span data-ttu-id="d5817-201">次の例では、Unicode 文字で動作する <xref:System.Char> のオブジェクトとコードの違いについて説明します。</span><span class="sxs-lookup"><span data-stu-id="d5817-201">The following example illustrates the difference between code that works with <xref:System.Char> objects and code that works with Unicode characters.</span></span> <span data-ttu-id="d5817-202">文の各単語の文字数またはテキスト要素を比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-202">It compares the number of characters or text elements in each word of a sentence.</span></span> <span data-ttu-id="d5817-203">文字列には、基本文字の2つのシーケンスの後に結合文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-203">The string includes two sequences of a base character followed by a combining character.</span></span>

 [!code-cpp[System.String.Class#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.index3.cpp#6)]
 [!code-csharp-interactive[System.String.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/index3.cs#6)]
 [!code-vb[System.String.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/index3.vb#6)]

 <span data-ttu-id="d5817-204">この例では、<xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType> メソッドと <xref:System.Globalization.TextElementEnumerator> クラスを使用して、文字列内のすべてのテキスト要素を列挙することで、テキスト要素を操作します。</span><span class="sxs-lookup"><span data-stu-id="d5817-204">This example works with text elements by using the <xref:System.Globalization.StringInfo.GetTextElementEnumerator%2A?displayProperty=nameWithType> method and the <xref:System.Globalization.TextElementEnumerator> class to enumerate all the text elements in a string.</span></span> <span data-ttu-id="d5817-205"><xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=nameWithType> メソッドを呼び出すことによって、各テキスト要素の開始インデックスを含む配列を取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-205">You can also retrieve an array that contains the starting index of each text element by calling the <xref:System.Globalization.StringInfo.ParseCombiningCharacters%2A?displayProperty=nameWithType> method.</span></span>

 <span data-ttu-id="d5817-206">個々の <xref:System.Char> 値ではなく、テキスト単位を使用する方法の詳細については、<xref:System.Globalization.StringInfo> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-206">For more information about working with units of text rather than individual <xref:System.Char> values, see the <xref:System.Globalization.StringInfo> class.</span></span>

<a name="Nulls"></a>
## <a name="null-strings-and-empty-strings"></a><span data-ttu-id="d5817-207">Null 文字列と空の文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-207">Null strings and empty strings</span></span>
 <span data-ttu-id="d5817-208">宣言されていても値が割り当てられていない文字列は `null`。</span><span class="sxs-lookup"><span data-stu-id="d5817-208">A string that has been declared but has not been assigned a value is `null`.</span></span> <span data-ttu-id="d5817-209">その文字列に対してメソッドを呼び出そうとすると、<xref:System.NullReferenceException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-209">Attempting to call methods on that string throws a <xref:System.NullReferenceException>.</span></span> <span data-ttu-id="d5817-210">Null 文字列は、値が "" または <xref:System.String.Empty?displayProperty=nameWithType>である文字列である空の文字列とは異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-210">A null string is different from an empty string, which is a string whose value is "" or <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-211">場合によっては、メソッドの呼び出しで引数として null 文字列または空の文字列を渡すと、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-211">In some cases, passing either a null string or an empty string as an argument in a method call throws an exception.</span></span> <span data-ttu-id="d5817-212">たとえば、null 文字列を <xref:System.Int32.Parse%2A?displayProperty=nameWithType> メソッドに渡すと、<xref:System.ArgumentNullException>がスローされ、空の文字列を渡すと <xref:System.FormatException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-212">For example, passing a null string to the <xref:System.Int32.Parse%2A?displayProperty=nameWithType> method throws an <xref:System.ArgumentNullException>, and passing an empty string throws a <xref:System.FormatException>.</span></span> <span data-ttu-id="d5817-213">それ以外の場合、メソッドの引数には、null 文字列または空の文字列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-213">In other cases, a method argument can be either a null string or an empty string.</span></span> <span data-ttu-id="d5817-214">たとえば、クラスの <xref:System.IFormattable> の実装を提供する場合、null 文字列と空の文字列の両方を通常の ("G") 書式指定子と等価にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-214">For example, if you are providing an <xref:System.IFormattable> implementation for a class, you want to equate both a null string and an empty string with the general ("G") format specifier.</span></span>

 <span data-ttu-id="d5817-215"><xref:System.String> クラスには、次の2つの便利なメソッドが含まれています。このメソッドを使用すると、文字列が `null` か空かをテストできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-215">The <xref:System.String> class includes the following two convenience methods that enable you to test whether a string is `null` or empty:</span></span>

-   <span data-ttu-id="d5817-216"><xref:System.String.IsNullOrEmpty%2A>。文字列が `null` か、<xref:System.String.Empty?displayProperty=nameWithType>かどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-216"><xref:System.String.IsNullOrEmpty%2A>, which indicates whether a string is either `null` or is equal to  <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-217">このメソッドにより、次のようなコードを使用する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-217">This method eliminates the need to use code such as the following:</span></span>

     [!code-cpp[System.String.Class.Null#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#1)]
     [!code-csharp[System.String.Class.Null#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#1)]
     [!code-vb[System.String.Class.Null#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#1)]

-   <span data-ttu-id="d5817-218">文字列が `null`か、<xref:System.String.Empty?displayProperty=nameWithType>に等しいか、または空白文字だけで構成されているかを示す <xref:System.String.IsNullOrWhiteSpace%2A>。</span><span class="sxs-lookup"><span data-stu-id="d5817-218"><xref:System.String.IsNullOrWhiteSpace%2A>, which indicates whether a string is `null`, equals <xref:System.String.Empty?displayProperty=nameWithType>, or consists exclusively of white-space characters.</span></span> <span data-ttu-id="d5817-219">このメソッドにより、次のようなコードを使用する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-219">This method eliminates the need to use code such as the following:</span></span>

     [!code-cpp[System.String.Class.Null#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#2)]
     [!code-csharp[System.String.Class.Null#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#2)]
     [!code-vb[System.String.Class.Null#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#2)]

 <span data-ttu-id="d5817-220">次の例では、カスタム `Temperature` クラスの <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> の実装で <xref:System.String.IsNullOrEmpty%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-220">The following example uses the <xref:System.String.IsNullOrEmpty%2A> method in the <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation of a custom `Temperature` class.</span></span> <span data-ttu-id="d5817-221">メソッドは、"G"、"C"、"F"、"K" の各書式指定文字列をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="d5817-221">The method supports the "G", "C", "F", and "K" format strings.</span></span> <span data-ttu-id="d5817-222">`null` 値がである空の書式指定文字列または書式指定文字列がメソッドに渡される場合、その値は "G" 書式指定文字列に変更されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-222">If an empty format string or a format string whose value is `null` is passed to the method, its value is changed to the "G" format string.</span></span>

 [!code-cpp[System.String.Class.Null#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.class.null/cpp/string.null.cpp#3)]
 [!code-csharp[System.String.Class.Null#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.class.null/cs/nullorempty1.cs#3)]
 [!code-vb[System.String.Class.Null#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.class.null/vb/nullorempty1.vb#3)]

<a name="Immutability"></a>
## <a name="immutability-and-the-stringbuilder-class"></a><span data-ttu-id="d5817-223">不変性と StringBuilder クラス</span><span class="sxs-lookup"><span data-stu-id="d5817-223">Immutability and the StringBuilder class</span></span>
 <span data-ttu-id="d5817-224"><xref:System.String> オブジェクトは、作成後にその値を変更できないため、不変 (読み取り専用) と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-224">A <xref:System.String> object is called immutable (read-only), because its value cannot be modified after it has been created.</span></span> <span data-ttu-id="d5817-225"><xref:System.String> オブジェクトを変更するために表示されるメソッドは、実際には、変更を含む新しい <xref:System.String> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-225">Methods that appear to modify a <xref:System.String> object actually return a new <xref:System.String> object that contains the modification.</span></span>

 <span data-ttu-id="d5817-226">文字列は不変であるため、1つの文字列として表示されるものに対して繰り返しの追加や削除を実行する文字列操作ルーチンでは、パフォーマンスが大幅に低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-226">Because strings are immutable, string manipulation routines that perform repeated additions or deletions to what appears to be a single string can exact a significant performance penalty.</span></span> <span data-ttu-id="d5817-227">たとえば、次のコードでは、乱数ジェネレーターを使用して、0x0001 ~ 0x052F の範囲で1000文字の文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-227">For example, the following code uses a random number generator to create a string with 1000 characters in the range 0x0001 to 0x052F.</span></span> <span data-ttu-id="d5817-228">コードは、文字列の連結を使用して `str`という名前の既存の文字列に新しい文字を追加するように見えますが、実際には、連結操作ごとに新しい <xref:System.String> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-228">Although the code appears to use string concatenation to append a new character to the existing string named `str`, it actually creates a new <xref:System.String> object for each concatenation operation.</span></span>

 [!code-cpp[System.String.Class#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder1.cpp#15)]
 [!code-csharp[System.String.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable.cs#15)]
 [!code-vb[System.String.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable.vb#15)]

 <span data-ttu-id="d5817-229">文字列の値に複数の変更を加える操作には、<xref:System.String> クラスではなく <xref:System.Text.StringBuilder> クラスを使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-229">You can use the <xref:System.Text.StringBuilder> class instead of the <xref:System.String> class for operations that make multiple changes to the value of a string.</span></span> <span data-ttu-id="d5817-230"><xref:System.String> クラスのインスタンスとは異なり、<xref:System.Text.StringBuilder> オブジェクトは変更可能です。文字列の部分文字列を連結、追加、または削除すると、1つの文字列に対して操作が実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-230">Unlike instances of the <xref:System.String> class, <xref:System.Text.StringBuilder> objects are mutable; when you concatenate, append, or delete substrings from a string, the operations are performed on a single string.</span></span> <span data-ttu-id="d5817-231"><xref:System.Text.StringBuilder> オブジェクトの値の変更が完了したら、その <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> メソッドを呼び出して文字列に変換できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-231">When you have finished modifying the value of a <xref:System.Text.StringBuilder> object, you can call its <xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType> method to convert it to a string.</span></span> <span data-ttu-id="d5817-232">次の例では、前の例で使用した <xref:System.String> を、<xref:System.Text.StringBuilder> オブジェクトを使用して0x0001 から0x052F までの範囲内のランダムな文字1000を連結しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-232">The following example replaces the <xref:System.String> used in the previous example to concatenate 1000 random characters in the range to  0x0001 to 0x052F with a <xref:System.Text.StringBuilder> object.</span></span>

 [!code-cpp[System.String.Class#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.stringbuilder2.cpp#16)]
 [!code-csharp[System.String.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/immutable1.cs#16)]
 [!code-vb[System.String.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/immutable1.vb#16)]

<a name="CultureSensitive"></a>
## <a name="ordinal-vs-culture-sensitive-operations"></a><span data-ttu-id="d5817-233">序数およびカルチャに依存する操作</span><span class="sxs-lookup"><span data-stu-id="d5817-233">Ordinal vs. culture-sensitive operations</span></span>
 <span data-ttu-id="d5817-234"><xref:System.String> クラスのメンバーは、<xref:System.String> オブジェクトに対して序数またはカルチャに依存した (言語) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-234">Members of the <xref:System.String> class perform either ordinal or culture-sensitive (linguistic) operations on a <xref:System.String> object.</span></span> <span data-ttu-id="d5817-235">序数操作は、各 <xref:System.Char> オブジェクトの数値に対して作用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-235">An ordinal operation acts on the numeric value of each <xref:System.Char> object.</span></span> <span data-ttu-id="d5817-236">カルチャに依存する操作は <xref:System.String> オブジェクトの値に対して動作し、カルチャ固有の大文字と小文字の区別、並べ替え、書式設定、および解析の規則を考慮に入れます。</span><span class="sxs-lookup"><span data-stu-id="d5817-236">A culture-sensitive operation acts on the value of the <xref:System.String> object, and takes culture-specific casing, sorting, formatting, and parsing rules into account.</span></span> <span data-ttu-id="d5817-237">カルチャに依存する操作は、明示的に宣言されたカルチャまたは暗黙的な現在のカルチャのコンテキストで実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-237">Culture-sensitive operations execute in the context of an explicitly declared culture or the implicit current culture.</span></span> <span data-ttu-id="d5817-238">2種類の操作では、同じ文字列に対して実行すると、まったく異なる結果が生成される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-238">The two kinds of operations can produce very different results when they are performed on the same string.</span></span>

<span data-ttu-id="d5817-239">また、.NET では、インバリアントカルチャ (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>) を使用してカルチャを認識しない言語文字列操作をサポートしています。これは、地域に依存しない英語のカルチャ設定に厳密に基づいています。</span><span class="sxs-lookup"><span data-stu-id="d5817-239">.NET also supports culture-insensitive linguistic string operations by using the invariant culture (<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>), which is loosely based on the culture settings of the English language independent of region.</span></span> <span data-ttu-id="d5817-240">他の <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> 設定とは異なり、インバリアントカルチャの設定は、1台のコンピューター、システム間、および .NET のバージョン間で一貫して維持されることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-240">Unlike other <xref:System.Globalization.CultureInfo?displayProperty=nameWithType> settings, the settings of the invariant culture are guaranteed to remain consistent on a single computer, from system to system, and across versions of .NET.</span></span> <span data-ttu-id="d5817-241">インバリアントカルチャは、すべてのカルチャでの文字列比較と順序付けの安定性を確保するブラックボックスの一種として認識されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-241">The invariant culture can be seen as a kind of black box that ensures stability of string comparisons and ordering across all cultures.</span></span>

> [!IMPORTANT]
>  <span data-ttu-id="d5817-242">アプリケーションで、ファイル名や名前付きパイプなどのシンボル識別子、または XML ファイル内のテキストベースのデータなどの永続化されたデータに関するセキュリティ上の決定を行う場合、この操作では、カルチャに依存した比較ではなく序数の比較を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-242">If your application makes a security decision about a symbolic identifier such as a file name or named pipe, or about persisted data such as the text-based data in an XML file, the operation should use an ordinal comparison instead of a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-243">これは、カルチャに依存した比較では、有効なカルチャによって異なる結果が生成される可能性があるのに対し、序数の比較は比較対象の文字のバイナリ値のみに依存するためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-243">This is because a culture-sensitive comparison can yield different results depending on the culture in effect, whereas an ordinal comparison depends solely on the binary value of the compared characters.</span></span>

> [!IMPORTANT]
>  <span data-ttu-id="d5817-244">文字列操作を実行するほとんどのメソッドには、<xref:System.StringComparison>型のパラメーターを持つオーバーロードが含まれています。これにより、メソッドが序数またはカルチャに依存する操作を実行するかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-244">Most methods that perform string operations include an overload that has a parameter of type <xref:System.StringComparison>, which enables you to specify whether the method performs an ordinal or culture-sensitive operation.</span></span> <span data-ttu-id="d5817-245">一般に、メソッド呼び出しの意図を明確にするには、このオーバーロードを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-245">In general, you should call this overload to make the intent of your method call clear.</span></span> <span data-ttu-id="d5817-246">文字列に対して序数およびカルチャに依存した操作を使用するためのベストプラクティスとガイダンスについては、「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-246">For best practices and guidance for using ordinal and culture-sensitive operations on strings, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>

 <span data-ttu-id="d5817-247">[大文字と小文字](#casing)の区別、[解析と書式設定](#parsing)、[比較と並べ替え](#comparison)、および[等しいかどう](#equality)かのテストは、序数またはカルチャに依存する操作になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-247">Operations for [casing](#casing), [parsing and formatting](#parsing), [comparison and sorting](#comparison), and [testing for equality](#equality) can be either ordinal or culture-sensitive.</span></span> <span data-ttu-id="d5817-248">以下のセクションでは、操作の各カテゴリについて説明します。</span><span class="sxs-lookup"><span data-stu-id="d5817-248">The following sections discuss each category of operation.</span></span>

> [!TIP]
>  <span data-ttu-id="d5817-249">常にメソッドのオーバーロードを呼び出して、メソッド呼び出しの意図を明確にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-249">You should always call a method overload that makes the intent of your method call clear.</span></span> <span data-ttu-id="d5817-250">たとえば、現在のカルチャの規則を使用して、2つの文字列のカルチャに依存した比較を実行するために <xref:System.String.Compare%28System.String%2CSystem.String%29> メソッドを呼び出すのではなく、`comparisonType` 引数に <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> の値を指定して <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-250">For example, instead of calling the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to perform a culture-sensitive comparison of two strings by using the conventions of the current culture, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with a value of <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> for the `comparisonType` argument.</span></span> <span data-ttu-id="d5817-251">詳細については、「[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-251">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>

<span data-ttu-id="d5817-252">Windows オペレーティング システムの並べ替え操作と比較操作で使用される文字の重みに関する情報を含む一連のテキスト ファイルである[並べ替え重みテーブル](https://www.microsoft.com/download/details.aspx?id=10921) と、Linux と macOS 用の並べ替え重みテーブルである [デフォルト Unicode 照合基本テーブル](https://www.unicode.org/Public/UCA/latest/allkeys.txt)をダウンロードできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-252">You can download the [Sorting Weight Tables](https://www.microsoft.com/download/details.aspx?id=10921), a set of text files that contain information on the character weights used in sorting and comparison operations for Windows operating systems, and the [Default Unicode Collation Element Table](https://www.unicode.org/Public/UCA/latest/allkeys.txt), the sort weight table for Linux and macOS.</span></span>

<a name="casing"></a>
### <a name="casing"></a><span data-ttu-id="d5817-253">大文字小文字の区別</span><span class="sxs-lookup"><span data-stu-id="d5817-253">Casing</span></span>
 <span data-ttu-id="d5817-254">大文字と小文字の規則は、Unicode 文字の大文字と小文字を変更する方法を決定します。たとえば、小文字から大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-254">Casing rules determine how to change the capitalization of a Unicode character; for example, from lowercase to uppercase.</span></span> <span data-ttu-id="d5817-255">多くの場合、文字列比較の前に大文字と小文字の演算が実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-255">Often, a casing operation is performed before a string comparison.</span></span> <span data-ttu-id="d5817-256">たとえば、文字列を大文字に変換して、別の大文字の文字列と比較できるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-256">For example, a string might be converted to uppercase so that it can be compared with another uppercase string.</span></span> <span data-ttu-id="d5817-257"><xref:System.String.ToLower%2A> または <xref:System.String.ToLowerInvariant%2A> メソッドを呼び出して文字列内の文字を小文字に変換することができます。また、<xref:System.String.ToUpper%2A> または <xref:System.String.ToUpperInvariant%2A> メソッドを呼び出すことにより、文字列内の文字を大文字に変換することができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-257">You can convert the characters in a string to lowercase by calling the <xref:System.String.ToLower%2A> or <xref:System.String.ToLowerInvariant%2A> method, and you can convert them to uppercase by calling the <xref:System.String.ToUpper%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="d5817-258">また、<xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=nameWithType> メソッドを使用して、文字列を大文字に変換することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-258">In addition, you can use the <xref:System.Globalization.TextInfo.ToTitleCase%2A?displayProperty=nameWithType> method to convert a string to title case.</span></span>

[!INCLUDE[platform-note](~/includes/c-and-posix-cultures.md)]

 <span data-ttu-id="d5817-259">文字種の操作は、現在のカルチャ、指定されたカルチャ、またはインバリアントカルチャの規則に基づいて行うことができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-259">Casing operations can be based on the rules of the current culture, a specified culture, or the invariant culture.</span></span> <span data-ttu-id="d5817-260">大文字小文字の割り当ては使用されるカルチャによって異なる場合があるため、大文字と小文字の区別の結果はカルチャによって異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-260">Because case mappings can vary depending on the culture used, the result of casing operations can vary based on culture.</span></span> <span data-ttu-id="d5817-261">大文字と小文字の違いには、次の3種類があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-261">The actual differences in casing are of three kinds:</span></span>

-   <span data-ttu-id="d5817-262">ラテン文字の大文字 I (U + 0049)、ラテン小文字 I (U + 0069)、ラテン大文字文字 I (U + 0130)、およびラテン小文字 I (U + 0131) の大文字と小文字の対応付けには違いがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-262">Differences in the case mapping of LATIN CAPITAL LETTER I (U+0049), LATIN SMALL LETTER I (U+0069), LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130), and LATIN SMALL LETTER DOTLESS I (U+0131).</span></span> <span data-ttu-id="d5817-263">Tr-TR (トルコ語 (トルコ)) カルチャおよび az-Latn-AZ (アゼルバイジャン, Latin) カルチャで、tr、az、az-Latn ニュートラルカルチャでは、ラテン大文字の小文字 i はラテン文字の小文字 i、ラテン小文字 i は、上記のドット付きの英大文字 I です。</span><span class="sxs-lookup"><span data-stu-id="d5817-263">In the tr-TR (Turkish (Turkey)) and az-Latn-AZ (Azerbaijan, Latin) cultures, and in the tr, az, and az-Latn neutral cultures, the lowercase equivalent of LATIN CAPITAL LETTER I is LATIN SMALL LETTER DOTLESS I, and the uppercase equivalent of LATIN SMALL LETTER I is LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span> <span data-ttu-id="d5817-264">インバリアントカルチャを含め、その他のすべてのカルチャでは、ラテン小文字 I とラテン大文字の I は小文字で、大文字に相当します。</span><span class="sxs-lookup"><span data-stu-id="d5817-264">In all other cultures, including the invariant culture, LATIN SMALL LETTER I and LATIN CAPITAL LETTER I are lowercase and uppercase equivalents.</span></span>

     <span data-ttu-id="d5817-265">次の例では、カルチャに依存した大文字と小文字の比較に依存している場合に、ファイルシステムへのアクセスを防止するように設計された文字列比較を実行する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-265">The following example demonstrates how a string comparison designed to prevent file system access can fail if it relies on a culture-sensitive casing comparison.</span></span> <span data-ttu-id="d5817-266">(インバリアントカルチャの大文字と小文字の表記規則が使用されている必要があります)。</span><span class="sxs-lookup"><span data-stu-id="d5817-266">(The casing conventions of the invariant culture should have been used.)</span></span>

     [!code-csharp[System.String.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case2.cs#17)]
     [!code-vb[System.String.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case2.vb#17)]

-   <span data-ttu-id="d5817-267">インバリアントカルチャと他のすべてのカルチャとの大文字と小文字のマッピングの違い。</span><span class="sxs-lookup"><span data-stu-id="d5817-267">Differences in case mappings between the invariant culture and all other cultures.</span></span> <span data-ttu-id="d5817-268">このような場合、インバリアントカルチャの大文字と小文字の規則を使用して文字を大文字または小文字に変更すると、同じ文字が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-268">In these cases, using the casing rules of the invariant culture to change a character to uppercase or lowercase returns the same character.</span></span> <span data-ttu-id="d5817-269">他のすべてのカルチャでは、別の文字が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-269">For all other cultures, it returns a different character.</span></span> <span data-ttu-id="d5817-270">影響を受ける文字の一部を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-270">Some of the affected characters are listed in the following table.</span></span>

    |<span data-ttu-id="d5817-271">文字</span><span class="sxs-lookup"><span data-stu-id="d5817-271">Character</span></span>|<span data-ttu-id="d5817-272">がに変更された場合</span><span class="sxs-lookup"><span data-stu-id="d5817-272">If changed to</span></span>|<span data-ttu-id="d5817-273">戻り値</span><span class="sxs-lookup"><span data-stu-id="d5817-273">Returns</span></span>|
    |---------------|-------------------|-------------|
    |<span data-ttu-id="d5817-274">ミクロン記号 (U + 00B5)</span><span class="sxs-lookup"><span data-stu-id="d5817-274">MICRON SIGN (U+00B5)</span></span>|<span data-ttu-id="d5817-275">大文字</span><span class="sxs-lookup"><span data-stu-id="d5817-275">Uppercase</span></span>|<span data-ttu-id="d5817-276">ギリシャ文字ミューミュー (U +-39C)</span><span class="sxs-lookup"><span data-stu-id="d5817-276">GREEK CAPITAL LETTER MU (U+-39C)</span></span>|
    |<span data-ttu-id="d5817-277">上にドットが付いたラテン大文字 I (U + 0130)</span><span class="sxs-lookup"><span data-stu-id="d5817-277">LATIN CAPITAL LETTER I WITH DOT ABOVE (U+0130)</span></span>|<span data-ttu-id="d5817-278">小文字</span><span class="sxs-lookup"><span data-stu-id="d5817-278">Lowercase</span></span>|<span data-ttu-id="d5817-279">ラテン小文字 I (U + 0069)</span><span class="sxs-lookup"><span data-stu-id="d5817-279">LATIN SMALL LETTER I (U+0069)</span></span>|
    |<span data-ttu-id="d5817-280">ラテン文字の小文字 I (U + 0131)</span><span class="sxs-lookup"><span data-stu-id="d5817-280">LATIN SMALL LETTER DOTLESS I (U+0131)</span></span>|<span data-ttu-id="d5817-281">大文字</span><span class="sxs-lookup"><span data-stu-id="d5817-281">Uppercase</span></span>|<span data-ttu-id="d5817-282">ラテン大文字 I (U + 0049)</span><span class="sxs-lookup"><span data-stu-id="d5817-282">LATIN CAPITAL LETTER I (U+0049)</span></span>|
    |<span data-ttu-id="d5817-283">ラテン小文字 (U + 017F)</span><span class="sxs-lookup"><span data-stu-id="d5817-283">LATIN SMALL LETTER LONG S (U+017F)</span></span>|<span data-ttu-id="d5817-284">大文字</span><span class="sxs-lookup"><span data-stu-id="d5817-284">Uppercase</span></span>|<span data-ttu-id="d5817-285">ラテン大文字 S (U + 「0053」)</span><span class="sxs-lookup"><span data-stu-id="d5817-285">LATIN CAPITAL LETTER S (U+0053)</span></span>|
    |<span data-ttu-id="d5817-286">英小文字 Z がキャロン (U + 01C5) のラテン文字の大文字 D</span><span class="sxs-lookup"><span data-stu-id="d5817-286">LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON (U+01C5)</span></span>|<span data-ttu-id="d5817-287">小文字</span><span class="sxs-lookup"><span data-stu-id="d5817-287">Lowercase</span></span>|<span data-ttu-id="d5817-288">ラテン小文字 DZ とキャロン (U + 01C6)</span><span class="sxs-lookup"><span data-stu-id="d5817-288">LATIN SMALL LETTER DZ WITH CARON (U+01C6)</span></span>|
    |<span data-ttu-id="d5817-289">ギリシャ YPOGEGRAMMENI (U + 0345) の組み合わせ</span><span class="sxs-lookup"><span data-stu-id="d5817-289">COMBINING GREEK YPOGEGRAMMENI (U+0345)</span></span>|<span data-ttu-id="d5817-290">大文字</span><span class="sxs-lookup"><span data-stu-id="d5817-290">Uppercase</span></span>|<span data-ttu-id="d5817-291">ギリシャ文字イオータ (U + 0399)</span><span class="sxs-lookup"><span data-stu-id="d5817-291">GREEK CAPITAL LETTER IOTA (U+0399)</span></span>|

-   <span data-ttu-id="d5817-292">2文字の大文字と小文字の組み合わせが ASCII 文字の範囲内にある場合の大文字と小文字のマッピングの違い。</span><span class="sxs-lookup"><span data-stu-id="d5817-292">Differences in case mappings of two-letter mixed-case pairs in the ASCII character range.</span></span> <span data-ttu-id="d5817-293">ほとんどのカルチャでは、2文字の大文字と小文字の組み合わせは、等価の2文字の大文字または小文字のペアと等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-293">In most cultures, a two-letter mixed-case pair is equal to the equivalent two-letter uppercase or lowercase pair.</span></span> <span data-ttu-id="d5817-294">これは、次のカルチャにおける次の2文字のペアに対しては当てはまりません。これは、各ケースが digraph と比較されるためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-294">This is not true for the following two-letter pairs in the following cultures, because in each case they are compared to a digraph:</span></span>

    -   <span data-ttu-id="d5817-295">hr-HR (クロアチア語) カルチャの "lJ" と "nJ"。</span><span class="sxs-lookup"><span data-stu-id="d5817-295">"lJ" and "nJ" in the hr-HR (Croatian (Croatia)) culture.</span></span>

    -   <span data-ttu-id="d5817-296">CS-CZ (チェコ語 (チェコ共和国)) および sk-SK (スロバキア語) カルチャの "cH"。</span><span class="sxs-lookup"><span data-stu-id="d5817-296">"cH" in the cs-CZ (Czech (Czech Republic)) and sk-SK (Slovak (Slovakia)) cultures.</span></span>

    -   <span data-ttu-id="d5817-297">da-DK (デンマーク語 (デンマーク)) カルチャの "aA"。</span><span class="sxs-lookup"><span data-stu-id="d5817-297">"aA" in the da-DK (Danish (Denmark)) culture.</span></span>

    -   <span data-ttu-id="d5817-298">"cS"、"dZ"、"dZS"、"nY"、"sZ"、"tY"、および hu-HU (ハンガリー語 (ハンガリー)) カルチャの "zS"。</span><span class="sxs-lookup"><span data-stu-id="d5817-298">"cS", "dZ", "dZS", "nY", "sZ", "tY", and "zS" in the hu-HU (Hungarian (Hungary)) culture.</span></span>

    -   <span data-ttu-id="d5817-299">ES_tradnl es (スペイン語 (スペイン)、従来の並べ替え)) カルチャの "cH" と "lL"。</span><span class="sxs-lookup"><span data-stu-id="d5817-299">"cH" and "lL" in the es-ES_tradnl (Spanish (Spain, Traditional Sort)) culture.</span></span>

    -   <span data-ttu-id="d5817-300">vi-VN (ベトナム語) カルチャの "cH"、"gI"、"kH"、"nG" "nH"、"pH"、"qU"、"tH"、および "tR"。</span><span class="sxs-lookup"><span data-stu-id="d5817-300">"cH", "gI", "kH", "nG" "nH", "pH", "qU', "tH", and "tR" in the vi-VN (Vietnamese (Vietnam)) culture.</span></span>

     <span data-ttu-id="d5817-301">ただし、これらのペアのカルチャに依存した比較によって問題が発生する状況が発生することは珍しくありません。これらのペアは、固定文字列または識別子では一般的ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-301">However, it is unusual to encounter a situation in which a culture-sensitive comparison of these pairs creates problems, because these pairs are uncommon in fixed strings or identifiers.</span></span>

 <span data-ttu-id="d5817-302">次の例では、文字列を大文字に変換する場合のカルチャ間の大文字と小文字の違いについて説明します。</span><span class="sxs-lookup"><span data-stu-id="d5817-302">The following example illustrates some of the differences in casing rules between cultures when converting strings to uppercase.</span></span>

 [!code-cpp[System.String.Class#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.casing.cpp#7)]
 [!code-csharp[System.String.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/case1.cs#7)]
 [!code-vb[System.String.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/case1.vb#7)]

<a name="parsing"></a>
### <a name="parsing-and-formatting"></a><span data-ttu-id="d5817-303">解析と書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-303">Parsing and formatting</span></span>
 <span data-ttu-id="d5817-304">書式設定と解析は逆の操作です。</span><span class="sxs-lookup"><span data-stu-id="d5817-304">Formatting and parsing are inverse operations.</span></span> <span data-ttu-id="d5817-305">書式設定規則は、日付と時刻、数値などの値を文字列形式に変換する方法を決定します。一方、解析規則は、文字列形式を日付や時刻などの値に変換する方法を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-305">Formatting rules determine how to convert a value, such as a date and time or a number, to its string representation, whereas parsing rules determine how to convert a string representation to a value such as a date and time.</span></span> <span data-ttu-id="d5817-306">書式設定規則と解析規則は、どちらもカルチャ規則に依存します。</span><span class="sxs-lookup"><span data-stu-id="d5817-306">Both formatting and parsing rules are dependent on cultural conventions.</span></span> <span data-ttu-id="d5817-307">次の例は、カルチャ固有の日付文字列を解釈するときに発生する可能性のあるあいまいさを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-307">The following example illustrates the ambiguity that can arise when interpreting a culture-specific date string.</span></span> <span data-ttu-id="d5817-308">日付文字列の生成に使用されたカルチャの規則を理解していなければ、03/01/2011、3/1/2011、および01/03/2011 が、2011または3月1日の2011を表しているかどうかを知ることはできません。</span><span class="sxs-lookup"><span data-stu-id="d5817-308">Without knowing the conventions of the culture that was used to produce a date string, it is not possible to know whether 03/01/2011, 3/1/2011, and 01/03/2011 represent January 3, 2011 or March 1, 2011.</span></span>

 [!code-cpp[System.String.Class#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.format1.cpp#8)]
 [!code-csharp[System.String.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/format1.cs#8)]
 [!code-vb[System.String.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/format1.vb#8)]

 <span data-ttu-id="d5817-309">同様に、次の例に示すように、1つの文字列では、解析操作で規則が使用されているカルチャに応じて異なる日付を生成できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-309">Similarly, as the following example shows, a single string can produce different dates depending on the culture whose conventions are used in the parsing operation.</span></span>

 [!code-cpp[System.String.Class#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.parse1.cpp#9)]
 [!code-csharp[System.String.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/parse1.cs#9)]
 [!code-vb[System.String.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/parse1.vb#9)]

<a name="comparison"></a>
### <a name="string-comparison-and-sorting"></a><span data-ttu-id="d5817-310">文字列の比較と並べ替え</span><span class="sxs-lookup"><span data-stu-id="d5817-310">String comparison and sorting</span></span>
 <span data-ttu-id="d5817-311">文字列の比較と並べ替えの規則は、カルチャによって異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-311">Conventions for comparing and sorting strings vary from culture to culture.</span></span> <span data-ttu-id="d5817-312">たとえば、並べ替え順序は、ふりがなまたは文字の視覚的表現に基づいている場合があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-312">For example, the sort order may be based on phonetics or on the visual representation of characters.</span></span> <span data-ttu-id="d5817-313">東アジア圏の言語では、文字が表意文字の画数と部首によって並べ替えられます。</span><span class="sxs-lookup"><span data-stu-id="d5817-313">In East Asian languages, characters are sorted by the stroke and radical of ideographs.</span></span> <span data-ttu-id="d5817-314">また、並べ替えは、言語やカルチャで使用されているアルファベットの順序によっても異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-314">Sorting also depends on the order languages and cultures use for the alphabet.</span></span> <span data-ttu-id="d5817-315">たとえば、デンマーク語の文字 "Æ" は、アルファベットでは "Z" の後に位置します。</span><span class="sxs-lookup"><span data-stu-id="d5817-315">For example, the Danish language has an "Æ" character that it sorts after "Z" in the alphabet.</span></span> <span data-ttu-id="d5817-316">また、比較では大文字と小文字を区別するか、大文字と小文字を区別しないことがあります。また、場合によっては、大文字と小文字を区別する規則も</span><span class="sxs-lookup"><span data-stu-id="d5817-316">In addition, comparisons can be case-sensitive or case-insensitive, and in some cases casing rules also differ by culture.</span></span> <span data-ttu-id="d5817-317">一方、序数に基づく比較では、文字列の比較と並べ替えを行うときに、文字列内の個々の文字の Unicode コードポイントを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-317">Ordinal comparison, on the other hand, uses the Unicode code points of individual characters in a string when comparing and sorting strings.</span></span>

 <span data-ttu-id="d5817-318">並べ替え規則は、Unicode 文字のアルファベット順と、2つの文字列の比較方法を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-318">Sort rules determine the alphabetic order of Unicode characters and how two strings compare to each other.</span></span> <span data-ttu-id="d5817-319">たとえば、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> メソッドは、<xref:System.StringComparison> パラメーターに基づいて2つの文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-319">For example, the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method compares two strings based on the <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="d5817-320">パラメーター値が <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>の場合、メソッドは、現在のカルチャの規則を使用する言語的な比較を実行します。パラメーター値が <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>の場合、メソッドは序数による比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-320">If the parameter value is <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, the method performs a linguistic comparison that uses the conventions of the current culture; if the parameter value is <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>, the method performs an ordinal comparison.</span></span> <span data-ttu-id="d5817-321">したがって、次の例に示すように、現在のカルチャが米国英語の場合、(カルチャに依存した比較を使用して) <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> メソッドへの最初の呼び出しでは "a" より小さい "a" と見なされますが、(序数の比較を使用して) 2 回目の呼び出しでは "a" より大きいと見なされます</span><span class="sxs-lookup"><span data-stu-id="d5817-321">Consequently, as the following example shows, if the current culture is U.S. English, the first call to the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29?displayProperty=nameWithType> method (using culture-sensitive comparison) considers "a" less than "A", but the second call to the same method (using ordinal comparison) considers "a" greater than "A".</span></span>

 [!code-cpp[System.String.Class#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare1.cpp#10)]
 [!code-csharp[System.String.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare1.cs#10)]
 [!code-vb[System.String.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare1.vb#10)]

 <span data-ttu-id="d5817-322">.NET では、単語、文字列、および序数の並べ替え規則がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="d5817-322">.NET supports word, string, and ordinal sort rules:</span></span>

-   <span data-ttu-id="d5817-323">単語での並べ替えでは、英数字以外の特定の Unicode 文字には特別な重みが割り当てられる、カルチャに依存した文字列の比較が行われます。</span><span class="sxs-lookup"><span data-stu-id="d5817-323">A word sort performs a culture-sensitive comparison of strings in which certain nonalphanumeric Unicode characters might have special weights assigned to them.</span></span> <span data-ttu-id="d5817-324">たとえば、ハイフン (-) には非常に小さな重みが割り当てられています。そのため、並べ替えられたリスト内で "co-op" と "co-op" が横に並んで表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-324">For example, the hyphen (-) might have a very small weight assigned to it so that "coop" and "co-op" appear next to each other in a sorted list.</span></span> <span data-ttu-id="d5817-325">Word の並べ替え規則を使用して2つの文字列を比較する <xref:System.String> メソッドの一覧については、「[カテゴリ別の文字列操作](#ByCategory)」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-325">For a list of the <xref:System.String> methods that compare two strings using word sort rules, see the [String operations by category](#ByCategory) section.</span></span>

-   <span data-ttu-id="d5817-326">文字列の並べ替えでは、カルチャに依存した比較も実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-326">A string sort also performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-327">これは単語の並べ替えに似ていますが、特殊なケースは存在せず、英数字以外のすべての記号はすべての英数字の Unicode 文字の前に記述されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-327">It is similar to a word sort, except that there are no special cases, and all nonalphanumeric symbols come before all alphanumeric Unicode characters.</span></span> <span data-ttu-id="d5817-328">文字列の並べ替え規則を使用して2つの文字列を比較するには、<xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>の値が指定された `options` パラメーターを持つ <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> メソッドオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-328">Two strings can be compared using string sort rules by calling the <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=nameWithType> method overloads that have an `options` parameter that is supplied a value of <xref:System.Globalization.CompareOptions.StringSort?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-329">これは、文字列の並べ替え規則を使用して2つの文字列を比較するために .NET で提供される唯一の方法です。</span><span class="sxs-lookup"><span data-stu-id="d5817-329">Note that this is the only method that .NET provides to compare two strings using string sort rules.</span></span>

-   <span data-ttu-id="d5817-330">序数の並べ替えでは、文字列内の各 <xref:System.Char> オブジェクトの数値に基づいて文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-330">An ordinal sort compares strings based on the numeric value of each <xref:System.Char> object in the string.</span></span> <span data-ttu-id="d5817-331">文字の小文字と大文字のバージョンには異なるコードポイントがあるため、序数による比較では大文字と小文字が自動的に区別されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-331">An ordinal comparison is automatically case-sensitive because the lowercase and uppercase versions of a character have different code points.</span></span> <span data-ttu-id="d5817-332">ただし、case が重要でない場合は、大文字と小文字を区別しない序数の比較を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-332">However, if case is not important, you can specify an ordinal comparison that ignores case.</span></span> <span data-ttu-id="d5817-333">これは、インバリアントカルチャを使用して文字列を大文字に変換し、その結果に対して序数に基づく比較を実行することと同じです。</span><span class="sxs-lookup"><span data-stu-id="d5817-333">This is equivalent to converting the string to uppercase by using the invariant culture and then performing an ordinal comparison on the result.</span></span> <span data-ttu-id="d5817-334">序数の並べ替え規則を使用して2つの文字列を比較する <xref:System.String> メソッドの一覧については、「[カテゴリ別の文字列操作](#ByCategory)」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-334">For a list of the <xref:System.String> methods that compare two strings using ordinal sort rules, see the [String operations by category](#ByCategory) section.</span></span>

 <span data-ttu-id="d5817-335">カルチャに依存した比較とは、<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> プロパティによって指定されたインバリアントカルチャを含む <xref:System.Globalization.CultureInfo> オブジェクトを明示的または暗黙的に使用する比較のことです。</span><span class="sxs-lookup"><span data-stu-id="d5817-335">A culture-sensitive comparison is any comparison that explicitly or implicitly uses a <xref:System.Globalization.CultureInfo> object, including the invariant culture that is specified by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d5817-336">暗黙のカルチャは、現在のカルチャであり、<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> と <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> のプロパティで指定されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-336">The implicit culture is the current culture, which is specified by the <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> and <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="d5817-337">アルファベット文字の並べ替え順序にはかなりのばらつきがあります (つまり、<xref:System.Char.IsLetter%2A?displayProperty=nameWithType> プロパティが `true`を返す文字)。</span><span class="sxs-lookup"><span data-stu-id="d5817-337">There is considerable variation in the sort order of alphabetic characters (that is, characters for which the <xref:System.Char.IsLetter%2A?displayProperty=nameWithType> property returns `true`) across cultures.</span></span> <span data-ttu-id="d5817-338"><xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>などの文字列比較メソッドに <xref:System.Globalization.CultureInfo> オブジェクトを指定することにより、特定のカルチャの規則を使用するカルチャに依存した比較を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-338">You can specify a culture-sensitive comparison that uses the conventions of a specific culture by supplying a <xref:System.Globalization.CultureInfo> object to a string comparison method such as <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29>.</span></span> <span data-ttu-id="d5817-339">現在のカルチャの規則を使用するカルチャに依存した比較を指定できます。そのためには、<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>、<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>、または <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> 以外の列挙型 <xref:System.Globalization.CompareOptions> の任意のメンバーを <xref:System.String.Compare%2A> メソッドの適切なオーバーロードに渡します。</span><span class="sxs-lookup"><span data-stu-id="d5817-339">You can specify a culture-sensitive comparison that uses the conventions of the current culture by supplying <xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>, or any member of the <xref:System.Globalization.CompareOptions> enumeration other than <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> to an appropriate overload of the <xref:System.String.Compare%2A> method.</span></span> <span data-ttu-id="d5817-340">通常、カルチャに依存した比較は並べ替えに適していますが、序数による比較は適切ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-340">A culture-sensitive comparison is generally appropriate for sorting whereas an ordinal comparison is not.</span></span> <span data-ttu-id="d5817-341">序数に基づく比較は、通常、2つの文字列が等しいかどうかを判断する (つまり、id を決定する) 場合に適していますが、カルチャに依存した比較は区別されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-341">An ordinal comparison is generally appropriate for determining whether two strings are equal (that is, for determining identity) whereas a culture-sensitive comparison is not.</span></span>

 <span data-ttu-id="d5817-342">次の例は、カルチャに依存した比較と序数による比較の違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-342">The following example illustrates the difference between culture-sensitive and ordinal comparison.</span></span> <span data-ttu-id="d5817-343">この例では、3つの文字列 "Apple"、"Æble"、および "AEble" を評価します。これは、序数に基づく比較と、(それぞれが <xref:System.String.Compare%2A> メソッドが呼び出された時点での既定のカルチャである) da および en-us カルチャの規則です。</span><span class="sxs-lookup"><span data-stu-id="d5817-343">The example evaluates three strings, "Apple", "Æble", and "AEble", using ordinal comparison and the conventions of the da-DK and en-US cultures (each of which is the default culture at the time the <xref:System.String.Compare%2A> method is called).</span></span> <span data-ttu-id="d5817-344">デンマーク語では文字 "Æ" が個々の文字として扱われ、アルファベットの "Z" の後に並べ替えられるため、"Æble" という文字列は "Apple" よりも大きくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-344">Because the Danish language treats the character "Æ" as an individual letter and sorts it after "Z" in the alphabet, the string "Æble" is greater than "Apple".</span></span> <span data-ttu-id="d5817-345">ただし、"Æble" は "AEble" と同等とは見なされないため、"Æble" は "AEble" よりも大きくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-345">However, "Æble" is not considered equivalent to "AEble", so "Æble" is also greater than "AEble".</span></span> <span data-ttu-id="d5817-346">En-us カルチャでは、文字 "Æ" は含まれませんが、"AE" と等価として扱われます。 "Æble" が "Apple" より小さく、"AEble" と等しい理由を説明します。</span><span class="sxs-lookup"><span data-stu-id="d5817-346">The en-US culture doesn't include the letter"Æ" but treats it as equivalent to "AE", which explains why  "Æble" is less than "Apple" but equal to "AEble".</span></span> <span data-ttu-id="d5817-347">一方、序数に基づく比較では、"Apple" は "Æble" より小さく、"Æble" は "AEble" よりも大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-347">Ordinal comparison, on the other hand, considers "Apple" to be less than "Æble", and "Æble" to be greater than "AEble".</span></span>

 [!code-csharp[System.String.Class#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare4.cs#21)]
 [!code-vb[System.String.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare4.vb#21)]

 <span data-ttu-id="d5817-348">次の一般的なガイドラインを使用して、適切な並べ替えまたは文字列の比較方法を選択します。</span><span class="sxs-lookup"><span data-stu-id="d5817-348">Use the following general guidelines to choose an appropriate sorting or string comparison method:</span></span>

-   <span data-ttu-id="d5817-349">ユーザーのカルチャに基づいて文字列を並べ替えたい場合は、現在のカルチャの規則に基づいて文字列を並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-349">If you want the strings to be ordered based on the user's culture, you should order them based on the conventions of the current culture.</span></span> <span data-ttu-id="d5817-350">ユーザーのカルチャが変更された場合は、並べ替えられた文字列の順序も変わります。</span><span class="sxs-lookup"><span data-stu-id="d5817-350">If the user's culture changes, the order of sorted strings will also change accordingly.</span></span> <span data-ttu-id="d5817-351">たとえば、類義語辞典アプリケーションでは、ユーザーのカルチャに基づいて常に単語を並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-351">For example, a thesaurus application should always sort words based on the user's culture.</span></span>

-   <span data-ttu-id="d5817-352">特定のカルチャの規則に基づいて文字列を並べ替えたい場合は、そのカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを比較メソッドに渡すことで、文字列を並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-352">If you want the strings to be ordered based on the conventions of a specific culture, you should order them by supplying a <xref:System.Globalization.CultureInfo> object that represents that culture to a comparison method.</span></span> <span data-ttu-id="d5817-353">たとえば、特定の言語を学生に教えるように設計されたアプリケーションでは、その言語を話すカルチャのいずれかの規則に基づいて文字列を並べ替える必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-353">For example, in an application designed to teach students a particular language, you want strings to be ordered based on the conventions of one of the cultures that speaks that language.</span></span>

-   <span data-ttu-id="d5817-354">カルチャ間で文字列の順序が変更されないようにするには、インバリアントカルチャの規則に基づいて文字列を並べ替えるか、序数に基づく比較を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-354">If you want the order of strings to remain unchanged across cultures, you should order them based on the conventions of the invariant culture or use an ordinal comparison.</span></span> <span data-ttu-id="d5817-355">たとえば、序数の並べ替えを使用して、ファイル、プロセス、ミューテックス、または名前付きパイプの名前を整理します。</span><span class="sxs-lookup"><span data-stu-id="d5817-355">For example, you would use an ordinal sort to organize the names of files, processes, mutexes, or named pipes.</span></span>

-   <span data-ttu-id="d5817-356">セキュリティの決定 (ユーザー名が有効かどうかなど) に関する比較については、<xref:System.String.Equals%2A> メソッドのオーバーロードを呼び出すことによって、常に序数テストを実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-356">For a comparison that involves a security decision (such as whether a username is valid), you should always perform an ordinal test for equality by calling an overload of the <xref:System.String.Equals%2A> method.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-357">文字列比較で使用されるカルチャに依存した並べ替えと大文字と小文字の区別の規則は、.NET のバージョンによって異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-357">The culture-sensitive sorting and casing rules used in string comparison depend on the version of the .NET.</span></span> <span data-ttu-id="d5817-358">[!INCLUDE[win8](~/includes/win8-md.md)] オペレーティングシステムで実行されている .NET Framework 4.5 以降のバージョンでは、並べ替え、大文字と小文字の区別、正規化、Unicode 文字の情報が Unicode 6.0 標準に準拠しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-358">In the .NET Framework 4.5 and later versions running on the [!INCLUDE[win8](~/includes/win8-md.md)] operating system, sorting, casing, normalization, and Unicode character information conforms to the Unicode 6.0 standard.</span></span> <span data-ttu-id="d5817-359">その他の Windows オペレーティングシステムでは、Unicode 5.0 標準に準拠しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-359">On other Windows operating systems, it conforms to the Unicode 5.0 standard.</span></span> <span data-ttu-id="d5817-360">.NET Core では、基になるオペレーティングシステムでサポートされている Unicode 標準のバージョンによって異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-360">On .NET Core, it depends on the version of the Unicode Standard supported by the underlying operating system.</span></span>

 <span data-ttu-id="d5817-361">単語、文字列、および序数の並べ替え規則の詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-361">For more information about word, string, and ordinal sort rules, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> topic.</span></span> <span data-ttu-id="d5817-362">各ルールを使用する場合のその他の推奨事項については、「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-362">For additional recommendations on when to use each rule, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>

 <span data-ttu-id="d5817-363">通常、文字列の並べ替え順序を決定するために、<xref:System.String.Compare%2A> などの文字列比較メソッドを呼び出すことはありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-363">Ordinarily, you don't call string comparison methods such as <xref:System.String.Compare%2A> directly to determine the sort order of strings.</span></span> <span data-ttu-id="d5817-364">代わりに、<xref:System.Array.Sort%2A?displayProperty=nameWithType> や <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>などの並べ替えメソッドによって比較メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-364">Instead, comparison methods are called by sorting methods such as <xref:System.Array.Sort%2A?displayProperty=nameWithType> or <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-365">次の例では、使用する比較の種類を指定しますが、文字列比較メソッドを明示的に呼び出すことなく、4つの異なる並べ替え操作 (現在のカルチャを使用した単語の並べ替え、インバリアントカルチャを使用した単語の並べ替え、インバリアントカルチャを使用した単語の並べ替え、インバリアントカルチャを使用した単語の並べ替えなど)</span><span class="sxs-lookup"><span data-stu-id="d5817-365">The following example performs four different sorting operations (word sort using the current culture, word sort using the invariant culture, ordinal sort, and string sort using the invariant culture) without explicitly calling a string comparison method, although they do specify the type of comparison to use.</span></span> <span data-ttu-id="d5817-366">各種類の並べ替えでは、配列内の文字列の一意の順序が生成されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-366">Note that each type of sort produces a unique ordering of strings in its array.</span></span>

 [!code-cpp[System.String.Class#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare2.cpp#12)]
 [!code-csharp[System.String.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare2.cs#12)]
 [!code-vb[System.String.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare2.vb#12)]

> [!TIP]
>  <span data-ttu-id="d5817-367">内部的には、.NET は並べ替えキーを使用して、カルチャに依存した文字列の比較をサポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-367">Internally, .NET uses sort keys to support culturally sensitive string comparison.</span></span> <span data-ttu-id="d5817-368">文字列内の各文字には、アルファベット順、大文字と小文字の区別、発音の区別など、さまざまなカテゴリの並べ替えウェイトが指定されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-368">Each character in a string is given several categories of sort weights, including alphabetic, case, and diacritic.</span></span> <span data-ttu-id="d5817-369"><xref:System.Globalization.SortKey> クラスによって表される並べ替えキーは、特定の文字列に対してこれらの重みのリポジトリを提供します。</span><span class="sxs-lookup"><span data-stu-id="d5817-369">A sort key, represented by the <xref:System.Globalization.SortKey> class, provides a repository of these weights for a particular string.</span></span> <span data-ttu-id="d5817-370">アプリが同じ文字列セットに対して多数の検索または並べ替え操作を実行する場合、使用するすべての文字列に対して並べ替えキーを生成して格納することで、パフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-370">If your app performs a large number of searching or sorting operations on the same set of strings, you can improve its performance by generating and storing sort keys for all the strings that it uses.</span></span> <span data-ttu-id="d5817-371">並べ替えまたは比較操作が必要な場合は、文字列の代わりに並べ替えキーを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-371">When a sort or comparison operation is required, you use the sort keys instead of the strings.</span></span> <span data-ttu-id="d5817-372">詳細については、<xref:System.Globalization.SortKey> クラスを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-372">For more information, see the <xref:System.Globalization.SortKey> class.</span></span>

 <span data-ttu-id="d5817-373">文字列比較規則を指定しない場合、<xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> などの並べ替えメソッドは、カルチャに依存し、大文字と小文字を区別する文字列の並べ替えを実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-373">If you don't specify a string comparison convention, sorting methods such as <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> perform a culture-sensitive, case-sensitive sort on strings.</span></span> <span data-ttu-id="d5817-374">次の例は、現在のカルチャを変更することによって、配列内の並べ替えられた文字列の順序に影響を与える方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-374">The following example illustrates how changing the current culture affects the order of sorted strings in an array.</span></span> <span data-ttu-id="d5817-375">この例では、3つの文字列の配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-375">It creates an array of three strings.</span></span> <span data-ttu-id="d5817-376">最初に、`System.Threading.Thread.CurrentThread.CurrentCulture` プロパティを en-US に設定し、<xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-376">First, it sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to en-US and calls the <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d5817-377">これよって、英語 (米国) カルチャの並べ替え規則に基づく並べ替え順序が適用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-377">The resulting sort order is based on sorting conventions for the English (United States) culture.</span></span> <span data-ttu-id="d5817-378">次に、`System.Threading.Thread.CurrentThread.CurrentCulture` プロパティを da-DK に設定し、再度 <xref:System.Array.Sort%2A?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-378">Next, the example sets the `System.Threading.Thread.CurrentThread.CurrentCulture` property to da-DK and calls the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method again.</span></span> <span data-ttu-id="d5817-379">適用される並べ替え順序が en-US の並べ替え順序と異なる点に注意してください。これは、デンマーク語 (デンマーク) の並べ替え規則が使用されるためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-379">Notice how the resulting sort order differs from the en-US results because it uses the sorting conventions for Danish (Denmark).</span></span>

 [!code-csharp[Conceptual.Strings.Comparing#3](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.strings.comparing/cs/sort1.cs#3)]
 [!code-vb[Conceptual.Strings.Comparing#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.strings.comparing/vb/sort1.vb#3)]

> [!WARNING]
>  <span data-ttu-id="d5817-380">文字列を比較する主な目的が等しいかどうかを判断するには、<xref:System.String.Equals%2A?displayProperty=nameWithType> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-380">If your primary purpose in comparing strings is to determine whether they are equal, you should call the <xref:System.String.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d5817-381">通常、序数の比較を実行するには <xref:System.String.Equals%2A> を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-381">Typically, you should use <xref:System.String.Equals%2A> to perform an ordinal comparison.</span></span> <span data-ttu-id="d5817-382"><xref:System.String.Compare%2A?displayProperty=nameWithType> メソッドは、主に文字列の並べ替えを目的としています。</span><span class="sxs-lookup"><span data-stu-id="d5817-382">The <xref:System.String.Compare%2A?displayProperty=nameWithType> method is intended primarily to sort strings.</span></span>

 <span data-ttu-id="d5817-383"><xref:System.String.StartsWith%2A?displayProperty=nameWithType> や <xref:System.String.IndexOf%2A?displayProperty=nameWithType>などの文字列検索メソッドでは、カルチャに依存した文字列の比較も実行できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-383">String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=nameWithType> and <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, also can perform culture-sensitive or ordinal string comparisons.</span></span> <span data-ttu-id="d5817-384">次の例は、<xref:System.String.IndexOf%2A> メソッドを使用した、序数とカルチャに依存した比較の違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-384">The following example illustrates the differences between ordinal and culture-sensitive comparisons using the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="d5817-385">現在のカルチャが英語 (米国) であるカルチャに依存した検索では、部分文字列 "oe" が合字 "する。" と一致すると見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-385">A culture-sensitive search in which the current culture is English (United States) considers the substring "oe" to match the ligature "œ".</span></span> <span data-ttu-id="d5817-386">ソフトハイフン (U + 00AD) はゼロ幅の文字であるため、検索ではソフトハイフンが <xref:System.String.Empty?displayProperty=nameWithtype> と同等と見なされ、文字列の先頭で一致が検出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-386">Because a soft hyphen (U+00AD) is a zero-width character, the search treats the soft hyphen as equivalent to <xref:System.String.Empty?displayProperty=nameWithtype> and finds a match at the beginning of the string.</span></span> <span data-ttu-id="d5817-387">一方、序数検索では、どちらの場合も一致が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="d5817-387">An ordinal search, on the other hand, does not find a match in either case.</span></span>

 [!code-cpp[System.String.Class#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.compare3.cpp#13)]
 [!code-csharp[System.String.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/compare3.cs#13)]
 [!code-vb[System.String.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/compare3.vb#13)]

### <a name="searching-strings"></a><span data-ttu-id="d5817-388">文字列の検索</span><span class="sxs-lookup"><span data-stu-id="d5817-388">Searching Strings</span></span>
 <span data-ttu-id="d5817-389"><xref:System.String.StartsWith%2A?displayProperty=nameWithType> や <xref:System.String.IndexOf%2A?displayProperty=nameWithType>などの文字列検索メソッドでは、カルチャに依存した文字列比較や序数の文字列比較を実行して、指定した文字列に文字または部分文字列が見つかったかどうかを判断することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-389">String search methods, such as <xref:System.String.StartsWith%2A?displayProperty=nameWithType> and <xref:System.String.IndexOf%2A?displayProperty=nameWithType>, also can perform culture-sensitive or ordinal string comparisons to determine whether a character or substring is found in a specified string.</span></span>

 <span data-ttu-id="d5817-390"><xref:System.String.IndexOf%2A> メソッドなどの個々の文字を検索する <xref:System.String> クラスの検索メソッド、または <xref:System.String.IndexOfAny%2A> メソッドなどの文字セットのいずれかで、すべて序数検索が実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-390">The search methods in the <xref:System.String> class that search for an individual character, such as the <xref:System.String.IndexOf%2A> method, or one of a set of characters,   such as the <xref:System.String.IndexOfAny%2A> method, all perform an ordinal search.</span></span> <span data-ttu-id="d5817-391">文字に対してカルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType> や <xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType>などの <xref:System.Globalization.CompareInfo> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-391">To perform a culture-sensitive search for a character, you must call a <xref:System.Globalization.CompareInfo> method such as <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType> or <xref:System.Globalization.CompareInfo.LastIndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-392">序数とカルチャに依存した比較を使用して文字を検索した結果は、大きく異なることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-392">Note that the results of searching for a character using ordinal and culture-sensitive comparison can be very different.</span></span> <span data-ttu-id="d5817-393">たとえば、カルチャによっては、カルチャに応じて、"AE" (U + 041U + 0045) のように、構成済みの Unicode 文字 ("AE" (U + 041U +) など) を検索する場合は、カルチャによって異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-393">For example, a search for a precomposed Unicode character such as the ligature "Æ" (U+00C6) might match any occurrence of its components in the correct sequence, such as "AE" (U+041U+0045), depending on the culture.</span></span> <span data-ttu-id="d5817-394">次の例は、個々の文字を検索するときの <xref:System.String.IndexOf%28System.Char%29?displayProperty=nameWithType> と <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType> メソッドの違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-394">The following example illustrates the difference between the <xref:System.String.IndexOf%28System.Char%29?displayProperty=nameWithType> and <xref:System.Globalization.CompareInfo.IndexOf%28System.String%2CSystem.Char%29?displayProperty=nameWithType> methods when searching for an individual character.</span></span> <span data-ttu-id="d5817-395">文字列 "æ" (U + 00E6) は、en-us カルチャの規則を使用する場合は文字列 "航空写真" にありますが、-DK カルチャの規則を使用する場合や序数の比較を実行する場合には見つかりません。</span><span class="sxs-lookup"><span data-stu-id="d5817-395">The ligature "æ" (U+00E6) is found in the string "aerial" when using the conventions of the en-US culture, but not when using the conventions of the da-DK culture or when performing an ordinal comparison.</span></span>

 [!code-csharp[System.String.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/search1.cs#22)]
 [!code-vb[System.String.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/search1.vb#22)]

 <span data-ttu-id="d5817-396">一方、検索オプションが <xref:System.StringComparison>型のパラメーターによって明示的に指定されていない場合、文字ではなく文字列を検索するクラスメソッド <xref:System.String>、カルチャに依存した検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-396">On the other hand, <xref:System.String> class methods that search for a string rather than a character perform a culture-sensitive search if search options are not explicitly specified by a parameter of type <xref:System.StringComparison>.</span></span> <span data-ttu-id="d5817-397">唯一の例外は、序数検索を実行する <xref:System.String.Contains%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5817-397">The sole exception is <xref:System.String.Contains%2A>, which performs an ordinal search.</span></span>

<a name="equality"></a>
### <a name="testing-for-equality"></a><span data-ttu-id="d5817-398">等しいかどうかのテスト</span><span class="sxs-lookup"><span data-stu-id="d5817-398">Testing for equality</span></span>
 <span data-ttu-id="d5817-399">並べ替え順序において2つの文字列の関係を確認するには、<xref:System.String.Compare%2A?displayProperty=nameWithType> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-399">Use the <xref:System.String.Compare%2A?displayProperty=nameWithType> method to determine the relationship of two strings in the sort order.</span></span> <span data-ttu-id="d5817-400">通常、これはカルチャに依存する操作です。</span><span class="sxs-lookup"><span data-stu-id="d5817-400">Typically, this is a culture-sensitive operation.</span></span> <span data-ttu-id="d5817-401">これに対して、<xref:System.String.Equals%2A?displayProperty=nameWithType> メソッドを呼び出して、等しいかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="d5817-401">In contrast, call the <xref:System.String.Equals%2A?displayProperty=nameWithType> method to test for equality.</span></span> <span data-ttu-id="d5817-402">通常、等しいかどうかのテストでは、ユーザー入力と、有効なユーザー名、パスワード、またはファイルシステムパスなどの既知の文字列を比較します。これは通常、序数操作です。</span><span class="sxs-lookup"><span data-stu-id="d5817-402">Because the test for equality usually compares user input with some known string, such as a valid user name, a password, or a file system path, it is typically an ordinal operation.</span></span>

> [!WARNING]
>  <span data-ttu-id="d5817-403"><xref:System.String.Compare%2A?displayProperty=nameWithType> メソッドを呼び出し、戻り値が0かどうかを判断することで、等しいかどうかをテストできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-403">It is possible to test for equality by calling the <xref:System.String.Compare%2A?displayProperty=nameWithType> method and determining whether the return value is zero.</span></span> <span data-ttu-id="d5817-404">ただし、この方法は推奨されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-404">However, this practice is not recommended.</span></span> <span data-ttu-id="d5817-405">2つの文字列が等しいかどうかを判断するには、<xref:System.String.Equals%2A?displayProperty=nameWithType> メソッドのオーバーロードのいずれかを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-405">To determine whether two strings are equal, you should call one of the overloads of the <xref:System.String.Equals%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d5817-406">どちらのメソッドにも、比較の種類を明示的に指定する <xref:System.StringComparison?displayProperty=nameWithType> のパラメーターが含まれているので、呼び出すのに適したオーバーロードは、インスタンス <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> メソッドまたは静的 <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> メソッドのいずれかです。</span><span class="sxs-lookup"><span data-stu-id="d5817-406">The preferred overload to call is either the instance <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method or the static <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, because both methods include a <xref:System.StringComparison?displayProperty=nameWithType> parameter that explicitly specifies the type of comparison.</span></span>

 <span data-ttu-id="d5817-407">次の例は、序数を使用する必要がある場合に、カルチャに依存した比較を実行する危険性を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-407">The following example illustrates the danger of performing a culture-sensitive comparison for equality when an ordinal one should be used instead.</span></span> <span data-ttu-id="d5817-408">この場合、コードの目的は、"FILE://" という文字列の URL の先頭を大文字小文字を区別しない比較を実行することで、"FILE://" または "file://" で始まる Url からのファイルシステムアクセスを禁止することです。</span><span class="sxs-lookup"><span data-stu-id="d5817-408">In this case, the intent of the code is to prohibit file system access from URLs that begin with "FILE://" or "file://" by performing a case-insensitive comparison of the beginning of a URL with the string "FILE://".</span></span> <span data-ttu-id="d5817-409">ただし、カルチャに依存した比較が、"file://" で始まる URL でトルコ語 (トルコ) カルチャを使用して実行された場合、等値比較は失敗します。これは、小文字の "i" が "i" ではなく "i" であるためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-409">However, if a culture-sensitive comparison is performed using the Turkish (Turkey) culture on a URL that begins with "file://", the comparison for equality fails, because the Turkish uppercase equivalent of the lowercase "i" is "İ" instead of "I".</span></span> <span data-ttu-id="d5817-410">その結果、ファイルシステムへのアクセスが誤って許可されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-410">As a result, file system access is inadvertently permitted.</span></span> <span data-ttu-id="d5817-411">一方、序数に基づく比較を実行すると、等値比較が成功し、ファイルシステムアクセスが拒否されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-411">On the other hand, if an ordinal comparison is performed, the comparison for equality succeeds, and file system access is denied.</span></span>

 [!code-cpp[System.String.Class#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.equals.cpp#11)]
 [!code-csharp[System.String.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/equality1.cs#11)]
 [!code-vb[System.String.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/equality1.vb#11)]

<a name="Normalization"></a>
## <a name="normalization"></a><span data-ttu-id="d5817-412">正規化</span><span class="sxs-lookup"><span data-stu-id="d5817-412">Normalization</span></span>
 <span data-ttu-id="d5817-413">Unicode 文字には複数の表現があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-413">Some Unicode characters have multiple representations.</span></span> <span data-ttu-id="d5817-414">たとえば、次のコードポイントは、"ắ" という文字を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-414">For example, any of the following code points can represent the letter "ắ":</span></span>

-   <span data-ttu-id="d5817-415">U+1EAF</span><span class="sxs-lookup"><span data-stu-id="d5817-415">U+1EAF</span></span>

-   <span data-ttu-id="d5817-416">U + 0103 U + 0301</span><span class="sxs-lookup"><span data-stu-id="d5817-416">U+0103 U+0301</span></span>

-   <span data-ttu-id="d5817-417">U + 0061 U + 0306 U + 0301</span><span class="sxs-lookup"><span data-stu-id="d5817-417">U+0061 U+0306 U+0301</span></span>

 <span data-ttu-id="d5817-418">1つの文字に対して複数の表現を使用すると、検索、並べ替え、照合、およびその他の文字列操作が複雑になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-418">Multiple representations for a single character complicate searching, sorting, matching, and other string operations.</span></span>

 <span data-ttu-id="d5817-419">Unicode 規格では、同等のバイナリ表現に対して Unicode 文字の1つのバイナリ表現を返す正規化と呼ばれるプロセスが定義されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-419">The Unicode standard defines a process called normalization that returns one binary representation of a Unicode character for any of its equivalent binary representations.</span></span> <span data-ttu-id="d5817-420">正規化では、さまざまなルールに従って、正規化形式と呼ばれる複数のアルゴリズムを使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-420">Normalization can use several algorithms, called normalization forms, that follow different rules.</span></span> <span data-ttu-id="d5817-421">.NET では、Unicode 正規形 C、D、KC、および KD がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="d5817-421">.NET supports Unicode normalization forms C, D, KC, and KD.</span></span> <span data-ttu-id="d5817-422">文字列が同じ正規化形式に正規化されている場合は、序数による比較を使用して比較できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-422">When strings have been normalized to the same normalization form, they can be compared by using ordinal comparison.</span></span>

 <span data-ttu-id="d5817-423">序数による比較は、各文字列の対応する <xref:System.Char> オブジェクトの Unicode スカラー値のバイナリ比較です。</span><span class="sxs-lookup"><span data-stu-id="d5817-423">An ordinal comparison is a binary comparison of the Unicode scalar value of corresponding <xref:System.Char> objects in each string.</span></span> <span data-ttu-id="d5817-424"><xref:System.String> クラスには、次のような序数による比較を実行できるさまざまなメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-424">The <xref:System.String> class includes a number of methods that can perform an ordinal comparison, including the following:</span></span>

-   <span data-ttu-id="d5817-425"><xref:System.String.Compare%2A>、<xref:System.String.Equals%2A>、<xref:System.String.StartsWith%2A>、<xref:System.String.EndsWith%2A>、<xref:System.String.IndexOf%2A>、および <xref:System.String.LastIndexOf%2A> パラメーターを含むメソッドのオーバーロード。<xref:System.StringComparison></span><span class="sxs-lookup"><span data-stu-id="d5817-425">Any overload of the <xref:System.String.Compare%2A>, <xref:System.String.Equals%2A>, <xref:System.String.StartsWith%2A>,  <xref:System.String.EndsWith%2A>, <xref:System.String.IndexOf%2A>, and <xref:System.String.LastIndexOf%2A> methods that includes a <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="d5817-426">このパラメーターに <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> または <xref:System.StringComparison.OrdinalIgnoreCase> の値を指定すると、メソッドによって序数の比較が実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-426">The method performs an ordinal comparison if you supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase> for this parameter.</span></span>

-   <span data-ttu-id="d5817-427"><xref:System.String.CompareOrdinal%2A> メソッドのオーバーロード。</span><span class="sxs-lookup"><span data-stu-id="d5817-427">The overloads of the <xref:System.String.CompareOrdinal%2A> method.</span></span>

-   <span data-ttu-id="d5817-428"><xref:System.String.Contains%2A>、<xref:System.String.Replace%2A>、<xref:System.String.Split%2A>など、既定で序数による比較を使用するメソッド。</span><span class="sxs-lookup"><span data-stu-id="d5817-428">Methods that use ordinal comparison by default, such as <xref:System.String.Contains%2A>, <xref:System.String.Replace%2A>, and <xref:System.String.Split%2A>.</span></span>

-   <span data-ttu-id="d5817-429"><xref:System.Char> 値、または文字列インスタンス内の <xref:System.Char> 配列内の要素を検索するメソッド。</span><span class="sxs-lookup"><span data-stu-id="d5817-429">Methods that search for a <xref:System.Char> value or for the elements in a <xref:System.Char> array in a string instance.</span></span> <span data-ttu-id="d5817-430">このようなメソッドには、<xref:System.String.IndexOf%28System.Char%29> や <xref:System.String.Split%28System.Char%5B%5D%29>などがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-430">Such methods include <xref:System.String.IndexOf%28System.Char%29> and <xref:System.String.Split%28System.Char%5B%5D%29>.</span></span>

 <span data-ttu-id="d5817-431"><xref:System.String.IsNormalized?displayProperty=nameWithType> メソッドを呼び出すことによって文字列が正規形 C に正規化されるかどうかを判断できます。また、<xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=nameWithType> メソッドを呼び出して、文字列が指定した正規化形式に正規化されているかどうかを判断することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-431">You can determine whether a string is normalized to normalization form C by calling the <xref:System.String.IsNormalized?displayProperty=nameWithType> method, or you can call the <xref:System.String.IsNormalized%28System.Text.NormalizationForm%29?displayProperty=nameWithType> method to determine whether a string is normalized to a specified normalization form.</span></span> <span data-ttu-id="d5817-432">また、<xref:System.String.Normalize?displayProperty=nameWithType> メソッドを呼び出して文字列を正規形 C に変換することもできます。また、<xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=nameWithType> メソッドを呼び出して、文字列を指定した正規化形式に変換することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-432">You can also call the <xref:System.String.Normalize?displayProperty=nameWithType> method to convert a string to normalization form C, or you can call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29?displayProperty=nameWithType> method to convert a string to a specified normalization form.</span></span> <span data-ttu-id="d5817-433">文字列の正規化と比較の詳細な手順については、「<xref:System.String.Normalize> メソッドと <xref:System.String.Normalize%28System.Text.NormalizationForm%29> メソッド」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-433">For step-by-step information about normalizing and comparing strings, see the <xref:System.String.Normalize> and <xref:System.String.Normalize%28System.Text.NormalizationForm%29> methods.</span></span>

 <span data-ttu-id="d5817-434">次の簡単な例は、文字列の正規化を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-434">The following simple example illustrates string normalization.</span></span> <span data-ttu-id="d5817-435">この例では、3つの異なる文字列の3つの異なる方法で文字 "ố" を定義し、等値比較を使用して、各文字列が他の2つの文字列と異なることを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-435">It defines the letter "ố" in three different ways in three different strings, and uses an ordinal comparison for equality to determine that each string differs from the other two strings.</span></span> <span data-ttu-id="d5817-436">次に、各文字列をサポートされている正規化形式に変換し、指定された正規化形式で各文字列の序数による比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-436">It then converts each string to the supported normalization forms, and again performs an ordinal comparison of each string in a specified normalization form.</span></span> <span data-ttu-id="d5817-437">どちらの場合も、2番目の等しいテストでは、文字列が等しいことが示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-437">In each case, the second test for equality shows that the strings are equal.</span></span>

 [!code-cpp[System.String.Class#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/string.normalize.cpp#14)]
 [!code-csharp[System.String.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/normalize1.cs#14)]
 [!code-vb[System.String.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/normalize1.vb#14)]

 <span data-ttu-id="d5817-438">正規化および正規化形式の詳細については、「<xref:System.Text.NormalizationForm?displayProperty=nameWithType>」および「 [Unicode 標準の使用方法 #15: unicode の正規化形式](https://unicode.org/reports/tr15/)」および unicode.org web サイトの正規化に関する[FAQ](https://www.unicode.org/faq/normalization.html)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-438">For more information about normalization and normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>, as well as [Unicode Standard Annex #15: Unicode Normalization Forms](https://unicode.org/reports/tr15/) and the [Normalization FAQ](https://www.unicode.org/faq/normalization.html) on the unicode.org website.</span></span>

<a name="ByCategory"></a>
## <a name="string-operations-by-category"></a><span data-ttu-id="d5817-439">カテゴリ別の文字列操作</span><span class="sxs-lookup"><span data-stu-id="d5817-439">String operations by category</span></span>
 <span data-ttu-id="d5817-440"><xref:System.String> クラスは、文字列の比較、文字列の等価性のテスト、文字列内の文字または部分文字列の検索、文字列の変更、文字列の文字列の抽出、文字列の結合、文字列の文字列のコピー、文字列の書式設定、文字列の書式設定を行うためのメンバーを提供します。</span><span class="sxs-lookup"><span data-stu-id="d5817-440">The <xref:System.String> class provides members for comparing strings, testing strings for equality, finding characters or substrings in a string, modifying a string, extracting substrings from a string, combining strings, formatting values, copying a string, and normalizing a string.</span></span>

### <a name="comparing-strings"></a><span data-ttu-id="d5817-441">文字列の比較</span><span class="sxs-lookup"><span data-stu-id="d5817-441">Comparing strings</span></span>
 <span data-ttu-id="d5817-442">次の <xref:System.String> メソッドを使用して、文字列を比較して並べ替え順序での相対位置を決定することができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-442">You can compare strings to determine their relative position in the sort order by using the following <xref:System.String> methods:</span></span>

-   <span data-ttu-id="d5817-443"><xref:System.String.Compare%2A> は、並べ替え順序における1つの文字列と2番目の文字列の関係を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-443"><xref:System.String.Compare%2A> returns an integer that indicates the relationship of one string to a second string in the sort order.</span></span>

-   <span data-ttu-id="d5817-444"><xref:System.String.CompareOrdinal%2A> は、コードポイントの比較に基づいて、1つの文字列と2番目の文字列との関係を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-444"><xref:System.String.CompareOrdinal%2A> returns an integer that indicates the relationship of one string to a second string based on a comparison of their code points.</span></span>

-   <span data-ttu-id="d5817-445"><xref:System.String.CompareTo%2A> は、並べ替え順序における現在の文字列インスタンスと2番目の文字列との関係を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-445"><xref:System.String.CompareTo%2A> returns an integer that indicates the relationship of the current string instance to a second string in the sort order.</span></span> <span data-ttu-id="d5817-446"><xref:System.String.CompareTo%28System.String%29> メソッドは、<xref:System.String> クラスの <xref:System.IComparable> と <xref:System.IComparable%601> の実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="d5817-446">The <xref:System.String.CompareTo%28System.String%29> method provides the <xref:System.IComparable> and <xref:System.IComparable%601> implementations for the <xref:System.String> class.</span></span>

### <a name="testing-strings-for-equality"></a><span data-ttu-id="d5817-447">文字列の等価性をテストする</span><span class="sxs-lookup"><span data-stu-id="d5817-447">Testing strings for equality</span></span>
 <span data-ttu-id="d5817-448">2つの文字列が等しいかどうかを判断するには、<xref:System.String.Equals%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-448">You call the <xref:System.String.Equals%2A> method to determine whether two strings are equal.</span></span> <span data-ttu-id="d5817-449">インスタンス <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> と静的な <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> オーバーロードを使用すると、比較がカルチャに依存するか序数であるか、また、大文字と小文字を区別するか無視するかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-449">The instance <xref:System.String.Equals%28System.String%2CSystem.String%2CSystem.StringComparison%29> and the static <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> overloads let you specify whether the comparison is culture-sensitive or ordinal, and whether case is considered or ignored.</span></span> <span data-ttu-id="d5817-450">等しいかどうかのテストは序数で、システムリソースへのアクセスを決定する等価比較 (ファイルシステムオブジェクトなど) は常に序数である必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-450">Most tests for equality are ordinal, and comparisons for equality that determine access to a system resource (such as a file system object) should always be ordinal.</span></span>

### <a name="finding-characters-in-a-string"></a><span data-ttu-id="d5817-451">文字列内の文字の検索</span><span class="sxs-lookup"><span data-stu-id="d5817-451">Finding characters in a string</span></span>
 <span data-ttu-id="d5817-452"><xref:System.String> クラスには、次の2種類の検索メソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-452">The <xref:System.String> class includes two kinds of search methods:</span></span>

-   <span data-ttu-id="d5817-453">特定の部分文字列が文字列インスタンス内に存在するかどうかを示す <xref:System.Boolean> 値を返すメソッド。</span><span class="sxs-lookup"><span data-stu-id="d5817-453">Methods that return a <xref:System.Boolean> value to indicate whether a particular substring is present in a string instance.</span></span> <span data-ttu-id="d5817-454">これには、<xref:System.String.Contains%2A>、<xref:System.String.EndsWith%2A>、および <xref:System.String.StartsWith%2A> メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-454">These include the <xref:System.String.Contains%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.StartsWith%2A> methods.</span></span>

-   <span data-ttu-id="d5817-455">文字列インスタンス内の部分文字列の開始位置を示すメソッド。</span><span class="sxs-lookup"><span data-stu-id="d5817-455">Methods that indicate the starting position of a substring in a string instance.</span></span> <span data-ttu-id="d5817-456">これには、<xref:System.String.IndexOf%2A>、<xref:System.String.IndexOfAny%2A>、<xref:System.String.LastIndexOf%2A>、および <xref:System.String.LastIndexOfAny%2A> の各メソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-456">These include the <xref:System.String.IndexOf%2A>, <xref:System.String.IndexOfAny%2A>, <xref:System.String.LastIndexOf%2A>, and <xref:System.String.LastIndexOfAny%2A> methods.</span></span>

> [!WARNING]
>  <span data-ttu-id="d5817-457">特定の部分文字列ではなく特定のパターンの文字列を検索する場合は、正規表現を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-457">If you want to search a string for a particular pattern rather than a specific substring, you should use regular expressions.</span></span> <span data-ttu-id="d5817-458">詳細については、「 [.net の正規表現](~/docs/standard/base-types/regular-expressions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-458">For more information, see [.NET Regular Expressions](~/docs/standard/base-types/regular-expressions.md).</span></span>

### <a name="modifying-a-string"></a><span data-ttu-id="d5817-459">文字列の変更</span><span class="sxs-lookup"><span data-stu-id="d5817-459">Modifying a string</span></span>
 <span data-ttu-id="d5817-460"><xref:System.String> クラスには、文字列の値を変更するために表示される次のメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-460">The <xref:System.String> class includes the following methods that appear to modify the value of a string:</span></span>

-   <span data-ttu-id="d5817-461"><xref:System.String.Insert%2A> は、現在の <xref:System.String> インスタンスに文字列を挿入します。</span><span class="sxs-lookup"><span data-stu-id="d5817-461"><xref:System.String.Insert%2A> inserts a string into the current <xref:System.String> instance.</span></span>

-   <span data-ttu-id="d5817-462"><xref:System.String.PadLeft%2A> は、文字列の先頭に指定された文字を1回以上挿入します。</span><span class="sxs-lookup"><span data-stu-id="d5817-462"><xref:System.String.PadLeft%2A> inserts one or more occurrences of a specified character at the beginning of a string.</span></span>

-   <span data-ttu-id="d5817-463"><xref:System.String.PadRight%2A> は、文字列の末尾に指定された文字を1回以上挿入します。</span><span class="sxs-lookup"><span data-stu-id="d5817-463"><xref:System.String.PadRight%2A> inserts one or more occurrences of a specified character at the end of a string.</span></span>

-   <span data-ttu-id="d5817-464"><xref:System.String.Remove%2A> は、現在の <xref:System.String> インスタンスから部分文字列を削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-464"><xref:System.String.Remove%2A> deletes a substring from the current <xref:System.String> instance.</span></span>

-   <span data-ttu-id="d5817-465"><xref:System.String.Replace%2A> は、現在の <xref:System.String> インスタンス内の部分文字列を別の部分文字列に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="d5817-465"><xref:System.String.Replace%2A> replaces a substring with another substring in the current <xref:System.String> instance.</span></span>

-   <span data-ttu-id="d5817-466"><xref:System.String.ToLower%2A> と <xref:System.String.ToLowerInvariant%2A> 文字列内のすべての文字を小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-466"><xref:System.String.ToLower%2A> and <xref:System.String.ToLowerInvariant%2A> convert all the characters in a string to lowercase.</span></span>

-   <span data-ttu-id="d5817-467"><xref:System.String.ToUpper%2A> と <xref:System.String.ToUpperInvariant%2A> 文字列内のすべての文字を大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-467"><xref:System.String.ToUpper%2A> and <xref:System.String.ToUpperInvariant%2A> convert all the characters in a string to uppercase.</span></span>

-   <span data-ttu-id="d5817-468">文字列の先頭と末尾からすべての文字を削除 <xref:System.String.Trim%2A> ます。</span><span class="sxs-lookup"><span data-stu-id="d5817-468"><xref:System.String.Trim%2A> removes all occurrences of a character from the beginning and end of a string.</span></span>

-   <span data-ttu-id="d5817-469">文字列の末尾から文字のすべての出現箇所を削除 <xref:System.String.TrimEnd%2A> ます。</span><span class="sxs-lookup"><span data-stu-id="d5817-469"><xref:System.String.TrimEnd%2A> removes all occurrences of a character from the end of a string.</span></span>

-   <span data-ttu-id="d5817-470">文字列の先頭からすべての文字を削除 <xref:System.String.TrimStart%2A> ます。</span><span class="sxs-lookup"><span data-stu-id="d5817-470"><xref:System.String.TrimStart%2A> removes all occurrences of a character from the beginning of a string.</span></span>

> [!IMPORTANT]
>  <span data-ttu-id="d5817-471">すべての文字列変更メソッドは、新しい <xref:System.String> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-471">All string modification methods return a new <xref:System.String> object.</span></span> <span data-ttu-id="d5817-472">現在のインスタンスの値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-472">They don't modify the value of the current instance.</span></span>

### <a name="extracting-substrings-from-a-string"></a><span data-ttu-id="d5817-473">文字列からの部分文字列の抽出</span><span class="sxs-lookup"><span data-stu-id="d5817-473">Extracting substrings from a string</span></span>
 <span data-ttu-id="d5817-474"><xref:System.String.Split%2A?displayProperty=nameWithType> メソッドは、1つの文字列を複数の文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="d5817-474">The <xref:System.String.Split%2A?displayProperty=nameWithType> method separates a single string into multiple strings.</span></span> <span data-ttu-id="d5817-475">メソッドのオーバーロードを使用すると、複数の区切り記号を指定して、メソッドによって抽出される部分文字列の最大数を決定し、空の文字列 (区切り記号が隣接している場合に発生する) が返される文字列に含まれるかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-475">Overloads of the method allow you to specify multiple delimiters, to determine the maximum number of substrings that the method extracts, and to determine whether empty strings (which occur when delimiters are adjacent) are included among the returned strings.</span></span>

### <a name="combining-strings"></a><span data-ttu-id="d5817-476">結合 (文字列を)</span><span class="sxs-lookup"><span data-stu-id="d5817-476">Combining strings</span></span>
 <span data-ttu-id="d5817-477">文字列の連結には、次の <xref:System.String> メソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-477">The following <xref:System.String> methods can be used for string concatenation:</span></span>

-   <span data-ttu-id="d5817-478"><xref:System.String.Concat%2A> は、1つ以上の部分文字列を1つの文字列に結合します。</span><span class="sxs-lookup"><span data-stu-id="d5817-478"><xref:System.String.Concat%2A> combines one or more substrings into a single string.</span></span>

-   <span data-ttu-id="d5817-479"><xref:System.String.Join%2A> 1 つ以上の部分文字列を1つの要素に連結し、各部分文字列の間に区切り記号を追加します。</span><span class="sxs-lookup"><span data-stu-id="d5817-479"><xref:System.String.Join%2A> concatenates one or more substrings into a single element and adds a separator between each substring.</span></span>

### <a name="formatting-values"></a><span data-ttu-id="d5817-480">値の書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-480">Formatting values</span></span>
 <span data-ttu-id="d5817-481"><xref:System.String.Format%2A?displayProperty=nameWithType> メソッドは、複合書式指定機能を使用して、文字列内の1つ以上のプレースホルダーを、何らかのオブジェクトまたは値の文字列形式に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="d5817-481">The <xref:System.String.Format%2A?displayProperty=nameWithType> method uses the composite formatting feature to replace one or more placeholders in a string with the string representation of some object or value.</span></span> <span data-ttu-id="d5817-482"><xref:System.String.Format%2A> メソッドは、多くの場合、次の操作を実行するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-482">The <xref:System.String.Format%2A> method is often used to do the following:</span></span>

-   <span data-ttu-id="d5817-483">数値の文字列形式を文字列に埋め込む場合は。</span><span class="sxs-lookup"><span data-stu-id="d5817-483">To embed the string representation of a numeric value in a string.</span></span>

-   <span data-ttu-id="d5817-484">日付と時刻の値の文字列形式を文字列に埋め込む場合は。</span><span class="sxs-lookup"><span data-stu-id="d5817-484">To embed the string representation of a date and time value in a string.</span></span>

-   <span data-ttu-id="d5817-485">列挙値の文字列形式を文字列に埋め込む場合は。</span><span class="sxs-lookup"><span data-stu-id="d5817-485">To embed the string representation of an enumeration value in a string.</span></span>

-   <span data-ttu-id="d5817-486"><xref:System.IFormattable> インターフェイスをサポートするオブジェクトの文字列形式を文字列に埋め込む場合は。</span><span class="sxs-lookup"><span data-stu-id="d5817-486">To embed the string representation of some object that supports the <xref:System.IFormattable> interface in a string.</span></span>

-   <span data-ttu-id="d5817-487">より大きな文字列内のフィールド内の部分文字列を右揃えまたは左揃えにする場合は。</span><span class="sxs-lookup"><span data-stu-id="d5817-487">To right-justify or left-justify a substring in a field within a larger string.</span></span>

 <span data-ttu-id="d5817-488">書式設定操作と例の詳細については、「<xref:System.String.Format%2A> のオーバーロードの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-488">For detailed information about formatting operations and examples, see the <xref:System.String.Format%2A> overload summary.</span></span>

### <a name="copying-a-string"></a><span data-ttu-id="d5817-489">文字列のコピー</span><span class="sxs-lookup"><span data-stu-id="d5817-489">Copying a string</span></span>
 <span data-ttu-id="d5817-490">文字列のコピーを作成するには、次の <xref:System.String> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-490">You can call the following <xref:System.String> methods to make a copy of a string:</span></span>

-   <span data-ttu-id="d5817-491"><xref:System.String.Clone%2A> は、既存の <xref:System.String> オブジェクトへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-491"><xref:System.String.Clone%2A> returns a reference to an existing <xref:System.String> object.</span></span>

-   <span data-ttu-id="d5817-492"><xref:System.String.Copy%2A> 既存の文字列のコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-492"><xref:System.String.Copy%2A> creates a copy of an existing string.</span></span>

-   <span data-ttu-id="d5817-493"><xref:System.String.CopyTo%2A> 文字列の一部を文字配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5817-493"><xref:System.String.CopyTo%2A> copies a portion of a string to a character array.</span></span>

### <a name="normalizing-a-string"></a><span data-ttu-id="d5817-494">文字列の正規化</span><span class="sxs-lookup"><span data-stu-id="d5817-494">Normalizing a string</span></span>
 <span data-ttu-id="d5817-495">Unicode では、1つの文字に複数のコードポイントを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-495">In Unicode, a single character can have multiple code points.</span></span> <span data-ttu-id="d5817-496">正規化では、これらの同等の文字が同じバイナリ表現に変換されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-496">Normalization converts these equivalent characters into the same binary representation.</span></span> <span data-ttu-id="d5817-497"><xref:System.String.Normalize%2A?displayProperty=nameWithType> メソッドは正規化を実行し、<xref:System.String.IsNormalized%2A?displayProperty=nameWithType> メソッドは文字列が正規化されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-497">The <xref:System.String.Normalize%2A?displayProperty=nameWithType> method performs the normalization, and the <xref:System.String.IsNormalized%2A?displayProperty=nameWithType> method determines whether a string is normalized.</span></span>

 <span data-ttu-id="d5817-498">詳細と例については、このトピックで前述した「[正規化](#Normalization)」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-498">For more information and an example, see the [Normalization](#Normalization) section earlier in this topic.</span></span>

 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://www.microsoft.com/download/details.aspx?id=10921"><span data-ttu-id="d5817-499">Windows オペレーティングシステムの重みテーブルの並べ替え</span><span class="sxs-lookup"><span data-stu-id="d5817-499">Sorting Weight Tables for Windows operating systems</span></span></related>
    <related type="ExternalDocumentation" href="https://www.unicode.org/Public/UCA/latest/allkeys.txt"><span data-ttu-id="d5817-500">Linux および macOS 用の既定の Unicode 照合順序要素の表</span><span class="sxs-lookup"><span data-stu-id="d5817-500">Default Unicode Collation Element Table, for Linux and macOS</span></span></related>
    <threadsafe><span data-ttu-id="d5817-501">この型はスレッド セーフです。</span><span class="sxs-lookup"><span data-stu-id="d5817-501">This type is thread safe.</span></span></threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.ICloneable" />
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Text.StringBuilder" />
    <altmember cref="T:System.Globalization.CultureInfo" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="d5817-502">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-502">Formatting Types in .NET</span></span></related>
    <related type="Article" href="~/docs/standard/base-types/best-practices-strings.md"><span data-ttu-id="d5817-503">.NET の文字列を使用するためのベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="d5817-503">Best Practices for Using Strings in .NET</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-504"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-504">Initializes a new instance of the <see cref="T:System.String" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="d5817-505">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="d5817-505">In this section:</span></span>

<span data-ttu-id="d5817-506">[オーバーロード](#Syntax)されたコンストラクターの構文</span><span class="sxs-lookup"><span data-stu-id="d5817-506">[Overloaded constructor syntax](#Syntax)</span></span>\
<span data-ttu-id="d5817-507">[パラメーター](#Params)</span><span class="sxs-lookup"><span data-stu-id="d5817-507">[Parameters](#Params)</span></span>\
<span data-ttu-id="d5817-508">[例外](#Exceptions)</span><span class="sxs-lookup"><span data-stu-id="d5817-508">[Exceptions](#Exceptions)</span></span>\
<span data-ttu-id="d5817-509">[どの方法を呼び出すか。](#Tasks)</span><span class="sxs-lookup"><span data-stu-id="d5817-509">[Which method do I call?](#Tasks)</span></span>\
<span data-ttu-id="d5817-510">[文字列の作成](#Creating_Strings)</span><span class="sxs-lookup"><span data-stu-id="d5817-510">[Creating strings](#Creating_Strings)</span></span>\
[<span data-ttu-id="d5817-511">反復する文字列の処理</span><span class="sxs-lookup"><span data-stu-id="d5817-511">Handle repetitive strings</span></span>](#Repetitive)

<span data-ttu-id="d5817-512">文字列のインスタンス化の例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-512">Examples of instantiating strings:</span></span>

<span data-ttu-id="d5817-513">[文字列割り当てを使用](#Ctor1_Example)</span><span class="sxs-lookup"><span data-stu-id="d5817-513">[Use string assignment](#Ctor1_Example)</span></span>\
<span data-ttu-id="d5817-514">[文字配列を使用する](#Ctor2_Example)</span><span class="sxs-lookup"><span data-stu-id="d5817-514">[Use a character array](#Ctor2_Example)</span></span>\
<span data-ttu-id="d5817-515">[文字配列の一部を使用し、1つの文字を繰り返し](#Ctor3_Example)</span><span class="sxs-lookup"><span data-stu-id="d5817-515">[Use a portion of a character array and repeating a single character](#Ctor3_Example)</span></span>\
<span data-ttu-id="d5817-516">[文字配列へのポインターを使用し](#Ctor4_Example)</span><span class="sxs-lookup"><span data-stu-id="d5817-516">[Use a pointer to a character array](#Ctor4_Example)</span></span>\
<span data-ttu-id="d5817-517">[ポインターと配列の範囲を使用](#Ctor5_Example)</span><span class="sxs-lookup"><span data-stu-id="d5817-517">[Use  a pointer and a range of an array](#Ctor5_Example)</span></span>\
<span data-ttu-id="d5817-518">[符号付きバイト配列へのポインターを使用し](#Ctor6_Example)</span><span class="sxs-lookup"><span data-stu-id="d5817-518">[Use a pointer to a signed byte array](#Ctor6_Example)</span></span>\
[<span data-ttu-id="d5817-519">バージョン情報</span><span class="sxs-lookup"><span data-stu-id="d5817-519">Version information</span></span>](#Versions)

<a name="Syntax"></a>
## <a name="overloaded-constructor-syntax"></a><span data-ttu-id="d5817-520">オーバーロードされたコンストラクターの構文</span><span class="sxs-lookup"><span data-stu-id="d5817-520">Overloaded constructor syntax</span></span>
 <span data-ttu-id="d5817-521">文字列コンストラクターは、ポインターパラメーターを持たない2つのカテゴリと、ポインターパラメーターを持つ2つのカテゴリに分類されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-521">String constructors fall into two categories: those without pointer parameters, and those with pointer parameters.</span></span> <span data-ttu-id="d5817-522">ポインターを使用するコンストラクターは CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="d5817-522">The constructors that use pointers are not CLS-compliant.</span></span> <span data-ttu-id="d5817-523">また、Visual Basic はポインターの使用をサポートしC#ていません。また、ポインターを使用して unsafe コンテキストで実行するコードが必要です。</span><span class="sxs-lookup"><span data-stu-id="d5817-523">In addition, Visual Basic does not support the use of pointers, and C# requires code that uses pointers to run in an unsafe context.</span></span> <span data-ttu-id="d5817-524">詳しくは、「[unsafe](~/docs/csharp/language-reference/keywords/unsafe.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-524">For more information, see [unsafe](~/docs/csharp/language-reference/keywords/unsafe.md).</span></span>

 <span data-ttu-id="d5817-525">オーバーロードの選択に関するその他のガイダンスについては、「[呼び出すメソッド](#Tasks)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-525">For additional guidance on choosing an overload, see [Which method do I call?](#Tasks)</span></span>

 <span data-ttu-id="d5817-526">`String(Char[] value)`、新しいインスタンスを初期化して、Unicode 文字の配列によって示される値にします。</span><span class="sxs-lookup"><span data-stu-id="d5817-526">`String(Char[] value)` Initializes the new instance to the value indicated by an array of Unicode characters.</span></span> <span data-ttu-id="d5817-527">このコンストラクターは、Unicode 文字 ([例](#Ctor2_Example)) をコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5817-527">This constructor copies Unicode characters([example](#Ctor2_Example)).</span></span>

 <span data-ttu-id="d5817-528">`String(Char[] value, Int32 startIndex, Int32 length)`、新しいインスタンスを初期化し、Unicode 文字の配列、配列内の開始文字位置、および長さ ([例](#Ctor3_Example)) で示される値に初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-528">`String(Char[] value, Int32 startIndex, Int32 length)` Initializes the new instance to the value indicated by an array of Unicode characters, a starting character position within that array, and a length ([example](#Ctor3_Example)).</span></span>

 <span data-ttu-id="d5817-529">指定された回数 ([例](#Ctor3_Example)) を繰り返した指定の Unicode 文字によって示される値に新しいインスタンスを初期化 `String(Char c, Int32 count)` します。</span><span class="sxs-lookup"><span data-stu-id="d5817-529">`String(Char c, Int32 count)` Initializes the new instance to the value indicated by a specified Unicode character repeated a specified number of times ([example](#Ctor3_Example)).</span></span>

 <span data-ttu-id="d5817-530">**(CLS に準拠していない)** `String(char* value)` は、null 文字 (U + 0000 または ' \ 0 ') で終わる Unicode 文字の配列へのポインターによって示される値に新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-530">`String(char* value)` **(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of Unicode characters that is terminated by a null character (U+0000 or '\0').</span></span> <span data-ttu-id="d5817-531">([例](#Ctor4_Example))。</span><span class="sxs-lookup"><span data-stu-id="d5817-531">([example](#Ctor4_Example)).</span></span>

 <span data-ttu-id="d5817-532">アクセス許可: <xref:System.Security.SecurityCriticalAttribute>には、直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="d5817-532">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="d5817-533">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-533">This member cannot be used by partially trusted or transparent code.</span></span>

 <span data-ttu-id="d5817-534">**(CLS に準拠していない)** `String(char* value, Int32 startIndex, Int32 length)` は、Unicode 文字の配列へのポインター、配列内の開始文字位置、および長さによって示される値に新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-534">`String(char* value, Int32 startIndex, Int32 length)` **(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of Unicode characters, a starting character position within that array, and a length.</span></span> <span data-ttu-id="d5817-535">コンストラクターは、インデックス `startIndex` で始まる `value` の Unicode 文字をコピーし、`startIndex` + `length`-1 ([例](#Ctor5_Example)) で終わります。</span><span class="sxs-lookup"><span data-stu-id="d5817-535">The constructor copies the Unicode characters from `value` starting at index `startIndex` and ending at index `startIndex` + `length` - 1 ([example](#Ctor5_Example)).</span></span>

 <span data-ttu-id="d5817-536">アクセス許可: <xref:System.Security.SecurityCriticalAttribute>には、直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="d5817-536">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="d5817-537">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-537">This member cannot be used by partially trusted or transparent code.</span></span>

 <span data-ttu-id="d5817-538">**(CLS に準拠していない)** `String(SByte* value)` は、8ビット符号付き整数の配列へのポインターによって示される値に新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-538">`String(SByte* value)` **(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers.</span></span> <span data-ttu-id="d5817-539">配列は、現在のシステムコードページ (<xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>によって指定されたエンコーディング) を使用してエンコードされた文字列を表すと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-539">The array is assumed to represent a string encoded using the current system code page (that is, the encoding specified by <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>).</span></span> <span data-ttu-id="d5817-540">コンストラクターは、null 文字 (0x00) に到達するまでポインターによって指定された位置から始まる `value` の文字を処理します ([例](#Ctor6_Example))。</span><span class="sxs-lookup"><span data-stu-id="d5817-540">The constructor processes characters from `value` starting from the location specified by the pointer until a null character (0x00) is reached ([example](#Ctor6_Example)).</span></span>

 <span data-ttu-id="d5817-541">アクセス許可: <xref:System.Security.SecurityCriticalAttribute>には、直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="d5817-541">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="d5817-542">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-542">This member cannot be used by partially trusted or transparent code.</span></span>

 <span data-ttu-id="d5817-543">**(CLS に準拠していない)** `String(SByte* value, Int32 startIndex, Int32 length)` は、8ビット符号付き整数の配列へのポインター、配列内の開始位置、および長さによって示される値に新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-543">`String(SByte* value, Int32 startIndex, Int32 length)` **(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</span></span>  <span data-ttu-id="d5817-544">配列は、現在のシステムコードページ (<xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>によって指定されたエンコーディング) を使用してエンコードされた文字列を表すと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-544">The array is assumed to represent a string encoded using the current system code page (that is, the encoding specified by <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>).</span></span> <span data-ttu-id="d5817-545">コンストラクターは `startIndex` から始まる値の文字を処理し、`startIndex` + `length`-1 ([例](#Ctor6_Example)) で終わります。</span><span class="sxs-lookup"><span data-stu-id="d5817-545">The constructor processes characters from value starting at `startIndex` and ending at `startIndex` + `length` - 1 ([example](#Ctor6_Example)).</span></span>

 <span data-ttu-id="d5817-546">アクセス許可: <xref:System.Security.SecurityCriticalAttribute>には、直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="d5817-546">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="d5817-547">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-547">This member cannot be used by partially trusted or transparent code.</span></span>

 <span data-ttu-id="d5817-548">**(CLS に準拠していない)** `String(SByte* value, Int32 startIndex, Int32 length, Encoding enc)` は、8ビット符号付き整数の配列へのポインター、配列内の開始位置、長さ、および <xref:System.Text.Encoding> オブジェクトによって示される値に新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-548">`String(SByte* value, Int32 startIndex, Int32 length, Encoding enc)` **(Not CLS-compliant)** Initializes the new instance to the value indicated by a pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <xref:System.Text.Encoding> object.</span></span>

 <span data-ttu-id="d5817-549">アクセス許可: <xref:System.Security.SecurityCriticalAttribute>には、直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="d5817-549">Permission: <xref:System.Security.SecurityCriticalAttribute>, requires full trust for the immediate caller.</span></span> <span data-ttu-id="d5817-550">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-550">This member cannot be used by partially trusted or transparent code.</span></span>

<a name="Params"></a>
## <a name="parameters"></a><span data-ttu-id="d5817-551">パラメーター</span><span class="sxs-lookup"><span data-stu-id="d5817-551">Parameters</span></span>
 <span data-ttu-id="d5817-552">ポインターパラメーターを含まない <xref:System.String> コンストラクターによって使用されるパラメーターの完全な一覧を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-552">Here is a complete list of parameters used by <xref:System.String> constructors that don't include a pointer parameter.</span></span> <span data-ttu-id="d5817-553">各オーバーロードによって使用されるパラメーターについては、上記のオーバーロード構文を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-553">For the parameters used by each overload, see the overload syntax above.</span></span>

|<span data-ttu-id="d5817-554">パラメーター</span><span class="sxs-lookup"><span data-stu-id="d5817-554">Parameter</span></span>|<span data-ttu-id="d5817-555">種類</span><span class="sxs-lookup"><span data-stu-id="d5817-555">Type</span></span>|<span data-ttu-id="d5817-556">説明</span><span class="sxs-lookup"><span data-stu-id="d5817-556">Description</span></span>|
|---------------|----------|-----------------|
|`value`|<span data-ttu-id="d5817-557"><xref:System.Char>[]</span><span class="sxs-lookup"><span data-stu-id="d5817-557"><xref:System.Char>[]</span></span>|<span data-ttu-id="d5817-558">Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-558">An array of Unicode characters.</span></span>|
|`c`|<xref:System.Char>|<span data-ttu-id="d5817-559">Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-559">A Unicode character.</span></span>|
|`startIndex`|<xref:System.Int32>|<span data-ttu-id="d5817-560">新しい文字列の最初の文字の `value` の開始位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-560">The starting position in `value` of the first character in the new string.</span></span><br /><br /> <span data-ttu-id="d5817-561">既定値: 0</span><span class="sxs-lookup"><span data-stu-id="d5817-561">Default value: 0</span></span>|
|`length`|<xref:System.Int32>|<span data-ttu-id="d5817-562">新しい文字列に含める `value` 内の文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-562">The number of characters in `value` to include in the new string.</span></span><br /><br /> <span data-ttu-id="d5817-563">既定値:<xref:System.Array.Length%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d5817-563">Default value: <xref:System.Array.Length%2A?displayProperty=nameWithType></span></span>|
|`count`|<xref:System.Int32>|<span data-ttu-id="d5817-564">新しい文字列で `c` 文字が繰り返される回数。</span><span class="sxs-lookup"><span data-stu-id="d5817-564">The number of times the character `c` is repeated in the new string.</span></span> <span data-ttu-id="d5817-565">`count` が0の場合、新しいオブジェクトの値は <xref:System.String.Empty?displayProperty=nameWithType>ます。</span><span class="sxs-lookup"><span data-stu-id="d5817-565">If `count` is zero, the value of the new object is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>|

 <span data-ttu-id="d5817-566">ポインターパラメーターを含む <xref:System.String> コンストラクターによって使用されるパラメーターの完全な一覧を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-566">Here is a complete list of parameters used by <xref:System.String> constructors that include a pointer parameter.</span></span> <span data-ttu-id="d5817-567">各オーバーロードによって使用されるパラメーターについては、上記のオーバーロード構文を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-567">For the parameters used by each overload, see the overload syntax above.</span></span>

|<span data-ttu-id="d5817-568">パラメーター</span><span class="sxs-lookup"><span data-stu-id="d5817-568">Parameter</span></span>|<span data-ttu-id="d5817-569">種類</span><span class="sxs-lookup"><span data-stu-id="d5817-569">Type</span></span>|<span data-ttu-id="d5817-570">説明</span><span class="sxs-lookup"><span data-stu-id="d5817-570">Description</span></span>|
|---------------|----------|-----------------|
|`value`|<xref:System.Char>*<br /><br /> <span data-ttu-id="d5817-571">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-571">-or-</span></span><br /><br /> <xref:System.SByte>\*|<span data-ttu-id="d5817-572">Null で終わる Unicode 文字配列または8ビット符号付き整数の配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="d5817-572">A pointer to a null-terminated array of Unicode characters or an array of 8-bit signed integers.</span></span> <span data-ttu-id="d5817-573">`value` が `null` または空の配列の場合、新しい文字列の値は <xref:System.String.Empty?displayProperty=nameWithType>ます。</span><span class="sxs-lookup"><span data-stu-id="d5817-573">If `value` is `null` or an empty array, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>|
|`startIndex`|<xref:System.Int32>|<span data-ttu-id="d5817-574">新しい文字列の最初の文字を定義する配列要素のインデックス。</span><span class="sxs-lookup"><span data-stu-id="d5817-574">The index of the array element that defines the first character in the new string.</span></span><br /><br /> <span data-ttu-id="d5817-575">既定値: 0</span><span class="sxs-lookup"><span data-stu-id="d5817-575">Default value: 0</span></span>|
|`length`|<xref:System.Int32>|<span data-ttu-id="d5817-576">新しい文字列を作成するために使用する配列要素の数。</span><span class="sxs-lookup"><span data-stu-id="d5817-576">The number of array elements to use to create the new string.</span></span> <span data-ttu-id="d5817-577">Length が0の場合、コンストラクターは値が <xref:System.String.Empty?displayProperty=nameWithType>文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-577">If length is zero, the constructor creates a string whose value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span><br /><br /> <span data-ttu-id="d5817-578">既定値:<xref:System.Array.Length%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d5817-578">Default value: <xref:System.Array.Length%2A?displayProperty=nameWithType></span></span>|
|`enc`|<xref:System.Text.Encoding>|<span data-ttu-id="d5817-579">`value` 配列のエンコード方法を指定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-579">An object that specifies how the `value` array is encoded.</span></span><br /><br /> <span data-ttu-id="d5817-580">既定値: <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>、またはシステムの現在の ANSI コードページ</span><span class="sxs-lookup"><span data-stu-id="d5817-580">Default value: <xref:System.Text.Encoding.Default%2A?displayProperty=nameWithType>, or the system's current ANSI code page</span></span>|

<a name="Exceptions"></a>
## <a name="exceptions"></a><span data-ttu-id="d5817-581">例外</span><span class="sxs-lookup"><span data-stu-id="d5817-581">Exceptions</span></span>
 <span data-ttu-id="d5817-582">ポインターパラメーターを含まないコンストラクターによってスローされる例外の一覧を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-582">Here's a list of exceptions thrown by constructors that don't include pointer parameters.</span></span>

|<span data-ttu-id="d5817-583">例外</span><span class="sxs-lookup"><span data-stu-id="d5817-583">Exception</span></span>|<span data-ttu-id="d5817-584">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-584">Condition</span></span>|<span data-ttu-id="d5817-585">スロー者</span><span class="sxs-lookup"><span data-stu-id="d5817-585">Thrown by</span></span>|
|---------------|---------------|---------------|
|<xref:System.ArgumentNullException>|<span data-ttu-id="d5817-586">`value` が `null`です。</span><span class="sxs-lookup"><span data-stu-id="d5817-586">`value` is `null`.</span></span>|<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>|
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="d5817-587">`startIndex`、`length`、または `count` が0未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-587">`startIndex`,`length`, or `count` is less than zero.</span></span><br /><br /> <span data-ttu-id="d5817-588">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-588">-or-</span></span><br /><br /> <span data-ttu-id="d5817-589">`startIndex` と `length` の合計が、`value` にある要素の数を超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-589">The sum of `startIndex` and `length` is greater than the number of elements in `value`.</span></span><br /><br /> <span data-ttu-id="d5817-590">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-590">-or-</span></span><br /><br /> <span data-ttu-id="d5817-591">`count` が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-591">`count` is less than zero.</span></span>|<xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29><br /><br /> <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29>|

 <span data-ttu-id="d5817-592">ポインターパラメーターを含むコンストラクターによってスローされる例外の一覧を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-592">Here's a list of exceptions thrown by constructors that include pointer parameters.</span></span>

|<span data-ttu-id="d5817-593">例外</span><span class="sxs-lookup"><span data-stu-id="d5817-593">Exception</span></span>|<span data-ttu-id="d5817-594">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-594">Condition</span></span>|<span data-ttu-id="d5817-595">スロー者</span><span class="sxs-lookup"><span data-stu-id="d5817-595">Thrown by</span></span>|
|---------------|---------------|---------------|
|<xref:System.ArgumentException>|<span data-ttu-id="d5817-596">`value` 無効な Unicode 文字を含む配列を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-596">`value` specifies an array that contains an invalid Unicode character.</span></span><br /><br /> <span data-ttu-id="d5817-597">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-597">-or-</span></span><br /><br /> <span data-ttu-id="d5817-598">`value` または `value` + `startIndex` が64K 未満のアドレスを指定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-598">`value` or `value` + `startIndex` specifies an address that is less than 64K.</span></span><br /><br /> <span data-ttu-id="d5817-599">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-599">-or-</span></span><br /><br /> <span data-ttu-id="d5817-600">新しい <xref:System.String> インスタンスを `value` バイト配列から初期化できませんでした。 `value` では既定のコードページエンコーディングが使用されていません。</span><span class="sxs-lookup"><span data-stu-id="d5817-600">A new <xref:System.String> instance could not be initialized from the `value` byte array because `value` does not use the default code page encoding.</span></span>|<span data-ttu-id="d5817-601">ポインターを持つすべてのコンストラクター。</span><span class="sxs-lookup"><span data-stu-id="d5817-601">All constructors with pointers.</span></span>|
|<xref:System.ArgumentNullException>|<span data-ttu-id="d5817-602">`value` が null です。</span><span class="sxs-lookup"><span data-stu-id="d5817-602">`value` is null.</span></span>|<xref:System.String.%23ctor%28System.SByte%2A%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding%29>|
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="d5817-603">現在のプロセスは、アドレス指定されたすべての文字に対する読み取りアクセス権を持っているわけではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-603">The current process does not have read access to all the addressed characters.</span></span><br /><br /> <span data-ttu-id="d5817-604">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-604">-or-</span></span><br /><br /> <span data-ttu-id="d5817-605">`startIndex` または `length` が 0 未満であるか、`value` + `startIndex` によりポインターのオーバーフローが発生するか、または現在のプロセスにはすべてのアドレス指定された文字に対する読み取りアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-605">`startIndex` or `length` is less than zero, `value` + `startIndex` cause a pointer overflow, or the current process does not have read access to all the addressed characters.</span></span><br /><br /> <span data-ttu-id="d5817-606">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-606">-or-</span></span><br /><br /> <span data-ttu-id="d5817-607">新しい文字列の長さが大きすぎて割り当てられません。</span><span class="sxs-lookup"><span data-stu-id="d5817-607">The length of the new string is too large to allocate.</span></span>|<span data-ttu-id="d5817-608">ポインターを持つすべてのコンストラクター。</span><span class="sxs-lookup"><span data-stu-id="d5817-608">All constructors with pointers.</span></span>|
|<xref:System.AccessViolationException>|<span data-ttu-id="d5817-609">`value`、または `value` + `startIndex` + -1 は無効なアドレスを指定します。`length`</span><span class="sxs-lookup"><span data-stu-id="d5817-609">`value`, or `value` + `startIndex` + `length` - 1, specifies an invalid address.</span></span>|<xref:System.String.%23ctor%28System.SByte%2A%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding%29>|

<a name="Tasks"></a>
## <a name="which-method-do-i-call"></a><span data-ttu-id="d5817-610">どの方法を呼び出すか。</span><span class="sxs-lookup"><span data-stu-id="d5817-610">Which method do I call?</span></span>

|<span data-ttu-id="d5817-611">終了</span><span class="sxs-lookup"><span data-stu-id="d5817-611">To</span></span>|<span data-ttu-id="d5817-612">呼び出しまたは使用</span><span class="sxs-lookup"><span data-stu-id="d5817-612">Call or use</span></span>|
|--------|-----------------|
|<span data-ttu-id="d5817-613">文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-613">Create a string.</span></span>|<span data-ttu-id="d5817-614">文字列リテラルまたは既存の文字列からの割り当て ([例](#Ctor1_Example))</span><span class="sxs-lookup"><span data-stu-id="d5817-614">Assignment from a string literal or an existing string ([example](#Ctor1_Example))</span></span>|
|<span data-ttu-id="d5817-615">文字配列全体から文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-615">Create a string from an entire character array.</span></span>|<span data-ttu-id="d5817-616"><xref:System.String.%23ctor%28System.Char%5B%5D%29> ([例](#Ctor2_Example))</span><span class="sxs-lookup"><span data-stu-id="d5817-616"><xref:System.String.%23ctor%28System.Char%5B%5D%29> ([example](#Ctor2_Example))</span></span>|
|<span data-ttu-id="d5817-617">文字配列の一部から文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-617">Create a string from a portion of a character array.</span></span>|<span data-ttu-id="d5817-618"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> ([例](#Ctor3_Example))</span><span class="sxs-lookup"><span data-stu-id="d5817-618"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> ([example](#Ctor3_Example))</span></span>|
|<span data-ttu-id="d5817-619">同じ文字を複数回繰り返す文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-619">Create a string that repeats the same character multiple times.</span></span>|<span data-ttu-id="d5817-620"><xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> ([例](#Ctor3_Example))</span><span class="sxs-lookup"><span data-stu-id="d5817-620"><xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> ([example](#Ctor3_Example))</span></span>|
|<span data-ttu-id="d5817-621">Unicode またはワイド文字配列へのポインターから文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-621">Create a string from a pointer to a Unicode or wide character array.</span></span>|<xref:System.String.%23ctor%28System.Char%2A%29>|
|<span data-ttu-id="d5817-622">ポインターを使用して、Unicode またはワイド文字配列の一部から文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-622">Create a string from a portion of a Unicode or wide character array by using its pointer.</span></span>|<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29>|
|<span data-ttu-id="d5817-623">C++ `char` 配列から文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-623">Create a string from a C++ `char` array.</span></span>|<span data-ttu-id="d5817-624"><xref:System.String.%23ctor%28System.SByte%2A%29>、<xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29></span><span class="sxs-lookup"><span data-stu-id="d5817-624"><xref:System.String.%23ctor%28System.SByte%2A%29>, <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29></span></span><br /><br /> <span data-ttu-id="d5817-625">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-625">-or-</span></span><br /><br /> <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%2CSystem.Text.Encoding%29>|
|<span data-ttu-id="d5817-626">ASCII 文字から文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-626">Create a string from ASCII characters.</span></span>|<xref:System.Text.ASCIIEncoding.GetString%2A?displayProperty=nameWithType>|

<a name="Creating_Strings"></a>
## <a name="create-strings"></a><span data-ttu-id="d5817-627">文字列の作成</span><span class="sxs-lookup"><span data-stu-id="d5817-627">Create strings</span></span>
 <span data-ttu-id="d5817-628">プログラムによって文字列を作成するために最もよく使用される手法は、[この例](#Ctor1_Example)に示すように単純な代入です。</span><span class="sxs-lookup"><span data-stu-id="d5817-628">The most commonly used technique for creating strings programmatically is simple assignment, as illustrated in [this example](#Ctor1_Example).</span></span> <span data-ttu-id="d5817-629"><xref:System.String> クラスには、次の値から文字列を作成できる4種類のコンストラクターオーバーロードも含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-629">The <xref:System.String> class also includes four types of constructor overloads that let you create strings from the following values:</span></span>

-   <span data-ttu-id="d5817-630">文字配列から (UTF-16 でエンコードされた文字の配列)。</span><span class="sxs-lookup"><span data-stu-id="d5817-630">From a character array (an array of UTF-16-encoded characters).</span></span> <span data-ttu-id="d5817-631">配列全体またはその一部の文字から新しい <xref:System.String> オブジェクトを作成できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-631">You can create a new <xref:System.String> object from the characters in the entire array or a portion of it.</span></span> <span data-ttu-id="d5817-632"><xref:System.String.%23ctor%28System.Char%5B%5D%29> コンストラクターは、配列内のすべての文字を新しい文字列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5817-632">The <xref:System.String.%23ctor%28System.Char%5B%5D%29> constructor copies all the characters in the array to the new string.</span></span> <span data-ttu-id="d5817-633"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> コンストラクターは、インデックス `startIndex` の文字をインデックス `startIndex` + `length`-1 から新しい文字列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5817-633">The <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor copies the characters from index `startIndex` to index `startIndex` + `length` - 1 to the new string.</span></span> <span data-ttu-id="d5817-634">`length` が0の場合、新しい文字列の値は <xref:System.String.Empty?displayProperty=nameWithType>ます。</span><span class="sxs-lookup"><span data-stu-id="d5817-634">If `length` is zero, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

     <span data-ttu-id="d5817-635">同じ値を持つ文字列をコードで繰り返しインスタンス化する場合は、文字列を作成する別の方法を使用して、アプリケーションのパフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-635">If your code repeatedly instantiates strings that have the same value, you can improve application performance by using an alternate means of creating strings.</span></span> <span data-ttu-id="d5817-636">詳細については、「[反復する文字列の処理](#Repetitive)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-636">For more information, see [Handling repetitive strings](#Repetitive).</span></span>

-   <span data-ttu-id="d5817-637"><xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> コンストラクターを使用して、0回、1回、またはそれ以上に複製された単一の文字から。</span><span class="sxs-lookup"><span data-stu-id="d5817-637">From a single character that is duplicated zero, one, or more times, by using the <xref:System.String.%23ctor%28System.Char%2CSystem.Int32%29> constructor.</span></span> <span data-ttu-id="d5817-638">`count` が0の場合、新しい文字列の値は <xref:System.String.Empty?displayProperty=nameWithType>ます。</span><span class="sxs-lookup"><span data-stu-id="d5817-638">If `count` is zero, the value of the new string is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

-   <span data-ttu-id="d5817-639"><xref:System.String.%23ctor%28System.Char%2A%29> または <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> コンストラクターを使用して、null で終わる文字配列へのポインターから。</span><span class="sxs-lookup"><span data-stu-id="d5817-639">From a pointer to a null-terminated character array, by using the <xref:System.String.%23ctor%28System.Char%2A%29> or <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> constructor.</span></span> <span data-ttu-id="d5817-640">文字列を初期化するために、配列全体または指定された範囲を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-640">Either the entire array or a specified range can be used to initialize the string.</span></span> <span data-ttu-id="d5817-641">コンストラクターは、指定されたポインターまたは指定されたポインターから始まる Unicode 文字のシーケンスをコピーし、`startIndex` の配列の末尾または `length` 文字をコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5817-641">The constructor copies a sequence of Unicode characters starting from the specified pointer or from the specified pointer plus `startIndex` and continuing to the end of the array or for `length` characters.</span></span> <span data-ttu-id="d5817-642">`value` が null ポインターの場合、または `length` が0の場合、コンストラクターは <xref:System.String.Empty?displayProperty=nameWithType>値を持つ文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-642">If `value` is a null pointer or `length` is zero, the constructor creates a string whose value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-643">コピー操作が配列の末尾に進み、配列が null で終了していない場合、コンストラクターの動作はシステムに依存します。</span><span class="sxs-lookup"><span data-stu-id="d5817-643">If the copy operation proceeds to the end of the array and the array is not null-terminated, the constructor behavior is system-dependent.</span></span> <span data-ttu-id="d5817-644">このような状況では、アクセス違反が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-644">Such a condition might cause an access violation.</span></span>

     <span data-ttu-id="d5817-645">配列に埋め込まれた null 文字 (U + 0000 または ' \ 0 ') が含まれていて、<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> オーバーロードが呼び出された場合、文字列インスタンスには、埋め込み null を含む `length` 文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-645">If the array contains any embedded null characters (U+0000 or '\0') and the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> overload is called, the string instance contains `length` characters including any embedded nulls.</span></span> <span data-ttu-id="d5817-646">次の例では、2つの null 文字を含む10個の要素の配列へのポインターが <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> メソッドに渡されるとどうなるかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-646">The following example shows what happens when a pointer to an array of 10 elements that includes two null characters is passed to the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="d5817-647">アドレスが配列の先頭で、配列内のすべての要素が文字列に追加されるため、コンストラクターは、2つの埋め込み null を含む10文字の文字列をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-647">Because the address is the beginning of the array and all elements in the array are to be added to the string, the constructor instantiates a string with ten characters, including two embedded nulls.</span></span> <span data-ttu-id="d5817-648">一方、同じ配列が <xref:System.String.%23ctor%28System.Char%2A%29> コンストラクターに渡された場合、結果は、最初の null 文字を含まない4文字の文字列になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-648">On the other hand, if the same array is passed to the <xref:System.String.%23ctor%28System.Char%2A%29> constructor, the result is a four-character string that does not include the first null character.</span></span>

     [!code-cpp[System.String.ctor#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/chptrctor_null.cpp#5)]
     [!code-csharp[System.String.ctor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/chptrctor_null.cs#5)]

     <span data-ttu-id="d5817-649">配列には Unicode 文字を含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-649">The array must contain Unicode characters.</span></span> <span data-ttu-id="d5817-650">でC++は、これは、文字配列をマネージ <xref:System.Char>[] 型またはアンマネージ`wchar_t`[] 型として定義する必要があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="d5817-650">In C++, this means that the character array must be defined either as the managed <xref:System.Char>[] type or the unmanaged`wchar_t`[] type.</span></span>

     <span data-ttu-id="d5817-651"><xref:System.String.%23ctor%28System.Char%2A%29> のオーバーロードが呼び出され、配列が null で終了していない場合、または <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> のオーバーロードが呼び出されていて、`startIndex` + の `length`が文字シーケンスに割り当てられたメモリの範囲を超えている場合、コンストラクターの動作はシステムに依存し、アクセス違反が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-651">If the <xref:System.String.%23ctor%28System.Char%2A%29> overload is called and the array is not null-terminated, or if the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> overload is called and `startIndex` + `length`-1 includes a range that it outside the memory allocated for the sequence of characters, the behavior of the constructor is system-dependent, and an access violation may occur.</span></span> <span data-ttu-id="d5817-652">また、Intel Itanium プロセッサでは、<xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> コンストラクターの呼び出しによって <xref:System.DataMisalignedException> 例外がスローされる場合があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-652">In addition, on the Intel Itanium processor, calls to the <xref:System.String.%23ctor%28System.Char%2A%2CSystem.Int32%2CSystem.Int32%29> constructor may throw a <xref:System.DataMisalignedException> exception.</span></span> <span data-ttu-id="d5817-653">このエラーが発生した場合は、代わりに <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-653">If this occurs, call the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> instead.</span></span>

-   <span data-ttu-id="d5817-654">符号付きバイト配列へのポインターから。</span><span class="sxs-lookup"><span data-stu-id="d5817-654">From a pointer to a signed byte array.</span></span> <span data-ttu-id="d5817-655">文字列を初期化するために、配列全体または指定された範囲を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-655">Either the entire array or a specified range can be used to initialize the string.</span></span> <span data-ttu-id="d5817-656">バイトシーケンスは、既定のコードページエンコーディングを使用して解釈できます。また、コンストラクター呼び出しでエンコーディングを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-656">The sequence of bytes can be interpreted by using the default code page encoding, or an encoding can be specified in the constructor call.</span></span> <span data-ttu-id="d5817-657">コンストラクターが、null で終わることのない配列全体から文字列をインスタンス化しようとした場合、または `value` + `value``startIndex`  + の配列の範囲が、配列に割り当てられたメモリの範囲を超えている場合は、このコンストラクターの動作がシステムに依存し、アクセス違反が発生する可能性があります。`startIndex` + `length`</span><span class="sxs-lookup"><span data-stu-id="d5817-657">If the constructor tries to instantiate a string from an entire array that is not null-terminated, or if the range of the array from `value` + `startIndex` to `value` + `startIndex` + `length` -1 is outside of the memory allocated for the array, the behavior of this constructor is system-dependent, and an access violation may occur.</span></span>

     <span data-ttu-id="d5817-658">次の例に示すように、パラメーターとして符号付きバイト配列を含むC++ 3 つのコンストラクターは、主に `char` 配列を文字列に変換するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-658">The three constructors that include a signed byte array as a parameter are designed primarily to convert a C++ `char` array to a string, as shown in this example:</span></span>

     [!code-cpp[System.String.Ctor#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/sbyte_ctor1.cpp#4)]

     <span data-ttu-id="d5817-659">配列に null 文字 (' \ 0 ')、または値が0で <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> オーバーロードが呼び出されるバイトが含まれている場合、文字列インスタンスには、埋め込み null を含む `length` 文字が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-659">If the array contains any null characters ('\0') or bytes whose value is 0 and the <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> overload is called, the string instance contains `length` characters including any embedded nulls.</span></span> <span data-ttu-id="d5817-660">次の例では、2つの null 文字を含む10個の要素の配列へのポインターが <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> メソッドに渡されるとどうなるかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-660">The following example shows what happens when a pointer to an array of 10 elements that includes two null characters is passed to the <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="d5817-661">アドレスが配列の先頭で、配列内のすべての要素が文字列に追加されるため、コンストラクターは、2つの埋め込み null を含む10文字の文字列をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-661">Because the address is the beginning of the array and all elements in the array are to be added to the string, the constructor instantiates a string with ten characters, including two embedded nulls.</span></span> <span data-ttu-id="d5817-662">一方、同じ配列が <xref:System.String.%23ctor%28System.SByte%2A%29> コンストラクターに渡された場合、結果は、最初の null 文字を含まない4文字の文字列になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-662">On the other hand, if the same array is passed to the <xref:System.String.%23ctor%28System.SByte%2A%29> constructor, the result is a four-character string that does not include the first null character.</span></span>

     [!code-cpp[System.String.ctor#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/ptrctor_null.cpp#6)]
     [!code-csharp[System.String.ctor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ptrctor_null.cs#6)]

     <span data-ttu-id="d5817-663"><xref:System.String.%23ctor%28System.SByte%2A%29> コンストラクターと <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> コンストラクターは、既定の ANSI コードページを使用して `value` を解釈するため、同じバイト配列を持つこれらのコンストラクターを呼び出すと、異なるシステムで異なる値を持つ文字列が作成される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-663">Because the <xref:System.String.%23ctor%28System.SByte%2A%29> and <xref:System.String.%23ctor%28System.SByte%2A%2CSystem.Int32%2CSystem.Int32%29> constructors interpret `value` by using the default ANSI code page, calling these constructors with identical byte arrays may create strings that have different values on different systems.</span></span>

<a name="Repetitive"></a>
## <a name="handle-repetitive-strings"></a><span data-ttu-id="d5817-664">反復する文字列の処理</span><span class="sxs-lookup"><span data-stu-id="d5817-664">Handle repetitive strings</span></span>
 <span data-ttu-id="d5817-665">テキストストリームを解析またはデコードするアプリでは、多くの場合、<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> コンストラクターまたは <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> メソッドを使用して、文字のシーケンスを文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-665">Apps that parse or decode streams of text often use the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor or the <xref:System.Text.StringBuilder.Append%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to convert sequences of characters into a string.</span></span> <span data-ttu-id="d5817-666">1つの文字列を作成して再利用する代わりに、同じ値を使用して新しい文字列を繰り返し作成すると、メモリが浪費されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-666">Repeatedly creating new strings with the same value instead of creating and reusing one string wastes memory.</span></span> <span data-ttu-id="d5817-667"><xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> コンストラクターを呼び出すことによって同じ文字列値を繰り返し作成する可能性が高い場合は、その同じ文字列値を事前に把握していなくても、参照テーブルを使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-667">If you are likely to create the same string value repeatedly by calling the <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor, even if you don't know in advance what those identical string values may be, you can use a lookup table instead.</span></span>

 <span data-ttu-id="d5817-668">たとえば、XML タグと属性を含むファイルから文字のストリームを読み取って解析したとします。</span><span class="sxs-lookup"><span data-stu-id="d5817-668">For example, suppose you read and parse a stream of characters from a file that contains XML tags and attributes.</span></span> <span data-ttu-id="d5817-669">ストリームを解析すると、特定のトークン (つまり、シンボルの意味を持つ文字のシーケンス) が繰り返し発生します。</span><span class="sxs-lookup"><span data-stu-id="d5817-669">When you parse the stream, you repeatedly encounter certain tokens (that is, sequences of characters that have a symbolic meaning).</span></span> <span data-ttu-id="d5817-670">文字列 "0"、"1"、"true"、および "false" に相当するトークンは、XML ストリームで頻繁に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-670">Tokens equivalent to the strings "0", "1", "true", and "false" are likely to occur frequently in an XML stream.</span></span>

 <span data-ttu-id="d5817-671">各トークンを新しい文字列に変換するのではなく、一般的に発生する文字列を保持する <xref:System.Xml.NameTable?displayProperty=nameWithType> オブジェクトを作成できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-671">Instead of converting each token into a new string, you can create a <xref:System.Xml.NameTable?displayProperty=nameWithType> object to hold commonly occurring strings.</span></span> <span data-ttu-id="d5817-672"><xref:System.Xml.NameTable> オブジェクトを使用すると、一時メモリを割り当てずに格納されている文字列を取得するため、パフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="d5817-672">The <xref:System.Xml.NameTable> object improves performance, because it retrieves stored strings without allocating temporary memory.</span></span> <span data-ttu-id="d5817-673">トークンが検出されたら、<xref:System.Xml.NameTable.Get%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> メソッドを使用してテーブルからトークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-673">When you encounter a token, use the <xref:System.Xml.NameTable.Get%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to retrieve the token from the table.</span></span> <span data-ttu-id="d5817-674">トークンが存在する場合、メソッドは対応する文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-674">If the token exists, the method returns the corresponding string.</span></span> <span data-ttu-id="d5817-675">トークンが存在しない場合は、<xref:System.Xml.NameTable.Add%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> メソッドを使用して、トークンをテーブルに挿入し、対応する文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-675">If the token does not exist, use the <xref:System.Xml.NameTable.Add%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to insert the token into the table and to get the corresponding string.</span></span>

<a name="Ctor1_Example"></a>
## <a name="example-1-use-string-assignment"></a><span data-ttu-id="d5817-676">例 1: 文字列の割り当てを使用する</span><span class="sxs-lookup"><span data-stu-id="d5817-676">Example 1: Use string assignment</span></span>
 <span data-ttu-id="d5817-677">次の例では、文字列リテラルを割り当てることによって新しい文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-677">The following example creates a new string by assigning it a string literal.</span></span> <span data-ttu-id="d5817-678">最初の文字列の値を割り当てることによって、2番目の文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-678">It creates a second string by assigning the value of the first string to it.</span></span> <span data-ttu-id="d5817-679">これらは、新しい <xref:System.String> オブジェクトをインスタンス化する最も一般的な2つの方法です。</span><span class="sxs-lookup"><span data-stu-id="d5817-679">These are the two most common ways to instantiate a new <xref:System.String> object.</span></span>

 [!code-cpp[System.String.ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/assignment.cpp#1)]
 [!code-csharp[System.String.ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.String.ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.ctor/vb/ctor1.vb#1)]

<a name="Ctor2_Example"></a>
## <a name="example-2-use-a-character-array"></a><span data-ttu-id="d5817-680">例 2: 文字配列を使用する</span><span class="sxs-lookup"><span data-stu-id="d5817-680">Example 2: Use a character array</span></span>
 <span data-ttu-id="d5817-681">次の例は、文字配列から新しい <xref:System.String> オブジェクトを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-681">The following example demonstrates how to create a new <xref:System.String> object from a character array.</span></span>

 [!code-cpp[stringexample1#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#1)]
 [!code-csharp[stringexample1#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#1)]
 [!code-vb[stringexample1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringexample1/VB/source.vb#1)]

<a name="Ctor3_Example"></a>
## <a name="example-3-use-a-portion-of-a-character-array-and-repeating-a-single-character"></a><span data-ttu-id="d5817-682">例 3: 文字配列の一部を使用し、1つの文字を繰り返す</span><span class="sxs-lookup"><span data-stu-id="d5817-682">Example 3: Use a portion of a character array and repeating a single character</span></span>
 <span data-ttu-id="d5817-683">次の例では、文字配列の一部から新しい <xref:System.String> オブジェクトを作成する方法と、1つの文字の複数回の出現を含む新しい <xref:System.String> オブジェクトを作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-683">The following example demonstrates how to create a new <xref:System.String> object from a portion of a character array, and how to create a new <xref:System.String> object that contains multiple occurrences of a single character.</span></span>

 [!code-cpp[stringexample1#3](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#3)]
 [!code-csharp[stringexample1#3](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#3)]
 [!code-vb[stringexample1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringexample1/VB/source.vb#3)]

<a name="Ctor4_Example"></a>
## <a name="example-4-use-a-pointer-to-a-character-array"></a><span data-ttu-id="d5817-684">例 4: 文字配列へのポインターを使用する</span><span class="sxs-lookup"><span data-stu-id="d5817-684">Example 4: Use a pointer to a character array</span></span>
 <span data-ttu-id="d5817-685">次の例は、文字の配列へのポインターから新しい <xref:System.String> オブジェクトを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-685">The following example demonstrates how to create a new <xref:System.String> object from a pointer to an array of characters.</span></span> <span data-ttu-id="d5817-686">このC#例は、`/unsafe` コンパイラスイッチを使用してコンパイルする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-686">The C# example must be compiled by using the `/unsafe` compiler switch.</span></span>

 [!code-cpp[System.String.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/char1_ctor.cpp#2)]
 [!code-csharp[System.String.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/ctor2.cs#2)]

<a name="Ctor5_Example"></a>
## <a name="example-5-instantiate-a-string-from-a-pointer-and-a-range-of-an-array"></a><span data-ttu-id="d5817-687">例 5: ポインターと配列の範囲から文字列をインスタンス化する</span><span class="sxs-lookup"><span data-stu-id="d5817-687">Example 5: Instantiate a string from a pointer and a range of an array</span></span>
 <span data-ttu-id="d5817-688">次の例では、ピリオドまたは感嘆符のいずれかの文字配列の要素を調べます。</span><span class="sxs-lookup"><span data-stu-id="d5817-688">The following example examines the elements of a character array for either a period or an exclamation point.</span></span> <span data-ttu-id="d5817-689">見つかった場合は、区切り記号の前にある配列内の文字から文字列をインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-689">If one is found, it instantiates a string from the characters in the array that precede the punctuation symbol.</span></span> <span data-ttu-id="d5817-690">そうでない場合は、配列の内容全体を含む文字列がインスタンス化されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-690">If not, it instantiates a string with the entire contents of the array.</span></span> <span data-ttu-id="d5817-691">このC#例は、`/unsafe` コンパイラスイッチを使用してコンパイルする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-691">The C# example must be compiled using the `/unsafe` compiler switch.</span></span>

 [!code-cpp[System.String.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.ctor/cpp/char2_ctor.cpp#3)]
 [!code-csharp[System.String.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.ctor/cs/char2_ctor.cs#3)]

<a name="Ctor6_Example"></a>
## <a name="example-6-instantiate-a-string-from-a-pointer-to-a-signed-byte-array"></a><span data-ttu-id="d5817-692">例 6: 符号付きバイト配列へのポインターから文字列をインスタンス化する</span><span class="sxs-lookup"><span data-stu-id="d5817-692">Example 6: Instantiate a string from a pointer to a signed byte array</span></span>
 <span data-ttu-id="d5817-693">次の例は、<xref:System.String.%23ctor%28System.SByte%2A%29> コンストラクターを使用して <xref:System.String> クラスのインスタンスを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-693">The following example demonstrates how you can create an instance of the <xref:System.String> class with the <xref:System.String.%23ctor%28System.SByte%2A%29> constructor.</span></span>

 [!code-cpp[stringexample1#2](~/samples/snippets/cpp/VS_Snippets_CLR/stringexample1/CPP/source.cpp#2)]
 [!code-csharp[stringexample1#2](~/samples/snippets/csharp/VS_Snippets_CLR/stringexample1/CS/source.cs#2)]

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char* value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char* value);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;char&gt; -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-694">Unicode 文字の null で終わる配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="d5817-694">A pointer to a null-terminated array of Unicode characters.</span></span></param>
        <summary><span data-ttu-id="d5817-695"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、指定した Unicode 文字配列を指すポインターにより示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-695">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  <span data-ttu-id="d5817-696">このコンストラクターとその他の `String` コンストラクターのオーバーロードに関する例と包括的な使用方法については、「<xref:System.String.%23ctor%2A> コンストラクターの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-696">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-697">現在のプロセスは、アドレス指定されたすべての文字に対する読み取りアクセス権を持っているわけではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-697">The current process does not have read access to all the addressed characters.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-698"><paramref name="value" /> が正しくない Unicode 文字を含む配列を指定しているか、<paramref name="value" /> が 64000 未満のアドレスを指定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-698"><paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> specifies an address less than 64000.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(cli::array &lt;char&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new string : char[] -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-699">Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-699">An array of Unicode characters.</span></span></param>
        <summary><span data-ttu-id="d5817-700"><see cref="T:System.String" /> クラスの新しいインスタンスを、指定した文字配列で示された Unicode 文字に初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-700">Initializes a new instance of the <see cref="T:System.String" /> class to the Unicode characters indicated in the specified character array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  <span data-ttu-id="d5817-701">このコンストラクターとその他の `String` コンストラクターのオーバーロードに関する例と包括的な使用方法については、「<xref:System.String.%23ctor%2A> コンストラクターの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-701">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="new string : ReadOnlySpan&lt;char&gt; -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-702">Unicode 文字の読み取り専用スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-702">A read-only span of Unicode characters.</span></span></param>
        <summary><span data-ttu-id="d5817-703"><see cref="T:System.String" /> クラスの新しいインスタンスを、指定した読み取り専用スパンで示された Unicode 文字に初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-703">Initializes a new instance of the <see cref="T:System.String" /> class to the Unicode characters indicated in the specified read-only span.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;sbyte&gt; -&gt; string" Usage="new System.string value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-704">終端が null の 8 ビット符号付き整数の配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="d5817-704">A pointer to a null-terminated array of 8-bit signed integers.</span></span> <span data-ttu-id="d5817-705">整数は、現在のシステム コード ページ エンコーディング (つまり、<see cref="P:System.Text.Encoding.Default" /> が指定したエンコーディング) を使用して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-705">The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</span></span></param>
        <summary><span data-ttu-id="d5817-706"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、8 ビット符号付き整数の配列を指すポインターにより示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-706">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a pointer to an array of 8-bit signed integers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  <span data-ttu-id="d5817-707">このコンストラクターとその他の `String` コンストラクターのオーバーロードに関する例と包括的な使用方法については、「<xref:System.String.%23ctor%2A> コンストラクターの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-707">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-708"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-708"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-709"><see cref="T:System.String" /> の新しいインスタンス を、<paramref name="value" /> を使用して初期化できませんでした。<paramref name="value" /> が ANSI でエンコードされていると想定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-709">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-710"><paramref name="value" /> の Null 終端文字によって決定される初期化する新しい文字列の長さが、大きすぎて割り当てられません。</span><span class="sxs-lookup"><span data-stu-id="d5817-710">The length of the new string to initialize, which is determined by the null termination character of <paramref name="value" />, is too large to allocate.</span></span></exception>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="d5817-711"><paramref name="value" /> に指定されたアドレスが正しくありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-711"><paramref name="value" /> specifies an invalid address.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char c, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char c, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (c As Char, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char c, int count);" />
      <MemberSignature Language="F#" Value="new string : char * int -&gt; string" Usage="new System.string (c, count)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="d5817-712">Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-712">A Unicode character.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-713"><paramref name="c" /> の発生回数。</span><span class="sxs-lookup"><span data-stu-id="d5817-713">The number of times <paramref name="c" /> occurs.</span></span></param>
        <summary><span data-ttu-id="d5817-714"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、指定した回数だけ繰り返した指定の Unicode 文字が示す値に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-714">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified Unicode character repeated a specified number of times.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  <span data-ttu-id="d5817-715">このコンストラクターとその他の `String` コンストラクターのオーバーロードに関する例と包括的な使用方法については、「<xref:System.String.%23ctor%2A> コンストラクターの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-715">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-716"><paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-716"><paramref name="count" /> is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char* value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(char* value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;char&gt; * int * int -&gt; string" Usage="new System.string (value, startIndex, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-717">Unicode 文字の配列を指すポインター。</span><span class="sxs-lookup"><span data-stu-id="d5817-717">A pointer to an array of Unicode characters.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-718"><paramref name="value" /> 内の開始位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-718">The starting position within <paramref name="value" />.</span></span></param>
        <param name="length"><span data-ttu-id="d5817-719">使用する <paramref name="value" /> 内の文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-719">The number of characters within <paramref name="value" /> to use.</span></span></param>
        <summary><span data-ttu-id="d5817-720"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、Unicode 文字の配列を指す指定のポインター、配列内の開始文字位置、および長さにより示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-720">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  <span data-ttu-id="d5817-721">このコンストラクターとその他の `String` コンストラクターのオーバーロードに関する例と包括的な使用方法については、「<xref:System.String.%23ctor%2A> コンストラクターの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-721">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-722"><paramref name="startIndex" /> または <paramref name="length" /> が 0 未満であるか、<paramref name="value" /> + <paramref name="startIndex" /> によりポインターのオーバーフローが発生するか、または現在のプロセスにはすべてのアドレス指定された文字に対する読み取りアクセス許可がありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-722"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero, <paramref name="value" /> + <paramref name="startIndex" /> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-723"><paramref name="value" /> が正しくない Unicode 文字を含む配列を指定しているか、<paramref name="value" /> + <paramref name="startIndex" /> が 64000 未満のアドレスを指定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-723"><paramref name="value" /> specifies an array that contains an invalid Unicode character, or <paramref name="value" /> + <paramref name="startIndex" /> specifies an address less than 64000.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (char[] value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char[] value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Char(), startIndex As Integer, length As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(cli::array &lt;char&gt; ^ value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="new string : char[] * int * int -&gt; string" Usage="new System.string (value, startIndex, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-724">Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-724">An array of Unicode characters.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-725"><paramref name="value" /> 内の開始位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-725">The starting position within <paramref name="value" />.</span></span></param>
        <param name="length"><span data-ttu-id="d5817-726">使用する <paramref name="value" /> 内の文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-726">The number of characters within <paramref name="value" /> to use.</span></span></param>
        <summary><span data-ttu-id="d5817-727"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、Unicode 文字の配列、配列内の開始文字位置、および長さにより示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-727">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  <span data-ttu-id="d5817-728">このコンストラクターとその他の `String` コンストラクターのオーバーロードに関する例と包括的な使用方法については、「<xref:System.String.%23ctor%2A> コンストラクターの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-728">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-729"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-729"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-730"><paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-730"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>

<span data-ttu-id="d5817-731">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-731">-or-</span></span>

<span data-ttu-id="d5817-732"><paramref name="startIndex" /> と <paramref name="length" /> の合計が、<paramref name="value" /> にある要素の数を超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-732">The sum of <paramref name="startIndex" /> and <paramref name="length" /> is greater than the number of elements in <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value, int startIndex, int length);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;sbyte&gt; * int * int -&gt; string" Usage="new System.string (value, startIndex, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-733">8 ビット符号付き整数の配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="d5817-733">A pointer to an array of 8-bit signed integers.</span></span> <span data-ttu-id="d5817-734">整数は、現在のシステム コード ページ エンコーディング (つまり、<see cref="P:System.Text.Encoding.Default" /> が指定したエンコーディング) を使用して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-734">The integers are interpreted using the current system code page encoding (that is, the encoding specified by <see cref="P:System.Text.Encoding.Default" />).</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-735"><paramref name="value" /> 内の開始位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-735">The starting position within <paramref name="value" />.</span></span></param>
        <param name="length"><span data-ttu-id="d5817-736">使用する <paramref name="value" /> 内の文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-736">The number of characters within <paramref name="value" /> to use.</span></span></param>
        <summary><span data-ttu-id="d5817-737"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、8 ビット符号付き整数の配列を指す指定のポインター、配列内の開始位置、および長さにより示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-737">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, and a length.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  <span data-ttu-id="d5817-738">このコンストラクターとその他の `String` コンストラクターのオーバーロードに関する例と包括的な使用方法については、「<xref:System.String.%23ctor%2A> コンストラクターの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-738">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-739"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-739"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-740"><paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-740"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>

<span data-ttu-id="d5817-741">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-741">-or-</span></span>

<span data-ttu-id="d5817-742"><paramref name="value" /> + <paramref name="startIndex" /> で指定されたアドレスが現在のプラットフォームにとって大きすぎて、アドレス計算がオーバーフローしました。</span><span class="sxs-lookup"><span data-stu-id="d5817-742">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.</span></span>

<span data-ttu-id="d5817-743">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-743">-or-</span></span>

<span data-ttu-id="d5817-744">初期化する新しい文字列の長さが大きすぎて割り当てられません。</span><span class="sxs-lookup"><span data-stu-id="d5817-744">The length of the new string to initialize is too large to allocate.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-745"><paramref name="value" /> + <paramref name="startIndex" /> で指定されるアドレスは 64 K 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-745">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.</span></span>

<span data-ttu-id="d5817-746">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-746">-or-</span></span>

<span data-ttu-id="d5817-747"><see cref="T:System.String" /> の新しいインスタンスを、<paramref name="value" /> を使用して初期化できませんでした (<paramref name="value" /> が ANSI でエンコードされていると想定)。</span><span class="sxs-lookup"><span data-stu-id="d5817-747">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded in ANSI.</span></span></exception>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="d5817-748"><paramref name="value" />、<paramref name="startIndex" />、<paramref name="length" /> 全体で、正しくないアドレスを指定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-748"><paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public String (sbyte* value, int startIndex, int length, System.Text.Encoding enc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int8* value, int32 startIndex, int32 length, class System.Text.Encoding enc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; String(System::SByte* value, int startIndex, int length, System::Text::Encoding ^ enc);" />
      <MemberSignature Language="F#" Value="new string : nativeptr&lt;sbyte&gt; * int * int * System.Text.Encoding -&gt; string" Usage="new System.string (value, startIndex, length, enc)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.SByte*" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="length" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="enc" Type="System.Text.Encoding" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-749">8 ビット符号付き整数の配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="d5817-749">A pointer to an array of 8-bit signed integers.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-750"><paramref name="value" /> 内の開始位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-750">The starting position within <paramref name="value" />.</span></span></param>
        <param name="length"><span data-ttu-id="d5817-751">使用する <paramref name="value" /> 内の文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-751">The number of characters within <paramref name="value" /> to use.</span></span></param>
        <param name="enc"><span data-ttu-id="d5817-752"><paramref name="value" /> が参照する配列のエンコード方法を指定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-752">An object that specifies how the array referenced by <paramref name="value" /> is encoded.</span></span> <span data-ttu-id="d5817-753"><paramref name="enc" /> が <see langword="null" /> の場合は、ANSI エンコーディングが指定されていると見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-753">If <paramref name="enc" /> is <see langword="null" />, ANSI encoding is assumed.</span></span></param>
        <summary><span data-ttu-id="d5817-754"><see cref="T:System.String" /> クラスの新しいインスタンスを初期化し、8 ビット符号付き整数の配列を指す指定のポインター、配列内の開始位置、長さ、および <see cref="T:System.Text.Encoding" /> オブジェクトにより示される値に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-754">Initializes a new instance of the <see cref="T:System.String" /> class to the value indicated by a specified pointer to an array of 8-bit signed integers, a starting position within that array, a length, and an <see cref="T:System.Text.Encoding" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  <span data-ttu-id="d5817-755">このコンストラクターとその他の `String` コンストラクターのオーバーロードに関する例と包括的な使用方法については、「<xref:System.String.%23ctor%2A> コンストラクターの概要」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-755">For examples and comprehensive usage information about this and other `String` constructor overloads, see the <xref:System.String.%23ctor%2A> constructor summary.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-756"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-756"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-757"><paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-757"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>

<span data-ttu-id="d5817-758">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-758">-or-</span></span>

<span data-ttu-id="d5817-759"><paramref name="value" /> + <paramref name="startIndex" /> で指定されたアドレスが現在のプラットフォームにとって大きすぎて、アドレス計算がオーバーフローしました。</span><span class="sxs-lookup"><span data-stu-id="d5817-759">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is too large for the current platform; that is, the address calculation overflowed.</span></span>

<span data-ttu-id="d5817-760">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-760">-or-</span></span>

<span data-ttu-id="d5817-761">初期化する新しい文字列の長さが大きすぎて割り当てられません。</span><span class="sxs-lookup"><span data-stu-id="d5817-761">The length of the new string to initialize is too large to allocate.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-762"><paramref name="value" /> + <paramref name="startIndex" /> で指定されるアドレスは 64 K 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-762">The address specified by <paramref name="value" /> + <paramref name="startIndex" /> is less than 64K.</span></span>

<span data-ttu-id="d5817-763">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-763">-or-</span></span>

<span data-ttu-id="d5817-764"><see cref="T:System.String" /> の新しいインスタンスを、<paramref name="value" /> を使用して初期化できませんでした。<paramref name="value" /> が <paramref name="enc" /> の指定に従ってエンコードされていると想定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-764">A new instance of <see cref="T:System.String" /> could not be initialized using <paramref name="value" />, assuming <paramref name="value" /> is encoded as specified by <paramref name="enc" />.</span></span></exception>
        <exception cref="T:System.AccessViolationException"><span data-ttu-id="d5817-765"><paramref name="value" />、<paramref name="startIndex" />、<paramref name="length" /> 全体で、正しくないアドレスを指定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-765"><paramref name="value" />, <paramref name="startIndex" />, and <paramref name="length" /> collectively specify an invalid address.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Chars">
      <MemberSignature Language="C#" Value="public char this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Chars(int32)" />
      <MemberSignature Language="DocId" Value="P:System.String.Chars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Chars(index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char default[int] { char get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Chars(int) : char" Usage="System.string.Chars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="d5817-766">現在の文字列内の位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-766">A position in the current string.</span></span></param>
        <summary><span data-ttu-id="d5817-767">現在の <see cref="T:System.String" /> オブジェクト内の指定された位置にある <see cref="T:System.Char" /> オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-767">Gets the <see cref="T:System.Char" /> object at a specified position in the current <see cref="T:System.String" /> object.</span></span></summary>
        <value><span data-ttu-id="d5817-768"><paramref name="index" /> 位置にあるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-768">The object at position <paramref name="index" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-769">`index` パラメーターは0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-769">The `index` parameter is zero-based.</span></span>

 <span data-ttu-id="d5817-770">このプロパティは、`index` パラメーターによって指定された位置にある <xref:System.Char> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-770">This property returns the <xref:System.Char> object at the position specified by the `index` parameter.</span></span> <span data-ttu-id="d5817-771">ただし、Unicode 文字は複数の <xref:System.Char>で表される場合があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-771">However, a Unicode character might be represented by more than one <xref:System.Char>.</span></span> <span data-ttu-id="d5817-772"><xref:System.Globalization.StringInfo?displayProperty=nameWithType> クラスを使用して、<xref:System.Char> オブジェクトではなく Unicode 文字を操作します。</span><span class="sxs-lookup"><span data-stu-id="d5817-772">Use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> class to work with Unicode characters instead of <xref:System.Char> objects.</span></span> <span data-ttu-id="d5817-773">詳細については、「<xref:System.String> クラスの概要」の「Char オブジェクトと Unicode 文字」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-773">For more information, see the "Char Objects and Unicode Characters" section in the <xref:System.String> class overview.</span></span>

 <span data-ttu-id="d5817-774">でC#は、<xref:System.String.Chars%2A> プロパティはインデクサーです。</span><span class="sxs-lookup"><span data-stu-id="d5817-774">In C#, the <xref:System.String.Chars%2A> property is an indexer.</span></span> <span data-ttu-id="d5817-775">Visual Basic では、これは <xref:System.String> クラスの既定のプロパティです。</span><span class="sxs-lookup"><span data-stu-id="d5817-775">In Visual Basic, it is the default property of the <xref:System.String> class.</span></span> <span data-ttu-id="d5817-776">文字列内の各 <xref:System.Char> オブジェクトには、次のようなコードを使用してアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-776">Each <xref:System.Char> object in the string can be accessed by using code such as the following.</span></span>
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.chars/cs/chars1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.chars/vb/chars1.vb" id="Snippet1":::


 
## Examples
 <span data-ttu-id="d5817-777">次の例では、ルーチンでこのインデクサーを使用して文字列を検証する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-777">The following example demonstrates how you can use this indexer in a routine to validate a string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/Uri_IsHexDigit/CPP/uri_ishexdigit.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/Uri_IsHexDigit/CS/uri_ishexdigit.cs" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/Uri_IsHexDigit/VB/uri_ishexdigit.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="d5817-778"><paramref name="index" /> がこのオブジェクトの長さ以上か、0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-778"><paramref name="index" /> is greater than or equal to the length of this object or less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.GetEnumerator" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="string.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-779">この <see cref="T:System.String" />インスタンスへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-779">Returns a reference to this instance of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-780">この <see cref="T:System.String" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="d5817-780">This instance of <see cref="T:System.String" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-781">戻り値は、このインスタンスの独立したコピーではありません。これは、単に同じデータの別のビューです。</span><span class="sxs-lookup"><span data-stu-id="d5817-781">The return value is not an independent copy of this instance; it is simply another view of the same data.</span></span> <span data-ttu-id="d5817-782"><xref:System.String.Copy%2A> または <xref:System.String.CopyTo%2A> メソッドを使用して、このインスタンスと同じ値を持つ別の <xref:System.String> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-782">Use the <xref:System.String.Copy%2A> or <xref:System.String.CopyTo%2A> method to create a separate <xref:System.String> object with the same value as this instance.</span></span>

 <span data-ttu-id="d5817-783"><xref:System.String.Clone%2A> メソッドは単に既存の文字列インスタンスを返すため、直接呼び出す理由はほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-783">Because the <xref:System.String.Clone%2A> method simply returns the existing string instance, there is little reason to call it directly.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Copy(System.String)" />
        <altmember cref="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-784">指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、それらの相対位置を並べ替え順序で示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-784">Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-785"><xref:System.String.Compare%2A> メソッドのすべてのオーバーロードは、2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-785">All overloads of the <xref:System.String.Compare%2A> method return a 32-bit signed integer indicating the lexical relationship between the two comparands.</span></span>

|<span data-ttu-id="d5817-786">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-786">Value</span></span>|<span data-ttu-id="d5817-787">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-787">Condition</span></span>|
|-----------|---------------|
|<span data-ttu-id="d5817-788">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-788">Less than zero</span></span>|<span data-ttu-id="d5817-789">最初の部分文字列は、並べ替え順序の2番目の部分文字列の前にあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-789">The first substring precedes the second substring in the sort order.</span></span>|
|<span data-ttu-id="d5817-790">0</span><span class="sxs-lookup"><span data-stu-id="d5817-790">Zero</span></span>|<span data-ttu-id="d5817-791">部分文字列は並べ替え順序で同じ位置で発生するか、`length` はゼロです。</span><span class="sxs-lookup"><span data-stu-id="d5817-791">The substrings occur in the same position in the sort order, or `length` is zero.</span></span>|
|<span data-ttu-id="d5817-792">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-792">Greater than zero</span></span>|<span data-ttu-id="d5817-793">最初の部分文字列は、並べ替え順序において2番目の部分文字列の後に続きます。</span><span class="sxs-lookup"><span data-stu-id="d5817-793">The first substring follows the second substring in the sort order.</span></span>|

> [!WARNING]
>  <span data-ttu-id="d5817-794">可能な限り、<xref:System.StringComparison> パラメーターを含む <xref:System.String.Compare%2A> メソッドのオーバーロードを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-794">Whenever possible, you should call an overload of the <xref:System.String.Compare%2A> method that includes a <xref:System.StringComparison> parameter.</span></span> <span data-ttu-id="d5817-795">詳細については、「[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-795">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>

 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/best-practices-strings.md"><span data-ttu-id="d5817-796">.NET の文字列を使用するためのベスト プラクティス</span><span class="sxs-lookup"><span data-stu-id="d5817-796">Best Practices for Using Strings in .NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string -&gt; int" Usage="System.string.Compare (strA, strB)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="d5817-797">比較する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-797">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="d5817-798">比較する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-798">The second string to compare.</span></span></param>
        <summary><span data-ttu-id="d5817-799">指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、それらの相対位置を並べ替え順序で示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-799">Compares two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="d5817-800">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-800">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-801">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-801">Value</span></span>

 </term><description> <span data-ttu-id="d5817-802">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-802">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-803">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-803">Less than zero</span></span>

 </term><description><span data-ttu-id="d5817-804">並べ替え順序において<paramref name="strA" /> は <paramref name="strB" /> の前になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-804"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-805">0</span><span class="sxs-lookup"><span data-stu-id="d5817-805">Zero</span></span>

 </term><description><span data-ttu-id="d5817-806"><paramref name="strA" /> は並べ替え順序で、 <paramref name="strB" /> と同じ位置に出現します。</span><span class="sxs-lookup"><span data-stu-id="d5817-806"><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-807">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-807">Greater than zero</span></span>

 </term><description><span data-ttu-id="d5817-808">並べ替え順序において <paramref name="strA" /> は <paramref name="strB" /> の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-808"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-809">この比較では、現在のカルチャを使用して、大文字と小文字の規則や個々の文字のアルファベット順などのカルチャ固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-809">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="d5817-810">たとえば、カルチャは、文字の特定の組み合わせを1つの文字として扱うように指定したり、大文字と小文字を特定の方法で比較したり、文字の並べ替え順序がその前後の文字に依存するように指定したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-810">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>

 <span data-ttu-id="d5817-811">比較は、word の並べ替え規則を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-811">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="d5817-812">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-812">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

> [!WARNING]
>  <span data-ttu-id="d5817-813">文字列を比較する場合は、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> メソッドを呼び出す必要があります。そのためには、メソッドが使用する文字列比較の種類を明示的に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-813">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="d5817-814">詳細については、「[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-814">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>

 <span data-ttu-id="d5817-815">1つまたは両方の比較対照値を `null`できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-815">One or both comparands can be `null`.</span></span> <span data-ttu-id="d5817-816">定義上、空の文字列 ("") を含む任意の文字列は、null 参照より大きいと比較します。2つの null 参照が互いに等しいかどうかを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-816">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="d5817-817">比較は、非等値が検出された場合、または両方の文字列が比較された場合に終了します。</span><span class="sxs-lookup"><span data-stu-id="d5817-817">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="d5817-818">ただし、2つの文字列が1つの文字列の末尾と等しい場合、もう一方の文字列の文字数が残っている場合は、残りの文字を含む文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-818">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="d5817-819">戻り値は、最後に実行された比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="d5817-819">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="d5817-820">カルチャ固有の大文字と小文字の規則によって比較が影響を受ける場合、予期しない結果が発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-820">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="d5817-821">たとえば、トルコ語の場合、次の例では、トルコ語のファイルシステムでは、"file" の文字 "i" に言語の文字種の規則が使用されないため、間違った結果が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-821">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#10)]
 [!code-csharp[System.String.Compare#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#10)]
 [!code-vb[System.String.Compare#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#10)]

 <span data-ttu-id="d5817-822">序数の比較を使用してパス名を "file" と比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-822">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="d5817-823">これを行うための正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-823">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#11)]
 [!code-csharp[System.String.Compare#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#11)]
 [!code-vb[System.String.Compare#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#11)]



## Examples
 <span data-ttu-id="d5817-824">次の例では、<xref:System.String.Compare%28System.String%2CSystem.String%29> メソッドを呼び出して、3つの文字列セットを比較しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-824">The following example calls the <xref:System.String.Compare%28System.String%2CSystem.String%29> method to compare three sets of strings.</span></span>

 [!code-cpp[System.String.Compare#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/compare02.cpp#18)]
 [!code-csharp-interactive[System.String.Compare#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare02.cs#18)]
 [!code-vb[System.String.Compare#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare02.vb#18)]

 <span data-ttu-id="d5817-825">次の例では、`ReverseStringComparer` クラスは、<xref:System.String.Compare%2A> メソッドを使用して2つの文字列を評価する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-825">In the following example, the `ReverseStringComparer` class demonstrates how you can evaluate two strings with the <xref:System.String.Compare%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/ArrayList/CPP/ArrayListSample.cpp" id="Snippet7":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/ArrayList/CS/ArrayListSample.cs" interactive="try-dotnet" id="Snippet7":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/ArrayList/VB/ArrayListSample.vb" id="Snippet7":::

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-826">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-826">Character sets include ignorable characters.</span></span> <span data-ttu-id="d5817-827"><see cref="M:System.String.Compare(System.String,System.String)" /> メソッドでは、カルチャに依存した比較を実行するときに、このような文字は考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-827">The <see cref="M:System.String.Compare(System.String,System.String)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-828">たとえば、次のコードが [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、カルチャに依存した "animal" と "ani-正しくない" (ソフトハイフンまたは U + 00AD を使用) は、2つの文字列が等価であることを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-828">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a culture-sensitive comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>

<span data-ttu-id="d5817-829">[! code-csharp[# 21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare21.cs#21)][! code-vb[system.string # 21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare21.vb#21)]</span><span class="sxs-lookup"><span data-stu-id="d5817-829">[!code-csharp[System.String.Compare#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare21.cs#21)] [!code-vb[System.String.Compare#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare21.vb#21)]</span></span>

<span data-ttu-id="d5817-830">文字列比較で無視できる文字を認識するには、<see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> メソッドを呼び出し、`comparisonType` パラメーターに <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> のいずれかの値を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-830">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the `comparisonType` parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, ignoreCase As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * bool -&gt; int" Usage="System.string.Compare (strA, strB, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="strB" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="d5817-831">比較する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-831">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="d5817-832">比較する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-832">The second string to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d5817-833">比較時に大文字と小文字の区別を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-833"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="d5817-834">指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。比較時に、大文字と小文字を区別するかどうかを設定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-834">Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="d5817-835">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-835">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-836">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-836">Value</span></span>

 </term><description> <span data-ttu-id="d5817-837">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-837">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-838">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-838">Less than zero</span></span>

 </term><description><span data-ttu-id="d5817-839">並べ替え順序において<paramref name="strA" /> は <paramref name="strB" /> の前になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-839"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-840">0</span><span class="sxs-lookup"><span data-stu-id="d5817-840">Zero</span></span>

 </term><description><span data-ttu-id="d5817-841"><paramref name="strA" /> は並べ替え順序で、 <paramref name="strB" /> と同じ位置に出現します。</span><span class="sxs-lookup"><span data-stu-id="d5817-841"><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-842">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-842">Greater than zero</span></span>

 </term><description><span data-ttu-id="d5817-843">並べ替え順序において <paramref name="strA" /> は <paramref name="strB" /> の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-843"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-844">この比較では、現在のカルチャを使用して、大文字と小文字の規則や個々の文字のアルファベット順などのカルチャ固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-844">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="d5817-845">たとえば、カルチャは、文字の特定の組み合わせを1つの文字として扱うように指定したり、大文字と小文字を特定の方法で比較したり、文字の並べ替え順序がその前後の文字に依存するように指定したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-845">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>

 <span data-ttu-id="d5817-846">比較は、word の並べ替え規則を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-846">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="d5817-847">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-847">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

> [!WARNING]
>  <span data-ttu-id="d5817-848">文字列を比較する場合は、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> メソッドを呼び出す必要があります。そのためには、メソッドが使用する文字列比較の種類を明示的に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-848">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="d5817-849">詳細については、「[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-849">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>

 <span data-ttu-id="d5817-850">1つまたは両方の比較対照値を `null`できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-850">One or both comparands can be `null`.</span></span> <span data-ttu-id="d5817-851">定義上、空の文字列 ("") を含む任意の文字列は、null 参照より大きいと比較します。2つの null 参照が互いに等しいかどうかを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-851">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="d5817-852">比較は、非等値が検出された場合、または両方の文字列が比較された場合に終了します。</span><span class="sxs-lookup"><span data-stu-id="d5817-852">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="d5817-853">ただし、2つの文字列が1つの文字列の末尾と等しい場合、もう一方の文字列の文字数が残っている場合は、残りの文字を含む文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-853">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="d5817-854">戻り値は、最後に実行された比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="d5817-854">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="d5817-855">カルチャ固有の大文字と小文字の規則によって比較が影響を受ける場合、予期しない結果が発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-855">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="d5817-856">たとえば、トルコ語の場合、次の例では、トルコ語のファイルシステムでは、"file" の文字 "i" に言語の文字種の規則が使用されないため、間違った結果が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-856">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#12)]
 [!code-csharp[System.String.Compare#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#12)]
 [!code-vb[System.String.Compare#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#12)]

 <span data-ttu-id="d5817-857">序数の比較を使用してパス名を "file" と比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-857">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="d5817-858">これを行うための正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-858">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#13)]
 [!code-csharp[System.String.Compare#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#13)]
 [!code-vb[System.String.Compare#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#13)]



## Examples
 <span data-ttu-id="d5817-859">次の例は、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%29> メソッドが、文字列を比較するときに <xref:System.String.ToUpper%2A> または <xref:System.String.ToLower%2A> を使用することと同じであることを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-859">The following example demonstrates that the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%29> method is equivalent to using <xref:System.String.ToUpper%2A> or <xref:System.String.ToLower%2A> when comparing strings.</span></span>

 [!code-cpp[System.String.Compare#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/compare02.cpp#18)]
 [!code-csharp-interactive[System.String.Compare#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare02.cs#18)]
 [!code-vb[System.String.Compare#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare02.vb#18)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-860">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-860">Character sets include ignorable characters.</span></span> <span data-ttu-id="d5817-861"><see cref="M:System.String.Compare(System.String,System.String,System.Boolean)" /> メソッドでは、カルチャに依存した比較を実行するときに、このような文字は考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-861">The <see cref="M:System.String.Compare(System.String,System.String,System.Boolean)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-862">たとえば、次のコードが [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、カルチャに依存した大文字と小文字を区別しない "animal" と "Ani-----------0" (ソフトハイフンまたは U + 00AD を使用) は、2つの文字列が等価であることを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-862">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a culture-sensitive, case-insensitive comparison of "animal" with "Ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>

<span data-ttu-id="d5817-863">[! code-csharp[# 22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare22.cs#22)][! code-vb[system.string # 22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare22.vb#22)]</span><span class="sxs-lookup"><span data-stu-id="d5817-863">[!code-csharp[System.String.Compare#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare22.cs#22)] [!code-vb[System.String.Compare#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare22.vb#22)]</span></span>

<span data-ttu-id="d5817-864">文字列比較で無視できる文字を認識するには、<see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> メソッドを呼び出し、<paramref name="comparisonType" /> パラメーターに <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> のいずれかの値を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-864">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * StringComparison -&gt; int" Usage="System.string.Compare (strA, strB, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="strB" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="d5817-865">比較する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-865">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="d5817-866">比較する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-866">The second string to compare.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-867">比較で使用する規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-867">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="d5817-868">指定した規則を使用して、指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-868">Compares two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="d5817-869">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-869">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-870">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-870">Value</span></span>

 </term><description> <span data-ttu-id="d5817-871">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-871">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-872">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-872">Less than zero</span></span>

 </term><description><span data-ttu-id="d5817-873">並べ替え順序において<paramref name="strA" /> は <paramref name="strB" /> の前になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-873"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-874">0</span><span class="sxs-lookup"><span data-stu-id="d5817-874">Zero</span></span>

 </term><description><span data-ttu-id="d5817-875"><paramref name="strA" /> は並べ替え順序で、 <paramref name="strB" /> と同じ位置にあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-875"><paramref name="strA" /> is in the same position as <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-876">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-876">Greater than zero</span></span>

 </term><description><span data-ttu-id="d5817-877">並べ替え順序において <paramref name="strA" /> は <paramref name="strB" /> の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-877"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-878">`comparisonType` パラメーターは、比較で現在のカルチャまたはインバリアントカルチャを使用するか、比較対照値の大文字と小文字の区別を無視するか、または単語 (カルチャに依存する) または序数 (カルチャに依存しない) の並べ替え規則を使用するかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-878">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</span></span>

 <span data-ttu-id="d5817-879">1つまたは両方の比較対照値を `null`できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-879">One or both comparands can be `null`.</span></span> <span data-ttu-id="d5817-880">定義上、空の文字列 ("") を含む任意の文字列は、null 参照より大きいと比較します。2つの null 参照が互いに等しいかどうかを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-880">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="d5817-881">比較は、非等値が検出された場合、または両方の文字列が比較された場合に終了します。</span><span class="sxs-lookup"><span data-stu-id="d5817-881">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="d5817-882">ただし、2つの文字列が1つの文字列の末尾と等しい場合、もう一方の文字列の文字数が残っていると、残りの文字を含む文字列は大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-882">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.</span></span> <span data-ttu-id="d5817-883">戻り値は、最後に実行された比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="d5817-883">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="d5817-884">カルチャ固有の大文字と小文字の規則によって比較が影響を受ける場合、予期しない結果が発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-884">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="d5817-885">たとえば、トルコ語の場合、次の例では、トルコ語のファイルシステムでは、"file" の文字 "i" に言語の文字種の規則が使用されないため、間違った結果が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-885">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#16)]
 [!code-csharp[System.String.Compare#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#16)]
 [!code-vb[System.String.Compare#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#16)]

 <span data-ttu-id="d5817-886">序数の比較を使用してパス名を "file" と比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-886">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="d5817-887">これを行うための正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-887">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#17)]
 [!code-csharp[System.String.Compare#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#17)]
 [!code-vb[System.String.Compare#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#17)]



## Examples
 <span data-ttu-id="d5817-888">次の例では、文字 "I" の3つのバージョンを比較しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-888">The following example compares three versions of the letter "I".</span></span> <span data-ttu-id="d5817-889">結果は、カルチャの選択、case が無視されるかどうか、および序数に基づく比較が実行されるかどうかによって影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="d5817-889">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span>

 [!code-cpp[System.String.CompareCmp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.CompareCmp/cpp/cmpcmp.cpp#1)]
 [!code-csharp[System.String.CompareCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.CompareCmp/cs/cmpcmp.cs#1)]
 [!code-vb[System.String.CompareCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.CompareCmp/vb/cmpcmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-890"><paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-890"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d5817-891"><see cref="T:System.StringComparison" /> がサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="d5817-891"><see cref="T:System.StringComparison" /> is not supported.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-892">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-892">Character sets include ignorable characters.</span></span> <span data-ttu-id="d5817-893"><see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> メソッドでは、カルチャに依存した比較を実行するときに、このような文字は考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-893">The <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-894">比較で無視できる文字を認識するには、<paramref name="comparisonType" /> パラメーターの値として <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-894">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, ignoreCase As Boolean, culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * bool * System.Globalization.CultureInfo -&gt; int" Usage="System.string.Compare (strA, strB, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="strB" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="d5817-895">比較する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-895">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="d5817-896">比較する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-896">The second string to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d5817-897">比較時に大文字と小文字の区別を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-897"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="d5817-898">カルチャ固有の比較情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-898">An object that supplies culture-specific comparison information.</span></span></param>
        <summary><span data-ttu-id="d5817-899">指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。比較時に、大文字と小文字を区別するかどうかを指定し、比較に影響を及ぼすカルチャ固有の情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-899">Compares two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="d5817-900">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-900">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-901">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-901">Value</span></span>

 </term><description> <span data-ttu-id="d5817-902">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-902">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-903">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-903">Less than zero</span></span>

 </term><description><span data-ttu-id="d5817-904">並べ替え順序において<paramref name="strA" /> は <paramref name="strB" /> の前になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-904"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-905">0</span><span class="sxs-lookup"><span data-stu-id="d5817-905">Zero</span></span>

 </term><description><span data-ttu-id="d5817-906"><paramref name="strA" /> は並べ替え順序で、 <paramref name="strB" /> と同じ位置に出現します。</span><span class="sxs-lookup"><span data-stu-id="d5817-906"><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-907">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-907">Greater than zero</span></span>

 </term><description><span data-ttu-id="d5817-908">並べ替え順序において <paramref name="strA" /> は <paramref name="strB" /> の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-908"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-909">この比較では、`culture` パラメーターを使用して、大文字と小文字の規則や個々の文字のアルファベット順などのカルチャ固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-909">The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="d5817-910">たとえば、カルチャは、文字の特定の組み合わせを1つの文字として扱うように指定したり、大文字と小文字を特定の方法で比較したり、文字の並べ替え順序がその前後の文字に依存するように指定したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-910">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>

 <span data-ttu-id="d5817-911">比較は、word の並べ替え規則を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-911">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="d5817-912">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-912">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="d5817-913">1つまたは両方の比較対照値を `null`できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-913">One or both comparands can be `null`.</span></span> <span data-ttu-id="d5817-914">定義上、空の文字列 ("") を含む任意の文字列は、null 参照より大きいと比較します。2つの null 参照が互いに等しいかどうかを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-914">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="d5817-915">比較は、非等値が検出された場合、または両方の文字列が比較された場合に終了します。</span><span class="sxs-lookup"><span data-stu-id="d5817-915">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="d5817-916">ただし、2つの文字列が1つの文字列の末尾と等しい場合、もう一方の文字列の文字数が残っている場合は、残りの文字を含む文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-916">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="d5817-917">戻り値は、最後に実行された比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="d5817-917">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="d5817-918">カルチャ固有の大文字と小文字の規則によって比較が影響を受ける場合、予期しない結果が発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-918">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="d5817-919">たとえば、トルコ語の場合、次の例では、トルコ語のファイルシステムでは、"file" の文字 "i" に言語の文字種の規則が使用されないため、間違った結果が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-919">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#14)]
 [!code-csharp[System.String.Compare#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#14)]
 [!code-vb[System.String.Compare#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#14)]

 <span data-ttu-id="d5817-920">序数の比較を使用してパス名を "file" と比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-920">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="d5817-921">これを行うための正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-921">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#15)]
 [!code-csharp[System.String.Compare#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#15)]
 [!code-vb[System.String.Compare#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#15)]



## Examples
 <span data-ttu-id="d5817-922">次の例では、カルチャが比較に与える影響について説明します。</span><span class="sxs-lookup"><span data-stu-id="d5817-922">The following example demonstrates how culture can affect a comparison.</span></span> <span data-ttu-id="d5817-923">チェコ語-チェコ共和国カルチャでは、"ch" は "d" より大きい1文字です。</span><span class="sxs-lookup"><span data-stu-id="d5817-923">In Czech - Czech Republic culture, "ch" is a single character that is greater than "d".</span></span> <span data-ttu-id="d5817-924">ただし、英語米国カルチャでは、"ch" は2つの文字で構成され、"c" は "d" よりも小さくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-924">However, in English - United States culture, "ch" consists of two characters, and "c" is less than "d".</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.comp4/CPP/string.comp4.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.comp4/CS/string.comp4.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.comp4/VB/string.comp4.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-925"><paramref name="culture" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-925"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-926">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-926">Character sets include ignorable characters.</span></span> <span data-ttu-id="d5817-927"><see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" /> メソッドでは、カルチャに依存した比較を実行するときに、このような文字は考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-927">The <see cref="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-928">たとえば、次のコードが [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、インバリアントカルチャを使用した "animal" と "Ani-------------------------" は、2つの文字列が等価であることを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-928">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a case-insensitive comparison of "animal" with "Ani-mal" (using a soft hyphen, or U+00AD) using the invariant culture indicates that the two strings are equivalent.</span></span>

<span data-ttu-id="d5817-929">[! code-csharp[# 23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare23.cs#23)][! code-vb[system.string # 23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare23.vb#23)]</span><span class="sxs-lookup"><span data-stu-id="d5817-929">[!code-csharp[System.String.Compare#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/compare23.cs#23)] [!code-vb[System.String.Compare#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/compare23.vb#23)]</span></span>

<span data-ttu-id="d5817-930">文字列比較で無視できる文字を認識するには、<see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> メソッドを呼び出し、<paramref name="options" /> パラメーターに <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> のいずれかの値を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-930">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, string strB, class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, strB As String, culture As CultureInfo, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, System::String ^ strB, System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="static member Compare : string * string * System.Globalization.CultureInfo * System.Globalization.CompareOptions -&gt; int" Usage="System.string.Compare (strA, strB, culture, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="strB" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="d5817-931">比較する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-931">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="d5817-932">比較する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-932">The second string to compare.</span></span></param>
        <param name="culture"><span data-ttu-id="d5817-933">カルチャ固有の比較情報を提供するカルチャ。</span><span class="sxs-lookup"><span data-stu-id="d5817-933">The culture that supplies culture-specific comparison information.</span></span></param>
        <param name="options"><span data-ttu-id="d5817-934">比較の実行時に使用するオプション (大文字と小文字の違いや記号を無視するなど)。</span><span class="sxs-lookup"><span data-stu-id="d5817-934">Options to use when performing the comparison (such as ignoring case or symbols).</span></span></param>
        <summary><span data-ttu-id="d5817-935">指定した 2 つの <see cref="T:System.String" /> オブジェクトを比較し、2 つの文字列の互いのリレーションシップを並べ替え順序で示す整数を返します。比較時に、指定した比較オプションと、比較に影響を及ぼすカルチャ固有の情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-935">Compares two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two strings to each other in the sort order.</span></span></summary>
        <returns><span data-ttu-id="d5817-936"><paramref name="strA" /> と <paramref name="strB" /> との構文上の関係を示す 32 ビット符号付き整数。次の表を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-936">A 32-bit signed integer that indicates the lexical relationship between <paramref name="strA" /> and <paramref name="strB" />, as shown in the following table</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-937">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-937">Value</span></span>

 </term><description> <span data-ttu-id="d5817-938">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-938">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-939">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-939">Less than zero</span></span>

 </term><description><span data-ttu-id="d5817-940">並べ替え順序において<paramref name="strA" /> は <paramref name="strB" /> の前になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-940"><paramref name="strA" /> precedes <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-941">0</span><span class="sxs-lookup"><span data-stu-id="d5817-941">Zero</span></span>

 </term><description><span data-ttu-id="d5817-942"><paramref name="strA" /> は並べ替え順序で、 <paramref name="strB" /> と同じ位置に出現します。</span><span class="sxs-lookup"><span data-stu-id="d5817-942"><paramref name="strA" /> occurs in the same position as <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-943">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-943">Greater than zero</span></span>

 </term><description><span data-ttu-id="d5817-944">並べ替え順序において <paramref name="strA" /> は <paramref name="strB" /> の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-944"><paramref name="strA" /> follows <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-945">この比較では、`culture` パラメーターを使用して、大文字と小文字の規則や個々の文字のアルファベット順など、カルチャ固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-945">The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.</span></span> <span data-ttu-id="d5817-946">たとえば、特定のカルチャでは、特定の文字の組み合わせを1つの文字として扱うように指定したり、大文字と小文字を特定の方法で比較したり、文字の並べ替え順序が文字の前後の文字に依存するように指定したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-946">For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.</span></span>

> [!CAUTION]
>  <span data-ttu-id="d5817-947"><xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> メソッドは、主に並べ替え操作または alphabetizing 操作で使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-947">The <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="d5817-948">メソッド呼び出しの主な目的が、2つの文字列が等価であるかどうかを判断する場合 (つまり、メソッド呼び出しの目的が0の戻り値をテストする場合) は使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="d5817-948">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).</span></span> <span data-ttu-id="d5817-949">2つの文字列が等価かどうかを判断するには、<xref:System.String.Equals%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-949">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>

 <span data-ttu-id="d5817-950">比較は、<xref:System.Globalization.CompareOptions> 列挙体の1つ以上のメンバーで構成される `options` パラメーターでさらに指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-950">The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions> enumeration.</span></span> <span data-ttu-id="d5817-951">ただし、このメソッドの目的はカルチャに依存した文字列比較を実行することであるため、<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> と <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> の値は効果がありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-951">However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> and <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> values have no effect.</span></span>

 <span data-ttu-id="d5817-952">いずれかまたは両方の比較対照値を `null`できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-952">Either or both comparands can be `null`.</span></span> <span data-ttu-id="d5817-953">定義上、<xref:System.String.Empty?displayProperty=nameWithType>を含む任意の文字列が null 参照よりも大きいかどうかを比較し、2つの null 参照が互いに等しいかどうかを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-953">By definition, any string, including <xref:System.String.Empty?displayProperty=nameWithType>, compares greater than a null reference, and two null references compare equal to each other.</span></span>

 <span data-ttu-id="d5817-954">比較は、非等値が検出された場合、または両方の文字列が比較された場合に終了します。</span><span class="sxs-lookup"><span data-stu-id="d5817-954">The comparison terminates when an inequality is discovered or both strings have been compared.</span></span> <span data-ttu-id="d5817-955">ただし、2つの文字列が1つの文字列の末尾と等しい場合、もう一方の文字列の文字数が残っていると、残りの文字を含む文字列は大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-955">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</span></span>



## Examples
 <span data-ttu-id="d5817-956">次の例では、2つの文字列を3つの異なる方法で比較します。 en-us カルチャでは、言語的な比較を使用します。en-us カルチャでの言語的な大文字と小文字を区別する比較の使用序数による比較を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-956">The following example compares two strings in three different ways: Use linguistic comparison for the en-US culture; using linguistic case-sensitive comparison for the en-US culture; and using an ordinal comparison.</span></span> <span data-ttu-id="d5817-957">ここでは、3つの比較方法によって3つの異なる結果が生成される方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-957">It illustrates how the three methods of comparison produce three different results.</span></span>

 [!code-cpp[System.String.Compare#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/example.cpp#1)]
 [!code-csharp[System.String.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/Example.cs#1)]
 [!code-vb[System.String.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/Example.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-958"><paramref name="options" /> が <see cref="T:System.Globalization.CompareOptions" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-958"><paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-959"><paramref name="culture" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-959"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-960">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-960">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-961"><see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> メソッドでは、カルチャに依存した比較を実行するときに、このような文字は考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-961">The <see cref="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-962">比較で無視できる文字を認識するには、<paramref name="options" /> パラメーターの値として <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-962">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para></block>
        <altmember cref="Overload:System.String.CompareOrdinal" />
        <altmember cref="Overload:System.String.CompareTo" />
        <altmember cref="Overload:System.String.Equals" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="d5817-963">比較で使用する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-963">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="d5817-964"><paramref name="strA" /> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-964">The position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="d5817-965">比較で使用する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-965">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="d5817-966"><paramref name="strB" /> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-966">The position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="d5817-967">比較する各部分文字列の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-967">The maximum number of characters in the substrings to compare.</span></span></param>
        <summary><span data-ttu-id="d5817-968">指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較し、それらの相対位置を並べ替え順序で示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-968">Compares substrings of two specified <see cref="T:System.String" /> objects and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="d5817-969">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-969">A 32-bit signed integer indicating the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-970">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-970">Value</span></span>

 </term><description> <span data-ttu-id="d5817-971">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-971">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-972">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-972">Less than zero</span></span>

 </term><description> <span data-ttu-id="d5817-973"><paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列に並べ替え順序において先行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-973">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-974">0</span><span class="sxs-lookup"><span data-stu-id="d5817-974">Zero</span></span>

 </term><description> <span data-ttu-id="d5817-975">部分文字列は並べ替え順序で同じ位置で発生するか、<paramref name="length" /> はゼロです。</span><span class="sxs-lookup"><span data-stu-id="d5817-975">The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-976">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-976">Greater than zero</span></span>

 </term><description> <span data-ttu-id="d5817-977">並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-977">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-978">`indexA` と `indexB`での `strB` の `strA` 開始位置を比較する部分文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-978">The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`.</span></span> <span data-ttu-id="d5817-979">`indexA` と `indexB` はどちらも0から始まります。つまり、`strA` と `strB` の最初の文字は0の位置にあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-979">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero.</span></span> <span data-ttu-id="d5817-980">最初の部分文字列の長さは、`strA` の長さと1を `indexA` 引いた値と等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-980">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="d5817-981">2番目の部分文字列の長さは、`strB` の長さと1を `indexB` 引いた値と等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-981">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>

 <span data-ttu-id="d5817-982">比較する文字数は、2つの部分文字列の長さのうち、`length`の長さの小さい方になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-982">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="d5817-983">`indexA`、`indexB`、および `length` パラメーターは、負ではない必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-983">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>

 <span data-ttu-id="d5817-984">この比較では、現在のカルチャを使用して、大文字と小文字の規則や個々の文字のアルファベット順などのカルチャ固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-984">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="d5817-985">たとえば、カルチャは、文字の特定の組み合わせを1つの文字として扱うように指定したり、大文字と小文字を特定の方法で比較したり、文字の並べ替え順序がその前後の文字に依存するように指定したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-985">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>

 <span data-ttu-id="d5817-986">比較は、word の並べ替え規則を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-986">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="d5817-987">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-987">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

> [!WARNING]
>  <span data-ttu-id="d5817-988">文字列を比較する場合は、<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> メソッドを呼び出す必要があります。そのためには、メソッドが使用する文字列比較の種類を明示的に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-988">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="d5817-989">詳細については、「[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-989">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>

 <span data-ttu-id="d5817-990">1つまたは両方の比較対照値を `null`できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-990">One or both comparands can be `null`.</span></span> <span data-ttu-id="d5817-991">定義上、空の文字列 ("") を含む任意の文字列は、null 参照より大きいと比較します。2つの null 参照が互いに等しいかどうかを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-991">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="d5817-992">比較は、非等値が検出された場合、または両方の部分文字列が比較された場合に終了します。</span><span class="sxs-lookup"><span data-stu-id="d5817-992">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="d5817-993">ただし、2つの文字列が1つの文字列の末尾と等しい場合、もう一方の文字列の文字数が残っている場合は、残りの文字を含む文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-993">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="d5817-994">戻り値は、最後に実行された比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="d5817-994">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="d5817-995">カルチャ固有の大文字と小文字の規則によって比較が影響を受ける場合、予期しない結果が発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-995">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="d5817-996">たとえば、トルコ語の場合、次の例では、トルコ語のファイルシステムでは、"file" の文字 "i" に言語の文字種の規則が使用されないため、間違った結果が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-996">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#2)]
 [!code-csharp[System.String.Compare#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#2)]
 [!code-vb[System.String.Compare#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#2)]

 <span data-ttu-id="d5817-997">序数の比較を使用してパス名を "file" と比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-997">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="d5817-998">これを行うための正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-998">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#3)]
 [!code-csharp[System.String.Compare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#3)]
 [!code-vb[System.String.Compare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#3)]



## Examples
 <span data-ttu-id="d5817-999">次の例では、2つの部分文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-999">The following example compares two substrings.</span></span>

 [!code-cpp[string.compare3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare3/CPP/comp3.cpp#1)]
 [!code-csharp-interactive[string.compare3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare3/CS/comp3.cs#1)]
 [!code-vb[string.compare3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare3/VB/comp3.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-1000"><paramref name="indexA" /> が <paramref name="strA" />.<see cref="P:System.String.Length" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1000"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="d5817-1001">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1001">-or-</span></span>

 <span data-ttu-id="d5817-1002"><paramref name="indexB" /> が <paramref name="strB" />.<see cref="P:System.String.Length" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1002"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="d5817-1003">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1003">-or-</span></span>

 <span data-ttu-id="d5817-1004"><paramref name="indexA" />、 <paramref name="indexB" />、または <paramref name="length" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1004"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>

<span data-ttu-id="d5817-1005">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1005">-or-</span></span>

<span data-ttu-id="d5817-1006"><paramref name="indexA" /> または <paramref name="indexB" /> のいずれかが <see langword="null" /> であり、<paramref name="length" /> が 0 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1006">Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-1007">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1007">Character sets include ignorable characters.</span></span> <span data-ttu-id="d5817-1008"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" /> メソッドは、言語またはカルチャに依存した比較を実行するときに、これらの文字を考慮しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1008">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-1009">比較で無視できる文字を認識するには、<see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> メソッドを呼び出し、<paramref name="comparisonType" /> パラメーターに <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1009">To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, ignoreCase As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * bool -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="indexA" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="strB" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="indexB" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="d5817-1010">比較で使用する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1010">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="d5817-1011"><paramref name="strA" /> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-1011">The position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="d5817-1012">比較で使用する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1012">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="d5817-1013"><paramref name="strB" /> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-1013">The position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="d5817-1014">比較する各部分文字列の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1014">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d5817-1015">比較時に大文字と小文字の区別を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1015"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="d5817-1016">指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。比較時に、大文字と小文字を区別するかどうかを設定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1016">Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="d5817-1017">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1017">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-1018">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-1018">Value</span></span>

 </term><description> <span data-ttu-id="d5817-1019">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-1019">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-1020">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1020">Less than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1021"><paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列に並べ替え順序において先行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1021">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1022">0</span><span class="sxs-lookup"><span data-stu-id="d5817-1022">Zero</span></span>

 </term><description> <span data-ttu-id="d5817-1023">部分文字列は並べ替え順序で同じ位置で発生するか、<paramref name="length" /> はゼロです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1023">The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1024">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1024">Greater than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1025">並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1025">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1026">`indexA`の `strA` と、`indexB`の `strB` で、比較する部分文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1026">The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`.</span></span> <span data-ttu-id="d5817-1027">`indexA` と `indexB` はどちらも0から始まります。つまり、`strA` と `strB` の最初の文字は0の位置にあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1027">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero.</span></span> <span data-ttu-id="d5817-1028">最初の部分文字列の長さは、`strA` の長さと1を `indexA` 引いた値と等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1028">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="d5817-1029">2番目の部分文字列の長さは、`strB` の長さと1を `indexB` 引いた値と等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1029">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>

 <span data-ttu-id="d5817-1030">比較する文字数は、2つの部分文字列の長さのうち、`length`の長さの小さい方になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1030">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="d5817-1031">`indexA`、`indexB`、および `length` パラメーターは、負ではない必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1031">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>

 <span data-ttu-id="d5817-1032">この比較では、現在のカルチャを使用して、大文字と小文字の規則や個々の文字のアルファベット順などのカルチャ固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1032">The comparison uses the current culture to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="d5817-1033">たとえば、カルチャは、文字の特定の組み合わせを1つの文字として扱うように指定したり、大文字と小文字を特定の方法で比較したり、文字の並べ替え順序がその前後の文字に依存するように指定したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1033">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>

 <span data-ttu-id="d5817-1034">比較は、word の並べ替え規則を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1034">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="d5817-1035">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1035">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

> [!WARNING]
>  <span data-ttu-id="d5817-1036">文字列を比較する場合は、<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> メソッドを呼び出す必要があります。そのためには、メソッドが使用する文字列比較の種類を明示的に指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1036">When comparing strings, you should call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method, which requires that you explicitly specify the type of string comparison that the method uses.</span></span> <span data-ttu-id="d5817-1037">詳細については、「[文字列を使用するためのベスト プラクティス](~/docs/standard/base-types/best-practices-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1037">For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).</span></span>

 <span data-ttu-id="d5817-1038">1つまたは両方の比較対照値を `null`できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1038">One or both comparands can be `null`.</span></span> <span data-ttu-id="d5817-1039">定義上、空の文字列 ("") を含む任意の文字列は、null 参照より大きいと比較します。2つの null 参照が互いに等しいかどうかを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1039">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="d5817-1040">比較は、非等値が検出された場合、または両方の部分文字列が比較された場合に終了します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1040">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="d5817-1041">ただし、2つの文字列が1つの文字列の末尾と等しい場合、もう一方の文字列の文字数が残っている場合は、残りの文字を含む文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1041">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="d5817-1042">戻り値は、最後に実行された比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1042">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="d5817-1043">カルチャ固有の大文字と小文字の規則によって比較が影響を受ける場合、予期しない結果が発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1043">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="d5817-1044">たとえば、トルコ語の場合、次の例では、トルコ語のファイルシステムでは、"file" の文字 "i" に言語の文字種の規則が使用されないため、間違った結果が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1044">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#4)]
 [!code-csharp[System.String.Compare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#4)]
 [!code-vb[System.String.Compare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#4)]

 <span data-ttu-id="d5817-1045">パス名は、不変の方法で比較する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1045">The path name needs to be compared in an invariant manner.</span></span> <span data-ttu-id="d5817-1046">これを行うための正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1046">The correct code to do this is as follows.</span></span>

 [!code-cpp[System.String.Compare#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#5)]
 [!code-csharp[System.String.Compare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#5)]
 [!code-vb[System.String.Compare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#5)]



## Examples
 <span data-ttu-id="d5817-1047">次の例では、大文字と小文字が異なる2つの部分文字列の2つの比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1047">The following example performs two comparisons of two substrings that only differ in case.</span></span> <span data-ttu-id="d5817-1048">最初の比較では case が無視され、2番目の比較では case が考慮されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1048">The first comparison ignores case and the second comparison considers case.</span></span>

 [!code-cpp[string.compare4#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare4/CPP/comp4.cpp#1)]
 [!code-csharp-interactive[string.compare4#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare4/CS/comp4.cs#1)]
 [!code-vb[string.compare4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare4/VB/comp4.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-1049"><paramref name="indexA" /> が <paramref name="strA" />.<see cref="P:System.String.Length" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1049"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="d5817-1050">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1050">-or-</span></span>

 <span data-ttu-id="d5817-1051"><paramref name="indexB" /> が <paramref name="strB" />.<see cref="P:System.String.Length" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1051"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="d5817-1052">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1052">-or-</span></span>

 <span data-ttu-id="d5817-1053"><paramref name="indexA" />、 <paramref name="indexB" />、または <paramref name="length" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1053"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>

<span data-ttu-id="d5817-1054">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1054">-or-</span></span>

<span data-ttu-id="d5817-1055"><paramref name="indexA" /> または <paramref name="indexB" /> のいずれかが <see langword="null" /> であり、<paramref name="length" /> が 0 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1055">Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-1056">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1056">Character sets include ignorable characters.</span></span> <span data-ttu-id="d5817-1057"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" /> メソッドは、言語またはカルチャに依存した比較を実行するときに、これらの文字を考慮しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1057">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-1058">比較で無視できる文字を認識するには、<see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> メソッドを呼び出し、<paramref name="comparisonType" /> パラメーターに <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1058">To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * StringComparison -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="indexA" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="strB" Type="System.String" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="indexB" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="5" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="d5817-1059">比較で使用する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1059">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="d5817-1060"><paramref name="strA" /> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-1060">The position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="d5817-1061">比較で使用する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1061">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="d5817-1062"><paramref name="strB" /> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-1062">The position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="d5817-1063">比較する各部分文字列の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1063">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-1064">比較で使用する規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-1064">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="d5817-1065">指定した規則を使用して、指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1065">Compares substrings of two specified <see cref="T:System.String" /> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="d5817-1066">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1066">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-1067">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-1067">Value</span></span>

 </term><description> <span data-ttu-id="d5817-1068">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-1068">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-1069">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1069">Less than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1070"><paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列に並べ替え順序において先行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1070">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1071">0</span><span class="sxs-lookup"><span data-stu-id="d5817-1071">Zero</span></span>

 </term><description> <span data-ttu-id="d5817-1072">部分文字列は並べ替え順序で同じ位置に出現するか、<paramref name="length" /> パラメーターはゼロです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1072">The substrings occur in the same position in the sort order, or the <paramref name="length" /> parameter is zero.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1073">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1073">Greater than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1074">並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1074">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1075">`indexA` と `indexB`での `strB` の `strA` 開始位置を比較する部分文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1075">The substrings to compare start in `strA` at `indexA` and in `strB` at `indexB`.</span></span> <span data-ttu-id="d5817-1076">`indexA` と `indexB` はどちらも0から始まります。つまり、`strA` と `strB` の最初の文字は0の位置にあり、位置は配置されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1076">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one.</span></span> <span data-ttu-id="d5817-1077">最初の部分文字列の長さは、`strA` の長さと1を `indexA` 引いた値と等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1077">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="d5817-1078">2番目の部分文字列の長さは、`strB` の長さと1を `indexB` 引いた値と等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1078">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>

 <span data-ttu-id="d5817-1079">比較する文字数は、2つの部分文字列の長さのうち、`length`の長さの小さい方になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1079">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="d5817-1080">`indexA`、`indexB`、および `length` パラメーターは、負ではない必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1080">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>

 <span data-ttu-id="d5817-1081">`comparisonType` パラメーターは、比較で現在のカルチャまたはインバリアントカルチャを使用するか、比較対照値の大文字と小文字の区別を無視するか、または単語 (カルチャに依存する) または序数 (カルチャに依存しない) の並べ替え規則を使用するかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1081">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the comparands, or use word (culture-sensitive) or ordinal (culture-insensitive) sort rules.</span></span>

 <span data-ttu-id="d5817-1082">1つまたは両方の比較対照値を `null`できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1082">One or both comparands can be `null`.</span></span> <span data-ttu-id="d5817-1083">定義上、空の文字列 ("") を含む任意の文字列は、null 参照より大きいと比較します。2つの null 参照が互いに等しいかどうかを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1083">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="d5817-1084">比較は、非等値が検出された場合、または両方の部分文字列が比較された場合に終了します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1084">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="d5817-1085">ただし、2つの文字列が1つの文字列の末尾と等しい場合、もう一方の文字列の文字数が残っていると、残りの文字を含む文字列は大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1085">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with remaining characters is considered greater.</span></span> <span data-ttu-id="d5817-1086">戻り値は、最後に実行された比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1086">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="d5817-1087">カルチャ固有の大文字と小文字の規則によって比較が影響を受ける場合、予期しない結果が発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1087">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="d5817-1088">たとえば、トルコ語の場合、次の例では、トルコ語のファイルシステムでは、"file" の文字 "i" に言語の文字種の規則が使用されないため、間違った結果が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1088">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#8)]
 [!code-csharp[System.String.Compare#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#8)]
 [!code-vb[System.String.Compare#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#8)]

 <span data-ttu-id="d5817-1089">序数の比較を使用してパス名を "file" と比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1089">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="d5817-1090">これを行うための正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1090">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#9)]
 [!code-csharp[System.String.Compare#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#9)]
 [!code-vb[System.String.Compare#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#9)]



## Examples
 <span data-ttu-id="d5817-1091">次の例では、2つの部分文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1091">The following example compares two substrings.</span></span>

 [!code-cpp[string.compare3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare3/CPP/comp3.cpp#1)]
 [!code-csharp-interactive[string.compare3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare3/CS/comp3.cs#1)]
 [!code-vb[string.compare3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare3/VB/comp3.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-1092"><paramref name="indexA" /> が <paramref name="strA" />.<see cref="P:System.String.Length" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1092"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="d5817-1093">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1093">-or-</span></span>

 <span data-ttu-id="d5817-1094"><paramref name="indexB" /> が <paramref name="strB" />.<see cref="P:System.String.Length" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1094"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="d5817-1095">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1095">-or-</span></span>

 <span data-ttu-id="d5817-1096"><paramref name="indexA" />、 <paramref name="indexB" />、または <paramref name="length" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1096"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>

<span data-ttu-id="d5817-1097">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1097">-or-</span></span>

<span data-ttu-id="d5817-1098"><paramref name="indexA" /> または <paramref name="indexB" /> のいずれかが <see langword="null" /> であり、<paramref name="length" /> が 0 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1098">Either <paramref name="indexA" /> or <paramref name="indexB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-1099"><paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1099"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-1100">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1100">Character sets include ignorable characters.</span></span> <span data-ttu-id="d5817-1101"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> メソッドは、言語またはカルチャに依存した比較を実行するときに、これらの文字を考慮しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1101">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-1102">比較で無視できる文字を認識するには、<paramref name="comparisonType" /> パラメーターの値として <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1102">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> for the <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, ignoreCase As Boolean, culture As CultureInfo) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * bool * System.Globalization.CultureInfo -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="indexA" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="strB" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="indexB" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="d5817-1103">比較で使用する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1103">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="d5817-1104"><paramref name="strA" /> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-1104">The position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="d5817-1105">比較で使用する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1105">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="d5817-1106"><paramref name="strB" /> 内の部分文字列の位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-1106">The position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="d5817-1107">比較する各部分文字列の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1107">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d5817-1108">比較時に大文字と小文字の区別を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1108"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="d5817-1109">カルチャ固有の比較情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1109">An object that supplies culture-specific comparison information.</span></span></param>
        <summary><span data-ttu-id="d5817-1110">指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較し、並べ替え順序におけるそれらの相対位置を示す整数を返します。比較時に、大文字と小文字を区別するかどうかを指定し、比較に影響を及ぼすカルチャ固有の情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1110">Compares substrings of two specified <see cref="T:System.String" /> objects, ignoring or honoring their case and using culture-specific information to influence the comparison, and returns an integer that indicates their relative position in the sort order.</span></span></summary>
        <returns><span data-ttu-id="d5817-1111">2 つの比較対照値の構文上の関係を示す整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1111">An integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-1112">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-1112">Value</span></span>

 </term><description> <span data-ttu-id="d5817-1113">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-1113">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-1114">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1114">Less than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1115"><paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列に並べ替え順序において先行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1115">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1116">0</span><span class="sxs-lookup"><span data-stu-id="d5817-1116">Zero</span></span>

 </term><description> <span data-ttu-id="d5817-1117">部分文字列は並べ替え順序で同じ位置で発生するか、<paramref name="length" /> はゼロです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1117">The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1118">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1118">Greater than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1119">並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1119">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1120">`indexA`の `strA` と、`indexB`の `strB` で、比較する部分文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1120">The substrings to compare start in `strA` at `indexA`, and in `strB` at `indexB`.</span></span> <span data-ttu-id="d5817-1121">`indexA` と `indexB` はどちらも0から始まります。つまり、`strA` と `strB` の最初の文字は0の位置にあり、位置は配置されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1121">Both `indexA` and `indexB` are zero-based; that is, the first character in `strA` and `strB` is at position zero, not position one.</span></span> <span data-ttu-id="d5817-1122">最初の部分文字列の長さは、`strA` の長さと1を `indexA` 引いた値と等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1122">The length of the first substring is equal to the length of `strA` minus `indexA` plus one.</span></span> <span data-ttu-id="d5817-1123">2番目の部分文字列の長さは、`strB` の長さと1を `indexB` 引いた値と等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1123">The length of the second substring is equal to the length of `strB` minus `indexB` plus one.</span></span>

 <span data-ttu-id="d5817-1124">比較する文字数は、2つの部分文字列の長さのうち、`length`の長さの小さい方になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1124">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="d5817-1125">`indexA`、`indexB`、および `length` パラメーターは、負ではない必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1125">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>

 <span data-ttu-id="d5817-1126">この比較では、`culture` パラメーターを使用して、大文字と小文字の規則や個々の文字のアルファベット順などのカルチャ固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1126">The comparison uses the `culture` parameter to obtain culture-specific information such as casing rules and the alphabetic order of individual characters.</span></span> <span data-ttu-id="d5817-1127">たとえば、カルチャは、文字の特定の組み合わせを1つの文字として扱うように指定したり、大文字と小文字を特定の方法で比較したり、文字の並べ替え順序がその前後の文字に依存するように指定したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1127">For example, a culture could specify that certain combinations of characters be treated as a single character, or uppercase and lowercase characters be compared in a particular way, or that the sorting order of a character depends on the characters that precede or follow it.</span></span>

 <span data-ttu-id="d5817-1128">比較は、word の並べ替え規則を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1128">The comparison is performed using word sort rules.</span></span> <span data-ttu-id="d5817-1129">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1129">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="d5817-1130">1つまたは両方の比較対照値を `null`できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1130">One or both comparands can be `null`.</span></span> <span data-ttu-id="d5817-1131">定義上、空の文字列 ("") を含む任意の文字列は、null 参照より大きいと比較します。2つの null 参照が互いに等しいかどうかを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1131">By definition, any string, including the empty string (""), compares greater than a null reference; and two null references compare equal to each other.</span></span>

 <span data-ttu-id="d5817-1132">比較は、非等値が検出された場合、または両方の部分文字列が比較された場合に終了します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1132">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="d5817-1133">ただし、2つの文字列が1つの文字列の末尾と等しい場合、もう一方の文字列の文字数が残っている場合は、残りの文字を含む文字列が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1133">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, then the string with remaining characters is considered greater.</span></span> <span data-ttu-id="d5817-1134">戻り値は、最後に実行された比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1134">The return value is the result of the last comparison performed.</span></span>

 <span data-ttu-id="d5817-1135">カルチャ固有の大文字と小文字の規則によって比較が影響を受ける場合、予期しない結果が発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1135">Unexpected results can occur when comparisons are affected by culture-specific casing rules.</span></span> <span data-ttu-id="d5817-1136">たとえば、トルコ語の場合、次の例では、トルコ語のファイルシステムでは、"file" の文字 "i" に言語の文字種の規則が使用されないため、間違った結果が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1136">For example, in Turkish, the following example yields the wrong results because the file system in Turkish does not use linguistic casing rules for the letter "i" in "file".</span></span>

 [!code-cpp[System.String.Compare#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#6)]
 [!code-csharp[System.String.Compare#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#6)]
 [!code-vb[System.String.Compare#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#6)]

 <span data-ttu-id="d5817-1137">序数の比較を使用してパス名を "file" と比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1137">Compare the path name to "file" using an ordinal comparison.</span></span> <span data-ttu-id="d5817-1138">これを行うための正しいコードは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1138">The correct code to do this is as follows:</span></span>

 [!code-cpp[System.String.Compare#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Compare/cpp/remarks.cpp#7)]
 [!code-csharp[System.String.Compare#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare/cs/remarks.cs#7)]
 [!code-vb[System.String.Compare#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare/vb/remarks.vb#7)]



## Examples
 <span data-ttu-id="d5817-1139">次の例では、異なるカルチャを使用して2つの部分文字列を比較し、部分文字列の大文字と小文字を区別します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1139">The following example compares two substrings using different cultures and ignoring the case of the substrings.</span></span> <span data-ttu-id="d5817-1140">カルチャの選択は、文字 "I" の比較方法に影響します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1140">The choice of culture affects how the letter "I" is compared.</span></span>

 [!code-cpp[string.compare5#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.compare5/CPP/comp5.cpp#1)]
 [!code-csharp[string.compare5#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.compare5/CS/comp5.cs#1)]
 [!code-vb[string.compare5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compare5/VB/comp5.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-1141"><paramref name="indexA" /> が <paramref name="strA" />.<see cref="P:System.String.Length" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1141"><paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="d5817-1142">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1142">-or-</span></span>

 <span data-ttu-id="d5817-1143"><paramref name="indexB" /> が <paramref name="strB" />.<see cref="P:System.String.Length" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1143"><paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="d5817-1144">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1144">-or-</span></span>

 <span data-ttu-id="d5817-1145"><paramref name="indexA" />、 <paramref name="indexB" />、または <paramref name="length" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1145"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>

<span data-ttu-id="d5817-1146">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1146">-or-</span></span>

<span data-ttu-id="d5817-1147"><paramref name="strA" /> または <paramref name="strB" /> のいずれかが <see langword="null" /> であり、<paramref name="length" /> が 0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1147">Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1148"><paramref name="culture" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1148"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-1149">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1149">Character sets include ignorable characters.</span></span> <span data-ttu-id="d5817-1150"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" /> メソッドは、言語またはカルチャに依存した比較を実行するときに、これらの文字を考慮しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1150">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-1151">比較で無視できる文字を認識するには、<see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> メソッドを呼び出し、<paramref name="options" /> パラメーターに <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1151">To recognize ignorable characters in your comparison, call the <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (string strA, int indexA, string strB, int indexB, int length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(string strA, int32 indexA, string strB, int32 indexB, int32 length, class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, culture As CultureInfo, options As CompareOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length, System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberSignature Language="F#" Value="static member Compare : string * int * string * int * int * System.Globalization.CultureInfo * System.Globalization.CompareOptions -&gt; int" Usage="System.string.Compare (strA, indexA, strB, indexB, length, culture, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="indexA" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="strB" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="indexB" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="length" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="d5817-1152">比較で使用する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1152">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="d5817-1153"><paramref name="strA" /> 内の部分文字列の開始位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-1153">The starting position of the substring within <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="d5817-1154">比較で使用する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1154">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="d5817-1155"><paramref name="strB" /> 内の部分文字列の開始位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-1155">The starting position of the substring within <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="d5817-1156">比較する各部分文字列の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1156">The maximum number of characters in the substrings to compare.</span></span></param>
        <param name="culture"><span data-ttu-id="d5817-1157">カルチャ固有の比較情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1157">An object that supplies culture-specific comparison information.</span></span></param>
        <param name="options"><span data-ttu-id="d5817-1158">比較の実行時に使用するオプション (大文字と小文字の違いや記号を無視するなど)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1158">Options to use when performing the comparison (such as ignoring case or symbols).</span></span></param>
        <summary><span data-ttu-id="d5817-1159">指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較し、2 つの部分文字列の互いのリレーションシップを並べ替え順序で示す整数を返します。比較時に、指定した比較オプションと、比較に影響を及ぼすカルチャ固有の情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1159">Compares substrings of two specified <see cref="T:System.String" /> objects using the specified comparison options and culture-specific information to influence the comparison, and returns an integer that indicates the relationship of the two substrings to each other in the sort order.</span></span></summary>
        <returns><span data-ttu-id="d5817-1160">2 つの部分文字列の構文上の関係を示す整数。次の表を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1160">An integer that indicates the lexical relationship between the two substrings, as shown in the following table.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-1161">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-1161">Value</span></span>

 </term><description> <span data-ttu-id="d5817-1162">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-1162">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-1163">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1163">Less than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1164"><paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列に並べ替え順序において先行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1164">The substring in <paramref name="strA" /> precedes the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1165">0</span><span class="sxs-lookup"><span data-stu-id="d5817-1165">Zero</span></span>

 </term><description> <span data-ttu-id="d5817-1166">部分文字列は並べ替え順序で同じ位置で発生するか、<paramref name="length" /> はゼロです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1166">The substrings occur in the same position in the sort order, or <paramref name="length" /> is zero.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1167">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1167">Greater than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1168">並べ替え順序で、<paramref name="strA" /> 内の部分文字列は <paramref name="strB" /> 内の部分文字列の後ろになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1168">The substring in <paramref name="strA" /> follows the substring in <paramref name="strB" /> in the sort order.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1169">開始位置を `strA` 位置 `indexA` と位置 `indexB`にある `strB` で比較する部分文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1169">The substrings to compare start in `strA` at position `indexA` and in `strB` at position `indexB`.</span></span> <span data-ttu-id="d5817-1170">最初の部分文字列の長さは、`strA` から `indexA`を引いた長さです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1170">The length of the first substring is the length of `strA` minus `indexA`.</span></span> <span data-ttu-id="d5817-1171">2番目の部分文字列の長さは、`strB` から `indexB`を引いた長さです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1171">The length of the second substring is the length of `strB` minus `indexB`.</span></span>

 <span data-ttu-id="d5817-1172">比較する文字数は、2つの部分文字列の長さのうち、`length`の長さの小さい方になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1172">The number of characters to compare is the lesser of the lengths of the two substrings, and `length`.</span></span> <span data-ttu-id="d5817-1173">`indexA`、`indexB`、および `length` パラメーターは、負ではない必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1173">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>

 <span data-ttu-id="d5817-1174">この比較では、`culture` パラメーターを使用して、大文字と小文字の規則や個々の文字のアルファベット順など、カルチャ固有の情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1174">The comparison uses the `culture` parameter to obtain culture-specific information, such as casing rules and the alphabetical order of individual characters.</span></span> <span data-ttu-id="d5817-1175">たとえば、特定のカルチャでは、特定の文字の組み合わせを1つの文字として扱うように指定したり、大文字と小文字を特定の方法で比較したり、文字の並べ替え順序が文字の前後の文字に依存するように指定したりすることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1175">For example, a particular culture could specify that certain combinations of characters be treated as a single character, that uppercase and lowercase characters be compared in a particular way, or that the sort order of a character depends on the characters that precede or follow it.</span></span>

> [!CAUTION]
>  <span data-ttu-id="d5817-1176"><xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> メソッドは、主に並べ替え操作または alphabetizing 操作で使用するために設計されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1176">The <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method is designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="d5817-1177">メソッド呼び出しの主な目的が、2つの部分文字列が等しいかどうかを判断するためには使用しないでください (つまり、メソッド呼び出しの目的が0の戻り値をテストする場合)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1177">It should not be used when the primary purpose of the method call is to determine whether two substrings are equivalent (that is, when the purpose of the method call is to test for a return value of zero).</span></span> <span data-ttu-id="d5817-1178">2つの文字列が等価かどうかを判断するには、<xref:System.String.Equals%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1178">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>

 <span data-ttu-id="d5817-1179">`strA` と `strB` の一方または両方を `null`できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1179">One or both of `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="d5817-1180">定義上、<xref:System.String.Empty?displayProperty=nameWithType>を含む任意の文字列が null 参照よりも大きいかどうかを比較し、2つの null 参照が互いに等しいかどうかを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1180">By definition, any string, including <xref:System.String.Empty?displayProperty=nameWithType>, compares greater than a null reference, and two null references compare equal to each other.</span></span>

 <span data-ttu-id="d5817-1181">比較は、<xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 列挙体の1つ以上のメンバーで構成される `options` パラメーターでさらに指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1181">The comparison can be further specified by the `options` parameter, which consists of one or more members of the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="d5817-1182">ただし、このメソッドの目的はカルチャに依存した文字列比較を実行することであるため、<xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> と <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> の値は効果がありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1182">However, because the purpose of this method is to conduct a culture-sensitive string comparison, the <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=nameWithType> and <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=nameWithType> values have no effect.</span></span>

 <span data-ttu-id="d5817-1183">比較は、非等値が検出された場合、または両方の部分文字列が比較された場合に終了します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1183">The comparison terminates when an inequality is discovered or both substrings have been compared.</span></span> <span data-ttu-id="d5817-1184">ただし、2つの文字列が1つの文字列の末尾と等しい場合、もう一方の文字列の文字数が残っていると、残りの文字を含む文字列は大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1184">However, if the two strings compare equal to the end of one string, and the other string has characters remaining, the string with the remaining characters is considered greater.</span></span> <span data-ttu-id="d5817-1185">戻り値は、最後に実行された比較の結果です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1185">The return value is the result of the last comparison performed.</span></span>



## Examples
 <span data-ttu-id="d5817-1186">次の例では、<xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> メソッドを使用して、2人の人の姓を比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1186">The following example uses the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.CultureInfo%2CSystem.Globalization.CompareOptions%29> method to compare the last names of two people.</span></span> <span data-ttu-id="d5817-1187">次に、アルファベット順に一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1187">It then lists them in alphabetical order.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Compare5/cs/Example.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Compare5/vb/Example.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-1188"><paramref name="options" /> が <see cref="T:System.Globalization.CompareOptions" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1188"><paramref name="options" /> is not a <see cref="T:System.Globalization.CompareOptions" /> value.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-1189"><paramref name="indexA" /> は <paramref name="strA" /><see langword=".Length" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1189"><paramref name="indexA" /> is greater than <paramref name="strA" /><see langword=".Length" />.</span></span>

<span data-ttu-id="d5817-1190">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1190">-or-</span></span>

 <span data-ttu-id="d5817-1191"><paramref name="indexB" /> は <paramref name="strB" /><see langword=".Length" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1191"><paramref name="indexB" /> is greater than <paramref name="strB" /><see langword=".Length" />.</span></span>

<span data-ttu-id="d5817-1192">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1192">-or-</span></span>

 <span data-ttu-id="d5817-1193"><paramref name="indexA" />、 <paramref name="indexB" />、または <paramref name="length" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1193"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span>

<span data-ttu-id="d5817-1194">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1194">-or-</span></span>

<span data-ttu-id="d5817-1195"><paramref name="strA" /> または <paramref name="strB" /> のいずれかが <see langword="null" /> であり、<paramref name="length" /> が 0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1195">Either <paramref name="strA" /> or <paramref name="strB" /> is <see langword="null" />, and <paramref name="length" /> is greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1196"><paramref name="culture" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1196"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-1197">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1197">Character sets include ignorable characters.</span></span> <span data-ttu-id="d5817-1198"><see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> メソッドは、言語またはカルチャに依存した比較を実行するときに、これらの文字を考慮しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1198">The <see cref="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-1199">比較で無視できる文字を認識するには、<paramref name="options" /> パラメーターの値として <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1199">To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</span></span></para></block>
        <altmember cref="Overload:System.String.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareOrdinal">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-1200">それぞれの文字列の対応する <see cref="T:System.String" /> オブジェクトの数値を評価することで、2 つの <see cref="T:System.Char" /> を比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1200">Compares two <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareOrdinal">
      <MemberSignature Language="C#" Value="public static int CompareOrdinal (string strA, string strB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareOrdinal(string strA, string strB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareOrdinal(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareOrdinal (strA As String, strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareOrdinal(System::String ^ strA, System::String ^ strB);" />
      <MemberSignature Language="F#" Value="static member CompareOrdinal : string * string -&gt; int" Usage="System.string.CompareOrdinal (strA, strB)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="d5817-1201">比較する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1201">The first string to compare.</span></span></param>
        <param name="strB"><span data-ttu-id="d5817-1202">比較する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1202">The second string to compare.</span></span></param>
        <summary><span data-ttu-id="d5817-1203">それぞれの文字列の対応する <see cref="T:System.String" /> オブジェクトの数値を評価することで、指定した 2 つの <see cref="T:System.Char" /> を比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1203">Compares two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each string.</span></span></summary>
        <returns><span data-ttu-id="d5817-1204">2 つの比較対照値の構文上の関係を示す整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1204">An integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-1205">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-1205">Value</span></span>

 </term><description> <span data-ttu-id="d5817-1206">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-1206">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-1207">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1207">Less than zero</span></span>

 </term><description><span data-ttu-id="d5817-1208"><paramref name="strA" /> は <paramref name="strB" /> より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1208"><paramref name="strA" /> is less than <paramref name="strB" />.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1209">0</span><span class="sxs-lookup"><span data-stu-id="d5817-1209">Zero</span></span>

 </term><description><span data-ttu-id="d5817-1210"><paramref name="strA" /> と <paramref name="strB" /> が等しい。</span><span class="sxs-lookup"><span data-stu-id="d5817-1210"><paramref name="strA" /> and <paramref name="strB" /> are equal.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1211">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1211">Greater than zero</span></span>

 </term><description><span data-ttu-id="d5817-1212"><paramref name="strA" /> が <paramref name="strB" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1212"><paramref name="strA" /> is greater than <paramref name="strB" />.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1213">このメソッドは、序数の並べ替え規則を使用して、大文字と小文字を区別した比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1213">This method performs a case-sensitive comparison using ordinal sort rules.</span></span> <span data-ttu-id="d5817-1214">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1214">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-1215">序数の並べ替え規則を使用して大文字と小文字を区別しない比較を実行するには、`comparisonType` 引数を <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>に設定して <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1215">To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method with the `comparisonType` argument set to <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="d5817-1216"><xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> は静的メソッドであるため、`strA` と `strB` を `null`できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1216">Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> is a static method, `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="d5817-1217">両方の値が `null`場合、メソッドは 0 (ゼロ) を返します。これは、`strA` と `strB` が等しいことを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1217">If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal.</span></span> <span data-ttu-id="d5817-1218">値の1つだけが `null`の場合、メソッドは null 以外の値が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1218">If only one of the values is `null`, the method considers the non-null value to be greater.</span></span>



## Examples
 <span data-ttu-id="d5817-1219">次の例では、大文字と小文字が異なる2つの文字列を比較して、序数の比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1219">The following example performs and ordinal comparison of two strings that only differ in case.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.compareordinal/CPP/comp0.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.compareordinal/CS/comp0.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.compareordinal/VB/comp0.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareOrdinal">
      <MemberSignature Language="C#" Value="public static int CompareOrdinal (string strA, int indexA, string strB, int indexB, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CompareOrdinal(string strA, int32 indexA, string strB, int32 indexB, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompareOrdinal (strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CompareOrdinal(System::String ^ strA, int indexA, System::String ^ strB, int indexB, int length);" />
      <MemberSignature Language="F#" Value="static member CompareOrdinal : string * int * string * int * int -&gt; int" Usage="System.string.CompareOrdinal (strA, indexA, strB, indexB, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strA" Type="System.String" />
        <Parameter Name="indexA" Type="System.Int32" />
        <Parameter Name="strB" Type="System.String" />
        <Parameter Name="indexB" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="strA"><span data-ttu-id="d5817-1220">比較で使用する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1220">The first string to use in the comparison.</span></span></param>
        <param name="indexA"><span data-ttu-id="d5817-1221"><paramref name="strA" /> 内の部分文字列の開始インデックス。</span><span class="sxs-lookup"><span data-stu-id="d5817-1221">The starting index of the substring in <paramref name="strA" />.</span></span></param>
        <param name="strB"><span data-ttu-id="d5817-1222">比較で使用する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1222">The second string to use in the comparison.</span></span></param>
        <param name="indexB"><span data-ttu-id="d5817-1223"><paramref name="strB" /> 内の部分文字列の開始インデックス。</span><span class="sxs-lookup"><span data-stu-id="d5817-1223">The starting index of the substring in <paramref name="strB" />.</span></span></param>
        <param name="length"><span data-ttu-id="d5817-1224">比較する各部分文字列の最大文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1224">The maximum number of characters in the substrings to compare.</span></span></param>
        <summary><span data-ttu-id="d5817-1225">それぞれの部分文字列の対応する <see cref="T:System.Char" /> オブジェクトの数値を評価することにより、指定した 2 つの <see cref="T:System.String" /> オブジェクトの部分文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1225">Compares substrings of two specified <see cref="T:System.String" /> objects by evaluating the numeric values of the corresponding <see cref="T:System.Char" /> objects in each substring.</span></span></summary>
        <returns><span data-ttu-id="d5817-1226">2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1226">A 32-bit signed integer that indicates the lexical relationship between the two comparands.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-1227">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-1227">Value</span></span>

 </term><description> <span data-ttu-id="d5817-1228">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-1228">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-1229">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1229">Less than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1230"><paramref name="strA" /> 内の部分文字列が <paramref name="strB" /> 内の部分文字列より小さいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1230">The substring in <paramref name="strA" /> is less than the substring in <paramref name="strB" />.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1231">0</span><span class="sxs-lookup"><span data-stu-id="d5817-1231">Zero</span></span>

 </term><description> <span data-ttu-id="d5817-1232">これらの部分文字列が等しいか、または <paramref name="length" /> が 0 です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1232">The substrings are equal, or <paramref name="length" /> is zero.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1233">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1233">Greater than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1234"><paramref name="strA" /> 内の部分文字列が <paramref name="strB" /> 内の部分文字列より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1234">The substring in <paramref name="strA" /> is greater than the substring in <paramref name="strB" />.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1235">`indexA`、`indexB`、および `length` パラメーターは、負ではない必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1235">The `indexA`, `indexB`, and `length` parameters must be nonnegative.</span></span>

 <span data-ttu-id="d5817-1236">比較する文字数は、`strA` の `indexA`の長さ、`strB` `indexB`の長さ、および `length`の長さのいずれか小さい方になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1236">The number of characters compared is the lesser of the length of `strA` less `indexA`, the length of `strB` less `indexB`, and `length`.</span></span>

 <span data-ttu-id="d5817-1237">このメソッドは、序数の並べ替え規則を使用して、大文字と小文字を区別した比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1237">This method performs a case-sensitive comparison using ordinal sort rules.</span></span> <span data-ttu-id="d5817-1238">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1238">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-1239">序数の並べ替え規則を使用して大文字と小文字を区別しない比較を実行するには、`comparisonType` 引数を <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>に設定して <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1239">To perform a case-insensitive comparison using ordinal sort rules, call the <xref:System.String.Compare%28System.String%2CSystem.Int32%2CSystem.String%2CSystem.Int32%2CSystem.Int32%2CSystem.StringComparison%29> method with the `comparisonType` argument set to <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="d5817-1240"><xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> は静的メソッドであるため、`strA` と `strB` を `null`できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1240">Because <xref:System.String.CompareOrdinal%28System.String%2CSystem.String%29> is a static method, `strA` and `strB` can be `null`.</span></span> <span data-ttu-id="d5817-1241">両方の値が `null`場合、メソッドは 0 (ゼロ) を返します。これは、`strA` と `strB` が等しいことを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1241">If both values are `null`, the method returns 0 (zero), which indicates that `strA` and `strB` are equal.</span></span> <span data-ttu-id="d5817-1242">値の1つだけが `null`の場合、メソッドは null 以外の値が大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1242">If only one of the values is `null`, the method considers the non-null value to be greater.</span></span>



## Examples
 <span data-ttu-id="d5817-1243">次の例では、<xref:System.String.CompareOrdinal%2A> と <xref:System.String.Compare%2A> で異なる並べ替え順が使用されていることを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1243">This following example demonstrates that <xref:System.String.CompareOrdinal%2A> and <xref:System.String.Compare%2A> use different sort orders.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/StringCompareOrdinal/CPP/stringcompareordinal.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/StringCompareOrdinal/CS/stringcompareordinal.cs" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/StringCompareOrdinal/VB/stringcompareordinal.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-1244"><paramref name="strA" /> は <see langword="null" /> でありません。また <paramref name="indexA" /> が <paramref name="strA" />.<see cref="P:System.String.Length" /> を超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1244"><paramref name="strA" /> is not <see langword="null" /> and <paramref name="indexA" /> is greater than <paramref name="strA" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="d5817-1245">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1245">-or-</span></span>

 <span data-ttu-id="d5817-1246"><paramref name="strB" /> は <see langword="null" /> でありません。また <paramref name="indexB" /> が <paramref name="strB" />.<see cref="P:System.String.Length" />を超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1246"><paramref name="strB" /> is not <see langword="null" /> and <paramref name="indexB" /> is greater than <paramref name="strB" />.<see cref="P:System.String.Length" />.</span></span>

<span data-ttu-id="d5817-1247">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1247">-or-</span></span>

 <span data-ttu-id="d5817-1248"><paramref name="indexA" />、<paramref name="indexB" />、または <paramref name="length" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1248"><paramref name="indexA" />, <paramref name="indexB" />, or <paramref name="length" /> is negative.</span></span></exception>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareTo(System.Object)" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-1249">このインスタンスと指定したオブジェクトまたは <see cref="T:System.String" /> とを比較し、並べ替え順序において、このインスタンスの位置が指定したオブジェクトまたは <see cref="T:System.String" /> の前、後ろ、または同じのいずれであるかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1249">Compares this instance with a specified object or <see cref="T:System.String" /> and returns an integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or <see cref="T:System.String" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1250"><xref:System.String.CompareTo%2A> メソッドの両方のオーバーロードは、カルチャに依存し、大文字と小文字を区別する比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1250">Both overloads of the <xref:System.String.CompareTo%2A> method perform culture-sensitive and case-sensitive comparison.</span></span> <span data-ttu-id="d5817-1251">このメソッドを使用して、カルチャを認識しないまたは序数による比較を実行することはできません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1251">You cannot use this method to perform culture-insensitive or ordinal comparisons.</span></span> <span data-ttu-id="d5817-1252">コードをわかりやすくするために、<xref:System.String.CompareTo%2A> メソッドを使用せずに、代わりに <xref:System.String.Compare%2A> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-1252">For code clarity, we recommend that you avoid the <xref:System.String.CompareTo%2A> method and call the <xref:System.String.Compare%2A> method instead.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="string.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-1253"><see cref="T:System.String" /> に評価されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1253">An object that evaluates to a <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="d5817-1254">このインスタンスと指定した <see cref="T:System.Object" /> とを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.Object" /> の前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1254">Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-1255">並べ替え順序において、このインスタンスの位置が <paramref name="value" /> パラメーターよりも前、後ろ、または同じのいずれであるかを示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1255">A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-1256">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-1256">Value</span></span>

 </term><description> <span data-ttu-id="d5817-1257">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-1257">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-1258">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1258">Less than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1259">このインスタンスの位置が <paramref name="value" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1259">This instance precedes <paramref name="value" />.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1260">0</span><span class="sxs-lookup"><span data-stu-id="d5817-1260">Zero</span></span>

 </term><description> <span data-ttu-id="d5817-1261">このインスタンスの位置が、並べ替え順序において <paramref name="value" /> と同じです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1261">This instance has the same position in the sort order as <paramref name="value" />.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1262">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1262">Greater than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1263">このインスタンスの位置が <paramref name="value" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1263">This instance follows <paramref name="value" />.</span></span>

<span data-ttu-id="d5817-1264">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1264">-or-</span></span>

 <span data-ttu-id="d5817-1265"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1265"><paramref name="value" /> is <see langword="null" />.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1266">`value` は <xref:System.String> オブジェクトである必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1266">`value` must be a <xref:System.String> object.</span></span>

> [!CAUTION]
>  <span data-ttu-id="d5817-1267"><xref:System.String.CompareTo%2A> メソッドは、主に並べ替え操作または alphabetizing 操作で使用するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1267">The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="d5817-1268">2つの文字列が等価かどうかを判断するために、メソッド呼び出しの主な目的がである場合は、使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1268">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</span></span> <span data-ttu-id="d5817-1269">2つの文字列が等価かどうかを判断するには、<xref:System.String.Equals%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1269">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>

 <span data-ttu-id="d5817-1270">このメソッドは、現在のカルチャを使用して、単語 (大文字と小文字を区別し、カルチャに依存する) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1270">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span> <span data-ttu-id="d5817-1271">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1271">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="d5817-1272">このメソッドの動作の詳細については、<xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1272">For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method.</span></span>



## Examples
 <span data-ttu-id="d5817-1273">次の例では、<xref:System.Object>と共に <xref:System.String.CompareTo%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1273">The following example uses the <xref:System.String.CompareTo%2A> method with an <xref:System.Object>.</span></span> <span data-ttu-id="d5817-1274"><xref:System.String> インスタンスを `TestClass` オブジェクトと比較しようとするため、メソッドは <xref:System.ArgumentException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="d5817-1274">Because it attempts to compare a <xref:System.String> instance to a `TestClass` object, the method throws an <xref:System.ArgumentException>.</span></span>

 [!code-cpp[ExToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ExToString/CPP/extostring.cpp#1)]
 [!code-csharp[ExToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ExToString/CS/extostring.cs#1)]
 [!code-vb[ExToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ExToString/VB/extostring.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-1275"><paramref name="value" /> が <see cref="T:System.String" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1275"><paramref name="value" /> is not a <see cref="T:System.String" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-1276">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1276">Character sets include ignorable characters.</span></span> <span data-ttu-id="d5817-1277"><see cref="M:System.String.CompareTo(System.Object)" /> メソッドでは、カルチャに依存した比較を実行するときに、このような文字は考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1277">The <see cref="M:System.String.CompareTo(System.Object)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-1278">たとえば、次のコードが [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、"animal" を "ani--------------------0" と比較すると、2つの文字列が等価であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1278">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>

<span data-ttu-id="d5817-1279">[! code-csharp[system.string # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto1.cs#1)][! code-vb[system.string # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto1.vb#1)]</span><span class="sxs-lookup"><span data-stu-id="d5817-1279">[!code-csharp[System.String.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto1.cs#1)] [!code-vb[System.String.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto1.vb#1)]</span></span>

<span data-ttu-id="d5817-1280">文字列比較で無視できる文字を認識するには、<see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1280">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> method.</span></span></para></block>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (string strB);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(string strB) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.String.CompareTo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (strB As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::String ^ strB);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : string -&gt; int&#xA;override this.CompareTo : string -&gt; int" Usage="string.CompareTo strB" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(string strB) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::String ^ strB);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.CompareTo : string -&gt; int" Usage="string.CompareTo strB" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="strB" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="strB"><span data-ttu-id="d5817-1281">このインスタンスと比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1281">The string to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="d5817-1282">このインスタンスと指定した <see cref="T:System.String" /> オブジェクトとを比較し、並べ替え順序において、このインスタンスの位置が指定した文字列の前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1282">Compares this instance with a specified <see cref="T:System.String" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string.</span></span></summary>
        <returns><span data-ttu-id="d5817-1283">並べ替え順序において、このインスタンスの位置が <paramref name="strB" /> パラメーターよりも前、後ろ、または同じのいずれであるかを示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1283">A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="strB" /> parameter.</span></span>

 <list type="table"><listheader><term> <span data-ttu-id="d5817-1284">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-1284">Value</span></span>

 </term><description> <span data-ttu-id="d5817-1285">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-1285">Condition</span></span>

 </description></listheader><item><term> <span data-ttu-id="d5817-1286">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1286">Less than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1287">このインスタンスの位置が <paramref name="strB" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1287">This instance precedes <paramref name="strB" />.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1288">0</span><span class="sxs-lookup"><span data-stu-id="d5817-1288">Zero</span></span>

 </term><description> <span data-ttu-id="d5817-1289">このインスタンスの位置が、並べ替え順序において <paramref name="strB" /> と同じです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1289">This instance has the same position in the sort order as <paramref name="strB" />.</span></span>

 </description></item><item><term> <span data-ttu-id="d5817-1290">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-1290">Greater than zero</span></span>

 </term><description> <span data-ttu-id="d5817-1291">このインスタンスの位置が <paramref name="strB" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1291">This instance follows <paramref name="strB" />.</span></span>

<span data-ttu-id="d5817-1292">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1292">-or-</span></span>

 <span data-ttu-id="d5817-1293"><paramref name="strB" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1293"><paramref name="strB" /> is <see langword="null" />.</span></span>

 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1294">このメソッドは、現在のカルチャを使用して、単語 (大文字と小文字を区別し、カルチャに依存する) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1294">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span> <span data-ttu-id="d5817-1295">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1295">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

> [!CAUTION]
>  <span data-ttu-id="d5817-1296"><xref:System.String.CompareTo%2A> メソッドは、主に並べ替え操作または alphabetizing 操作で使用するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1296">The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="d5817-1297">2つの文字列が等価かどうかを判断するために、メソッド呼び出しの主な目的がである場合は、使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1297">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</span></span> <span data-ttu-id="d5817-1298">2つの文字列が等価かどうかを判断するには、<xref:System.String.Equals%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1298">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>

 <span data-ttu-id="d5817-1299">このメソッドの動作の詳細については、<xref:System.String.Compare%28System.String%2CSystem.String%29> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1299">For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29> method.</span></span>

 <span data-ttu-id="d5817-1300">このメソッドは、<xref:System.IComparable%601?displayProperty=nameWithType> インターフェイスを実装し、<xref:System.String.CompareTo%28System.Object%29?displayProperty=nameWithType> メソッドよりもわずかに優れています。これは、`strB` 引数が変更可能な値型であり、ボックス化する必要があるかどうかを判断する必要がなく、パラメーターを <xref:System.Object> から <xref:System.String>にキャストする必要がないためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1300">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.String.CompareTo%28System.Object%29?displayProperty=nameWithType> method, because it does not have to determine whether the `strB` argument is a mutable value type that must be boxed, and it does not have to cast its parameter from an <xref:System.Object> to a <xref:System.String>.</span></span>



## Examples
 <span data-ttu-id="d5817-1301">次の例では、<xref:System.String.CompareTo%2A> メソッドを使用して、現在の文字列インスタンスを別の文字列と比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1301">The following example uses the <xref:System.String.CompareTo%2A> method to compare the current string instance with another string.</span></span>

 [!code-cpp[stringcompareto#1](~/samples/snippets/cpp/VS_Snippets_CLR/StringCompareTo/CPP/stringcompareto.cpp#1)]
 [!code-csharp[stringcompareto#1](~/samples/snippets/csharp/VS_Snippets_CLR/StringCompareTo/CS/stringcompareto.cs#1)]
 [!code-vb[stringcompareto#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringCompareTo/VB/stringcompareto.vb#1)]

 <span data-ttu-id="d5817-1302">次の例は、いくつかの値および参照型に対する CompareTo メソッドのジェネリックバージョンと非ジェネリックバージョンを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1302">The following example demonstrates generic and non-generic versions of the CompareTo method for several value and reference types.</span></span>

 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-1303">文字セットには無視できる文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1303">Character sets include ignorable characters.</span></span> <span data-ttu-id="d5817-1304"><see cref="M:System.String.CompareTo(System.String)" /> メソッドでは、カルチャに依存した比較を実行するときに、このような文字は考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1304">The <see cref="M:System.String.CompareTo(System.String)" /> method does not consider such characters when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-1305">たとえば、次のコードが [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、"animal" を "ani--------------------0" と比較すると、2つの文字列が等価であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1305">For example, if the following code is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, a comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent.</span></span>

<span data-ttu-id="d5817-1306">[! code-csharp[system.string # 2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto2.cs#2)][! code-vb[system.string # 2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto2.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="d5817-1306">[!code-csharp[System.String.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.compareto/cs/compareto2.cs#2)] [!code-vb[System.String.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.compareto/vb/compareto2.vb#2)]</span></span>

<span data-ttu-id="d5817-1307">文字列比較で無視できる文字を認識するには、<see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1307">To recognize ignorable characters in a string comparison, call the <see cref="M:System.String.CompareOrdinal(System.String,System.String)" /> method.</span></span></para></block>
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Concat">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-1308"><see cref="T:System.String" /> の 1 つ以上のインスタンス、または <see cref="T:System.String" /> の 1 つ以上のインスタンスの <see cref="T:System.Object" /> 形式の値を連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1308">Concatenates one or more instances of <see cref="T:System.String" />, or the <see cref="T:System.String" /> representations of the values of one or more instances of <see cref="T:System.Object" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

> [!NOTE]
>  <span data-ttu-id="d5817-1309">また、のC#`+` のような言語の文字列連結演算子を使用したり、Visual Basic で `&` および `+` して、文字列を連結したりすることもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1309">You can also use your language's string concatenation operator, such as `+` in C#, or `&` and `+` in Visual Basic, to concatenate strings.</span></span> <span data-ttu-id="d5817-1310">どちらのコンパイラも、連結演算子を `String.Concat`のオーバーロードの1つの呼び出しに変換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1310">Both compilers translate the concatenation operator into a call to one of the overloads of `String.Concat`.</span></span>

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (System.Collections.Generic.IEnumerable&lt;string&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(class System.Collections.Generic.IEnumerable`1&lt;string&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (values As IEnumerable(Of String)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;string&gt; -&gt; string" Usage="System.string.Concat values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="d5817-1311"><see cref="T:System.Collections.Generic.IEnumerable`1" /> を実装し、ジェネリック型引数が <see cref="T:System.String" /> であるコレクション オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1311">A collection object that implements <see cref="T:System.Collections.Generic.IEnumerable`1" /> and whose generic type argument is <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="d5817-1312"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 型の構築された <see cref="T:System.String" /> コレクションのメンバーを連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1312">Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-1313"><paramref name="values" /> 内の文字列の連結結果。または、<paramref name="values" /> が空の <see langword="IEnumerable(Of String)" /> である場合は <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1313">The concatenated strings in <paramref name="values" />, or <see cref="F:System.String.Empty" /> if <paramref name="values" /> is an empty <see langword="IEnumerable(Of String)" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1314">メソッドは `values`内の各オブジェクトを連結します。区切り記号は追加されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1314">The method concatenates each object in `values`; it does not add any delimiters.</span></span> <span data-ttu-id="d5817-1315">`values`の各メンバーの間に区切り記号を指定するには、<xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1315">To specify a delimiter between each member of `values`, call the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.</span></span>

 <span data-ttu-id="d5817-1316"><xref:System.String.Empty?displayProperty=nameWithtype> 文字列は、`values`内の null 要素の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1316">An <xref:System.String.Empty?displayProperty=nameWithtype> string is used in place of any null element in `values`.</span></span>

 <span data-ttu-id="d5817-1317">If `values` である場合は `IEnumerable(Of String)`の場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1317">If `values` is an empty `IEnumerable(Of String)`, the method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-1318">`values` が `null`場合、メソッドは <xref:System.ArgumentNullException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d5817-1318">If `values` is `null`, the method throws an <xref:System.ArgumentNullException> exception.</span></span>

 <span data-ttu-id="d5817-1319"><xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> は、最初に要素を文字列配列に変換しなくても、`IEnumerable(Of String)` コレクション内の各要素を連結できる便利なメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1319"><xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array.</span></span> <span data-ttu-id="d5817-1320">これは、統合言語クエリ (LINQ) クエリ式で特に便利です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1320">It is particularly useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="d5817-1321">次の例では、アルファベットの大文字または小文字を含む `List(Of String)` オブジェクトを、特定の文字以上の文字 (例では "M") を選択するラムダ式に渡します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1321">The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is "M").</span></span> <span data-ttu-id="d5817-1322"><xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> メソッドによって返される `IEnumerable(Of String)` コレクションは <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> メソッドに渡され、結果が1つの文字列として表示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1322">The `IEnumerable(Of String)` collection that is returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> method is passed to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat2.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat2.vb" id="Snippet3":::

## Examples
 <span data-ttu-id="d5817-1323">次の例では、ありアルゴリズムのエラトステネスを使用して、100以下の素数を計算します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1323">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="d5817-1324"><xref:System.String>型の <xref:System.Collections.Generic.List%601> オブジェクトに結果を代入し、その後 <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1324">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type <xref:System.String>, which it then passes to the <xref:System.String.Concat%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat1.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat1.vb" id="Snippet2":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1325"><paramref name="values" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1325"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Concat : obj -&gt; string" Usage="System.string.Concat arg0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="d5817-1326">表現するオブジェクトまたは <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1326">The object to represent, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d5817-1327">指定されたオブジェクトの文字列形式を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1327">Creates the string  representation of a specified object.</span></span></summary>
        <returns><span data-ttu-id="d5817-1328"><paramref name="arg0" /> の値の文字列形式。<see cref="F:System.String.Empty" /> が <paramref name="arg0" /> の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1328">The string representation of the value of <paramref name="arg0" />, or <see cref="F:System.String.Empty" /> if <paramref name="arg0" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1329"><xref:System.String.Concat%28System.Object%29> メソッドは、パラメーターなしの `ToString` メソッドを呼び出すことによって、`arg0` を文字列として表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1329">The <xref:System.String.Concat%28System.Object%29> method represents `arg0` as a string by calling its parameterless `ToString` method.</span></span>



## Examples
 <span data-ttu-id="d5817-1330"><xref:System.String.Concat%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1330">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Concat : obj[] -&gt; string" Usage="System.string.Concat args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="d5817-1331">連結する要素を格納しているオブジェクト配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1331">An object array that contains the elements to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-1332">指定された <see cref="T:System.Object" /> 配列の要素の文字列表記を連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1332">Concatenates the string representations of the elements in a specified <see cref="T:System.Object" /> array.</span></span></summary>
        <returns><span data-ttu-id="d5817-1333"><paramref name="args" /> の各要素の値を連結した文字列表記。</span><span class="sxs-lookup"><span data-stu-id="d5817-1333">The concatenated string representations of the values of the elements in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1334">メソッドは、オブジェクトのパラメーターなしの `ToString` メソッドを呼び出すことによって、`args` 内の各オブジェクトを連結します。区切り記号は追加されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1334">The method concatenates each object in `args` by calling the parameterless `ToString` method of that object; it does not add any delimiters.</span></span>

 <span data-ttu-id="d5817-1335"><xref:System.String.Empty?displayProperty=nameWithType> は、配列内の null オブジェクトの代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1335"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null object in the array.</span></span>



## Examples
 <span data-ttu-id="d5817-1336">次の例は、<xref:System.Object> 配列での <xref:System.String.Concat%2A> メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1336">The following example demonstrates the use of the <xref:System.String.Concat%2A> method with an <xref:System.Object> array.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat1/CS/stringconcat1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat1/VB/stringconcat1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1337"><paramref name="args" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1337"><paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="d5817-1338">メモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1338">Out of memory.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-1339">このメソッドは、コードにC++よって呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1339">This method is not called by C++ code.</span></span> <span data-ttu-id="d5817-1340">コンパイラC++は、<see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />への呼び出しとして、4つ以上のオブジェクトパラメーターを持つ <see cref="Overload:System.String.Concat" /> の呼び出しを解決します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1340">The C++ compiler resolves calls to <see cref="Overload:System.String.Concat" /> that have four or more object parameters as a call to <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />.</span></span></para></block>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (params string[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (ParamArray values As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(... cli::array &lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Concat : string[] -&gt; string" Usage="System.string.Concat values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="values"><span data-ttu-id="d5817-1341">文字列インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1341">An array of string instances.</span></span></param>
        <summary><span data-ttu-id="d5817-1342">指定した <see cref="T:System.String" /> 配列の要素を連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1342">Concatenates the elements of a specified <see cref="T:System.String" /> array.</span></span></summary>
        <returns><span data-ttu-id="d5817-1343">連結された <paramref name="values" /> の要素。</span><span class="sxs-lookup"><span data-stu-id="d5817-1343">The concatenated elements of <paramref name="values" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1344">メソッドは `values`内の各オブジェクトを連結します。区切り記号は追加されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1344">The method concatenates each object in `values`; it does not add any delimiters.</span></span>

 <span data-ttu-id="d5817-1345">配列内の null オブジェクトの代わりに、<xref:System.String.Empty?displayProperty=nameWithtype> 文字列が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1345">An <xref:System.String.Empty?displayProperty=nameWithtype> string is used in place of any null object in the array.</span></span>



## Examples
 <span data-ttu-id="d5817-1346">次の例は、<xref:System.String> 配列での <xref:System.String.Concat%2A> メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1346">The following example demonstrates the use of the <xref:System.String.Concat%2A> method with a <xref:System.String> array.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringconcat3/CPP/stringconcat3.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat3/CS/stringconcat3.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat3/VB/stringconcat3.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1347"><paramref name="values" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1347"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="d5817-1348">メモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1348">Out of memory.</span></span></exception>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Concat : obj * obj -&gt; string" Usage="System.string.Concat (arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="d5817-1349">連結する最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1349">The first object to concatenate.</span></span></param>
        <param name="arg1"><span data-ttu-id="d5817-1350">連結する 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1350">The second object to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-1351">指定した 2 つのオブジェクトの文字列形式を連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1351">Concatenates the string representations of two specified objects.</span></span></summary>
        <returns><span data-ttu-id="d5817-1352"><paramref name="arg0" /> および <paramref name="arg1" /> の値の文字列形式を連結した結果。</span><span class="sxs-lookup"><span data-stu-id="d5817-1352">The concatenated string representations of the values of <paramref name="arg0" /> and <paramref name="arg1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1353">メソッドは、`arg0` および `arg1`のパラメーターなしの `ToString` メソッドを呼び出すことによって、`arg0` と `arg1` を連結します。区切り記号は追加されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1353">The method concatenates `arg0` and `arg1` by calling the parameterless `ToString` method of `arg0` and `arg1`; it does not add any delimiters.</span></span>

 <span data-ttu-id="d5817-1354"><xref:System.String.Empty?displayProperty=nameWithType> は、null 引数の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1354"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>

 <span data-ttu-id="d5817-1355">場合か、引数の配列参照は、メソッドは、そのメンバー (たとえば、"System.String[]") 代わりに、その配列を表す文字列を連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1355">If either of the arguments is an array reference, the method concatenates a string representing that array, instead of its members (for example, "System.String[]").</span></span>



## Examples
 <span data-ttu-id="d5817-1356"><xref:System.String.Concat%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1356">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(valuetype System.ReadOnlySpan`1&lt;char&gt; str0, valuetype System.ReadOnlySpan`1&lt;char&gt; str1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As ReadOnlySpan(Of Char), str1 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1);" />
      <MemberSignature Language="F#" Value="static member Concat : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.string.Concat (str0, str1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="str1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="d5817-1357">連結する最初の読み取り専用文字スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-1357">The first read-only character span to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="d5817-1358">連結する 2 番目の読み取り専用文字スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-1358">The second read-only character span to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-1359">2 つの指定された読み取り専用文字スパンの文字列形式を連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1359">Concatenates the string representations of two specified read-only character spans.</span></span></summary>
        <returns><span data-ttu-id="d5817-1360"><paramref name="str0" /> および <paramref name="str1" /> の値の文字列形式を連結した結果。</span><span class="sxs-lookup"><span data-stu-id="d5817-1360">The concatenated string representations of the values of <paramref name="str0" /> and <paramref name="str1" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1);" />
      <MemberSignature Language="F#" Value="static member Concat : string * string -&gt; string" Usage="System.string.Concat (str0, str1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="d5817-1361">連結する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1361">The first string to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="d5817-1362">連結する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1362">The second string to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-1363">指定した 2 つの <see cref="T:System.String" /> インスタンスを連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1363">Concatenates two specified instances of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-1364"><paramref name="str0" /> と <paramref name="str1" /> の連結。</span><span class="sxs-lookup"><span data-stu-id="d5817-1364">The concatenation of <paramref name="str0" /> and <paramref name="str1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1365">メソッドは `str0` と `str1`を連結します。区切り記号は追加されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1365">The method concatenates `str0` and `str1`; it does not add any delimiters.</span></span>

 <span data-ttu-id="d5817-1366"><xref:System.String.Empty?displayProperty=nameWithtype> 文字列は、null 引数の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1366">An <xref:System.String.Empty?displayProperty=nameWithtype> string is used in place of any null argument.</span></span>

## Examples
 <span data-ttu-id="d5817-1367">次の例では、ユーザーの姓、ミドルネーム、および姓を連結しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1367">The following example concatenates a person's first, middle, and last name.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringconcat4/CPP/stringconcat4.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringconcat4/CS/stringconcat4.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringconcat4/VB/stringconcat4.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Concat : obj * obj * obj -&gt; string" Usage="System.string.Concat (arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="d5817-1368">連結する最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1368">The first object to concatenate.</span></span></param>
        <param name="arg1"><span data-ttu-id="d5817-1369">連結する 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1369">The second object to concatenate.</span></span></param>
        <param name="arg2"><span data-ttu-id="d5817-1370">連結する 3 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1370">The third object to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-1371">指定した 3 つのオブジェクトの文字列形式を連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1371">Concatenates the string representations of three specified objects.</span></span></summary>
        <returns><span data-ttu-id="d5817-1372"><paramref name="arg0" />、<paramref name="arg1" /> および <paramref name="arg2" /> の値の文字列形式を連結した結果。</span><span class="sxs-lookup"><span data-stu-id="d5817-1372">The concatenated string representations of the values of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1373">メソッドは、各オブジェクトのパラメーターなしの `ToString` メソッドを呼び出すことによって、`arg0`、`arg1`、および `arg2` を連結します。区切り記号は追加されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1373">The method concatenates `arg0`, `arg1`, and `arg2` by calling the parameterless `ToString` method of each object; it does not add any delimiters.</span></span>

 <span data-ttu-id="d5817-1374"><xref:System.String.Empty?displayProperty=nameWithType> は、null 引数の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1374"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>



## Examples
 <span data-ttu-id="d5817-1375"><xref:System.String.Concat%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1375">The following example demonstrates the <xref:System.String.Concat%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.concat5/CPP/string.concat5.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.concat5/CS/string.concat5.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.concat5/VB/string.concat5.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1, ReadOnlySpan&lt;char&gt; str2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(valuetype System.ReadOnlySpan`1&lt;char&gt; str0, valuetype System.ReadOnlySpan`1&lt;char&gt; str1, valuetype System.ReadOnlySpan`1&lt;char&gt; str2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As ReadOnlySpan(Of Char), str1 As ReadOnlySpan(Of Char), str2 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1, ReadOnlySpan&lt;char&gt; str2);" />
      <MemberSignature Language="F#" Value="static member Concat : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.string.Concat (str0, str1, str2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="str1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="str2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="d5817-1376">連結する最初の読み取り専用文字スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-1376">The first read-only character span to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="d5817-1377">連結する 2 番目の読み取り専用文字スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-1377">The second read-only character span to concatenate.</span></span></param>
        <param name="str2"><span data-ttu-id="d5817-1378">連結する 3 番目の読み取り専用の文字スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-1378">The third read-only character span to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-1379">3 つの指定された読み取り専用文字スパンの文字列形式を連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1379">Concatenates the string representations of three specified read-only character spans.</span></span></summary>
        <returns><span data-ttu-id="d5817-1380"><paramref name="str0" />、<paramref name="str1" />、および <paramref name="str2" /> の値の文字列形式を連結した結果。</span><span class="sxs-lookup"><span data-stu-id="d5817-1380">The concatenated string representations of the values of <paramref name="str0" />, <paramref name="str1" /> and <paramref name="str2" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1, string str2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1, string str2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String, str2 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1, System::String ^ str2);" />
      <MemberSignature Language="F#" Value="static member Concat : string * string * string -&gt; string" Usage="System.string.Concat (str0, str1, str2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
        <Parameter Name="str2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="d5817-1381">連結する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1381">The first string to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="d5817-1382">連結する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1382">The second string to concatenate.</span></span></param>
        <param name="str2"><span data-ttu-id="d5817-1383">連結する 3 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1383">The third string to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-1384"><see cref="T:System.String" /> の指定した 3 つのインスタンスを連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1384">Concatenates three specified instances of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-1385"><paramref name="str0" />、<paramref name="str1" />、および <paramref name="str2" /> の連結。</span><span class="sxs-lookup"><span data-stu-id="d5817-1385">The concatenation of <paramref name="str0" />, <paramref name="str1" />, and <paramref name="str2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1386">メソッドは、`str0`、`str1`、および `str2`を連結します。区切り記号は追加されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1386">The method concatenates `str0`, `str1`, and `str2`; it does not add any delimiters.</span></span>

## Examples
 <span data-ttu-id="d5817-1387">次の例では、<xref:System.String.Concat%2A> メソッドを使用して、3つの文字列を連結し、結果を表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1387">The following example uses the <xref:System.String.Concat%2A> method to concatenate three strings and displays the result.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.concat/cpp/Concat6.cpp" id="Snippet6":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/Concat6.cs" interactive="try-dotnet" id="Snippet6":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/Concat6.vb" id="Snippet6":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberSignature Language="F#" Value="static member Concat : obj * obj * obj * obj -&gt; string" Usage="System.string.Concat (arg0, arg1, arg2, arg3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Object" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg3" Type="System.Object" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="arg0"><span data-ttu-id="d5817-1388">連結する最初のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1388">The first object to concatenate.</span></span></param>
        <param name="arg1"><span data-ttu-id="d5817-1389">連結する 2 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1389">The second object to concatenate.</span></span></param>
        <param name="arg2"><span data-ttu-id="d5817-1390">連結する 3 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1390">The third object to concatenate.</span></span></param>
        <param name="arg3"><span data-ttu-id="d5817-1391">連結する 4 番目のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1391">The fourth object to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-1392">4 つの指定したオブジェクトと、オプションの可変長パラメーター リストで指定した任意のオブジェクトの文字列表現を連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1392">Concatenates the string representations of four specified objects and any objects specified in an optional variable length parameter list.</span></span></summary>
        <returns><span data-ttu-id="d5817-1393">パラメーター リスト内の各値の文字列を連結した結果。</span><span class="sxs-lookup"><span data-stu-id="d5817-1393">The concatenated string representation of each value in the parameter list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  <span data-ttu-id="d5817-1394">この API は、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1394">This API is not CLS-compliant.</span></span> <span data-ttu-id="d5817-1395">CLS 準拠の代わりとして <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType> を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1395">The CLS-compliant alternative is <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-1396">およびC# Visual Basic コンパイラは、このメソッドへの呼び出しを <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>の呼び出しとして自動的に解決します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1396">The C# and Visual Basic compilers automatically resolve a call to this method as a call to <xref:System.String.Concat%28System.Object%5B%5D%29?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="d5817-1397">メソッドは、パラメーターなしの `ToString` メソッドを呼び出すことによって、パラメーターリスト内の各オブジェクトを連結します。区切り記号は追加されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1397">The method concatenates each object in the parameter list by calling its parameterless `ToString` method; it does not add any delimiters.</span></span>

 <span data-ttu-id="d5817-1398"><xref:System.String.Empty?displayProperty=nameWithType> は、null 引数の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1398"><xref:System.String.Empty?displayProperty=nameWithType> is used in place of any null argument.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-1399"><xref:System.String.Concat%2A> メソッドの最後のパラメーターは、連結する1つ以上の追加オブジェクトのコンマ区切りのリストです (省略可能)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1399">The last parameter of the  <xref:System.String.Concat%2A> method is an optional comma-delimited list of one or more additional objects to concatenate.</span></span>



## Examples
 <span data-ttu-id="d5817-1400">次の例は、<xref:System.String.Concat%28System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> メソッドを使用して、変数パラメーターの一覧を連結する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1400">The following example illustrates the use of the <xref:System.String.Concat%28System.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method to concatenate a list of variable parameters.</span></span> <span data-ttu-id="d5817-1401">この場合、メソッドは9個のパラメーターを使用して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1401">In this case, the method is called with nine parameters.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat4.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat4.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-1402">このメソッドは <see langword="vararg" /> キーワードでマークされています。これは、可変個のパラメーターをサポートしていることを意味します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1402">This method is marked with the <see langword="vararg" /> keyword, which means that it supports a variable number of parameters.</span></span> <span data-ttu-id="d5817-1403">メソッドはビジュアルC++から呼び出すことができますが、または Visual Basic C#コードから呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1403">The method can be called from Visual C++, but it cannot be called from C# or Visual Basic code.</span></span> <span data-ttu-id="d5817-1404">およびC# Visual Basic コンパイラは、<see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /> の呼び出しを <see cref="M:System.String.Concat(System.Object[])" />の呼び出しとして解決します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1404">The C# and Visual Basic compilers resolve calls to <see cref="M:System.String.Concat(System.Object,System.Object,System.Object,System.Object)" /> as calls to <see cref="M:System.String.Concat(System.Object[])" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1, ReadOnlySpan&lt;char&gt; str2, ReadOnlySpan&lt;char&gt; str3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(valuetype System.ReadOnlySpan`1&lt;char&gt; str0, valuetype System.ReadOnlySpan`1&lt;char&gt; str1, valuetype System.ReadOnlySpan`1&lt;char&gt; str2, valuetype System.ReadOnlySpan`1&lt;char&gt; str3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As ReadOnlySpan(Of Char), str1 As ReadOnlySpan(Of Char), str2 As ReadOnlySpan(Of Char), str3 As ReadOnlySpan(Of Char)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(ReadOnlySpan&lt;char&gt; str0, ReadOnlySpan&lt;char&gt; str1, ReadOnlySpan&lt;char&gt; str2, ReadOnlySpan&lt;char&gt; str3);" />
      <MemberSignature Language="F#" Value="static member Concat : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; string" Usage="System.string.Concat (str0, str1, str2, str3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="str1" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="str2" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="str3" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="3" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="d5817-1405">連結する最初の読み取り専用文字スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-1405">The first read-only character span to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="d5817-1406">連結する 2 番目の読み取り専用文字スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-1406">The second read-only character span to concatenate.</span></span></param>
        <param name="str2"><span data-ttu-id="d5817-1407">連結する 3 番目の読み取り専用の文字スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-1407">The third read-only character span to concatenate.</span></span></param>
        <param name="str3"><span data-ttu-id="d5817-1408">連結する 4 番目の読み取り専用の文字スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-1408">The fourth read-only character span to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-1409">4 つの指定された読み取り専用文字スパンの文字列形式を連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1409">Concatenates the string representations of four specified read-only character spans.</span></span></summary>
        <returns><span data-ttu-id="d5817-1410"><paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" />、および <paramref name="str3" /> の値の文字列形式を連結した結果。</span><span class="sxs-lookup"><span data-stu-id="d5817-1410">The concatenated string representations of the values of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" /> and <paramref name="str3" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Concat">
      <MemberSignature Language="C#" Value="public static string Concat (string str0, string str1, string str2, string str3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat(string str0, string str1, string str2, string str3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat (str0 As String, str1 As String, str2 As String, str3 As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Concat(System::String ^ str0, System::String ^ str1, System::String ^ str2, System::String ^ str3);" />
      <MemberSignature Language="F#" Value="static member Concat : string * string * string * string -&gt; string" Usage="System.string.Concat (str0, str1, str2, str3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str0" Type="System.String" />
        <Parameter Name="str1" Type="System.String" />
        <Parameter Name="str2" Type="System.String" />
        <Parameter Name="str3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str0"><span data-ttu-id="d5817-1411">連結する最初の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1411">The first string to concatenate.</span></span></param>
        <param name="str1"><span data-ttu-id="d5817-1412">連結する 2 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1412">The second string to concatenate.</span></span></param>
        <param name="str2"><span data-ttu-id="d5817-1413">連結する 3 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1413">The third string to concatenate.</span></span></param>
        <param name="str3"><span data-ttu-id="d5817-1414">連結する 4 番目の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1414">The fourth string to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-1415">指定した 4 つの <see cref="T:System.String" /> インスタンスを連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1415">Concatenates four specified instances of <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-1416"><paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" />、および <paramref name="str3" /> の連結。</span><span class="sxs-lookup"><span data-stu-id="d5817-1416">The concatenation of <paramref name="str0" />, <paramref name="str1" />, <paramref name="str2" />, and <paramref name="str3" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1417">メソッドは、`str0`、`str1`、`str2`、および `str3`を連結します。区切り記号は追加されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1417">The method concatenates `str0`, `str1`, `str2`, and `str3`; it does not add any delimiters.</span></span>

## Examples
 <span data-ttu-id="d5817-1418">次の例では、4文字の単語の配列を定義し、それらの文字をスクランブルするために文字列配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1418">The following example defines an array of four-letter words and stores their individual letters to a string array in order to scramble them.</span></span> <span data-ttu-id="d5817-1419">次に、<xref:System.String.Concat%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> メソッドを呼び出して、スクランブルされた単語を再アセンブルします。</span><span class="sxs-lookup"><span data-stu-id="d5817-1419">It then calls the <xref:System.String.Concat%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> method to reassemble the scrambled words.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat4.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat4.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Concat&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Concat&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Concat(Of T) (values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Concat(System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;'T&gt; -&gt; string" Usage="System.string.Concat values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="d5817-1420"><paramref name="values" /> のメンバーの型。</span><span class="sxs-lookup"><span data-stu-id="d5817-1420">The type of the members of <paramref name="values" />.</span></span></typeparam>
        <param name="values"><span data-ttu-id="d5817-1421"><see cref="T:System.Collections.Generic.IEnumerable`1" /> インターフェイスを実装するコレクション オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1421">A collection object that implements the <see cref="T:System.Collections.Generic.IEnumerable`1" /> interface.</span></span></param>
        <summary><span data-ttu-id="d5817-1422"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 実装のメンバーを連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1422">Concatenates the members of an <see cref="T:System.Collections.Generic.IEnumerable`1" /> implementation.</span></span></summary>
        <returns><span data-ttu-id="d5817-1423"><paramref name="values" /> 内のメンバーの連結結果。</span><span class="sxs-lookup"><span data-stu-id="d5817-1423">The concatenated members in <paramref name="values" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1424">メソッドは `values`内の各オブジェクトを連結します。区切り記号は追加されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1424">The method concatenates each object in `values`; it does not add any delimiters.</span></span>

 <span data-ttu-id="d5817-1425"><xref:System.String.Empty?displayProperty=nameWithtype> 文字列は、null 引数の代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1425">An <xref:System.String.Empty?displayProperty=nameWithtype> string is used in place of any null argument.</span></span>

 <span data-ttu-id="d5817-1426"><xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> は、最初に要素を文字列に変換することなく、<xref:System.Collections.Generic.IEnumerable%601> コレクション内の各要素を連結できる便利なメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1426"><xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each element in an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting the elements to strings.</span></span> <span data-ttu-id="d5817-1427">この例に示すように、統合言語クエリ (LINQ) クエリ式では特に便利です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1427">It is particularly useful with Language-Integrated Query (LINQ) query expressions, as the example illustrates.</span></span> <span data-ttu-id="d5817-1428"><xref:System.Collections.Generic.IEnumerable%601> コレクション内の各オブジェクトの文字列形式は、そのオブジェクトの `ToString` メソッドを呼び出すことによって取得されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1428">The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.</span></span>



## Examples
 <span data-ttu-id="d5817-1429">次の例では、単純な `Animal` クラスを定義しています。このクラスには、動物の名前と、それが属する順序が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1429">The following example defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs.</span></span> <span data-ttu-id="d5817-1430">次に、多数の `Animal` オブジェクトを格納する <xref:System.Collections.Generic.List%601> オブジェクトを定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1430">It then defines a <xref:System.Collections.Generic.List%601> object to contain a number of `Animal` objects.</span></span> <span data-ttu-id="d5817-1431"><xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> 拡張メソッドは、`Order` プロパティが "げっ歯類" と等しい `Animal` オブジェクトを抽出するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1431">The <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> extension method is called to extract the `Animal` objects whose `Order` property equals "Rodent".</span></span> <span data-ttu-id="d5817-1432">結果は <xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> メソッドに渡され、コンソールに表示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1432">The result is passed to the <xref:System.String.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method and displayed to the console.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.concat/cs/concat3.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.concat/vb/concat3.vb" id="Snippet4":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1433"><paramref name="values" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1433"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(char value);" />
      <MemberSignature Language="F#" Value="member this.Contains : char -&gt; bool" Usage="string.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-1434">検索対象の文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-1434">The character to seek.</span></span></param>
        <summary><span data-ttu-id="d5817-1435">指定した文字がこの文字列内に存在するかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1435">Returns a value indicating whether a specified character occurs within this string.</span></span></summary>
        <returns><span data-ttu-id="d5817-1436"><paramref name="value" /> パラメーターがこの文字列内で発生する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1436"><see langword="true" /> if the <paramref name="value" /> parameter occurs within this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="string.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-1437">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1437">The string to seek.</span></span></param>
        <summary><span data-ttu-id="d5817-1438">指定した部分文字列がこの文字列内に存在するかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1438">Returns a value indicating whether a specified substring occurs within this string.</span></span></summary>
        <returns><span data-ttu-id="d5817-1439"><paramref name="value" /> パラメーターがこの文字列内に存在するか、<paramref name="value" /> が空の文字列 ("") の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1439"><see langword="true" /> if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1440">このメソッドは、序数 (大文字と小文字を区別し、カルチャに依存しない) の比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1440">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span> <span data-ttu-id="d5817-1441">検索は、この文字列の最初の文字位置から開始され、最後の文字位置まで続きます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1441">The search begins at the first character position of this string and continues through the last character position.</span></span>

 <span data-ttu-id="d5817-1442">序数による比較 (カルチャに依存した比較、または大文字と小文字を区別しない比較など) を使用して文字列に指定した部分文字列が含まれているかどうかを確認するには、カスタムメソッドを作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1442">To determine whether a string contains a specified substring by using something other than ordinal comparison (such as culture-sensitive comparison, or ordinal case-insensitive comparison), you can create a custom method.</span></span> <span data-ttu-id="d5817-1443">このような方法の例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1443">The following example illustrates one such approach.</span></span> <span data-ttu-id="d5817-1444">これは、<xref:System.StringComparison> パラメーターを含む <xref:System.String> 拡張メソッドを定義し、指定された形式の文字列比較を使用する場合に文字列に部分文字列が含まれるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1444">It defines a <xref:System.String> extension method  that includes a <xref:System.StringComparison> parameter and indicates whether a string contains a substring when using the specified form of string comparison.</span></span>

 [!code-csharp[System.String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#1)]
 [!code-vb[System.String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#1)]

 <span data-ttu-id="d5817-1445">次の例では、`Contains` 拡張メソッドを呼び出して、序数による比較と大文字と小文字を区別しない序数比較を使用する場合に、文字列内で部分文字列が見つかったかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1445">The following example then calls the `Contains` extension method to determine whether a substring is found in a string when using ordinal comparison and case-insensitive ordinal comparison.</span></span>

 [!code-csharp[System.String.Contains#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Contains/cs/ContainsExt1.cs#2)]
 [!code-vb[System.String.Contains#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Contains/vb/ContainsExt1.vb#2)]

 <span data-ttu-id="d5817-1446">現在のインスタンス内の部分文字列 `value` の位置を知りたい場合は、<xref:System.String.IndexOf%2A> メソッドを呼び出して最初に出現する位置を取得します。または、<xref:System.String.LastIndexOf%2A> メソッドを呼び出して、最後に出現する位置を取得できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1446">If you are interested in the position of the substring `value` in the current instance, you can call the <xref:System.String.IndexOf%2A> method to get the starting position of its first occurrence, or you can call the <xref:System.String.LastIndexOf%2A> method to get the starting position of its last occurrence.</span></span> <span data-ttu-id="d5817-1447">この例では、文字列インスタンスで部分文字列が見つかった場合の <xref:System.String.IndexOf%28System.String%29> メソッドの呼び出しが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1447">The example includes a call to the <xref:System.String.IndexOf%28System.String%29> method if a substring is found in a string instance.</span></span>



## Examples
 <span data-ttu-id="d5817-1448">次の例では、文字列 "fox" が、使い慣れた引用符の部分文字列であるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1448">The following example determines whether the string "fox" is a substring of a familiar quotation.</span></span> <span data-ttu-id="d5817-1449">文字列内に "fox" が見つかった場合は、その開始位置も表示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1449">If "fox" is found in the string, it also displays its starting position.</span></span>

 [!code-cpp[String.Contains#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.contains/CPP/cont.cpp#1)]
 [!code-csharp-interactive[String.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.contains/CS/cont.cs#1)]
 [!code-vb[String.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.contains/VB/cont.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1450"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1450"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (char value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(char value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.Char,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Char, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(char value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.Contains : char * StringComparison -&gt; bool" Usage="string.Contains (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-1451">検索対象の文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-1451">The character to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-1452">比較で使用する規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-1452">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="d5817-1453">指定された比較規則を使用して、指定された文字がこの文字列内に含まれるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1453">Returns a value indicating whether a specified character occurs within this string, using the specified comparison rules.</span></span></summary>
        <returns><span data-ttu-id="d5817-1454"><paramref name="value" /> パラメーターがこの文字列内で発生する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1454"><see langword="true" /> if the <paramref name="value" /> parameter occurs within this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Contains(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.Contains : string * StringComparison -&gt; bool" Usage="string.Contains (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-1455">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1455">The string to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-1456">比較で使用する規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-1456">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="d5817-1457">指定された比較規則を使用して、指定された文字列がこの文字列内に含まれるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1457">Returns a value indicating whether a specified string occurs within this string, using the specified comparison rules.</span></span></summary>
        <returns><span data-ttu-id="d5817-1458"><paramref name="value" /> パラメーターがこの文字列内に存在するか、<paramref name="value" /> が空の文字列 ("") の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1458"><see langword="true" /> if the <paramref name="value" /> parameter occurs within this string, or if <paramref name="value" /> is the empty string (""); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static string Copy (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Copy(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Copy(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Copy (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Copy(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Copy : string -&gt; string" Usage="System.string.Copy str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.Obsolete("This API should not be used to create mutable strings. See https://go.microsoft.com/fwlink/?linkid=2084035 for alternatives.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="d5817-1459">コピーする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1459">The string to copy.</span></span></param>
        <summary><span data-ttu-id="d5817-1460">指定した <see cref="T:System.String" /> と同じ値を使用して、<see cref="T:System.String" /> の新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1460">Creates a new instance of <see cref="T:System.String" /> with the same value as a specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-1461"><paramref name="str" /> と同じ値を持つ新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1461">A new string with the same value as <paramref name="str" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-1462">`Copy` メソッドは、元の文字列と同じ値を持ち、別のオブジェクト参照を表す <xref:System.String> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1462">The `Copy` method returns a <xref:System.String> object that has the same value as the original string but represents a different object reference.</span></span> <span data-ttu-id="d5817-1463">これは代入演算とは異なり、既存の文字列参照を追加のオブジェクト変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1463">It differs from an assignment operation, which assigns an existing string reference to an additional object variable.</span></span>

> [!IMPORTANT]
>  <span data-ttu-id="d5817-1464">.NET Core 3.0 以降では、このメソッドは互換性のために残されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1464">Starting with .NET Core 3.0, this method is obsolete.</span></span> <span data-ttu-id="d5817-1465">ただし、.NET の実装では使用しないことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-1465">However, we do not recommend its use in any .NET implementation.</span></span> <span data-ttu-id="d5817-1466">特に、.NET Core 3.0 では文字列インターンが変更されているため、`Copy` メソッドは新しい文字列を作成せず、単に既存のインターン文字列への参照を返す場合があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1466">In particular, because of changes in string interning in .NET Core 3.0, in some cases the `Copy` method will not create a new string but will simply return a reference to an existing interned string.</span></span>

<span data-ttu-id="d5817-1467">`Copy` メソッドを呼び出す理由に応じて、いくつかの代替手段があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1467">Depending on Why you want to call the `Copy` method, there are a number of alternatives:</span></span>

- <span data-ttu-id="d5817-1468">文字列を変更する操作で別の文字列インスタンスを使用する場合は、元の文字列インスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1468">If you want a different string instance to use in an operation that modifies the string, use the original string instance.</span></span> <span data-ttu-id="d5817-1469">文字列は不変であるため、文字列操作は新しい文字列インスタンスを作成し、元の文字列は影響を受けません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1469">Because strings are immutable, the string operation creates a new string instance, and the original string remains unaffected.</span></span> <span data-ttu-id="d5817-1470">この場合、元の文字列変数に新しい文字列参照を割り当てないでください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1470">In this case, you should not assign the new string reference to the original string variable.</span></span> <span data-ttu-id="d5817-1471">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1471">The following example provides an illustration.</span></span>

  [!code-csharp[Performing a string operation](~/samples/snippets/csharp/api/system/string/copy/program.cs#1)]
  [!code-vb[Performing a string operation](~/samples/snippets/visualbasic/api/system/string/copy/program.vb#1)]

   <span data-ttu-id="d5817-1472">この場合、<xref:System.String.Substring%2A> メソッドを呼び出す前に新しい文字列を作成するために `Copy` メソッドを呼び出すと、新しい文字列インスタンスが不必要に作成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1472">In this case, calling the `Copy` method to create a new string before calling the <xref:System.String.Substring%2A> method unnecessarily creates a new string instance.</span></span>

- <span data-ttu-id="d5817-1473">元の文字列と同じ内容の変更可能なバッファーを作成する場合は、<xref:System.String.ToCharArray%2A?displayProperty=nameWithType> または <xref:System.Text.StringBuilder.%23ctor(System.String)?displayProperty=nameWithType> コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1473">If you want to create a mutable buffer with the same contents as the original string, call the <xref:System.String.ToCharArray%2A?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.%23ctor(System.String)?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="d5817-1474">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1474">For example:</span></span>

  [!code-csharp[Performing a string operation](~/samples/snippets/csharp/api/system/string/copy/program.cs#2)]
  [!code-vb[Performing a string operation](~/samples/snippets/visualbasic/api/system/string/copy/program.vb#2)]

- <span data-ttu-id="d5817-1475">アンセーフコードを使用して文字列の内容を変更できるように、文字列の変更可能なコピーを作成する場合は、<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1475">If you want to create a mutable copy of the string so that you can use unsafe code to modify the string contents, use <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d5817-1476">次の例では、<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType> メソッドを使用して、アンマネージメモリ内のコピーされた文字列の位置へのポインターを取得し、文字列内の各文字の Unicode コードポイントを1つずつインクリメントし、結果の文字列をマネージ文字列にコピーして戻します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1476">The following example uses the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=nameWithType> method to get a pointer to the location of an copied string in unmanaged memory, increments the Unicode code point of each character in the string by one, and copies the resulting string back to a managed string.</span></span>

  [!code-csharp[Performing a string operation](~/samples/snippets/csharp/api/system/string/copy/program.cs#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1477"><paramref name="str" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1477"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 sourceIndex, char[] destination, int32 destinationIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int sourceIndex, cli::array &lt;char&gt; ^ destination, int destinationIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * char[] * int * int -&gt; unit" Usage="string.CopyTo (sourceIndex, destination, destinationIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.Char[]" />
        <Parameter Name="destinationIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceIndex"><span data-ttu-id="d5817-1478">コピーする、このインスタンス内の最初の文字のインデックス。</span><span class="sxs-lookup"><span data-stu-id="d5817-1478">The index of the first character in this instance to copy.</span></span></param>
        <param name="destination"><span data-ttu-id="d5817-1479">このインスタンスの文字のコピー先となる Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1479">An array of Unicode characters to which characters in this instance are copied.</span></span></param>
        <param name="destinationIndex"><span data-ttu-id="d5817-1480">コピー操作を開始する <paramref name="destination" /> のインデックス。</span><span class="sxs-lookup"><span data-stu-id="d5817-1480">The index in <paramref name="destination" /> at which the copy operation begins.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-1481"><paramref name="destination" /> へコピーされるこのインスタンスの文字の数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1481">The number of characters in this instance to copy to <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="d5817-1482">このインスタンスの指定位置から指定した数の文字を、Unicode 文字の配列内の指定位置へコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5817-1482">Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1483">このメソッドは、このインスタンスの `sourceIndex` 位置から `count` 文字を `destination` 文字配列の `destinationIndex` 位置にコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5817-1483">This method copies `count` characters from the `sourceIndex` position of this instance to the `destinationIndex` position of `destination` character array.</span></span> <span data-ttu-id="d5817-1484">このメソッドは `destination` 文字配列のサイズを変更しません。コピーされた文字を格納するのに十分な数の要素が必要です。または、メソッドが <xref:System.ArgumentOutOfRangeException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="d5817-1484">This method does not resize the `destination` character array; it must have a sufficient number of elements to accommodate the copied characters or the method throws an <xref:System.ArgumentOutOfRangeException>.</span></span>

 <span data-ttu-id="d5817-1485">`sourceIndex` と `destinationIndex` は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1485">`sourceIndex` and `destinationIndex` are zero-based.</span></span>



## Examples
 <span data-ttu-id="d5817-1486"><xref:System.String.CopyTo%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1486">The following example demonstrates the <xref:System.String.CopyTo%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringcopyto/CPP/stringcopyto.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringcopyto/CS/stringcopyto.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringcopyto/VB/stringcopyto.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1487"><paramref name="destination" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1487"><paramref name="destination" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-1488"><paramref name="sourceIndex" />、 <paramref name="destinationIndex" />、または <paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1488"><paramref name="sourceIndex" />, <paramref name="destinationIndex" />, or <paramref name="count" /> is negative</span></span>

<span data-ttu-id="d5817-1489">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1489">-or-</span></span>

 <span data-ttu-id="d5817-1490"><paramref name="sourceIndex" /> が現在のインスタンス内の位置を識別していません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1490"><paramref name="sourceIndex" /> does not identify a position in the current instance.</span></span>

<span data-ttu-id="d5817-1491">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1491">-or-</span></span>

 <span data-ttu-id="d5817-1492"><paramref name="destinationIndex" /> が、 <paramref name="destination" /> 配列内の有効なインデックスを識別していません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1492"><paramref name="destinationIndex" /> does not identify a valid index in the <paramref name="destination" /> array.</span></span>

<span data-ttu-id="d5817-1493">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1493">-or-</span></span>

 <span data-ttu-id="d5817-1494"><paramref name="count" /> は、このインスタンスの <paramref name="sourceIndex" /> から末尾までの部分文字列の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1494"><paramref name="count" /> is greater than the length of the substring from <paramref name="sourceIndex" /> to the end of this instance</span></span>

<span data-ttu-id="d5817-1495">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1495">-or-</span></span>

 <span data-ttu-id="d5817-1496"><paramref name="count" /> は、<paramref name="destination" /> 配列の <paramref name="destinationIndex" /> から末尾までの部分配列の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1496"><paramref name="count" /> is greater than the length of the subarray from <paramref name="destinationIndex" /> to the end of the <paramref name="destination" /> array.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public static string Create&lt;TState&gt; (int length, TState state, System.Buffers.SpanAction&lt;char,TState&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Create&lt;TState&gt;(int32 length, !!TState state, class System.Buffers.SpanAction`2&lt;char, !!TState&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Create``1(System.Int32,``0,System.Buffers.SpanAction{System.Char,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TState) (length As Integer, state As TState, action As SpanAction(Of Char, TState)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; static System::String ^ Create(int length, TState state, System::Buffers::SpanAction&lt;char, TState&gt; ^ action);" />
      <MemberSignature Language="F#" Value="static member Create : int * 'State * System.Buffers.SpanAction&lt;char, 'State&gt; -&gt; string" Usage="System.string.Create (length, state, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="state" Type="TState" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="action" Type="System.Buffers.SpanAction&lt;System.Char,TState&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="TState"><span data-ttu-id="d5817-1497"><paramref name="action" />に渡す要素の型。</span><span class="sxs-lookup"><span data-stu-id="d5817-1497">The type of the element to pass to <paramref name="action" />.</span></span></typeparam>
        <param name="length"><span data-ttu-id="d5817-1498">作成する文字列の長さ。</span><span class="sxs-lookup"><span data-stu-id="d5817-1498">The length of the string to create.</span></span></param>
        <param name="state"><span data-ttu-id="d5817-1499"><paramref name="action" /> に渡す要素。</span><span class="sxs-lookup"><span data-stu-id="d5817-1499">The element to pass to <paramref name="action" />.</span></span></param>
        <param name="action"><span data-ttu-id="d5817-1500">文字列を初期化するコールバック。</span><span class="sxs-lookup"><span data-stu-id="d5817-1500">A callback to initialize the string.</span></span></param>
        <summary><span data-ttu-id="d5817-1501">特定の長さの新しい文字列を作成し、作成後に指定したコールバックを使用してそれを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1501">Creates a new string with a specific length and initializes it after creation by using the specified callback.</span></span></summary>
        <returns><span data-ttu-id="d5817-1502">作成された文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1502">The created string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks
<span data-ttu-id="d5817-1503">`action` に渡されるターゲットスパンの初期コンテンツは定義されていません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1503">The initial content of the destination span passed to `action` is undefined.</span></span> <span data-ttu-id="d5817-1504">そのため、範囲のすべての要素が割り当てられるようにするのは、デリゲートの役割です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1504">Therefore, it is the delegate's responsibility to ensure that every element of the span is assigned.</span></span> <span data-ttu-id="d5817-1505">それ以外の場合、結果の文字列にはランダムな文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1505">Otherwise, the resulting string could contain random characters.</span></span>
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly string Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string Empty" />
      <MemberSignature Language="DocId" Value="F:System.String.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As String " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::String ^ Empty;" />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : string" Usage="System.string.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d5817-1506">空の文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1506">Represents the empty string.</span></span> <span data-ttu-id="d5817-1507">このフィールドは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1507">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1508">このフィールドの値は、長さが0の文字列 "" です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1508">The value of this field is the zero-length string, "".</span></span>

 <span data-ttu-id="d5817-1509">アプリケーションコードでは、このフィールドは、文字列変数を空の文字列に初期化するために割り当てで最もよく使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1509">In application code, this field is most commonly used in assignments to initialize a string variable to an empty string.</span></span> <span data-ttu-id="d5817-1510">文字列の値が `null` か <xref:System.String.Empty?displayProperty=nameWithType>かをテストするには、<xref:System.String.IsNullOrEmpty%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1510">To test whether the value of a string is either `null` or <xref:System.String.Empty?displayProperty=nameWithType>, use the <xref:System.String.IsNullOrEmpty%2A> method.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrEmpty(System.String)" />
        <altmember cref="M:System.String.IsNullOrWhiteSpace(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EndsWith">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-1511">この文字列インスタンスの末尾が、指定した文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1511">Determines whether the end of this string instance matches a specified string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (char value);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(char value) cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.Char)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As Char) As Boolean" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(char value);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberSignature Language="F#" Value="member this.EndsWith : char -&gt; bool" Usage="string.EndsWith value" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-1512">このインスタンスの末尾の文字と比較する文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-1512">The character to compare to the character at the end of this instance.</span></span></param>
        <summary><span data-ttu-id="d5817-1513">この文字列インスタンスの末尾が、指定した文字と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1513">Determines whether the end of this string instance matches the specified character.</span></span></summary>
        <returns><span data-ttu-id="d5817-1514">このインスタンスの末尾が <paramref name="value" /> と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1514"><see langword="true" /> if <paramref name="value" /> matches the end of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-1515">このメソッドは、現在のカルチャを使用して、大文字と小文字を区別し、カルチャに依存した比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1515">This method performs a case-sensitive and culture-sensitive comparison using the current culture.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string -&gt; bool" Usage="string.EndsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-1516">このインスタンスの末尾の部分文字列と比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1516">The string to compare to the substring at the end of this instance.</span></span></param>
        <summary><span data-ttu-id="d5817-1517">この文字列インスタンスの末尾が、指定した文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1517">Determines whether the end of this string instance matches the specified string.</span></span></summary>
        <returns><span data-ttu-id="d5817-1518">このインスタンスの末尾が <paramref name="value" /> と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1518"><see langword="true" /> if <paramref name="value" /> matches the end of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1519">このメソッドは、`value` を、このインスタンスの末尾にある `value`と同じ長さの部分文字列と比較し、等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1519">This method compares `value` to the substring at the end of this instance that is the same length as `value`, and returns an indication whether they are equal.</span></span> <span data-ttu-id="d5817-1520">同じにするには、`value` 同じインスタンスへの参照であるか、またはこのインスタンスの末尾と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1520">To be equal, `value` must be a reference to this same instance or match the end of this instance.</span></span>

 <span data-ttu-id="d5817-1521">このメソッドは、現在のカルチャを使用して、単語 (大文字と小文字を区別し、カルチャに依存する) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1521">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span>



## Examples
 <span data-ttu-id="d5817-1522">次の例では、配列内の各文字列の末尾がピリオド (".") であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1522">The following example indicates whether each string in an array ends with a period (".").</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.EndsWith/cs/EndsWith1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.EndsWith/vb/EndsWith1.vb" id="Snippet1":::

 <span data-ttu-id="d5817-1523">次の例では、<xref:System.String.EndsWith%28System.String%29> メソッドを使用して、行末から HTML 終了タグを削除する `StripEndTags` メソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1523">The following example defines a `StripEndTags` method that uses the <xref:System.String.EndsWith%28System.String%29> method to remove HTML end tags from the end of a line.</span></span> <span data-ttu-id="d5817-1524">`StripEndTags` メソッドは、行の末尾にある複数の HTML 終了タグが削除されるように、再帰的に呼び出されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1524">Note that the  `StripEndTags` method is called recursively to ensure that multiple HTML end tags at the end of the line are removed.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringendswith/CPP/stringendswith.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringendswith/CS/stringendswith.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringendswith/VB/stringendswith.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1525"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1525"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-1526">「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」で説明したように、既定値を置き換える文字列比較メソッドを呼び出さずに、パラメーターを明示的に指定する必要があるメソッドを呼び出すことを避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-1526">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="d5817-1527">現在のカルチャの文字列比較規則を使用して文字列が特定の部分文字列で終わるかどうかを確認するには、その <paramref name="comparisonType" /> パラメーターに <see cref="F:System.StringComparison.CurrentCulture" /> 値を指定して、<see cref="M:System.String.EndsWith(System.String,System.StringComparison)" /> メソッドのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1527">To determine whether a string ends with a particular substring by using the string comparison rules of the current culture, call the <see cref="M:System.String.EndsWith(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.StartsWith(System.String)" />
        <altmember cref="M:System.String.Compare(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string * StringComparison -&gt; bool" Usage="string.EndsWith (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-1528">このインスタンスの末尾の部分文字列と比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1528">The string to compare to the substring at the end of this instance.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-1529">この文字列と <paramref name="value" /> との比較方法を決定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-1529">One of the enumeration values that determines how this string and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="d5817-1530">指定された比較オプションを使って比較した場合に、この文字列インスタンスの末尾が、指定された文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1530">Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</span></span></summary>
        <returns><span data-ttu-id="d5817-1531"><paramref name="value" /> パラメーターがこの文字列の末尾と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1531"><see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1532"><xref:System.String.EndsWith%2A> メソッドは、`value` パラメーターをこの文字列の末尾の部分文字列と比較し、等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1532">The <xref:System.String.EndsWith%2A> method compares the `value` parameter to the substring at the end of this string and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="d5817-1533">同じにするには、`value` がこの同じ文字列への参照であるか、空の文字列 ("") であるか、またはこの文字列の末尾と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1533">To be equal, `value` must be a reference to this same string, must be the empty string (""), or must match the end of this string.</span></span> <span data-ttu-id="d5817-1534"><xref:System.String.EndsWith%2A> メソッドによって実行される比較の種類は、`comparisonType` パラメーターの値によって異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1534">The type of comparison performed by the <xref:System.String.EndsWith%2A> method depends on the value of the `comparisonType` parameter.</span></span>



## Examples
 <span data-ttu-id="d5817-1535">次の例では、文字列が特定の部分文字列で終わるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1535">The following example determines whether a string ends with a particular substring.</span></span> <span data-ttu-id="d5817-1536">結果は、カルチャの選択、case が無視されるかどうか、および序数に基づく比較が実行されるかどうかによって影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1536">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.EndsWithCmp/cpp/ewcmp.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.EndsWithCmp/cs/ewcmp.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.EndsWithCmp/vb/ewcmp.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1537"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1537"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-1538"><paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1538"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="T:System.StringComparison" />
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EndsWith(string value, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndsWith (value As String, ignoreCase As Boolean, culture As CultureInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndsWith(System::String ^ value, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.EndsWith : string * bool * System.Globalization.CultureInfo -&gt; bool" Usage="string.EndsWith (value, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-1539">このインスタンスの末尾の部分文字列と比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1539">The string to compare to the substring at the end of this instance.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d5817-1540">比較時に大文字と小文字の区別を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1540"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="d5817-1541">このインスタンスと <paramref name="value" /> との比較方法を決定するカルチャ情報。</span><span class="sxs-lookup"><span data-stu-id="d5817-1541">Cultural information that determines how this instance and <paramref name="value" /> are compared.</span></span> <span data-ttu-id="d5817-1542"><paramref name="culture" /> が <see langword="null" /> の場合は、現在のカルチャが使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1542">If <paramref name="culture" /> is <see langword="null" />, the current culture is used.</span></span></param>
        <summary><span data-ttu-id="d5817-1543">指定されたカルチャを使って比較した場合に、この文字列インスタンスの末尾が、指定された文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1543">Determines whether the end of this string instance matches the specified string when compared using the specified culture.</span></span></summary>
        <returns><span data-ttu-id="d5817-1544"><paramref name="value" /> パラメーターがこの文字列の末尾と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1544"><see langword="true" /> if the <paramref name="value" /> parameter matches the end of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1545">このメソッドは、`value` パラメーターを、`value`と同じ長さの、この文字列の末尾にある部分文字列と比較し、等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1545">This method compares the `value` parameter to the substring at the end of this string that is the same length as `value`, and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="d5817-1546">同じにするには、`value` この同じインスタンスへの参照であるか、またはこの文字列の末尾と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1546">To be equal, `value` must be a reference to this same instance or match the end of this string.</span></span>

 <span data-ttu-id="d5817-1547">このメソッドは、指定された大文字と小文字の区別とカルチャを使用して、単語 (カルチャに依存した) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1547">This method performs a word (culture-sensitive) comparison using the specified casing and culture.</span></span>



## Examples
 <span data-ttu-id="d5817-1548">次の例では、文字列が別の文字列の末尾にあるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1548">The following example determines whether a string occurs at the end of another string.</span></span> <span data-ttu-id="d5817-1549"><xref:System.String.EndsWith%2A> メソッドは、大文字と小文字の区別、大文字と小文字の区別、および検索結果に影響を与えるさまざまなカルチャを使用して、複数回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1549">The <xref:System.String.EndsWith%2A> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.EndsWithCI/cs/ewci.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.EndsWithCI/vb/ewci.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1550"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1550"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="EnumerateRunes">
      <MemberSignature Language="C#" Value="public System.Text.StringRuneEnumerator EnumerateRunes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Text.StringRuneEnumerator EnumerateRunes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.EnumerateRunes" />
      <MemberSignature Language="VB.NET" Value="Public Function EnumerateRunes () As StringRuneEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::StringRuneEnumerator EnumerateRunes();" />
      <MemberSignature Language="F#" Value="member this.EnumerateRunes : unit -&gt; System.Text.StringRuneEnumerator" Usage="string.EnumerateRunes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.StringRuneEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-1551">この文字列から <see cref="T:System.Text.Rune" /> の列挙体を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1551">Returns an enumeration of <see cref="T:System.Text.Rune" /> from this string.</span></span></summary>
        <returns><span data-ttu-id="d5817-1552">文字列ルーン列挙子。</span><span class="sxs-lookup"><span data-stu-id="d5817-1552">A string rune enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

### Remarks

<span data-ttu-id="d5817-1553">無効なシーケンスは、<xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType>によって列挙体で表されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1553">Invalid sequences are represented in the enumeration by <xref:System.Text.Rune.ReplacementChar?displayProperty=nameWithType>.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-1554">2 つの <see cref="T:System.String" /> オブジェクトの値が同一かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1554">Determines whether two <see cref="T:System.String" /> objects have the same value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="string.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="d5817-1555">このインスタンスと比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1555">The string to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="d5817-1556">このインスタンスと、指定したオブジェクトの値が同一かどうかを判断します。<see cref="T:System.String" /> オブジェクトを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1556">Determines whether this instance and a specified object, which must also be a <see cref="T:System.String" /> object, have the same value.</span></span></summary>
        <returns><span data-ttu-id="d5817-1557"><see langword="true" /> が <paramref name="obj" /> で、このインスタンスと同じ値を保持している場合は <see cref="T:System.String" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1557"><see langword="true" /> if <paramref name="obj" /> is a <see cref="T:System.String" /> and its value is the same as this instance; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="d5817-1558"><paramref name="obj" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1558">If <paramref name="obj" /> is <see langword="null" />, the method returns <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1559">このメソッドは、序数 (大文字と小文字を区別し、カルチャに依存しない) の比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1559">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>



## Examples
 <span data-ttu-id="d5817-1560"><xref:System.String.Equals%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1560">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.equals/CPP/equals.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.equals/CS/equals.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.equals/VB/equals.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string value) cil managed" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::String ^ value);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="override this.Equals : string -&gt; bool" Usage="string.Equals value" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(string value) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::String ^ value);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-1561">このインスタンスと比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1561">The string to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="d5817-1562">このインスタンスと、指定した別の <see cref="T:System.String" /> の値が同一かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1562">Determines whether this instance and another specified <see cref="T:System.String" /> object have the same value.</span></span></summary>
        <returns><span data-ttu-id="d5817-1563"><see langword="true" /> パラメーターの値がこのインスタンスの値と同じ場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1563"><see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as the value of this instance; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="d5817-1564"><paramref name="value" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1564">If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1565">このメソッドは、序数 (大文字と小文字を区別し、カルチャに依存しない) の比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1565">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>



## Examples
 <span data-ttu-id="d5817-1566"><xref:System.String.Equals%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1566">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span> <span data-ttu-id="d5817-1567">タイトルの大文字と小文字の "File" を、それと等価な単語、小文字の小文字、大文字、およびラテン小文字 I (U + 0069) ではなく、ラテン文字の小文字の I (U + 0131) を含む単語と比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1567">It compares the title-cased word "File" with an equivalent word, its lowercase equivalent, its uppercase equivalent, and a word that contains LATIN SMALL LETTER DOTLESS I (U+0131) instead of LATIN SMALL LETTER I (U+0069).</span></span> <span data-ttu-id="d5817-1568"><xref:System.String.Equals%28System.String%29> メソッドは序数による比較を実行するため、同一の単語との比較だけが `true`を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1568">Because the <xref:System.String.Equals%28System.String%29> method performs an ordinal comparison, only the comparison with an identical word returns `true`.</span></span>

 [!code-csharp[System.String.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equalsex1.cs#2)]
 [!code-vb[System.String.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equalsex1.vb#2)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (string a, string b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::String ^ a, System::String ^ b);" />
      <MemberSignature Language="F#" Value="static member Equals : string * string -&gt; bool" Usage="System.string.Equals (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="d5817-1569">比較する最初の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1569">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="d5817-1570">比較する 2 番目の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1570">The second string to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d5817-1571">指定した 2 つの <see cref="T:System.String" /> オブジェクトの値が同一かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1571">Determines whether two specified <see cref="T:System.String" /> objects have the same value.</span></span></summary>
        <returns><span data-ttu-id="d5817-1572"><paramref name="a" /> の値が <paramref name="b" /> の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1572"><see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="d5817-1573"><paramref name="a" /> と <paramref name="b" /> の両方が <see langword="null" /> の場合、メソッドは <see langword="true" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1573">If both <paramref name="a" /> and <paramref name="b" /> are <see langword="null" />, the method returns <see langword="true" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1574">このメソッドは、序数 (大文字と小文字を区別し、カルチャに依存しない) の比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1574">This method performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>



## Examples
 <span data-ttu-id="d5817-1575"><xref:System.String.Equals%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1575">The following example demonstrates the <xref:System.String.Equals%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.equals/CPP/equals.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.equals/CS/equals.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.equals/VB/equals.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="override this.Equals : string * StringComparison -&gt; bool" Usage="string.Equals (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-1576">このインスタンスと比較する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1576">The string to compare to this instance.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-1577">文字列の比較方法を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-1577">One of the enumeration values that specifies how the strings will be compared.</span></span></param>
        <summary><span data-ttu-id="d5817-1578">この文字列と、指定した <see cref="T:System.String" /> オブジェクトの値が同一かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1578">Determines whether this string and a specified <see cref="T:System.String" /> object have the same value.</span></span> <span data-ttu-id="d5817-1579">比較に使用するカルチャ、大文字と小文字の区別、および、並べ替え規則をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1579">A parameter specifies the culture, case, and sort rules used in the comparison.</span></span></summary>
        <returns><span data-ttu-id="d5817-1580"><see langword="true" /> パラメーターの値がこの文字列と同じ場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1580"><see langword="true" /> if the value of the <paramref name="value" /> parameter is the same as this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1581">`comparisonType` パラメーターは、比較で現在のカルチャまたはインバリアントカルチャを使用するか、比較する2つの文字列の大文字と小文字を区別するか無視するか、または word または序数の並べ替え規則を使用するかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1581">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</span></span>



## Examples
 <span data-ttu-id="d5817-1582">次の例では、大文字の "I"、小文字の "i"、およびドットではない "ı" で構成される文字列配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1582">The following example creates a string array that consists of an uppercase "I", a lowercase "i", and a dotless "ı".</span></span> <span data-ttu-id="d5817-1583">次に、<xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> メソッドを呼び出して、考えられる各 <xref:System.StringComparison> 列挙値を使用して比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1583">It then calls the <xref:System.String.Equals%28System.String%2CSystem.StringComparison%29> method to compare them by using each possible <xref:System.StringComparison> enumeration value.</span></span>

 [!code-csharp[System.String.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/eqcmp.cs#1)]
 [!code-vb[System.String.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/eqcmp.vb#1)]

 <span data-ttu-id="d5817-1584">次の例では、<xref:System.StringComparison> 列挙体の各メンバーを使用して、4つの単語セットを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1584">The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.</span></span>  <span data-ttu-id="d5817-1585">この比較では、英語 (米国) カルチャとサーミ語 (Upper スウェーデン) カルチャの規則が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1585">The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures.</span></span> <span data-ttu-id="d5817-1586">文字列 "encyclopædia" および "encyclopaedia" は、en-us カルチャでは等価と見なされますが、サーミ語 (北スウェーデン) カルチャでは考慮されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1586">Note that the strings "encyclopædia" and "encyclopaedia" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex4.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex4.vb" id="Snippet4":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-1587"><paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1587"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (string a, string b, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(string a, string b, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Equals(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (a As String, b As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::String ^ a, System::String ^ b, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member Equals : string * string * StringComparison -&gt; bool" Usage="System.string.Equals (a, b, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="b" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="d5817-1588">比較する最初の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1588">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="d5817-1589">比較する 2 番目の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1589">The second string to compare, or <see langword="null" />.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-1590">比較の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-1590">One of the enumeration values that specifies the rules for the comparison.</span></span></param>
        <summary><span data-ttu-id="d5817-1591">指定した 2 つの <see cref="T:System.String" /> オブジェクトの値が同一かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1591">Determines whether two specified <see cref="T:System.String" /> objects have the same value.</span></span> <span data-ttu-id="d5817-1592">比較に使用するカルチャ、大文字と小文字の区別、および、並べ替え規則をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1592">A parameter specifies the culture, case, and sort rules used in the comparison.</span></span></summary>
        <returns><span data-ttu-id="d5817-1593"><see langword="true" /> パラメーターの値が <paramref name="a" /> パラメーターの値に等しい場合は <paramref name="b" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-1593"><see langword="true" /> if the value of the <paramref name="a" /> parameter is equal to the value of the <paramref name="b" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1594">`comparisonType` パラメーターは、比較で現在のカルチャまたはインバリアントカルチャを使用するか、比較する2つの文字列の大文字と小文字を区別するか無視するか、または word または序数の並べ替え規則を使用するかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1594">The `comparisonType` parameter indicates whether the comparison should use the current or invariant culture, honor or ignore the case of the two strings being compared, or use word or ordinal sort rules.</span></span>



## Examples
 <span data-ttu-id="d5817-1595">次の例では、<xref:System.StringComparison> 列挙体の各メンバーを使用して、4つの単語セットを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1595">The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.</span></span>  <span data-ttu-id="d5817-1596">この比較では、英語 (米国) カルチャとサーミ語 (Upper スウェーデン) カルチャの規則が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1596">The comparisons use the conventions of the English (United States) and Sami (Upper Sweden) cultures.</span></span> <span data-ttu-id="d5817-1597">文字列 "encyclopædia" および "encyclopaedia" は、en-us カルチャでは等価と見なされますが、サーミ語 (北スウェーデン) カルチャでは考慮されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1597">Note that the strings "encyclopædia" and "encyclopaedia" are considered equivalent in the en-US culture but not in the Sami (Northern Sweden) culture.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex3.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex3.vb" id="Snippet3":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-1598"><paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1598"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="M:System.String.CompareOrdinal(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Format">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-1599">指定された形式に基づいてオブジェクトの値を文字列に変換し、別の文字列に挿入します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1599">Converts the value of objects to strings based on the formats specified and inserts them into another string.</span></span>

<span data-ttu-id="d5817-1600">`String.Format` メソッドを初めて使用する場合は、「[Get started with the String.Format method](#Starting)」(String.Format メソッドの概要) セクションを参照して、概要をご確認ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1600">If you are new to the `String.Format` method, see the [Get started with the String.Format method](#Starting) section for a quick overview.</span></span>

<span data-ttu-id="d5817-1601">`String.Format` メソッドの全般的な説明については、「[Remarks](#remarks-top)」 (解説) セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1601">See the [Remarks](#remarks-top) section for general documentation for the `String.Format` method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

<a name="remarks-top"></a>
## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

 <span data-ttu-id="d5817-1602">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="d5817-1602">In this section:</span></span>

 <span data-ttu-id="d5817-1603">[String. Format メソッドを使用して、](#Starting) [呼び出すメソッド](#FTaskList)を開始します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1603">[Get started with the String.Format method](#Starting) [Which method do I call?](#FTaskList)</span></span>
 <span data-ttu-id="d5817-1604">書式指定[項目の](#FormatItem)短い形式の[メソッド](#Format_Brief)。[引数は](#HowFormatted)、同じインデックスの[書式設定とカルチャ](#Format_Culture)の[カスタム書式指定操作](#Format_Custom)文字列を持つ書式設定され[た書式指定項目](#SameIndex)[です。 Q & A という形式](#QA)を設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1604">[The Format method in brief](#Format_Brief) [The Format item](#FormatItem) [How arguments are formatted](#HowFormatted) [Format items that have the same index](#SameIndex) [Formatting and culture](#Format_Culture) [Custom formatting operations](#Format_Custom) [String.Format Q & A](#QA)</span></span>

<a name="Starting"></a>
## <a name="get-started-with-the-stringformat-method"></a><span data-ttu-id="d5817-1605">String. Format メソッドの概要</span><span class="sxs-lookup"><span data-stu-id="d5817-1605">Get started with the String.Format method</span></span>
 <span data-ttu-id="d5817-1606">オブジェクト、変数、または式の値を別の文字列に挿入する必要がある場合は、<xref:System.String.Format%2A?displayProperty=nameWithType> を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1606">Use <xref:System.String.Format%2A?displayProperty=nameWithType> if you need to insert the value of an object, variable, or expression into another string.</span></span> <span data-ttu-id="d5817-1607">たとえば、<xref:System.Decimal> 値の値を文字列に挿入して、1つの文字列としてユーザーに表示することができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1607">For example, you can insert the value of a <xref:System.Decimal> value into a string to display it to the user as a single string:</span></span>

 [!code-cpp[System.String.Format#35](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting2.cpp#35)]
 [!code-csharp-interactive[System.String.Format#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting2.cs#35)]
 [!code-vb[System.String.Format#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting2.vb#35)]

 <span data-ttu-id="d5817-1608">また、その値の書式設定を制御することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1608">And you can control that value's formatting:</span></span>

 [!code-cpp[System.String.Format#36](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting2.cpp#36)]
 [!code-csharp[System.String.Format#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting2.cs#36)]
 [!code-vb[System.String.Format#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting2.vb#36)]

 <span data-ttu-id="d5817-1609">書式設定だけでなく、配置や間隔を制御することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1609">Besides formatting, you can also control alignment and spacing.</span></span>

 ### <a name="insert-a-string"></a><span data-ttu-id="d5817-1610">文字列を挿入する</span><span class="sxs-lookup"><span data-stu-id="d5817-1610">Insert a string</span></span>

 <span data-ttu-id="d5817-1611"><xref:System.String.Format%2A?displayProperty=nameWithType> は、書式指定文字列で始まり、その後に1つ以上のオブジェクトまたは式が文字列に変換され、書式文字列内の指定された場所に挿入されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1611"><xref:System.String.Format%2A?displayProperty=nameWithType> starts with a format string, followed by one or more objects or expressions that will be converted to strings and inserted at a specified place in the format string.</span></span> <span data-ttu-id="d5817-1612">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1612">For example:</span></span>

 [!code-cpp[System.String.Format#30](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#30)]
 [!code-csharp-interactive[System.String.Format#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#30)]
 [!code-vb[System.String.Format#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#30)]

 <span data-ttu-id="d5817-1613">書式指定文字列の `{0}` は、書式指定項目です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1613">The `{0}` in the format string is a format item.</span></span> <span data-ttu-id="d5817-1614">`0` は、その位置に文字列値が挿入されるオブジェクトのインデックスです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1614">`0` is the index of the object whose string value will be inserted at that position.</span></span> <span data-ttu-id="d5817-1615">(インデックスは0から始まります)。挿入するオブジェクトが文字列でない場合は、そのオブジェクト `ToString` メソッドを呼び出して、結果文字列に挿入する前にそのオブジェクトを1に変換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1615">(Indexes start at 0.) If the object to be inserted is not a string, its `ToString` method is called to convert it to one before inserting it in the result string.</span></span>

 <span data-ttu-id="d5817-1616">2つの書式項目とオブジェクトリスト内の2つのオブジェクトを使用するもう1つの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1616">Here's another example that uses two format items and two objects in the object list:</span></span>

 [!code-cpp[System.String.Format#31](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#31)]
 [!code-csharp[System.String.Format#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#31)]
 [!code-vb[System.String.Format#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#31)]

 <span data-ttu-id="d5817-1617">各書式指定項目のインデックスのオブジェクトリストに一致するオブジェクトがある限り、任意の数の書式項目と、オブジェクトリスト内のオブジェクトの数を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1617">You can have as many format items and as many objects in the object list as you want, as long as the index of every format item has a matching object in the object list.</span></span> <span data-ttu-id="d5817-1618">また、どのオーバーロードを呼び出すかについて心配する必要もありません。適切なものがコンパイラによって選択されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1618">You also don't have to worry about which overload you call; the compiler will select the appropriate one for you.</span></span>

 ### <a name="control-formatting"></a><span data-ttu-id="d5817-1619">コントロールの書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1619">Control formatting</span></span>
 <span data-ttu-id="d5817-1620">書式指定文字列を含む書式指定項目のインデックスに従うと、オブジェクトの書式設定方法を制御できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1620">You can follow the index in a format item with a format string to control how an object is formatted.</span></span> <span data-ttu-id="d5817-1621">たとえば、`{0:d}` は、オブジェクトリストの最初のオブジェクトに "d" 書式指定文字列を適用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1621">For example, `{0:d}` applies the "d" format string to the first object in the object list.</span></span> <span data-ttu-id="d5817-1622">次に、1つのオブジェクトと2つの書式設定項目を使用した例を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1622">Here is an example with a single object and two format items:</span></span>

 [!code-cpp[System.String.Format#32](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#32)]
 [!code-csharp[System.String.Format#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#32)]
 [!code-vb[System.String.Format#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#32)]

 <span data-ttu-id="d5817-1623">多くの型は、すべての数値型 ([標準](~/docs/standard/base-types/standard-numeric-format-strings.md)[およびカスタム書式](~/docs/standard/base-types/custom-numeric-format-strings.md)指定文字列の両方)、すべての日付と時刻[(標準と](~/docs/standard/base-types/standard-date-and-time-format-strings.md)カスタム[の書式指定](~/docs/standard/base-types/custom-date-and-time-format-strings.md)文字列の両方)、および時間間隔 ([標準](~/docs/standard/base-types/standard-timespan-format-strings.md)と[カスタム](~/docs/standard/base-types/custom-timespan-format-strings.md)の両方の書式指定文字列)、すべての列挙型の[列挙型](~/docs/standard/base-types/enumeration-format-strings.md)、および[guid](xref:System.Guid.ToString(System.String))を含む書式指定文字列をサポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-1623">A number of types support format strings, including all numeric types (both [standard](~/docs/standard/base-types/standard-numeric-format-strings.md) and [custom](~/docs/standard/base-types/custom-numeric-format-strings.md) format strings), all dates and times (both [standard](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [custom](~/docs/standard/base-types/custom-date-and-time-format-strings.md) format strings) and time intervals (both [standard](~/docs/standard/base-types/standard-timespan-format-strings.md) and [custom](~/docs/standard/base-types/custom-timespan-format-strings.md) format strings), all enumeration types [enumeration types](~/docs/standard/base-types/enumeration-format-strings.md), and [GUIDs](xref:System.Guid.ToString(System.String)).</span></span> <span data-ttu-id="d5817-1624">書式指定文字列のサポートを独自の型に追加することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1624">You can also add support for format strings to your own types.</span></span>

 ### <a name="control-spacing"></a><span data-ttu-id="d5817-1625">コントロールの間隔</span><span class="sxs-lookup"><span data-stu-id="d5817-1625">Control spacing</span></span>
 <span data-ttu-id="d5817-1626">`{0,12}`などの構文を使用して、結果文字列に挿入される文字列の幅を定義できます。これにより、12文字の文字列が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1626">You can define the width of the string that is inserted into the result string by using syntax such as `{0,12}`, which inserts a 12-character string.</span></span> <span data-ttu-id="d5817-1627">この場合、最初のオブジェクトの文字列表現は、12文字のフィールドでは右に並べられています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1627">In this case, the string representation of the first object is right-aligned in the 12-character field.</span></span>  <span data-ttu-id="d5817-1628">(最初のオブジェクトの文字列表現の長さが12文字を超えている場合、優先フィールドの幅は無視され、文字列全体が結果の文字列に挿入されます)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1628">(If the string representation of the first object is more than 12 characters in length, though, the preferred field width is ignored, and the entire string is inserted into the result string.)</span></span>

 <span data-ttu-id="d5817-1629">次の例では、文字列 "Year" といくつかの文字列を保持する6文字のフィールドと、"母集団" と "いくつかの人口データ" を格納する15文字のフィールドを定義しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1629">The following example defines a 6-character field to hold the string "Year" and some year strings, as well as an 15-character field to hold the string "Population" and some population data.</span></span> <span data-ttu-id="d5817-1630">この文字は、フィールドでは右から右に並べられていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1630">Note that the characters are right-aligned in the field.</span></span>

 [!code-cpp[System.String.Format#33](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#33)]
 [!code-csharp[System.String.Format#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting3.cs#33)]
 [!code-vb[System.String.Format#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#33)]

 ### <a name="control-alignment"></a><span data-ttu-id="d5817-1631">コントロールの配置</span><span class="sxs-lookup"><span data-stu-id="d5817-1631">Control alignment</span></span>
 <span data-ttu-id="d5817-1632">既定では、フィールドの幅を指定した場合、文字列はフィールド内で右から右に並べられます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1632">By default, strings are right-aligned within their field if you specify a field width.</span></span> <span data-ttu-id="d5817-1633">フィールド内の文字列を左揃えにするには、フィールドの幅の先頭に負の符号 (`{0,-12}` など) を付けて、左揃えの12文字のフィールドを定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1633">To left-align strings in a field, you preface the field width with a negative sign, such as `{0,-12}` to define a 12-character left-aligned field.</span></span>

 <span data-ttu-id="d5817-1634">次の例は前の例と似ていますが、ラベルとデータの両方を左揃えにしている点が異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1634">The following example is similar to the previous one, except that it left-aligns both labels and data.</span></span>

 [!code-cpp[System.String.Format#34](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/starting1.cpp#34)]
 [!code-csharp[System.String.Format#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/starting1.cs#34)]
 [!code-vb[System.String.Format#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/starting1.vb#34)]

 <span data-ttu-id="d5817-1635"><xref:System.String.Format%2A?displayProperty=nameWithType> は、複合書式指定機能を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1635"><xref:System.String.Format%2A?displayProperty=nameWithType> makes use of the composite formatting feature.</span></span> <span data-ttu-id="d5817-1636">詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1636">For more information, see [Composite Formatting](~/docs/standard/base-types/composite-formatting.md).</span></span>

<a name="FTaskList"></a>
## <a name="which-method-do-i-call"></a><span data-ttu-id="d5817-1637">どの方法を呼び出すか。</span><span class="sxs-lookup"><span data-stu-id="d5817-1637">Which method do I call?</span></span>

|<span data-ttu-id="d5817-1638">終了</span><span class="sxs-lookup"><span data-stu-id="d5817-1638">To</span></span>|<span data-ttu-id="d5817-1639">Call</span><span class="sxs-lookup"><span data-stu-id="d5817-1639">Call</span></span>|
|--------|----------|
|<span data-ttu-id="d5817-1640">現在のカルチャの規則を使用して、1つまたは複数のオブジェクトの書式を設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1640">Format one or more objects by using the conventions of the current culture.</span></span>|<span data-ttu-id="d5817-1641">`provider` パラメーターを含むオーバーロードを除き、残りの <xref:System.String.Format%2A> オーバーロードには、<xref:System.String> パラメーターの後に1つ以上のオブジェクトパラメーターが続きます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1641">Except for the overloads that include a `provider` parameter, the remaining <xref:System.String.Format%2A> overloads include a <xref:System.String> parameter followed by one or more object parameters.</span></span> <span data-ttu-id="d5817-1642">このため、どの <xref:System.String.Format%2A> オーバーロードを呼び出す必要があるかを判断する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1642">Because of this, you don't have to determine which <xref:System.String.Format%2A> overload you intend to call.</span></span> <span data-ttu-id="d5817-1643">言語コンパイラは、引数リストに基づいて、`provider` パラメーターを持たないオーバーロードの中から適切なオーバーロードを選択します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1643">Your language compiler selects the appropriate overload from among the overloads that don't have a `provider` parameter, based on your argument list.</span></span> <span data-ttu-id="d5817-1644">たとえば、引数リストに5つの引数がある場合、コンパイラは <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1644">For example, if your argument list has five arguments, the compiler calls the <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> method.</span></span>|
|<span data-ttu-id="d5817-1645">特定のカルチャの規則を使用して1つ以上のオブジェクトの書式を設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1645">Format one or more objects by using the conventions of a specific culture.</span></span>|<span data-ttu-id="d5817-1646">`provider` パラメーターで始まる各 <xref:System.String.Format%2A> オーバーロードには、<xref:System.String> パラメーターと1つ以上のオブジェクトパラメーターが続きます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1646">Each <xref:System.String.Format%2A> overload that begins with a `provider` parameter is followed by a <xref:System.String> parameter and one or more object parameters.</span></span> <span data-ttu-id="d5817-1647">このため、どの <xref:System.String.Format%2A> オーバーロードを呼び出す必要があるかを判断する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1647">Because of this, you don't have to determine which specific <xref:System.String.Format%2A> overload you intend to call.</span></span> <span data-ttu-id="d5817-1648">言語コンパイラは、引数リストに基づいて、`provider` パラメーターを持つオーバーロードの中から適切なオーバーロードを選択します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1648">Your language compiler selects the appropriate overload from among the overloads that have a `provider` parameter, based on your argument list.</span></span> <span data-ttu-id="d5817-1649">たとえば、引数リストに5つの引数がある場合、コンパイラは <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1649">For example, if your argument list has five arguments, the compiler calls the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method.</span></span>|
|<span data-ttu-id="d5817-1650"><xref:System.ICustomFormatter> の実装または <xref:System.IFormattable> 実装を使用して、カスタム書式設定操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1650">Perform a custom formatting operation either with an <xref:System.ICustomFormatter> implementation or an <xref:System.IFormattable> implementation.</span></span>|<span data-ttu-id="d5817-1651">`provider` パラメーターを持つ4つのオーバーロードのいずれか。</span><span class="sxs-lookup"><span data-stu-id="d5817-1651">Any of the four overloads with a `provider` parameter.</span></span> <span data-ttu-id="d5817-1652">コンパイラは、引数リストに基づいて、`provider` パラメーターを持つオーバーロードの中から適切なオーバーロードを選択します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1652">The compiler selects the appropriate overload from among the overloads that have a `provider` parameter, based on your argument list.</span></span>|

<a name="Format_Brief"></a>
## <a name="the-format-method-in-brief"></a><span data-ttu-id="d5817-1653">Format メソッド (brief)</span><span class="sxs-lookup"><span data-stu-id="d5817-1653">The Format method in brief</span></span>

 <span data-ttu-id="d5817-1654"><xref:System.String.Format%2A> メソッドの各オーバーロードは、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、*書式指定項目*と呼ばれる0から始まるインデックス付きプレースホルダーを複合書式指定文字列に含めます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1654">Each overload of the <xref:System.String.Format%2A> method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to include zero-based indexed placeholders, called *format items*, in a composite format string.</span></span> <span data-ttu-id="d5817-1655">実行時に、各書式指定項目は、パラメーターリスト内の対応する引数の文字列形式に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1655">At run time, each format item is replaced with the string representation of the corresponding argument in a parameter list.</span></span> <span data-ttu-id="d5817-1656">引数の値が `null`場合、書式項目は <xref:System.String.Empty?displayProperty=nameWithType>に置き換えられます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1656">If the value of the argument is `null`, the format item is replaced with <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-1657">たとえば、<xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> メソッドの次の呼び出しには、3つの書式項目、{0}、{1}、および {2}を含む書式指定文字列と、3つの項目を持つ引数リストが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1657">For example, the following call to the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method includes a format string with three format items, {0}, {1}, and {2}, and an argument list with three items.</span></span>

 [!code-cpp[System.String.Format#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatoverload1.cpp#8)]
 [!code-csharp[System.String.Format#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatoverload1.cs#8)]
 [!code-vb[System.String.Format#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatoverload1.vb#8)]

<a name="FormatItem"></a>
## <a name="the-format-item"></a><span data-ttu-id="d5817-1658">書式項目</span><span class="sxs-lookup"><span data-stu-id="d5817-1658">The format item</span></span>
 <span data-ttu-id="d5817-1659">書式指定項目の構文は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1659">A format item has this syntax:</span></span>

```
{index[,alignment][:formatString]}
```

 <span data-ttu-id="d5817-1660">角かっこは省略可能な要素を表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1660">Brackets denote optional elements.</span></span> <span data-ttu-id="d5817-1661">左中かっこと終わりかっこが必要です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1661">The opening and closing braces are required.</span></span> <span data-ttu-id="d5817-1662">書式指定文字列にリテラルの始めかっこまたは右中かっこを含めるには、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」の記事の「[エスケープ中かっこ](~/docs/standard/base-types/composite-formatting.md#escaping-braces)」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1662">(To include a literal opening or closing brace in the format string, see the [Escaping Braces](~/docs/standard/base-types/composite-formatting.md#escaping-braces) section in the [Composite Formatting](~/docs/standard/base-types/composite-formatting.md) article.)</span></span>

 <span data-ttu-id="d5817-1663">たとえば、通貨値を書式設定するための書式項目は、次のように表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1663">For example, a format item to format a currency value might appear like this:</span></span>

 [!code-cpp[System.String.Format#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatsyntax1.cpp#12)]
 [!code-csharp[System.String.Format#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatsyntax1.cs#12)]
 [!code-vb[System.String.Format#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatsyntax1.vb#12)]

 <span data-ttu-id="d5817-1664">書式指定項目には、次の要素があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1664">A format item has the following elements:</span></span>

 <span data-ttu-id="d5817-1665">*インデックス*文字列表記が文字列内のこの位置に含まれる引数の0から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="d5817-1665">*index* The zero-based index of the argument whose string representation is to be included at this position in the string.</span></span> <span data-ttu-id="d5817-1666">この引数が `null`場合は、文字列のこの位置に空の文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1666">If this argument is `null`, an empty string will be included at this position in the string.</span></span>

 <span data-ttu-id="d5817-1667">*配置*Optional.</span><span class="sxs-lookup"><span data-stu-id="d5817-1667">*alignment* Optional.</span></span> <span data-ttu-id="d5817-1668">引数が挿入されるフィールドの合計長と、その引数が右揃え (正の整数) または左揃え (負の整数) であるかどうかを示す符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-1668">A signed integer that indicates the total length of the field into which the argument is inserted and whether it is right-aligned (a positive integer) or left-aligned (a negative integer).</span></span> <span data-ttu-id="d5817-1669">*Alignment*を省略した場合、対応する引数の文字列形式は、先頭または末尾のスペースのないフィールドに挿入されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1669">If you omit *alignment*, the string representation of the corresponding argument is inserted in a field with no leading or trailing spaces.</span></span>

 <span data-ttu-id="d5817-1670">*Alignment*の値が挿入する引数の長さよりも小さい場合、*アラインメント*は無視され、引数の文字列形式の長さがフィールドの幅として使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1670">If the value of *alignment* is less than the length of the argument to be inserted, *alignment* is ignored and the length of the string representation of the argument is used as the field width.</span></span>

 <span data-ttu-id="d5817-1671">*formatString*Optional.</span><span class="sxs-lookup"><span data-stu-id="d5817-1671">*formatString* Optional.</span></span> <span data-ttu-id="d5817-1672">対応する引数の結果文字列の形式を指定する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1672">A string that specifies the format of the corresponding argument's result string.</span></span> <span data-ttu-id="d5817-1673">*FormatString*を省略した場合、対応する引数のパラメーターなしの `ToString` メソッドが呼び出され、その文字列形式が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1673">If you omit *formatString*, the corresponding argument's parameterless `ToString` method is called to produce its string representation.</span></span> <span data-ttu-id="d5817-1674">*FormatString*を指定する場合、書式指定項目によって参照される引数は <xref:System.IFormattable> インターフェイスを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1674">If you specify *formatString*, the argument referenced by the format item must implement the <xref:System.IFormattable> interface.</span></span> <span data-ttu-id="d5817-1675">書式指定文字列をサポートする型は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1675">Types that support format strings include:</span></span>

-   <span data-ttu-id="d5817-1676">すべての整数型と浮動小数点型。</span><span class="sxs-lookup"><span data-stu-id="d5817-1676">All integral and floating-point types.</span></span> <span data-ttu-id="d5817-1677">(「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1677">(See [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).)</span></span>

-   <span data-ttu-id="d5817-1678"><xref:System.DateTime> および <xref:System.DateTimeOffset>。</span><span class="sxs-lookup"><span data-stu-id="d5817-1678"><xref:System.DateTime> and <xref:System.DateTimeOffset>.</span></span> <span data-ttu-id="d5817-1679">(「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1679">(See [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).)</span></span>

-   <span data-ttu-id="d5817-1680">すべての列挙型。</span><span class="sxs-lookup"><span data-stu-id="d5817-1680">All enumeration types.</span></span> <span data-ttu-id="d5817-1681">(「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1681">(See [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).)</span></span>

-   <span data-ttu-id="d5817-1682"><xref:System.TimeSpan> 値。</span><span class="sxs-lookup"><span data-stu-id="d5817-1682"><xref:System.TimeSpan> values.</span></span> <span data-ttu-id="d5817-1683">(「[標準の Timespan 書式指定文字列](~/docs/standard/base-types/standard-timespan-format-strings.md)」および「[カスタム TimeSpan 書式指定文字列](~/docs/standard/base-types/custom-timespan-format-strings.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1683">(See [Standard TimeSpan Format Strings](~/docs/standard/base-types/standard-timespan-format-strings.md) and [Custom TimeSpan Format Strings](~/docs/standard/base-types/custom-timespan-format-strings.md).)</span></span>

-   <span data-ttu-id="d5817-1684">GUID。</span><span class="sxs-lookup"><span data-stu-id="d5817-1684">GUIDs.</span></span> <span data-ttu-id="d5817-1685">(<xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> メソッドを参照してください)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1685">(See the <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> method.)</span></span>

 <span data-ttu-id="d5817-1686">ただし、すべてのカスタム型は、<xref:System.IFormattable> を実装することも、既存の型の <xref:System.IFormattable> 実装を拡張することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1686">However, note that any custom type can implement <xref:System.IFormattable> or extend an existing type's <xref:System.IFormattable> implementation.</span></span>

 <span data-ttu-id="d5817-1687">次の例では、`alignment` 引数と `formatString` 引数を使用して、書式設定された出力を生成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1687">The following example uses the `alignment` and `formatString` arguments to produce formatted output.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatoverload2.cpp" id="Snippet9":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatoverload2.cs" interactive="try-dotnet-method" id="Snippet9":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatoverload2.vb" id="Snippet9":::

<a name="HowFormatted"></a>
## <a name="how-arguments-are-formatted"></a><span data-ttu-id="d5817-1688">引数の書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1688">How arguments are formatted</span></span>
 <span data-ttu-id="d5817-1689">書式項目は、文字列の先頭から順番に処理されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1689">Format items are processed sequentially from the beginning of the string.</span></span> <span data-ttu-id="d5817-1690">各書式指定項目には、メソッドの引数リスト内のオブジェクトに対応するインデックスがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1690">Each format item has an index that corresponds to an object in the method's argument list.</span></span> <span data-ttu-id="d5817-1691"><xref:System.String.Format%2A> メソッドは、引数を取得し、その文字列形式を次のように派生させることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1691">The <xref:System.String.Format%2A> method retrieves the argument and derives its string representation as follows:</span></span>

-   <span data-ttu-id="d5817-1692">引数が `null`の場合、メソッドは結果の文字列に <xref:System.String.Empty?displayProperty=nameWithType> を挿入します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1692">If the argument is `null`, the method inserts <xref:System.String.Empty?displayProperty=nameWithType> into the result string.</span></span> <span data-ttu-id="d5817-1693">Null 引数の <xref:System.NullReferenceException> の処理について心配する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1693">You don't have to be concerned with handling a <xref:System.NullReferenceException> for null arguments.</span></span>

-   <span data-ttu-id="d5817-1694"><xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> オーバーロードを呼び出し、`provider` オブジェクトの <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 実装が null 以外の <xref:System.ICustomFormatter> 実装を返す場合、引数はその <xref:System.ICustomFormatter.Format%28System.String%2CSystem.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1694">If you call the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> overload and the `provider` object's <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> implementation returns a non-null <xref:System.ICustomFormatter> implementation, the argument is passed to its <xref:System.ICustomFormatter.Format%28System.String%2CSystem.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d5817-1695">書式指定項目に*formatString*引数が含まれている場合は、メソッドに最初の引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1695">If the format item includes a *formatString* argument, it is passed as the first argument to the method.</span></span> <span data-ttu-id="d5817-1696"><xref:System.ICustomFormatter> 実装が使用可能で、null 以外の文字列が生成される場合、その文字列は引数の文字列形式として返されます。それ以外の場合は、次の手順が実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1696">If the <xref:System.ICustomFormatter> implementation is available and produces a non-null string, that string is returned as the string representation of the argument; otherwise, the next step executes.</span></span>

-   <span data-ttu-id="d5817-1697">引数が <xref:System.IFormattable> インターフェイスを実装する場合、その <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> の実装が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1697">If the argument implements the <xref:System.IFormattable> interface, its <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> implementation is called.</span></span>

-   <span data-ttu-id="d5817-1698">オーバーライドするか基底クラスの実装から継承する、引数のパラメーターなしの `ToString` メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1698">The argument's parameterless `ToString` method, which either overrides or inherits from a base class implementation, is called.</span></span>

 <span data-ttu-id="d5817-1699"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> メソッドの呼び出しをインターセプトし、<xref:System.String.Format%2A> メソッドが複合書式指定文字列の各書式指定項目の書式指定メソッドに渡す情報を確認できる例については、「[例: インターセプトプロバイダー」と「ローマ数字フォーマッタ](#Format7_Example)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1699">For an example that intercepts calls to the <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> method and allows you to see what information the <xref:System.String.Format%2A> method passes to a formatting method for each format item in a composite format string, see [Example: An intercept provider and Roman numeral formatter](#Format7_Example).</span></span>

 <span data-ttu-id="d5817-1700">詳細については、「[複合書式指定](~/docs/standard/base-types/composite-formatting.md)」の「[処理順序](~/docs/standard/base-types/composite-formatting.md##processing-order)」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1700">For more information, see the [Processing Order](~/docs/standard/base-types/composite-formatting.md##processing-order) section in the [Composite Formatting](~/docs/standard/base-types/composite-formatting.md) article.</span></span>

<a name="SameIndex"></a>
## <a name="format-items-that-have-the-same-index"></a><span data-ttu-id="d5817-1701">同じインデックスを持つ項目を書式設定する</span><span class="sxs-lookup"><span data-stu-id="d5817-1701">Format items that have the same index</span></span>
 <span data-ttu-id="d5817-1702"><xref:System.String.Format%2A> メソッドは、インデックス項目のインデックスが引数リスト内の引数の数以上の場合に、<xref:System.FormatException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d5817-1702">The <xref:System.String.Format%2A> method throws a <xref:System.FormatException> exception if the index of an index item is greater than or equal to the number of arguments in the argument list.</span></span> <span data-ttu-id="d5817-1703">ただし、複数の書式指定項目のインデックスが同じである限り、`format` には引数よりも多くの書式項目を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1703">However, `format` can include more format items than there are arguments, as long as multiple format items have the same index.</span></span> <span data-ttu-id="d5817-1704">次の例の <xref:System.String.Format%28System.String%2CSystem.Object%29> メソッドの呼び出しでは、引数リストに1つの引数がありますが、書式指定文字列には2つの書式項目が含まれています。1つは数値の10進値を表示し、もう1つは16進数値を表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1704">In the call to the <xref:System.String.Format%28System.String%2CSystem.Object%29> method in following example, the argument list has a single argument, but the format string includes two format items: one displays the decimal value of a number, and the other displays its hexadecimal value.</span></span>

 [!code-csharp-interactive[System.String.Format2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format2/cs/Example1.cs#1)]
 [!code-vb[System.String.Format2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format2/vb/Example1.vb#1)]

<a name="Format_Culture"></a>
## <a name="format-and-culture"></a><span data-ttu-id="d5817-1705">形式とカルチャ</span><span class="sxs-lookup"><span data-stu-id="d5817-1705">Format and culture</span></span>
 <span data-ttu-id="d5817-1706">通常、引数リスト内のオブジェクトは、現在のカルチャの規則を使用して文字列形式に変換されます。これは、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> プロパティによって返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1706">Generally, objects in the argument list are converted to their string representations by using the conventions of the current culture, which is returned by the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d5817-1707">この動作を制御するには、`provider` パラメーターを含む <xref:System.String.Format%2A> のいずれかのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1707">You can control this behavior by calling one of the overloads of <xref:System.String.Format%2A> that includes a `provider` parameter.</span></span> <span data-ttu-id="d5817-1708">`provider` パラメーターは、書式設定プロセスを中程度にするために使用されるカスタムおよびカルチャ固有の書式設定情報を提供する、<xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1708">The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies custom and culture-specific formatting information that is used to moderate the formatting process.</span></span>

 <span data-ttu-id="d5817-1709"><xref:System.IFormatProvider> インターフェイスには、<xref:System.IFormatProvider.GetFormat%2A>の1つのメンバーがあります。これは、書式設定情報を提供するオブジェクトを返す役割を担います。</span><span class="sxs-lookup"><span data-stu-id="d5817-1709">The <xref:System.IFormatProvider> interface has a single member, <xref:System.IFormatProvider.GetFormat%2A>, which is responsible for returning the object that provides formatting information.</span></span> <span data-ttu-id="d5817-1710">.NET には、カルチャ固有の書式設定を提供する3つの <xref:System.IFormatProvider> 実装があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1710">.NET has three <xref:System.IFormatProvider> implementations that provide culture-specific formatting:</span></span>

-   <span data-ttu-id="d5817-1711"><xref:System.Globalization.CultureInfo>。</span><span class="sxs-lookup"><span data-stu-id="d5817-1711"><xref:System.Globalization.CultureInfo>.</span></span> <span data-ttu-id="d5817-1712"><xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドは、数値を書式設定するためのカルチャ固有の <xref:System.Globalization.NumberFormatInfo> オブジェクト、および日付と時刻の値を書式設定するためのカルチャ固有の <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1712">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns a culture-specific <xref:System.Globalization.NumberFormatInfo> object for formatting numeric values and a culture-specific <xref:System.Globalization.DateTimeFormatInfo> object for formatting date and time values.</span></span>

-   <span data-ttu-id="d5817-1713"><xref:System.Globalization.DateTimeFormatInfo>。日付と時刻の値のカルチャに固有の書式設定に使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1713"><xref:System.Globalization.DateTimeFormatInfo>, which is used for culture-specific formatting of date and time values.</span></span> <span data-ttu-id="d5817-1714"><xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A> メソッドはそれ自体を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1714">Its <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A> method returns itself.</span></span>

-   <span data-ttu-id="d5817-1715"><xref:System.Globalization.NumberFormatInfo>。数値のカルチャ固有の書式設定に使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1715"><xref:System.Globalization.NumberFormatInfo>, which is used for culture-specific formatting of numeric values.</span></span> <span data-ttu-id="d5817-1716"><xref:System.Globalization.NumberFormatInfo.GetFormat%2A> プロパティはそれ自体を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1716">Its <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> property returns itself.</span></span>

<a name="Format_Custom"></a>
## <a name="custom-formatting-operations"></a><span data-ttu-id="d5817-1717">カスタムの書式設定操作</span><span class="sxs-lookup"><span data-stu-id="d5817-1717">Custom formatting operations</span></span>
 <span data-ttu-id="d5817-1718">また、<xref:System.IFormatProvider> 型の `provider` パラメーターを持つ <xref:System.String.Format%2A> メソッドの任意のオーバーロードを呼び出して、カスタムの書式設定操作を実行することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1718">You can also call the any of the overloads of the <xref:System.String.Format%2A> method that have a `provider` parameter of type <xref:System.IFormatProvider> to perform custom formatting operations.</span></span> <span data-ttu-id="d5817-1719">たとえば、整数を識別番号として、または電話番号として書式設定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1719">For example, you could format an integer as an identification number or as a telephone number.</span></span> <span data-ttu-id="d5817-1720">カスタム書式設定を実行するには、`provider` 引数に <xref:System.IFormatProvider> と <xref:System.ICustomFormatter> の両方のインターフェイスを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1720">To perform custom formatting, your `provider` argument must implement both the <xref:System.IFormatProvider> and <xref:System.ICustomFormatter> interfaces.</span></span> <span data-ttu-id="d5817-1721"><xref:System.String.Format%2A> メソッドに `provider` 引数として <xref:System.ICustomFormatter> の実装が渡されると、<xref:System.String.Format%2A> メソッドはその <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> の実装を呼び出し、<xref:System.ICustomFormatter>型のオブジェクトを要求します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1721">When the <xref:System.String.Format%2A> method is passed an <xref:System.ICustomFormatter> implementation as the `provider` argument, the <xref:System.String.Format%2A> method calls its   <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> implementation and requests an object of type <xref:System.ICustomFormatter>.</span></span> <span data-ttu-id="d5817-1722">次に、返された <xref:System.ICustomFormatter> オブジェクトの <xref:System.ICustomFormatter.Format%2A> メソッドを呼び出して、渡された複合文字列の各書式項目を書式設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1722">It then calls the returned <xref:System.ICustomFormatter> object's <xref:System.ICustomFormatter.Format%2A> method to format each format item in the composite string passed to it.</span></span>

 <span data-ttu-id="d5817-1723">カスタム書式指定ソリューションの提供の詳細については、「[方法: カスタム数値書式プロバイダーを定義および使用](~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md)する」および「<xref:System.ICustomFormatter>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1723">For more information about providing custom formatting solutions, see [How to: Define and Use Custom Numeric Format Providers](~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md) and <xref:System.ICustomFormatter>.</span></span> <span data-ttu-id="d5817-1724">整数を書式設定されたカスタム数値に変換する例については、「[例: カスタム書式指定操作](#Format6_Example)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1724">For an example that converts integers to formatted custom numbers, see [Example: A custom formatting operation](#Format6_Example).</span></span> <span data-ttu-id="d5817-1725">符号なしバイトをローマ数字に変換する例については、「[例: インターセプトプロバイダーとローマ数字フォーマッタ](#Format7_Example)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1725">For an example that converts unsigned bytes to Roman numerals, see [Example: An intercept provider and Roman numeral formatter](#Format7_Example).</span></span>

<a name="Format6_Example"></a>
### <a name="example-a-custom-formatting-operation"></a><span data-ttu-id="d5817-1726">例: カスタム書式設定操作</span><span class="sxs-lookup"><span data-stu-id="d5817-1726">Example: A custom formatting operation</span></span>
 <span data-ttu-id="d5817-1727">この例では、整数値を、"x-xxxxx-xx" の形式で顧客アカウント番号として書式設定する書式プロバイダーを定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1727">This example defines a format provider that formats an integer value as a customer account number in the form x-xxxxx-xx.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatexample2.cpp" id="Snippet2":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/FormatExample2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/FormatExample2.vb" id="Snippet2":::

<a name="Format7_Example"></a>
### <a name="example-an-intercept-provider-and-roman-numeral-formatter"></a><span data-ttu-id="d5817-1728">例: インターセプトプロバイダーとローマ数字のフォーマッタ</span><span class="sxs-lookup"><span data-stu-id="d5817-1728">Example: An intercept provider and Roman numeral formatter</span></span>
 <span data-ttu-id="d5817-1729">この例では、次の2つの処理を実行するために <xref:System.ICustomFormatter> インターフェイスと <xref:System.IFormatProvider> インターフェイスを実装するカスタム書式プロバイダーを定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1729">This example defines a custom format provider that implements the <xref:System.ICustomFormatter> and <xref:System.IFormatProvider> interfaces to do two things:</span></span>

-   <span data-ttu-id="d5817-1730"><xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> の実装に渡されたパラメーターが表示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1730">It displays the parameters passed to its <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="d5817-1731">これにより、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> メソッドが、書式設定する各オブジェクトのカスタム書式設定の実装に渡すパラメーターを確認できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1731">This enables us to see what parameters the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method is passing to the custom formatting implementation for each object that it tries to format.</span></span> <span data-ttu-id="d5817-1732">これは、アプリケーションをデバッグしているときに便利です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1732">This can be useful when you're debugging your application.</span></span>

-   <span data-ttu-id="d5817-1733">書式設定されるオブジェクトが、"R" 標準書式指定文字列を使用して書式設定される符号なしバイト値の場合、カスタムフォーマッタは数値をローマ数字として書式設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1733">If the object to be formatted is an unsigned byte value that is to be formatted by using the "R" standard format string, the custom formatter formats the numeric value as a Roman numeral.</span></span>

 [!code-cpp[System.String.Format#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/interceptor2.cpp#11)]
 [!code-csharp[System.String.Format#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/interceptor2.cs#11)]
 [!code-vb[System.String.Format#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/interceptor2.vb#11)]

<a name="QA"></a>
## <a name="stringformat-q--a"></a><span data-ttu-id="d5817-1734">文字列。 Q & A を書式設定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1734">String.Format Q & A</span></span>

### <a name="why-do-you-recommend-string-interpolation-over-calls-to-the-stringformat-method"></a><span data-ttu-id="d5817-1735">`String.Format` メソッドの呼び出しに対して文字列補間を推奨するのはなぜですか。</span><span class="sxs-lookup"><span data-stu-id="d5817-1735">Why do you recommend string interpolation over calls to the `String.Format` method?</span></span>

<span data-ttu-id="d5817-1736">文字列補間は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1736">String interpolation is:</span></span>

- <span data-ttu-id="d5817-1737">より柔軟です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1737">More flexible.</span></span> <span data-ttu-id="d5817-1738">複合書式指定をサポートするメソッドの呼び出しを必要とせずに、任意の文字列で使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1738">It can be used in any string without requiring a call to a method that supports composite formatting.</span></span> <span data-ttu-id="d5817-1739">それ以外の場合は、<xref:System.String.Format%2A> メソッド、または <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> や <xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType>などの複合書式指定をサポートする別のメソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1739">Otherwise, you have to call the <xref:System.String.Format%2A> method or another method that supports composite formatting, such as <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Text.StringBuilder.AppendFormat%2A?displayProperty=nameWithType>.</span></span>

- <span data-ttu-id="d5817-1740">より読みやすくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1740">More readable.</span></span> <span data-ttu-id="d5817-1741">文字列に挿入する式は、引数リストではなく、挿入式に含まれるので、補間文字列の方がコードや読み取りがはるかに簡単になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1741">Because the expression to insert into a string appears in the interpolated expression rather than in a argument list, interpolated strings are far easier to code and to read.</span></span> <span data-ttu-id="d5817-1742">より読みやすくなっているため、補間文字列は複合書式指定メソッドの呼び出しだけでなく、より簡潔で明確なコードを生成するために文字列連結操作でも使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1742">Because of their greater readability, interpolated strings can replace not only calls to composite format methods, but they can also be used in string concatenation operations to produce more concise, clearer code.</span></span>

<span data-ttu-id="d5817-1743">次の2つのコード例は、文字列の連結と複合書式指定メソッドの呼び出しに対する補間文字列の優位性を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1743">A comparison of the following two code examples illustrates the superiority of interpolated strings over string concatenation and calls to composite formatting methods.</span></span> <span data-ttu-id="d5817-1744">次の例では、複数の文字列連結演算を使用して、詳細なコードと読み取り専用のコードを作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1744">The use of multiple string concatenation operations in the following example produces verbose and hard-to-read code.</span></span>

[!code-csharp[non-interpolated string operations](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa-interpolated1.cs#QAInterpolated)]
[!code-vb[non-interpolated string operations](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa-interpolated1.vb)]

<span data-ttu-id="d5817-1745">これに対し、次の例では、挿入文字列を使用して、文字列連結ステートメントと前の例の <xref:System.String.Format%2A> メソッドの呼び出しよりも、より明確で簡潔なコードを生成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1745">In contrast, the use of interpolated strings in the following example produce much clearer, more concise code than the string concatenation statement and the call to the <xref:System.String.Format%2A> method in the previous example.</span></span>

[!code-csharp[interpolated string operations](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa-interpolated2.cs#QAInterpolated2)]
[!code-vb[interpolated string operations](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa-interpolated2.vb)]

### <a name="where-can-i-find-a-list-of-the-predefined-format-strings-that-can-be-used-with-format-items"></a><span data-ttu-id="d5817-1746">書式項目と共に使用できる定義済みの書式指定文字列の一覧はどこで確認できますか。</span><span class="sxs-lookup"><span data-stu-id="d5817-1746">Where can I find a list of the predefined format strings that can be used with format items?</span></span>

-   <span data-ttu-id="d5817-1747">すべての整数型と浮動小数点型については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1747">For all integral and floating-point types, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>

-   <span data-ttu-id="d5817-1748">日付と時刻の値については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1748">For date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>

-   <span data-ttu-id="d5817-1749">列挙値については、「[列挙型書式指定文字列](~/docs/standard/base-types/enumeration-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1749">For enumeration values, see [Enumeration Format Strings](~/docs/standard/base-types/enumeration-format-strings.md).</span></span>

-   <span data-ttu-id="d5817-1750"><xref:System.TimeSpan> 値については、「[標準の Timespan 書式指定文字列](~/docs/standard/base-types/standard-timespan-format-strings.md)」および「[カスタム TimeSpan 書式指定文字列](~/docs/standard/base-types/custom-timespan-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1750">For <xref:System.TimeSpan> values, see  [Standard TimeSpan Format Strings](~/docs/standard/base-types/standard-timespan-format-strings.md) and [Custom TimeSpan Format Strings](~/docs/standard/base-types/custom-timespan-format-strings.md).</span></span>

-   <span data-ttu-id="d5817-1751"><xref:System.Guid> 値については、<xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> リファレンスページの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1751">For <xref:System.Guid> values, see the Remarks section of the <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType> reference page.</span></span>

### <a name="how-do-i-control-the-alignment-of-the-result-strings-that-replace-format-items"></a><span data-ttu-id="d5817-1752">書式項目を置き換える結果文字列の配置を制御操作方法には</span><span class="sxs-lookup"><span data-stu-id="d5817-1752">How do I control the alignment of the result strings that replace format items?</span></span>
 <span data-ttu-id="d5817-1753">書式項目の一般的な構文は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1753">The general syntax of a format item is:</span></span>

```
{index[,alignment][: formatString]}
```

 <span data-ttu-id="d5817-1754">*alignment*は、フィールドの幅を定義する符号付き整数です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1754">where *alignment* is a signed integer that defines the field width.</span></span> <span data-ttu-id="d5817-1755">この値が負の場合、フィールド内のテキストは左揃えになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1755">If this value is negative, text in the field is left-aligned.</span></span> <span data-ttu-id="d5817-1756">正の場合、テキストは右に固定されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1756">If it is positive, text is right-aligned.</span></span>

### <a name="how-do-i-control-the-number-of-digits-after-the-decimal-separator"></a><span data-ttu-id="d5817-1757">小数点区切り文字の後に桁数を制御操作方法には、</span><span class="sxs-lookup"><span data-stu-id="d5817-1757">How do I control the number of digits after the decimal separator?</span></span>
 <span data-ttu-id="d5817-1758">"D" を除くすべての[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)(整数のみで使用)、"G"、"R"、および "X" を使用すると、結果文字列の小数点以下の桁数を定義する精度指定子を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1758">All [standard numeric format strings](~/docs/standard/base-types/standard-numeric-format-strings.md) except "D" (which is used with integers only), "G", "R", and "X" allow a precision specifier that defines the number of decimal digits in the result string.</span></span> <span data-ttu-id="d5817-1759">次の例では、標準の数値書式指定文字列を使用して、結果文字列の小数点以下桁数を制御します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1759">The following example uses standard numeric format strings to control the number of decimal digits in the result string.</span></span>

 [!code-csharp[System.String.Format#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa26.cs#26)]
 [!code-vb[System.String.Format#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa26.vb#26)]

 <span data-ttu-id="d5817-1760">[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)を使用している場合は、次の例に示すように、"0" 書式指定子を使用して、結果文字列の小数点以下の桁数を制御します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1760">If you're using a [custom numeric format string](~/docs/standard/base-types/custom-numeric-format-strings.md), use the "0" format specifier to control the number of decimal digits in the result string, as the following example shows.</span></span>

 [!code-csharp-interactive[System.String.Format#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa27.cs#27)]
 [!code-vb[System.String.Format#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa27.vb#27)]

### <a name="how-do-i-control-the-number-of-integral-digits"></a><span data-ttu-id="d5817-1761">整数の桁数を制御操作方法には</span><span class="sxs-lookup"><span data-stu-id="d5817-1761">How do I control the number of integral digits?</span></span>
 <span data-ttu-id="d5817-1762">既定では、書式設定操作には0以外の整数の数字のみが表示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1762">By default, formatting operations only display non-zero integral digits.</span></span> <span data-ttu-id="d5817-1763">整数を書式設定する場合は、"D" および "X" の標準書式指定文字列で精度指定子を使用して、桁数を制御できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1763">If you are formatting integers, you can use a precision specifier with the "D" and "X" standard format strings to control the number of digits.</span></span>

 [!code-csharp-interactive[System.String.Format#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa29.cs#29)]
 [!code-vb[System.String.Format#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa29.vb#29)]

 <span data-ttu-id="d5817-1764">次の例に示すように、"0"[カスタム数値書式指定子](~/docs/standard/base-types/custom-numeric-format-strings.md)を使用して、整数または浮動小数点数を先行ゼロで埋め込んで、指定された数の整数を含む結果文字列を生成することができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1764">You can pad an integer or floating-point number with leading zeros to produce a result string with a specified number of integral digits by using the "0" [custom numeric format specifier](~/docs/standard/base-types/custom-numeric-format-strings.md), as the following example shows.</span></span>

 [!code-csharp-interactive[System.String.Format#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa28.cs#28)]
 [!code-vb[System.String.Format#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa28.vb#28)]

### <a name="how-many-items-can-i-include-in-the-format-list"></a><span data-ttu-id="d5817-1765">[書式] の一覧に含めることができる項目の数はいくつですか。</span><span class="sxs-lookup"><span data-stu-id="d5817-1765">How many items can I include in the format list?</span></span>
 <span data-ttu-id="d5817-1766">実際の制限はありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1766">There is no practical limit.</span></span> <span data-ttu-id="d5817-1767"><xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> メソッドの2番目のパラメーターには、<xref:System.ParamArrayAttribute> 属性がタグ付けされます。これにより、区切り記号付きリストまたはオブジェクト配列を書式リストとして含めることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1767">The second parameter of the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method is tagged with the <xref:System.ParamArrayAttribute> attribute, which allows you to include either a delimited list or an object array as your format list.</span></span>

<a name="braces"></a>
### <a name="how-do-i-include-literal-braces--and--in-the-result-string"></a><span data-ttu-id="d5817-1768">結果の文字列にリテラルの中かっこ ("{" および "}") を含める操作方法</span><span class="sxs-lookup"><span data-stu-id="d5817-1768">How do I include literal braces ("{" and "}") in the result string?</span></span>
 <span data-ttu-id="d5817-1769">たとえば、次のメソッド呼び出しによって <xref:System.FormatException> 例外がスローされないようにするにはどうすればよいでしょうか。</span><span class="sxs-lookup"><span data-stu-id="d5817-1769">For example, how do you prevent the following method call from throwing a <xref:System.FormatException> exception?</span></span>

 [!code-csharp[System.String.Format#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#23)]
 [!code-vb[System.String.Format#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#23)]

 <span data-ttu-id="d5817-1770">1つの左中かっこまたは右中かっこは、書式指定項目の先頭または末尾として常に解釈されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1770">A single opening or closing brace is always interpreted as the beginning or end of a format item.</span></span> <span data-ttu-id="d5817-1771">文字どおりに解釈されるようにするには、エスケープする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1771">To be interpreted literally, it must be escaped.</span></span> <span data-ttu-id="d5817-1772">かっこをエスケープするには、次のメソッド呼び出しのように、別の中かっこ ("{" および "}" ではなく "{{" および "}}") を追加します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1772">You escape a brace by adding another brace ("{{" and "}}" instead of "{" and "}"), as in the following method call:</span></span>

 [!code-csharp-interactive[System.String.Format#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#24)]
 [!code-vb[System.String.Format#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#24)]

 <span data-ttu-id="d5817-1773">ただし、エスケープされた中かっこも簡単に解釈できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1773">However, even escaped braces are easily misinterpreted.</span></span> <span data-ttu-id="d5817-1774">次の例に示すように、書式設定の一覧に中かっこを含め、書式項目を使用して結果の文字列に挿入することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-1774">We recommend that you include braces in the format list and use format items to insert them in the result string, as the following example shows.</span></span>

 [!code-csharp-interactive[System.String.Format#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#25)]
 [!code-vb[System.String.Format#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#25)]

### <a name="why-does-my-call-to-the-stringformat-method-throw-a-formatexception"></a><span data-ttu-id="d5817-1775">FormatException メソッドを呼び出すと、そのような例外がスローされるのはなぜですか。</span><span class="sxs-lookup"><span data-stu-id="d5817-1775">Why does my call to the String.Format method throw a FormatException?</span></span>
 <span data-ttu-id="d5817-1776">例外の最も一般的な原因として、書式項目のインデックスが [書式] リストのオブジェクトに対応していないことが挙げられます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1776">The most common cause of the exception is that the index of a format item doesn't correspond to an object in the format list.</span></span> <span data-ttu-id="d5817-1777">通常、これは、書式項目のインデックスに番号が付けられていないか、[書式] ボックスの一覧にオブジェクトが含まれていないことを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1777">Usually this indicates that you've misnumbered the indexes of format items or you've forgotten to include an object in the format list.</span></span> <span data-ttu-id="d5817-1778">エスケープされていない左または右の中かっこ文字を含めようとすると、<xref:System.FormatException>もスローされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1778">Attempting to include an unescaped left or right brace character also throws a <xref:System.FormatException>.</span></span> <span data-ttu-id="d5817-1779">場合によっては、例外が発生することがあります。たとえば、一般的な誤りは、"{" (左中かっこ) ではなく "[" (左角かっこ) を誤って間違えてしまうことです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1779">Occasionally, the exception is the result of a typo; for example, a typical mistake is to mistype "[" (the left bracket) instead of "{" (the left brace).</span></span>

### <a name="if-the-formatsystemiformatprovidersystemstringsystemobject-method-supports-parameter-arrays-why-does-my-code-throw-an-exception-when-i-use-an-array"></a><span data-ttu-id="d5817-1780">Format (IFormatProvider, System.string, System.object []) メソッドがパラメーター配列をサポートしている場合、配列を使用すると、コードで例外がスローされるのはなぜですか。</span><span class="sxs-lookup"><span data-stu-id="d5817-1780">If the Format(System.IFormatProvider,System.String,System.Object[]) method supports parameter arrays, why does my code throw an exception when I use an array?</span></span>
 <span data-ttu-id="d5817-1781">たとえば、次のコードでは <xref:System.FormatException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1781">For example, the following code throws a <xref:System.FormatException> exception:</span></span>

 [!code-csharp[System.String.Format#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa1.cs#21)]
 [!code-vb[System.String.Format#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa1.vb#21)]

 <span data-ttu-id="d5817-1782">これは、コンパイラのオーバーロードの解決に問題があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1782">This is a problem of compiler overload resolution.</span></span> <span data-ttu-id="d5817-1783">コンパイラは、整数の配列をオブジェクト配列に変換できないので、整数配列を1つの引数として扱います。したがって、<xref:System.String.Format%28System.String%2CSystem.Object%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1783">Because the compiler cannot convert an array of integers to an object array, it treats the integer array as a single argument, so it calls the <xref:System.String.Format%28System.String%2CSystem.Object%29> method.</span></span> <span data-ttu-id="d5817-1784">この例外がスローされるのは、書式指定項目が4つありますが、書式一覧に項目が1つしかないためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1784">The exception is thrown because there are four format items but only a single item in the format list.</span></span>

 <span data-ttu-id="d5817-1785">Visual Basic もC#整数配列もオブジェクト配列に変換できないため、<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> メソッドを呼び出す前に、変換を自分で実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1785">Because neither Visual Basic nor C# can convert an integer array to an object array, you have to perform the conversion yourself before calling the <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29> method.</span></span> <span data-ttu-id="d5817-1786">次の例では、1つの実装を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1786">The following example provides one implementation.</span></span>

 [!code-csharp-interactive[System.String.Format#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa2.cs#22)]
 [!code-vb[System.String.Format#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa2.vb#22)]

## Examples

<span data-ttu-id="d5817-1787"><xref:System.String.Format%2A> メソッドを呼び出す多くの例は、この記事の「[解説](#remarks-top)」セクションに記載されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1787">Numerous examples that call the <xref:System.String.Format%2A> method are interspersed through the [Remarks](#remarks-top) section of this article.</span></span>

<span data-ttu-id="d5817-1788">また、 [dotnet/samples GitHub リポジトリ](https://github.com/dotnet/samples)から、[のC# .net core 2.0 プロジェクト](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/String.Format.zip)と[Visual Basic 用の .net core 2.0 プロジェクト](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/String.Format.zip)が含まれている `String.Format` の例の完全なセットをダウンロードすることもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1788">You can also download a complete set of `String.Format` examples, which are included a [.NET Core 2.0 project for C#](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/String.Format.zip) and a [.NET Core 2.0 project for Visual Basic](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/String.Format.zip), from the [dotnet/samples GitHub repository](https://github.com/dotnet/samples).</span></span>

<span data-ttu-id="d5817-1789">記事に含まれている例の一部を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1789">The following are some of the examples included in the article:</span></span>

### <a name="create-a-format-string"></a><span data-ttu-id="d5817-1790">書式指定文字列の作成</span><span class="sxs-lookup"><span data-stu-id="d5817-1790">Create a format string</span></span>

<span data-ttu-id="d5817-1791">[書式項目](#the-format-item)
[文字列を挿入](#insert-a-string)し
[同じインデックスを持つ項目を書式設定](#format-items-that-have-the-same-index)する</span><span class="sxs-lookup"><span data-stu-id="d5817-1791">[Inserting a string](#insert-a-string)
[The format item](#the-format-item)
[Format items that have the same index](#format-items-that-have-the-same-index)</span></span>

### <a name="control-formatted-output"></a><span data-ttu-id="d5817-1792">書式設定された出力の制御</span><span class="sxs-lookup"><span data-stu-id="d5817-1792">Control formatted output</span></span>

<span data-ttu-id="d5817-1793">[書式設定](#control-formatting)の[制御
](#control-spacing) 、 [

](#control-alignment)を制御して、
整数部[の](#how-do-i-control-the-number-of-integral-digits)桁数を制御[し、小数点区切り文字の後の桁数を](#how-do-i-control-the-number-of-digits-after-the-decimal-separator)制御することによって、[結果の文字列にリテラル中かっこを含める](#braces)
</span><span class="sxs-lookup"><span data-stu-id="d5817-1793">[Controlling formatting](#control-formatting)
[Controlling spacing](#control-spacing)
[Controlling alignment](#control-alignment)
[Controlling the number of integral digits](#how-do-i-control-the-number-of-integral-digits)
[Controlling the number of digits after the decimal separator](#how-do-i-control-the-number-of-digits-after-the-decimal-separator)
[Including literal braces in a result string](#braces)</span></span>

### <a name="make-format-strings-culture-sensitive"></a><span data-ttu-id="d5817-1794">書式指定文字列のカルチャを区別する</span><span class="sxs-lookup"><span data-stu-id="d5817-1794">Make format strings culture-sensitive</span></span>

[<span data-ttu-id="d5817-1795">カルチャに依存した書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1795">Culture-sensitive formatting</span></span>](#culture-sensitive-formatting)

### <a name="customize-the-formatting-operation"></a><span data-ttu-id="d5817-1796">書式設定操作をカスタマイズする</span><span class="sxs-lookup"><span data-stu-id="d5817-1796">Customize the formatting operation</span></span>

<span data-ttu-id="d5817-1797">[インターセプトプロバイダーとローマ数字フォーマッタ](#example-an-intercept-provider-and-roman-numeral-formatter)
[カスタム書式設定操作](#example-a-custom-formatting-operation)</span><span class="sxs-lookup"><span data-stu-id="d5817-1797">[A custom formatting operation](#example-a-custom-formatting-operation)
[An intercept provider and Roman numeral formatter](#example-an-intercept-provider-and-roman-numeral-formatter)</span></span>

 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="d5817-1798">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1798">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="d5817-1799">複合書式指定</span><span class="sxs-lookup"><span data-stu-id="d5817-1799">Composite Formatting</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md"><span data-ttu-id="d5817-1800">標準の日時形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1800">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md"><span data-ttu-id="d5817-1801">カスタム日時書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1801">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="d5817-1802">標準の数値形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1802">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="d5817-1803">カスタム数値形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1803">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md"><span data-ttu-id="d5817-1804">標準 TimeSpan 書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1804">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md"><span data-ttu-id="d5817-1805">カスタム時間間隔書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1805">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="d5817-1806">列挙型書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1806">Enumeration Format Strings</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj -&gt; string" Usage="System.string.Format (format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="d5817-1807">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1807">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="d5817-1808">書式指定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1808">The object to format.</span></span></param>
        <summary><span data-ttu-id="d5817-1809">文字列の 1 つ以上の書式項目を、指定されたオブジェクトの文字列表記に置換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1809">Replaces one or more format items in a string with the string representation of a specified object.</span></span></summary>
        <returns><span data-ttu-id="d5817-1810">書式項目が <paramref name="format" /> の文字列形式に置換された <paramref name="arg0" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="d5817-1810">A copy of <paramref name="format" /> in which any format items are replaced by the string representation of <paramref name="arg0" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="d5817-1811">このメソッドは、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、式の値を文字列形式に変換し、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1811">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of an expression to its string representation and to embed that representation in a string.</span></span>

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-formatting-a-single-argument"></a><span data-ttu-id="d5817-1812">例: 1 つの引数の書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1812">Example: Formatting a single argument</span></span>

 <span data-ttu-id="d5817-1813">次の例では、<xref:System.String.Format%28System.String%2CSystem.Object%29> メソッドを使用して、文字列の途中に個々の年齢を埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1813">The following example uses the <xref:System.String.Format%28System.String%2CSystem.Object%29> method to embed an individual's age in the middle of a string.</span></span>

 [!code-cpp[System.String.Format#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format7.cpp#7)]
 [!code-csharp-interactive[System.String.Format#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format7.cs#7)]
 [!code-vb[System.String.Format#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format7.vb#7)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1814"><paramref name="format" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1814"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-1815"><paramref name="format" /> の書式指定項目が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1815">The format item in <paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="d5817-1816">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1816">-or-</span></span>

<span data-ttu-id="d5817-1817">書式項目のインデックスが 0 ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1817">The index of a format item is not zero.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="d5817-1818">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1818">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="d5817-1819">複合書式指定</span><span class="sxs-lookup"><span data-stu-id="d5817-1819">Composite Formatting</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md"><span data-ttu-id="d5817-1820">標準の日時形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1820">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md"><span data-ttu-id="d5817-1821">カスタム日時書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1821">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="d5817-1822">標準の数値形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1822">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="d5817-1823">カスタム数値形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1823">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md"><span data-ttu-id="d5817-1824">標準 TimeSpan 書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1824">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md"><span data-ttu-id="d5817-1825">カスタム時間間隔書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1825">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="d5817-1826">列挙型書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1826">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj[] -&gt; string" Usage="System.string.Format (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="d5817-1827">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1827">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="args"><span data-ttu-id="d5817-1828">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1828">An object array that contains zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="d5817-1829">指定した文字列の書式項目を、指定した配列内の対応するオブジェクトの文字列形式に置換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1829">Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</span></span></summary>
        <returns><span data-ttu-id="d5817-1830">書式項目が <paramref name="args" /> の対応するオブジェクトの文字列表記に置換された <paramref name="format" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="d5817-1830">A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="d5817-1831">このメソッドは、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、4つ以上の式の値を文字列形式に変換し、それらの表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1831">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of four or more expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="d5817-1832">`args` パラメーターは <xref:System.ParamArrayAttribute?displayProperty=nameWithType> 属性でマークされているため、オブジェクトを個々の引数として、または <xref:System.Object> 配列としてメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1832">Since the `args` parameter is marked with the <xref:System.ParamArrayAttribute?displayProperty=nameWithType> attribute, you can pass the objects to the method as individual arguments or as an <xref:System.Object> array.</span></span>

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-format-more-than-three-arguments"></a><span data-ttu-id="d5817-1833">例: 3 つ以上の引数を書式設定する</span><span class="sxs-lookup"><span data-stu-id="d5817-1833">Example: Format more than three arguments</span></span>

 <span data-ttu-id="d5817-1834">この例では、特定の日付の高および低気温に関するデータを格納する文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1834">This example creates a string that contains data on the high and low temperature on a particular date.</span></span> <span data-ttu-id="d5817-1835">複合書式指定文字列には、 C#例では5つの書式項目があり、Visual Basic の例では6個の書式項目があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1835">The composite format string has five format items in the C# example and six in the Visual Basic example.</span></span> <span data-ttu-id="d5817-1836">2つの書式項目は、対応する値の文字列表現の幅を定義し、最初の書式指定項目には標準の日時書式指定文字列も含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1836">Two of the format items define the width of their corresponding value's string representation, and the first format item also includes a standard date and time format string.</span></span>

 [!code-cpp[System.String.Format#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format5.cpp#5)]
 [!code-csharp[System.String.Format#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format5.cs#5)]
 [!code-vb[System.String.Format#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format5.vb#5)]

 <span data-ttu-id="d5817-1837">また、オブジェクトを引数リストとしてではなく配列として渡すこともできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1837">You can also pass the objects to be formatted as an array rather than as an argument list.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format_paramarray1.cpp" id="Snippet10":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format_paramarray1.cs" interactive="try-dotnet" id="Snippet10":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format_paramarray1.vb" id="Snippet10":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1838"><paramref name="format" /> または <paramref name="args" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1838"><paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-1839"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1839"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="d5817-1840">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1840">-or-</span></span>

<span data-ttu-id="d5817-1841">書式項目のインデックスが 0 (ゼロ) 未満か、または <paramref name="args" /> 配列の長さ以上です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1841">The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="d5817-1842">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1842">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="d5817-1843">複合書式指定</span><span class="sxs-lookup"><span data-stu-id="d5817-1843">Composite Formatting</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md"><span data-ttu-id="d5817-1844">標準の日時形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1844">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md"><span data-ttu-id="d5817-1845">カスタム日時書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1845">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="d5817-1846">標準の数値形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1846">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="d5817-1847">カスタム数値形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1847">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md"><span data-ttu-id="d5817-1848">標準 TimeSpan 書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1848">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md"><span data-ttu-id="d5817-1849">カスタム時間間隔書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1849">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="d5817-1850">列挙型書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1850">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj -&gt; string" Usage="System.string.Format (provider, format, arg0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-1851">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1851">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="d5817-1852">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1852">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="d5817-1853">書式指定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1853">The object to format.</span></span></param>
        <summary><span data-ttu-id="d5817-1854">指定した文字列の 1 つまたは複数の書式項目を、対応するオブジェクトの文字列形式に置換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1854">Replaces the format item or items in a specified string with the string representation of the corresponding object.</span></span> <span data-ttu-id="d5817-1855">パラメーターにより、カルチャに固有の書式情報が指定されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1855">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="d5817-1856">書式項目が <paramref name="format" /> の文字列形式に置換された <paramref name="arg0" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="d5817-1856">A copy of <paramref name="format" /> in which the format item or items have been replaced by the string representation of <paramref name="arg0" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="d5817-1857">このメソッドは、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、式の値を文字列形式に変換し、その表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1857">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of an expression to its string representation and to embed that representation in a string.</span></span> <span data-ttu-id="d5817-1858">変換を実行する場合、メソッドはカルチャに依存した書式設定またはカスタムフォーマッタを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1858">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="d5817-1859">メソッドは、 **tostring (IFormatProvider)** メソッドを呼び出すことによって `arg0` を文字列形式に変換します。または、オブジェクトの対応する書式指定項目に**tostring (string, IFormatProvider)** メソッドを呼び出して書式指定文字列を含めます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1859">The method converts `arg0` to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="d5817-1860">これらのメソッドが存在しない場合は、オブジェクトのパラメーターなしの**ToString**メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1860">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1861"><paramref name="format" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1861"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-1862"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1862"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="d5817-1863">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1863">-or-</span></span>

<span data-ttu-id="d5817-1864">書式項目のインデックスが 0 ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1864">The index of a format item is not zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, ParamArray args As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj[] -&gt; string" Usage="System.string.Format (provider, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-1865">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1865">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="d5817-1866">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1866">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="args"><span data-ttu-id="d5817-1867">0 個以上の書式設定対象オブジェクトを含んだオブジェクト配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-1867">An object array that contains zero or more objects to format.</span></span></param>
        <summary><span data-ttu-id="d5817-1868">文字列の書式項目を、指定した配列内の対応するオブジェクトの文字列表記に置換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1868">Replaces the format items in a string with the string representations of corresponding objects in a specified array.</span></span> <span data-ttu-id="d5817-1869">パラメーターにより、カルチャに固有の書式情報が指定されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1869">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="d5817-1870">書式項目が <paramref name="args" /> の対応するオブジェクトの文字列表記に置換された <paramref name="format" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="d5817-1870">A copy of <paramref name="format" /> in which the format items have been replaced by the string representation of the corresponding objects in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="d5817-1871">このメソッドは、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、4つ以上の式を文字列形式に変換し、それらの表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1871">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert four or more expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="d5817-1872">変換を実行する場合、メソッドはカルチャに依存した書式設定またはカスタムフォーマッタを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1872">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="d5817-1873">メソッドは、 **tostring (IFormatProvider)** メソッドを呼び出すことによって各 <xref:System.Object> 引数を文字列形式に変換します。または、オブジェクトの対応する書式指定項目に**tostring (string, IFormatProvider)** メソッドを呼び出して書式指定文字列を含めます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1873">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="d5817-1874">これらのメソッドが存在しない場合は、オブジェクトのパラメーターなしの**ToString**メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1874">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]

<a name="culture-sensitive-formatting" />

### <a name="example-culture-sensitive-formatting"></a><span data-ttu-id="d5817-1875">例: カルチャに依存した書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1875">Example: Culture-sensitive formatting</span></span>

 <span data-ttu-id="d5817-1876">この例では、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> メソッドを使用して、いくつかの異なるカルチャを使用して、一部の日付と時刻の値と数値の文字列形式を表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1876">This example uses the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29> method to display the string representation of some date and time values and numeric values by using several different cultures.</span></span>

 [!code-csharp-interactive[System.String.Format2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format2/cs/Example2.cs#2)]
 [!code-vb[System.String.Format2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format2/vb/Example2.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1877"><paramref name="format" /> または <paramref name="args" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1877"><paramref name="format" /> or <paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-1878"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1878"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="d5817-1879">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1879">-or-</span></span>

<span data-ttu-id="d5817-1880">書式項目のインデックスが 0 (ゼロ) 未満か、または <paramref name="args" /> 配列の長さ以上です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1880">The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args" /> array.</span></span></exception>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.ICustomFormatter" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="d5817-1881">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1881">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="d5817-1882">複合書式指定</span><span class="sxs-lookup"><span data-stu-id="d5817-1882">Composite Formatting</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md"><span data-ttu-id="d5817-1883">標準の日時形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1883">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md"><span data-ttu-id="d5817-1884">カスタム日時書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1884">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="d5817-1885">標準の数値形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1885">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="d5817-1886">カスタム数値形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1886">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md"><span data-ttu-id="d5817-1887">標準 TimeSpan 書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1887">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md"><span data-ttu-id="d5817-1888">カスタム時間間隔書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1888">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="d5817-1889">列挙型書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1889">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj * obj -&gt; string" Usage="System.string.Format (format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="d5817-1890">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1890">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="d5817-1891">1 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1891">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="d5817-1892">2 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1892">The second object to format.</span></span></param>
        <summary><span data-ttu-id="d5817-1893">文字列の書式項目を、指定した 2 つのオブジェクトの文字列形式に置換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1893">Replaces the format items in a string with the string representation of two specified objects.</span></span></summary>
        <returns><span data-ttu-id="d5817-1894">書式項目が <paramref name="arg0" /> と <paramref name="arg1" /> の文字列形式に置換された <paramref name="format" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="d5817-1894">A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="d5817-1895">このメソッドは、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、2つの式の値を文字列形式に変換し、それらの表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1895">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of two expressions to their string representations and to embed those representations in a string.</span></span>

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-format-two-arguments"></a><span data-ttu-id="d5817-1896">例: 2 つの引数の書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1896">Example: Format two arguments</span></span>

 <span data-ttu-id="d5817-1897">この例では、<xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> メソッドを使用して、ジェネリック <xref:System.Collections.Generic.Dictionary%602> オブジェクトに格納されている時間と気温のデータを表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1897">This example uses the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%29> method to display time and temperature data stored in a generic <xref:System.Collections.Generic.Dictionary%602> object.</span></span> <span data-ttu-id="d5817-1898">書式指定文字列には3つの書式項目があることに注意してください。ただし、書式設定するオブジェクトは2つだけです。</span><span class="sxs-lookup"><span data-stu-id="d5817-1898">Note that the format string has three format items, although there are only two objects to format.</span></span> <span data-ttu-id="d5817-1899">これは、リスト内の最初のオブジェクト (日付と時刻の値) が2つの書式指定項目によって使用されるためです。最初の書式項目は時刻を表示し、2番目のオブジェクトは日付を表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1899">This is because the first object in the list (a date and time value) is used by two format items: The first format item displays the time, and the second displays the date.</span></span>

 [!code-cpp[System.String.Format#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/formatexample4.cpp#6)]
 [!code-csharp[System.String.Format#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/formatexample4.cs#6)]
 [!code-vb[System.String.Format#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/formatexample4.vb#6)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1900"><paramref name="format" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1900"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-1901"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1901"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="d5817-1902">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1902">-or-</span></span>

<span data-ttu-id="d5817-1903">書式項目のインデックスが 0 でも 1 でもありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1903">The index of a format item is not zero or one.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="d5817-1904">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1904">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="d5817-1905">複合書式指定</span><span class="sxs-lookup"><span data-stu-id="d5817-1905">Composite Formatting</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md"><span data-ttu-id="d5817-1906">標準の日時形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1906">Standard Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md"><span data-ttu-id="d5817-1907">カスタム日時書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1907">Custom Date and Time Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-numeric-format-strings.md"><span data-ttu-id="d5817-1908">標準の数値形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1908">Standard Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-numeric-format-strings.md"><span data-ttu-id="d5817-1909">カスタム数値形式文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1909">Custom Numeric Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/standard-timespan-format-strings.md"><span data-ttu-id="d5817-1910">標準 TimeSpan 書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1910">Standard TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/custom-timespan-format-strings.md"><span data-ttu-id="d5817-1911">カスタム時間間隔書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1911">Custom TimeSpan Format Strings</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/enumeration-format-strings.md"><span data-ttu-id="d5817-1912">列挙型書式指定文字列</span><span class="sxs-lookup"><span data-stu-id="d5817-1912">Enumeration Format Strings</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj * obj -&gt; string" Usage="System.string.Format (provider, format, arg0, arg1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-1913">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1913">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="d5817-1914">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1914">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="d5817-1915">1 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1915">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="d5817-1916">2 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1916">The second object to format.</span></span></param>
        <summary><span data-ttu-id="d5817-1917">文字列の書式項目を、指定した 2 つのオブジェクトの文字列形式に置換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1917">Replaces the format items in a string with the string representation of two specified objects.</span></span> <span data-ttu-id="d5817-1918">パラメーターにより、カルチャに固有の書式情報が指定されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1918">A parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="d5817-1919">書式項目が <paramref name="arg0" /> と <paramref name="arg1" /> の文字列形式に置換された <paramref name="format" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="d5817-1919">A copy of <paramref name="format" /> in which format items are replaced by the string representations of <paramref name="arg0" /> and <paramref name="arg1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="d5817-1920">このメソッドは、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、2つの式を文字列形式に変換し、それらの表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1920">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert two expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="d5817-1921">変換を実行する場合、メソッドはカルチャに依存した書式設定またはカスタムフォーマッタを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1921">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="d5817-1922">メソッドは、 **tostring (IFormatProvider)** メソッドを呼び出すことによって各 <xref:System.Object> 引数を文字列形式に変換します。または、オブジェクトの対応する書式指定項目に**tostring (string, IFormatProvider)** メソッドを呼び出して書式指定文字列を含めます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1922">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="d5817-1923">これらのメソッドが存在しない場合は、オブジェクトのパラメーターなしの**ToString**メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1923">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1924"><paramref name="format" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1924"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-1925"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1925"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="d5817-1926">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1926">-or-</span></span>

<span data-ttu-id="d5817-1927">書式項目のインデックスが 0 でも 1 でもありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1927">The index of a format item is not zero or one.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Format : string * obj * obj * obj -&gt; string" Usage="System.string.Format (format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="d5817-1928">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1928">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="d5817-1929">1 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1929">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="d5817-1930">2 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1930">The second object to format.</span></span></param>
        <param name="arg2"><span data-ttu-id="d5817-1931">3 番目に書式設定するオブジェクト。3 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1931">The third object to format.</span></span></param>
        <summary><span data-ttu-id="d5817-1932">文字列の書式項目を、指定した 3 つのオブジェクトの文字列形式に置換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1932">Replaces the format items in a string with the string representation of three specified objects.</span></span></summary>
        <returns><span data-ttu-id="d5817-1933">書式項目が <paramref name="format" />、<paramref name="arg0" />、および <paramref name="arg1" /> の文字列形式に置換された <paramref name="arg2" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="d5817-1933">A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="d5817-1934">このメソッドは、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、3つの式の値を文字列形式に変換し、それらの表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1934">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert the value of three expressions to their string representations and to embed those representations in a string.</span></span>

[!INCLUDE[simple-string-format](~/includes/simple-string-format.md)]

## <a name="example-format-three-arguments"></a><span data-ttu-id="d5817-1935">例: 3 つの引数の書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1935">Example: Format three arguments</span></span>

 <span data-ttu-id="d5817-1936">この例では、<xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> メソッドを使用して、2つの整数値を持つブール `And` 演算の結果を示す文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1936">This example uses the <xref:System.String.Format%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%29> method to create a string that illustrates the result of a Boolean `And` operation with two integer values.</span></span> <span data-ttu-id="d5817-1937">書式指定文字列には6つの書式項目が含まれていますが、各項目は2つの異なる方法で書式設定されるため、メソッドのパラメーターリストには3つの項目しかありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1937">Note that the format string includes six format items, but the method has only three items in its parameter list, because each item is formatted in two different ways.</span></span>

 [!code-cpp[System.String.Format#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Format/cpp/format4.cpp#4)]
 [!code-csharp-interactive[System.String.Format#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/format4.cs#4)]
 [!code-vb[System.String.Format#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/format4.vb#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1938"><paramref name="format" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1938"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-1939"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1939"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="d5817-1940">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1940">-or-</span></span>

<span data-ttu-id="d5817-1941">書式項目のインデックスが 0 より小さいか、または 2 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1941">The index of a format item is less than zero, or greater than two.</span></span></exception>
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="d5817-1942">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="d5817-1942">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md"><span data-ttu-id="d5817-1943">複合書式指定</span><span class="sxs-lookup"><span data-stu-id="d5817-1943">Composite Formatting</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (IFormatProvider provider, string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Format(class System.IFormatProvider provider, string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Format (provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Format(IFormatProvider ^ provider, System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberSignature Language="F#" Value="static member Format : IFormatProvider * string * obj * obj * obj -&gt; string" Usage="System.string.Format (provider, format, arg0, arg1, arg2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg0" Type="System.Object" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg1" Type="System.Object" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="arg2" Type="System.Object" Index="4" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-1944">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1944">An object that supplies culture-specific formatting information.</span></span></param>
        <param name="format"><span data-ttu-id="d5817-1945">[複合書式設定文字列](~/docs/standard/base-types/composite-formatting.md)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1945">A [composite format string](~/docs/standard/base-types/composite-formatting.md).</span></span></param>
        <param name="arg0"><span data-ttu-id="d5817-1946">1 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1946">The first object to format.</span></span></param>
        <param name="arg1"><span data-ttu-id="d5817-1947">2 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1947">The second object to format.</span></span></param>
        <param name="arg2"><span data-ttu-id="d5817-1948">3 番目に書式設定するオブジェクト。3 番目に書式設定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1948">The third object to format.</span></span></param>
        <summary><span data-ttu-id="d5817-1949">文字列の書式項目を、指定した 3 つのオブジェクトの文字列形式に置換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1949">Replaces the format items in a string with the string representation of three specified objects.</span></span> <span data-ttu-id="d5817-1950">パラメーターにより、カルチャに固有の書式設定情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1950">An parameter supplies culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="d5817-1951">書式項目が <paramref name="format" />、<paramref name="arg0" />、および <paramref name="arg1" /> の文字列形式に置換された <paramref name="arg2" /> のコピー。</span><span class="sxs-lookup"><span data-stu-id="d5817-1951">A copy of <paramref name="format" /> in which the format items have been replaced by the string representations of <paramref name="arg0" />, <paramref name="arg1" />, and <paramref name="arg2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

[!INCLUDE[interpolated-strings](~/includes/interpolated-strings.md)]

<span data-ttu-id="d5817-1952">このメソッドは、[複合書式指定機能](~/docs/standard/base-types/composite-formatting.md)を使用して、3つの式を文字列形式に変換し、それらの表現を文字列に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1952">This method uses the [composite formatting feature](~/docs/standard/base-types/composite-formatting.md) to convert three expressions to their string representations and to embed those representations in a string.</span></span> <span data-ttu-id="d5817-1953">変換を実行する場合、メソッドはカルチャに依存した書式設定またはカスタムフォーマッタを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1953">In performing the conversion, the method uses culture-sensitive formatting or a custom formatter.</span></span> <span data-ttu-id="d5817-1954">メソッドは、 **tostring (IFormatProvider)** メソッドを呼び出すことによって各 <xref:System.Object> 引数を文字列形式に変換します。または、オブジェクトの対応する書式指定項目に**tostring (string, IFormatProvider)** メソッドを呼び出して書式指定文字列を含めます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1954">The method converts each <xref:System.Object> argument to its string representation by calling its **ToString(IFormatProvider)** method or, if the object's corresponding format item includes a format string, by calling its **ToString(String,IFormatProvider)** method.</span></span> <span data-ttu-id="d5817-1955">これらのメソッドが存在しない場合は、オブジェクトのパラメーターなしの**ToString**メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1955">If these methods don't exist, it calls the object's parameterless **ToString** method.</span></span>

[!INCLUDE[provider-string-format](~/includes/provider-string-format.md)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-1956"><paramref name="format" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1956"><paramref name="format" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-1957"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1957"><paramref name="format" /> is invalid.</span></span>

<span data-ttu-id="d5817-1958">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-1958">-or-</span></span>

<span data-ttu-id="d5817-1959">書式項目のインデックスが 0 より小さいか、または 2 より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-1959">The index of a format item is less than zero, or greater than two.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public CharEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CharEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As CharEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CharEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; CharEnumerator" Usage="string.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CharEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-1960">この文字列に含まれる個々の文字を反復処理するオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1960">Retrieves an object that can iterate through the individual characters in this string.</span></span></summary>
        <returns><span data-ttu-id="d5817-1961">列挙子オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-1961">An enumerator object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!TIP]
> <span data-ttu-id="d5817-1962"><xref:System.String.GetEnumerator%2A> メソッドを呼び出して、文字列を列挙するために使用する <xref:System.CharEnumerator> オブジェクトを取得するのではなく、代わりに言語の反復構造を使用C#する必要C++があります (では、/clr では、Visual Basic)。</span><span class="sxs-lookup"><span data-stu-id="d5817-1962">Rather than calling the <xref:System.String.GetEnumerator%2A> method to retrieve a <xref:System.CharEnumerator> object that you then use to enumerate a string, you should instead use your language's iteration construct (in C#, in C++/CLR, and in Visual Basic).</span></span> <span data-ttu-id="d5817-1963">[foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) in C#、for [each](/cpp/dotnet/for-each-in) C++ [、および Visual Basic](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) )。</span><span class="sxs-lookup"><span data-stu-id="d5817-1963">[foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) in C#, [for each](/cpp/dotnet/for-each-in) in C++/CLR, and [For Each](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) in Visual Basic).</span></span>

 <span data-ttu-id="d5817-1964">このメソッドを使用すると、文字列内の個々の文字を反復処理できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1964">This method enables you to iterate the individual characters in a string.</span></span> <span data-ttu-id="d5817-1965">たとえば、Visual Basic の `For Each` ステートメントとC# `foreach` ステートメントは、このメソッドを呼び出して、この文字列インスタンス内の文字への読み取り専用アクセスを提供できる <xref:System.CharEnumerator> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1965">For example, the Visual Basic `For Each` and C# `foreach` statements invoke this method to return a <xref:System.CharEnumerator> object that can provide read-only access to the characters in this string instance.</span></span>



## Examples
 <span data-ttu-id="d5817-1966">次の例では、複数の文字列の文字を反復処理し、個々の文字についての情報を表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1966">The following example iterates the characters in several strings and displays information about their individual characters.</span></span> <span data-ttu-id="d5817-1967">この例では、<xref:System.String.GetEnumerator%2A> メソッドの呼び出しではなく、言語イテレーション構成を使用しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1967">It uses the language iteration construct rather than a call to the <xref:System.String.GetEnumerator%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.GetEnumerator/CPP/getenumerator.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetEnumerator/CS/getenumerator.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetEnumerator/VB/getenumerator.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="P:System.String.Chars(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="string.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-1968">この文字列のハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1968">Returns the hash code for this string.</span></span></summary>
        <returns><span data-ttu-id="d5817-1969">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="d5817-1969">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-1970"><xref:System.String.GetHashCode%2A> の動作は、実装によって異なります。これは、共通言語ランタイムのあるバージョンから別のバージョンに変更される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1970">The behavior of <xref:System.String.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another.</span></span> <span data-ttu-id="d5817-1971">これが発生する原因として、<xref:System.String.GetHashCode%2A>のパフォーマンスが向上することが考えられます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1971">A reason why this might happen is to improve the performance of <xref:System.String.GetHashCode%2A>.</span></span>

> [!IMPORTANT]
>  <span data-ttu-id="d5817-1972">2つの文字列オブジェクトが等しい場合、<xref:System.String.GetHashCode%2A> メソッドは同一の値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1972">If two string objects are equal, the <xref:System.String.GetHashCode%2A> method returns identical values.</span></span> <span data-ttu-id="d5817-1973">ただし、一意の文字列値ごとに一意のハッシュコード値はありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1973">However, there is not a unique hash code value for each unique string value.</span></span> <span data-ttu-id="d5817-1974">異なる文字列は、同じハッシュコードを返すことができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1974">Different strings can return the same hash code.</span></span>
>
>  <span data-ttu-id="d5817-1975">ハッシュコード自体は、安定しているとは限りません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1975">The hash code itself is not guaranteed to be stable.</span></span> <span data-ttu-id="d5817-1976">同じ文字列のハッシュコードは、.net の実装間、.net の複数のバージョン間、.net の1つのバージョンの .net プラットフォーム (32 ビットや64ビットなど) で異なる場合があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1976">Hash codes for identical strings can differ across .NET implementations, across .NET versions, and across .NET platforms (such as 32-bit and 64-bit) for a single version of .NET.</span></span> <span data-ttu-id="d5817-1977">場合によっては、アプリケーションドメインによって異なる場合もあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1977">In some cases, they can even differ by application domain.</span></span> <span data-ttu-id="d5817-1978">これは、同じプログラムの2回目の実行で異なるハッシュコードが返される可能性があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1978">This implies that two subsequent runs of the same program may return different hash codes.</span></span>
>
>  <span data-ttu-id="d5817-1979">このため、ハッシュコードは、作成されたアプリケーションドメインの外部では使用できません。また、コレクションのキーフィールドとして使用することは避け、永続化しないでください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1979">As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.</span></span>
>
>  <span data-ttu-id="d5817-1980">最後に、暗号ハッシュ関数によって返される値の代わりに、暗号強度の高いハッシュが必要な場合は、ハッシュコードを使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1980">Finally, don't use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash.</span></span> <span data-ttu-id="d5817-1981">暗号化ハッシュの場合は、<xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> または <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> クラスから派生したクラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1981">For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> class.</span></span>
>
>  <span data-ttu-id="d5817-1982">ハッシュコードの詳細については、「<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1982">For more information about hash codes, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="d5817-1983">デスクトップアプリでは、 [\<UseRandomizedStringHashAlgorithm > 要素](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)を使用して、アプリケーションドメインごとに一意のハッシュコードを生成できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1983">In desktop apps, you can use the [\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md) to generate unique hash codes on a per application domain basis.</span></span> <span data-ttu-id="d5817-1984">これにより、競合の数を減らし、ハッシュテーブルを使用する挿入と参照の全体的なパフォーマンスを向上させることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1984">This can reduce the number of collisions and improve the overall performance of insertions and lookups that use hash tables.</span></span> <span data-ttu-id="d5817-1985">次の例は、 [\<UseRandomizedStringHashAlgorithm > 要素](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)の使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1985">The following example shows how to use the [\<UseRandomizedStringHashAlgorithm> element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md).</span></span> <span data-ttu-id="d5817-1986">このクラスは、"This is a string" という値を持つプライベート文字列定数 `s`を含む `DisplayString` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1986">It defines a `DisplayString` class that includes a private string constant, `s`, whose value is "This is a string."</span></span> <span data-ttu-id="d5817-1987">また、メソッドを実行しているアプリケーション ドメインの名前と共に文字列値とハッシュ コードを表示する `ShowStringHashCode` メソッドも含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1987">It also includes a `ShowStringHashCode` method that displays the string value and its hash code along with the name of the application domain in which the method is executing.</span></span>

 [!code-csharp[System.String.GetHashCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/perdomain.cs#2)]
 [!code-vb[System.String.GetHashCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/perdomain.vb#2)]

 <span data-ttu-id="d5817-1988">構成ファイルを指定せずにこの例を実行すると、次のような出力が表示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1988">When you run the example without supplying a configuration file, it displays output similar to the following.</span></span> <span data-ttu-id="d5817-1989">文字列のハッシュ コードが 2 つアプリケーション ドメインで同じであることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1989">Note that the hash codes for the string are identical in the two application domains.</span></span>

```
String 'This is a string.' in domain 'PerDomain.exe': 941BCEAC
String 'This is a string.' in domain 'NewDomain': 941BCEAC
```

 <span data-ttu-id="d5817-1990">ただし、例のディレクトリに次の構成ファイルを追加して例を実行すると、同じ文字列のハッシュ コードがアプリケーション ドメインによって異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-1990">However, if you add the following configuration file to the example's directory and then run the example, the hash codes for the same string will differ by application domain.</span></span>

```xml
<?xml version ="1.0"?>
<configuration>
   <runtime>
      <UseRandomizedStringHashAlgorithm enabled="1" />
   </runtime>
</configuration>
```

 <span data-ttu-id="d5817-1991">構成ファイルが存在する場合、次の出力が表示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1991">When the configuration file is present, the example displays the following output:</span></span>

```
String 'This is a string.' in domain 'PerDomain.exe': 5435776D
String 'This is a string.' in domain 'NewDomain': 75CC8236
```

> [!IMPORTANT]
>  <span data-ttu-id="d5817-1992">ハッシュ コードは、ハッシュ テーブルからキーを持つオブジェクトを効率的に挿入および取得するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1992">Hash codes are used to insert and retrieve keyed objects from hash tables efficiently.</span></span> <span data-ttu-id="d5817-1993">ただし、ハッシュ コードは、文字列を一意に識別しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-1993">However, hash codes don't uniquely identify strings.</span></span> <span data-ttu-id="d5817-1994">同一の文字列は同じハッシュコードを持ちますが、共通言語ランタイムは同じハッシュコードを異なる文字列に割り当てることもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1994">Identical strings have  equal hash codes, but the common language runtime can also assign the same hash code to different strings.</span></span> <span data-ttu-id="d5817-1995">さらに、ハッシュコードは、.NETのバージョン、単一バージョンでプラットフォームとアプリケーション ドメインを変更できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-1995">In addition, hash codes can vary by version of .NET, by platform within a single version, and by application domain.</span></span> <span data-ttu-id="d5817-1996">このため、ハッシュコードの値をシリアル化したり永続化したり、ハッシュテーブルまたはディクショナリのキーとして使用したりしないでください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1996">Because of this, you should not serialize or persist hash code values, nor should you use them as keys in a hash table or dictionary.</span></span>

 <span data-ttu-id="d5817-1997">ハッシュコードと `GetHashCode` メソッドの使用方法の詳細については、「<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-1997">For additional information about the use of hash codes and the `GetHashCode` method, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>



## Examples
 <span data-ttu-id="d5817-1998">次の例は、さまざまな入力文字列を使用して <xref:System.String.GetHashCode%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-1998">The following example demonstrates the <xref:System.String.GetHashCode%2A> method using various input strings.</span></span>

 [!code-cpp[system.string.gethashcode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.GetHashCode/CPP/gethashcode.cpp#1)]
 [!code-csharp[system.string.gethashcode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.GetHashCode/CS/gethashcode.cs#1)]
 [!code-vb[system.string.gethashcode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.GetHashCode/VB/gethashcode.vb#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-1999"><see cref="M:System.String.GetHashCode" /> によって返される値は、プラットフォームに依存します。</span><span class="sxs-lookup"><span data-stu-id="d5817-1999">The value returned by <see cref="M:System.String.GetHashCode" /> is platform-dependent.</span></span> <span data-ttu-id="d5817-2000">これは、.NET Framework の32ビットバージョンと64ビットバージョンで異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2000">It differs on the 32-bit and 64-bit versions of the .NET Framework.</span></span> <span data-ttu-id="d5817-2001">また、.NET Framework と .NET Core のバージョンによって異なる場合もあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2001">It also can differ between versions of the .NET Framework and .NET Core.</span></span></para></block>
        <altmember cref="M:System.Object.GetHashCode" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md"><span data-ttu-id="d5817-2002">&lt;UseRandomizedStringHashAlgorithm&gt; 要素</span><span class="sxs-lookup"><span data-stu-id="d5817-2002">&lt;UseRandomizedStringHashAlgorithm&gt; Element</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public static int GetHashCode (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetHashCode(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHashCode (value As ReadOnlySpan(Of Char)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetHashCode(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="static member GetHashCode : ReadOnlySpan&lt;char&gt; -&gt; int" Usage="System.string.GetHashCode value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2003">読み取り専用の文字スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-2003">A read-only character span.</span></span></param>
        <summary><span data-ttu-id="d5817-2004">指定された読み取り専用文字スパンのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2004">Returns the hash code for the provided read-only character span.</span></span></summary>
        <returns><span data-ttu-id="d5817-2005">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="d5817-2005">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetHashCode(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode(StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : StringComparison -&gt; int" Usage="string.GetHashCode comparisonType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="comparisonType"><span data-ttu-id="d5817-2006">比較で使用する規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-2006">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="d5817-2007">指定された規則を使用して、この文字列のハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2007">Returns the hash code for this string using the specified rules.</span></span></summary>
        <returns><span data-ttu-id="d5817-2008">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="d5817-2008">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public static int GetHashCode (ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetHashCode(valuetype System.ReadOnlySpan`1&lt;char&gt; value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char},System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetHashCode (value As ReadOnlySpan(Of Char), comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetHashCode(ReadOnlySpan&lt;char&gt; value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="static member GetHashCode : ReadOnlySpan&lt;char&gt; * StringComparison -&gt; int" Usage="System.string.GetHashCode (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2009">読み取り専用の文字スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-2009">A read-only character span.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-2010">比較で使用する規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-2010">One of the enumeration values that specifies the rules to use in the comparison.</span></span></param>
        <summary><span data-ttu-id="d5817-2011">指定された規則を使用して、指定された読み取り専用の文字スパンのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2011">Returns the hash code for the provided read-only character span using the specified rules.</span></span></summary>
        <returns><span data-ttu-id="d5817-2012">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="d5817-2012">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPinnableReference">
      <MemberSignature Language="C#" Value="public ref readonly char GetPinnableReference ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char GetPinnableReference() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetPinnableReference" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPinnableReference () As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; char ^ GetPinnableReference();" />
      <MemberSignature Language="F#" Value="member this.GetPinnableReference : unit -&gt; char" Usage="string.GetPinnableReference " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;net-5.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Readonly">
        <ReturnType>System.Char</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-3.0">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-2013">インデックス 0 にある文字列の要素への参照を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2013">Returns a reference to the element of the string at index zero.</span></span></summary>
        <returns><span data-ttu-id="d5817-2014">インデックス 0 にある文字列の要素への参照を表す文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2014">A character representing the reference to the element of the string at index zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-2015">`GetPinnableReference` メソッドは、メモリ内の <xref:System.String> をピン留めするために使用できる文字を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2015">The `GetPinnableReference` method returns a character that can be used for pinning a <xref:System.String> in memory.</span></span> <span data-ttu-id="d5817-2016">これは、fixed ステートメント内での <xref:System.String> の使用をサポートするために必要です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2016">It is required to support the use of a <xref:System.String> within a fixed statement.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d5817-2017">文字列が null です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2017">The string is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="string.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-2018"><see cref="T:System.String" /> クラスには <see cref="T:System.TypeCode" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2018">Returns the <see cref="T:System.TypeCode" /> for the <see cref="T:System.String" /> class.</span></span></summary>
        <returns><span data-ttu-id="d5817-2019">列挙型定数 <see cref="F:System.TypeCode.String" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2019">The enumerated constant, <see cref="F:System.TypeCode.String" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="d5817-2020">次の例では、<xref:System.String> 型の <xref:System.TypeCode> 列挙定数を表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2020">The following example displays the <xref:System.TypeCode> enumerated constant for the <xref:System.String> type.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.gettypecode/CPP/gtc.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.gettypecode/CS/gtc.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.gettypecode/VB/gtc.vb" id="Snippet1":::

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-2021">このインスタンス内で最初に出現する指定 Unicode 文字または文字列の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2021">Reports the zero-based index of the first occurrence of a specified Unicode character or string within this instance.</span></span> <span data-ttu-id="d5817-2022">このインスタンス内で文字または文字列が見つからない場合、このメソッドは -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2022">The method returns -1 if the character or string is not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char -&gt; int" Usage="string.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2023">シークする Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2023">A Unicode character to seek.</span></span></param>
        <summary><span data-ttu-id="d5817-2024">指定した Unicode 文字がこの文字列内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2024">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span></span></summary>
        <returns><span data-ttu-id="d5817-2025">その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2025">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2026">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2026">Index numbering starts from zero.</span></span>

 <span data-ttu-id="d5817-2027">このメソッドは、Unicode スカラー値が同じである場合にのみ、文字が別の文字と等価であると見なされる序数 (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2027">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="d5817-2028">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> メソッドを使用します。このメソッドでは、カルチャに応じて、"AE" (u + 0041 という, U + 0045) のように、構成されていない文字を表す Unicode スカラー値 ("AE" (u + 00C6) など) が、正しいシーケンス内の文字のコンポーネントの出現</span><span class="sxs-lookup"><span data-stu-id="d5817-2028">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>



## Examples
 <span data-ttu-id="d5817-2029">次の例は、<xref:System.String.IndexOf%2A> メソッドを使用して文字の <xref:System.String> を検索する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2029">The following example demonstrates how you can search a <xref:System.String> for a character using the <xref:System.String.IndexOf%2A> method.</span></span>

 [!code-cpp[System.String.IndexOf#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/indexof_c.cpp#5)]
 [!code-csharp-interactive[System.String.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/indexof_c.cs#5)]
 [!code-vb[System.String.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/indexof_c.vb#5)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string -&gt; int" Usage="string.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2030">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2030">The string to seek.</span></span></param>
        <summary><span data-ttu-id="d5817-2031">指定された文字列がこのインスタンス内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2031">Reports the zero-based index of the first occurrence of the specified string in this instance.</span></span></summary>
        <returns><span data-ttu-id="d5817-2032">その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2032">The zero-based index position of <paramref name="value" /> if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="d5817-2033"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2033">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2034">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2034">Index numbering starts from zero.</span></span>

 <span data-ttu-id="d5817-2035">このメソッドは、現在のカルチャを使用して、単語 (大文字と小文字を区別し、カルチャに依存する) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2035">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="d5817-2036">検索は、このインスタンスの最初の文字位置から開始し、最後の文字位置まで続行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2036">The search begins at the first character position of this instance and continues until the last character position.</span></span>

 <span data-ttu-id="d5817-2037">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2037">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2038">カルチャに依存した検索では、`value` に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2038">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="d5817-2039">`value` が1つ以上の無視できる文字で構成されている場合、<xref:System.String.IndexOf%28System.String%29> メソッドは常に 0 (ゼロ) を返して、現在のインスタンスの先頭で一致が見つかったことを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2039">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%29> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.</span></span> <span data-ttu-id="d5817-2040">次の例では、<xref:System.String.IndexOf%28System.String%29> メソッドを使用して、2つの文字列の3つの部分文字列 (ソフトハイフン (U + 00AD)、ソフトハイフンの後に "n"、ソフトハイフンの後に "m") を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2040">In the following example, the <xref:System.String.IndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="d5817-2041">文字列の 1 つのみにソフト ハイフンが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2041">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="d5817-2042">この例が [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、ソフトハイフンが無視できない文字であるため、結果は `value`にソフトハイフンが含まれていなかった場合と同じになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2042">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`.</span></span> <span data-ttu-id="d5817-2043">ソフトハイフンのみを検索する場合、メソッドは、文字列の先頭に一致するものが見つかったことを示す 0 (ゼロ) を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2043">When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.</span></span>

 [!code-csharp[System.String.IndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable21.cs#21)]
 [!code-vb[System.String.IndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable21.vb#21)]



## Examples
 <span data-ttu-id="d5817-2044">次の例では、"animal" の "n" を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2044">The following example searches for the "n" in "animal".</span></span> <span data-ttu-id="d5817-2045">文字列インデックスは1ではなく0から始まるので、<xref:System.String.IndexOf%28System.String%29> メソッドは、"n" が1の位置にあることを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2045">Because string indexes begin at zero rather than one, the <xref:System.String.IndexOf%28System.String%29> method indicates that the "n" is at position 1.</span></span>

 [!code-cpp[System.String.IndexOf#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/simple1.cpp#12)]
 [!code-csharp-interactive[System.String.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/simple1.cs#12)]
 [!code-vb[System.String.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/simple1.vb#12)]

 <span data-ttu-id="d5817-2046">次の例では、<xref:System.String.IndexOf%2A> メソッドを使用して、文に含まれる動物名の開始位置を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2046">The following example uses the <xref:System.String.IndexOf%2A> method to determine the starting position of an animal name in a sentence.</span></span> <span data-ttu-id="d5817-2047">次に、この位置を使用して、動物を記述する形容詞を文に挿入します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2047">It then uses this position to insert an adjective that describes the animal into the sentence.</span></span>

 [!code-cpp[stringinsert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringinsert/CPP/stringinsert.cpp#1)]
 [!code-csharp[stringinsert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringinsert/CS/stringinsert.cs#1)]
 [!code-vb[stringinsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringinsert/VB/stringinsert.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2048"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2048"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2049">「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」で説明したように、既定値を置き換える文字列比較メソッドを呼び出さずに、パラメーターを明示的に指定する必要があるメソッドを呼び出すことを避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2049">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="d5817-2050">現在のカルチャの比較規則を使用して、文字列インスタンス内の部分文字列の最初のインデックスを検索するには、`comparisonType` パラメーターに <see cref="F:System.StringComparison.CurrentCulture" /> 値を指定して <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> メソッドオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2050">To find the first index of a substring within a string instance by using the comparison rules of the current culture, call the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char * int -&gt; int" Usage="string.IndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2051">シークする Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2051">A Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2052">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2052">The search starting position.</span></span></param>
        <summary><span data-ttu-id="d5817-2053">指定した Unicode 文字がこの文字列内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2053">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span></span> <span data-ttu-id="d5817-2054">検索は、指定した文字位置から開始されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2054">The search starts at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="d5817-2055">その文字が見つかった場合は、文字列の先頭からの、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合は、-1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2055">The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2056">インデックスの番号付けは0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2056">Index numbering starts from 0.</span></span> <span data-ttu-id="d5817-2057">`startIndex` パラメーターには、0 から文字列インスタンスの長さまでの範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2057">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="d5817-2058">`startIndex` が文字列インスタンスの長さと等しい場合、メソッドは-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2058">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>

 <span data-ttu-id="d5817-2059">検索範囲は、`startIndex` から文字列の末尾までとなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2059">The search ranges from `startIndex` to the end of the string.</span></span>

 <span data-ttu-id="d5817-2060">このメソッドは、Unicode スカラー値が同じである場合にのみ、文字が別の文字と等価であると見なされる序数 (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2060">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="d5817-2061">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> メソッドを使用します。このメソッドでは、カルチャに応じて、"AE" (u + 0041 という, U + 0045) のように、構成されていない文字を表す Unicode スカラー値 ("AE" (u + 00C6) など) が、正しいシーケンス内の文字のコンポーネントの出現</span><span class="sxs-lookup"><span data-stu-id="d5817-2061">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>



## Examples
 <span data-ttu-id="d5817-2062"><xref:System.String.IndexOf%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2062">The following example demonstrates the <xref:System.String.IndexOf%2A> method.</span></span>

 [!code-cpp[string.indexof1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexof1/CPP/ixof1.cpp#1)]
 [!code-csharp-interactive[string.indexof1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexof1/CS/ixof1.cs#1)]
 [!code-vb[string.indexof1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexof1/VB/ixof1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2063"><paramref name="startIndex" /> が、0 (ゼロ) 未満か、または文字列の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2063"><paramref name="startIndex" /> is less than 0 (zero) or greater than the length of the string.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char * StringComparison -&gt; int" Usage="string.IndexOf (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2064">検索対象の文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2064">The character to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-2065">検索の規則を指定する列挙値。</span><span class="sxs-lookup"><span data-stu-id="d5817-2065">An enumeration value that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="d5817-2066">指定した Unicode 文字がこの文字列内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2066">Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</span></span> <span data-ttu-id="d5817-2067">指定した文字に使用する検索の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2067">A parameter specifies the type of search to use for the specified character.</span></span></summary>
        <returns><span data-ttu-id="d5817-2068">その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2068">The zero-based index of <paramref name="value" /> if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-2069">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2069">Index numbering starts from zero.</span></span>

<span data-ttu-id="d5817-2070">`comparisonType` パラメーターは、`value` 引数の検索で現在のカルチャまたはインバリアントカルチャを使用するか、大文字と小文字を区別するか、または大文字と小文字を区別するかを指定する、<xref:System.StringComparison> 列挙体メンバーです。または、単語または序数の比較規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2070">The `comparisonType` parameter is a <xref:System.StringComparison> enumeration member that specifies whether the search for the `value` argument uses the current or invariant culture, is case-sensitive or case-insensitive, or uses word or ordinal comparison rules.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2071"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2071"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int -&gt; int" Usage="string.IndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2072">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2072">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2073">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2073">The search starting position.</span></span></param>
        <summary><span data-ttu-id="d5817-2074">指定された文字列がこのインスタンス内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2074">Reports the zero-based index of the first occurrence of the specified string in this instance.</span></span> <span data-ttu-id="d5817-2075">検索は、指定した文字位置から開始されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2075">The search starts at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="d5817-2076">その文字列が見つかった場合は、現在のインスタンスの先頭からの、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合は、-1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2076">The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="d5817-2077"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2077">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2078">インデックスの番号付けは0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2078">Index numbering starts from 0.</span></span> <span data-ttu-id="d5817-2079">`startIndex` パラメーターには、0 から文字列インスタンスの長さまでの範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2079">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="d5817-2080">`startIndex` が文字列インスタンスの長さと等しい場合、メソッドは-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2080">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>

 <span data-ttu-id="d5817-2081">このメソッドは、現在のカルチャを使用して、単語 (大文字と小文字を区別し、カルチャに依存する) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2081">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="d5817-2082">検索は、このインスタンスの `startIndex` 文字位置から開始し、最後の文字位置まで続行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2082">The search begins at the `startIndex` character position of this instance and continues until the last character position.</span></span>

 <span data-ttu-id="d5817-2083">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2083">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2084">カルチャに依存した検索では、`value` に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2084">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="d5817-2085">`value` が1つ以上の無視できる文字で構成されている場合、<xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> メソッドは常に `startIndex`を返します。これは、検索を開始する文字の位置です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2085">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="d5817-2086">次の例では、<xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> メソッドを使用して、ソフトハイフン (U + 00AD) の後に2つの文字列の "m" が続く位置を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2086">In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in two strings.</span></span> <span data-ttu-id="d5817-2087">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2087">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="d5817-2088">この例が [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、ソフトハイフンが無視できない文字であるため、メソッドは文字列内の "m" のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2088">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string.</span></span> <span data-ttu-id="d5817-2089">"m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2089">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>

 [!code-csharp[System.String.IndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable22.cs#22)]
 [!code-vb[System.String.IndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable22.vb#22)]



## Examples
 <span data-ttu-id="d5817-2090">次の例では、対象の文字列内で指定された文字列のすべての出現箇所を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2090">The following example searches for all occurrences of a specified string within a target string.</span></span>

 [!code-cpp[stringindexof4#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringindexof4/CPP/stringindexof4.cpp#1)]
 [!code-csharp[stringindexof4#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringindexof4/CS/stringindexof4.cs#1)]
 [!code-vb[stringindexof4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringindexof4/VB/stringindexof4.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2091"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2091"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2092"><paramref name="startIndex" /> が、0 未満か、またはこの文字列の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2092"><paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2093">「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」で説明したように、既定値を置き換える文字列比較メソッドを呼び出さずに、パラメーターを明示的に指定する必要があるメソッドを呼び出すことを避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2093">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="d5817-2094">現在のカルチャの比較規則を使用して特定の文字位置より後に出現する部分文字列の最初のインデックスを検索するには、その `comparisonType` パラメーターに <see cref="F:System.StringComparison.CurrentCulture" /> 値を指定して、<see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> メソッドのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2094">To find the first index of a substring that occurs after a particular character position by using the comparison rules of the current culture, call the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * StringComparison -&gt; int" Usage="string.IndexOf (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2095">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2095">The string to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-2096">検索の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-2096">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="d5817-2097">指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2097">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="d5817-2098">指定した文字列に使用する検索の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2098">A parameter specifies the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="d5817-2099">その文字列が見つかった場合は、<paramref name="value" /> パラメーターのインデックス位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2099">The index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="d5817-2100"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は 0 です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2100">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2101">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2101">Index numbering starts from zero.</span></span>

 <span data-ttu-id="d5817-2102">`comparisonType` パラメーターは、大文字と小文字を区別するか、大文字と小文字を区別しない検索を使用し、word または序数の比較規則を使用して、現在のカルチャまたはインバリアントカルチャを使用して `value` パラメーターを検索するように指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2102">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>



## Examples
 <span data-ttu-id="d5817-2103">次の例は、<xref:System.StringComparison> 列挙体の異なる値を使用して、別の文字列内で最初に出現する文字列を検索する、<xref:System.String.IndexOf%2A> メソッドの3つのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2103">The following example demonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>

 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2104"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2104"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2105"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2105"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2106">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2106">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2107">カルチャに依存する検索の場合 (つまり、<paramref name="comparisonType" /> が <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2107">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="d5817-2108"><paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> メソッドは常に 0 (ゼロ) を返して、現在のインスタンスの先頭で一致が見つかったことを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2108">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method always returns 0 (zero) to indicate that the match is found at the beginning of the current instance.</span></span>

<span data-ttu-id="d5817-2109">次の例では、<see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> メソッドを使用して、2つの文字列の3つの部分文字列 (ソフトハイフン (U + 00AD)、ソフトハイフンの後に "n"、ソフトハイフンの後に "m") を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2109">In the following example, the <see cref="M:System.String.IndexOf(System.String,System.StringComparison)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="d5817-2110">文字列の 1 つのみにソフト ハイフンが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2110">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="d5817-2111">この例が [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合は、ソフトハイフンが無視できる文字であるため、カルチャに依存した検索では、検索文字列にソフトハイフンが含まれていない場合に返されるのと同じ値が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2111">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string.</span></span> <span data-ttu-id="d5817-2112">ただし、序数検索では、1つの文字列でソフトハイフンが正常に検出され、2番目の文字列に存在しないことが報告されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2112">An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.</span></span>

<span data-ttu-id="d5817-2113">[! code-csharp[# 26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable26.cs#26)][! code-vb[system.string # 26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable26.vb#26)]</span><span class="sxs-lookup"><span data-stu-id="d5817-2113">[!code-csharp[System.String.IndexOf#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable26.cs#26)] [!code-vb[System.String.IndexOf#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable26.vb#26)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : char * int * int -&gt; int" Usage="string.IndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2114">シークする Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2114">A Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2115">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2115">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-2116">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="d5817-2116">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="d5817-2117">指定文字がこのインスタンス内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2117">Reports the zero-based index of the first occurrence of the specified character in this instance.</span></span> <span data-ttu-id="d5817-2118">検索は指定した文字位置から開始され、指定した数の文字位置が検査されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2118">The search starts at a specified character position and examines a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="d5817-2119">その文字が見つかった場合は、文字列の先頭からの、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合は、-1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2119">The zero-based index position of <paramref name="value" /> from the start of the string if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2120">検索は `startIndex` から開始され、 + `count`-1 `startIndex`続行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2120">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="d5817-2121">`startIndex` + `count` の文字が検索に含まれていません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2121">The character at `startIndex` + `count` is not included in the search.</span></span>

 <span data-ttu-id="d5817-2122">インデックスの番号付けは 0 (ゼロ) から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2122">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="d5817-2123">`startIndex` パラメーターには、0 から文字列インスタンスの長さまでの範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2123">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>

 <span data-ttu-id="d5817-2124">このメソッドは、Unicode スカラー値が同じである場合にのみ、文字が別の文字と等価であると見なされる序数 (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2124">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="d5817-2125">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> メソッドを使用します。このメソッドでは、カルチャに応じて、"AE" (u + 0041 という, U + 0045) のように、構成されていない文字を表す Unicode スカラー値 ("AE" (u + 00C6) など) が、正しいシーケンス内の文字のコンポーネントの出現</span><span class="sxs-lookup"><span data-stu-id="d5817-2125">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>



## Examples
 <span data-ttu-id="d5817-2126"><xref:System.String.IndexOf%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2126">The following example demonstrates the <xref:System.String.IndexOf%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.IndexOf/CPP/indexofcii.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/indexofcii.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/indexofcii.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2127"><paramref name="count" /> または <paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2127"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="d5817-2128">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2128">-or-</span></span>

 <span data-ttu-id="d5817-2129"><paramref name="startIndex" /> がこの文字列の長さより大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2129"><paramref name="startIndex" /> is greater than the length of this string.</span></span>

<span data-ttu-id="d5817-2130">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2130">-or-</span></span>

 <span data-ttu-id="d5817-2131"><paramref name="count" /> がこの文字列の長さ - <paramref name="startIndex" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2131"><paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int * int -&gt; int" Usage="string.IndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2132">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2132">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2133">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2133">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-2134">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="d5817-2134">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="d5817-2135">指定された文字列がこのインスタンス内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2135">Reports the zero-based index of the first occurrence of the specified string in this instance.</span></span> <span data-ttu-id="d5817-2136">検索は指定した文字位置から開始され、指定した数の文字位置が検査されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2136">The search starts at a specified character position and examines a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="d5817-2137">その文字列が見つかった場合は、現在のインスタンスの先頭からの、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合は、-1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2137">The zero-based index position of <paramref name="value" /> from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="d5817-2138"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2138">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2139">インデックスの番号付けは 0 (ゼロ) から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2139">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="d5817-2140">`startIndex` パラメーターには、0 から文字列インスタンスの長さまでの範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2140">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>

 <span data-ttu-id="d5817-2141">このメソッドは、現在のカルチャを使用して、単語 (大文字と小文字を区別し、カルチャに依存する) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2141">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span> <span data-ttu-id="d5817-2142">検索は `startIndex` から開始され、 + `count`-1 `startIndex`続行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2142">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="d5817-2143">`startIndex` + `count` の文字が検索に含まれていません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2143">The character at `startIndex` + `count` is not included in the search.</span></span>

 <span data-ttu-id="d5817-2144">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2144">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2145">カルチャに依存した検索では、`value` に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2145">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="d5817-2146">`value` が1つ以上の無視できる文字で構成されている場合、<xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドは常に `startIndex`を返します。これは、検索を開始する文字の位置です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2146">If `value` consists only of one or more ignorable characters, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="d5817-2147">次の例では、<xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドを使用して、2つの文字列の3番目から6番目までの文字位置から、ソフトハイフン (U + 00AD) の後に "m" を続けた位置を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2147">In the following example, the <xref:System.String.IndexOf%28System.String%2CSystem.Int32%2CSystem.Int32%29> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings.</span></span> <span data-ttu-id="d5817-2148">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2148">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="d5817-2149">この例が [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、どちらの場合も、ソフトハイフンが無視できない文字であるため、メソッドはカルチャに依存した比較を実行するときに、文字列内の "m" のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2149">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2150">"m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2150">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>

 [!code-csharp[System.String.IndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable23.cs#23)]
 [!code-vb[System.String.IndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable23.vb#23)]



## Examples
 <span data-ttu-id="d5817-2151">次の例では、別の文字列の部分文字列内に出現する文字列 "he" のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2151">The following example finds the index of all occurrences of the string "he" within a substring of another string.</span></span> <span data-ttu-id="d5817-2152">検索反復処理のたびに、検索する文字数を再計算する必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2152">Note that the number of characters to be searched must be recalculated for each search iteration.</span></span>

 [!code-cpp[string.indexof8#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.indexof8/CPP/ixof8.cpp#1)]
 [!code-csharp-interactive[string.indexof8#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.indexof8/CS/ixof8.cs#1)]
 [!code-vb[string.indexof8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexof8/VB/ixof8.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2153"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2153"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2154"><paramref name="count" /> または <paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2154"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="d5817-2155">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2155">-or-</span></span>

 <span data-ttu-id="d5817-2156"><paramref name="startIndex" /> がこの文字列の長さより大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2156"><paramref name="startIndex" /> is greater than the length of this string.</span></span>

<span data-ttu-id="d5817-2157">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2157">-or-</span></span>

 <span data-ttu-id="d5817-2158"><paramref name="count" /> がこの文字列の長さ - <paramref name="startIndex" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2158"><paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2159">「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」で説明したように、既定値を置き換える文字列比較メソッドを呼び出さずに、パラメーターを明示的に指定する必要があるメソッドを呼び出すことを避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2159">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="d5817-2160">現在のカルチャの比較規則を使用してこの操作を実行するには、`comparisonType` パラメーターに <see cref="F:System.StringComparison.CurrentCulture" /> 値を指定して <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> メソッドオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2160">To use the comparison rules of the current culture to perform this operation, call the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its `comparisonType` parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int * StringComparison -&gt; int" Usage="string.IndexOf (value, startIndex, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2161">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2161">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2162">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2162">The search starting position.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-2163">検索の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-2163">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="d5817-2164">指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2164">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="d5817-2165">現在の文字列内での検索の開始位置、および指定した文字列に使用する検索の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2165">Parameters specify the starting search position in the current string and the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="d5817-2166">その文字列が見つかった場合は、現在のインスタンスの先頭からの、<paramref name="value" /> パラメーターの 0 から始まるインデックス位置。見つからなかった場合は、-1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2166">The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="d5817-2167"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2167">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2168">インデックスの番号付けは0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2168">Index numbering starts from 0.</span></span> <span data-ttu-id="d5817-2169">`startIndex` パラメーターには、0 から文字列インスタンスの長さまでの範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2169">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span> <span data-ttu-id="d5817-2170">`startIndex` が文字列インスタンスの長さと等しい場合、メソッドは-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2170">If `startIndex` equals the length of the string instance, the method returns -1.</span></span>

 <span data-ttu-id="d5817-2171">`comparisonType` パラメーターは、大文字と小文字を区別するか、大文字と小文字を区別しない検索を使用し、word または序数の比較規則を使用して、現在のカルチャまたはインバリアントカルチャを使用して `value` パラメーターを検索するように指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2171">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>



## Examples
 <span data-ttu-id="d5817-2172">次の例は、<xref:System.StringComparison> 列挙体の異なる値を使用して、別の文字列内で最初に出現する文字列を検索する、<xref:System.String.IndexOf%2A> メソッドの3つのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2172">The following example demonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>

 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2173"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2173"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2174"><paramref name="startIndex" /> が、0 未満か、またはこの文字列の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2174"><paramref name="startIndex" /> is less than 0 (zero) or greater than the length of this string.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2175"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2175"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2176">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2176">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2177">カルチャに依存する検索の場合 (つまり、<paramref name="comparisonType" /> が <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2177">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="d5817-2178"><paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2178">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>

<span data-ttu-id="d5817-2179">次の例では、<see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> メソッドを使用して、ソフトハイフン (U + 00AD) の後に2つの文字列の3番目の文字位置から始まる "m" を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2179">In the following example, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting with the third character position in two strings.</span></span> <span data-ttu-id="d5817-2180">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2180">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="d5817-2181">この例が [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、どちらの場合も、ソフトハイフンが無視できない文字であるため、メソッドはカルチャに依存した比較を実行するときに、文字列内の "m" のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2181">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2182">"m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2182">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span> <span data-ttu-id="d5817-2183">このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2183">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>

<span data-ttu-id="d5817-2184">[! code-csharp[. IndexOf # 25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable25.cs#25)][! code-vb[system.string # 25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable25.vb#25)]</span><span class="sxs-lookup"><span data-stu-id="d5817-2184">[!code-csharp[System.String.IndexOf#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable25.cs#25)] [!code-vb[System.String.IndexOf#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable25.vb#25)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (string value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(string value, int32 startIndex, int32 count, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::String ^ value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : string * int * int * StringComparison -&gt; int" Usage="string.IndexOf (value, startIndex, count, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2185">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2185">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2186">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2186">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-2187">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="d5817-2187">The number of character positions to examine.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-2188">検索の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-2188">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="d5817-2189">指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2189">Reports the zero-based index of the first occurrence of the specified string in the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="d5817-2190">現在の文字列での検索開始位置、現在の文字列で検索する文字の数、および指定した文字列に使用する検索の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2190">Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="d5817-2191">その文字列が見つかった場合は、現在のインスタンスの先頭からの、<paramref name="value" /> パラメーターの 0 から始まるインデックス位置。見つからなかった場合は、-1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2191">The zero-based index position of the <paramref name="value" /> parameter from the start of the current instance if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="d5817-2192"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2192">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2193">インデックスの番号付けは 0 (ゼロ) から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2193">Index numbering starts from 0 (zero).</span></span> <span data-ttu-id="d5817-2194">`startIndex` パラメーターには、0 から文字列インスタンスの長さまでの範囲の値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2194">The `startIndex` parameter can range from 0 to the length of the string instance.</span></span>

 <span data-ttu-id="d5817-2195">検索は `startIndex` から開始され、 + `count`-1 `startIndex`続行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2195">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="d5817-2196">`startIndex` + `count` の文字が検索に含まれていません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2196">The character at `startIndex` + `count` is not included in the search.</span></span>

 <span data-ttu-id="d5817-2197">`comparisonType` パラメーターは、大文字と小文字を区別するか、大文字と小文字を区別しない検索を使用し、word または序数の比較規則を使用して、現在のカルチャまたはインバリアントカルチャを使用して `value` パラメーターを検索するように指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2197">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>



## Examples
 <span data-ttu-id="d5817-2198">次の例は、<xref:System.StringComparison> 列挙体の異なる値を使用して、別の文字列内で最初に出現する文字列を検索する、<xref:System.String.IndexOf%2A> メソッドの3つのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2198">The following example demonstrates three overloads of the <xref:System.String.IndexOf%2A> method that find the first occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>

 [!code-csharp[system.string.IndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.IndexOfCmp/cs/iocmp.cs#1)]
 [!code-vb[system.string.IndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.IndexOfCmp/vb/iocmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2199"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2199"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2200"><paramref name="count" /> または <paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2200"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="d5817-2201">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2201">-or-</span></span>

 <span data-ttu-id="d5817-2202"><paramref name="startIndex" /> はこのインスタンスの長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2202"><paramref name="startIndex" /> is greater than the length of this instance.</span></span>

<span data-ttu-id="d5817-2203">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2203">-or-</span></span>

 <span data-ttu-id="d5817-2204"><paramref name="count" /> がこの文字列の長さ - <paramref name="startIndex" /> より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2204"><paramref name="count" /> is greater than the length of this string minus <paramref name="startIndex" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2205"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2205"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2206">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2206">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2207">カルチャに依存する検索の場合 (つまり、<paramref name="comparisonType" /> が <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2207">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="d5817-2208"><paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2208">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>

<span data-ttu-id="d5817-2209">次の例では、<see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> メソッドを使用して、2つの文字列の3番目から6番目までの文字位置から、ソフトハイフン (U + 00AD) の後に "m" を続けた位置を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2209">In the following example, the <see cref="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings.</span></span> <span data-ttu-id="d5817-2210">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2210">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="d5817-2211">この例が [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、どちらの場合も、ソフトハイフンが無視できない文字であるため、メソッドはカルチャに依存した比較を実行するときに、文字列内の "m" のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2211">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2212">ただし、序数による比較を実行する場合は、最初の文字列でのみ部分文字列が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2212">When it performs an ordinal comparison, however, it finds the substring only in the first string.</span></span> <span data-ttu-id="d5817-2213">ソフトハイフンの後に "m" が続く最初の文字列の場合、メソッドはソフトハイフンのインデックスを返すのではなく、カルチャに依存した比較を実行するときに "m" のインデックスを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2213">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2214">このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2214">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>

<span data-ttu-id="d5817-2215">[! code-csharp[. IndexOf # 24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable24.cs#24)][! code-vb[system.string # 24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable24.vb#24)]</span><span class="sxs-lookup"><span data-stu-id="d5817-2215">[!code-csharp[System.String.IndexOf#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.IndexOf/CS/ignorable24.cs#24)] [!code-vb[System.String.IndexOf#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.IndexOf/VB/ignorable24.vb#24)]</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOfAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-2216">Unicode 文字の指定した配列内にある文字がこのインスタンスで最初に見つかった位置のインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2216">Reports the index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span> <span data-ttu-id="d5817-2217">このインスタンス内で配列内の文字が見つからない場合、このメソッドは -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2217">The method returns -1 if the characters in the array are not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf);" />
      <MemberSignature Language="F#" Value="member this.IndexOfAny : char[] -&gt; int" Usage="string.IndexOfAny anyOf" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="d5817-2218">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2218">A Unicode character array containing one or more characters to seek.</span></span></param>
        <summary><span data-ttu-id="d5817-2219">Unicode 文字の指定した配列内にある文字がこのインスタンスで最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2219">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span></summary>
        <returns><span data-ttu-id="d5817-2220"><paramref name="anyOf" /> 内の文字がこのインスタンスで最初に見つかった場所の 0 から始まるインデックスでの位置。<paramref name="anyOf" /> 内に文字が見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2220">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2221">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2221">Index numbering starts from zero.</span></span>

 <span data-ttu-id="d5817-2222">`anyOf` の検索では大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2222">The search for `anyOf` is case-sensitive.</span></span> <span data-ttu-id="d5817-2223">`anyOf` が空の配列の場合、メソッドは文字列の先頭 (インデックス 0) で一致を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2223">If `anyOf` is an empty array, the method finds a match at the beginning of the string (that  is, at index zero).</span></span>

 <span data-ttu-id="d5817-2224">このメソッドは、Unicode スカラー値が同じである場合にのみ、文字が別の文字と等価であると見なされる序数 (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2224">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="d5817-2225">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> メソッドを使用します。このメソッドでは、カルチャに応じて、"AE" (u + 0041 という, U + 0045) のように、構成されていない文字を表す Unicode スカラー値 ("AE" (u + 00C6) など) が、正しいシーケンス内の文字のコンポーネントの出現</span><span class="sxs-lookup"><span data-stu-id="d5817-2225">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>



## Examples
 <span data-ttu-id="d5817-2226">次の例では、文字列内の最初の母音を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2226">The following example finds the first vowel in a string.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.IndexOfAny/cs/IndexOfAny1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.IndexOfAny/vb/IndexOfAny1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2227"><paramref name="anyOf" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2227"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char(), startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.IndexOfAny : char[] * int -&gt; int" Usage="string.IndexOfAny (anyOf, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="d5817-2228">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2228">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2229">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2229">The search starting position.</span></span></param>
        <summary><span data-ttu-id="d5817-2230">Unicode 文字の指定した配列内にある文字がこのインスタンスで最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2230">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span> <span data-ttu-id="d5817-2231">検索は、指定した文字位置から開始されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2231">The search starts at a specified character position.</span></span></summary>
        <returns><span data-ttu-id="d5817-2232"><paramref name="anyOf" /> 内の文字がこのインスタンスで最初に見つかった場所の 0 から始まるインデックスでの位置。<paramref name="anyOf" /> 内に文字が見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2232">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2233">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2233">Index numbering starts from zero.</span></span> <span data-ttu-id="d5817-2234">`startIndex` パラメーターは、0から文字列インスタンスの長さまでの範囲で指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2234">The `startIndex` parameter can range from 0 to one less than the length of the string instance.</span></span>

 <span data-ttu-id="d5817-2235">検索範囲は、`startIndex` から文字列の末尾までとなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2235">The search ranges from `startIndex` to the end of the string.</span></span>

 <span data-ttu-id="d5817-2236">`anyOf` の検索では大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2236">The search for `anyOf` is case-sensitive.</span></span>

 <span data-ttu-id="d5817-2237">このメソッドは、Unicode スカラー値が同じである場合にのみ、文字が別の文字と等価であると見なされる序数 (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2237">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="d5817-2238">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> メソッドを使用します。このメソッドでは、カルチャに応じて、"AE" (u + 0041 という, U + 0045) のように、構成されていない文字を表す Unicode スカラー値 ("AE" (u + 00C6) など) が、正しいシーケンス内の文字のコンポーネントの出現</span><span class="sxs-lookup"><span data-stu-id="d5817-2238">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>



## Examples
 <span data-ttu-id="d5817-2239">次の例では、別の文字列の部分文字列内の文字列 "is" 内の任意の文字が出現する位置のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2239">The following example finds the index of the occurrence of any character of the string "is" within a substring of another string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.indexofany2/CPP/ixany2.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.indexofany2/CS/ixany2.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexofany2/VB/ixany2.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2240"><paramref name="anyOf" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2240"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2241"><paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2241"><paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="d5817-2242">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2242">-or-</span></span>

 <span data-ttu-id="d5817-2243"><paramref name="startIndex" /> が、このインスタンス中の文字数を超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2243"><paramref name="startIndex" /> is greater than the number of characters in this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfAny">
      <MemberSignature Language="C#" Value="public int IndexOfAny (char[] anyOf, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfAny(char[] anyOf, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfAny (anyOf As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOfAny : char[] * int * int -&gt; int" Usage="string.IndexOfAny (anyOf, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="d5817-2244">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2244">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2245">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2245">The search starting position.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-2246">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="d5817-2246">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="d5817-2247">Unicode 文字の指定した配列内にある文字がこのインスタンスで最初に見つかった位置の 0 から始まるインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2247">Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</span></span> <span data-ttu-id="d5817-2248">検索は指定した文字位置から開始され、指定した数の文字位置が検査されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2248">The search starts at a specified character position and examines a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="d5817-2249"><paramref name="anyOf" /> 内の文字がこのインスタンスで最初に見つかった場所の 0 から始まるインデックスでの位置。<paramref name="anyOf" /> 内に文字が見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2249">The zero-based index position of the first occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2250">検索は `startIndex` から開始され、 + `count`-1 `startIndex`続行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2250">The search begins at `startIndex` and continues to `startIndex` + `count` -1.</span></span> <span data-ttu-id="d5817-2251">`startIndex` + `count` の文字が検索に含まれていません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2251">The character at `startIndex` + `count` is not included in the search.</span></span>

 <span data-ttu-id="d5817-2252">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2252">Index numbering starts from zero.</span></span> <span data-ttu-id="d5817-2253">`startIndex` パラメーターは、0から文字列インスタンスの長さまでの範囲で指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2253">The `startIndex` parameter can range from 0 to one less than the length of the string instance.</span></span>

 <span data-ttu-id="d5817-2254">`anyOf` の検索では大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2254">The search for `anyOf` is case-sensitive.</span></span>

 <span data-ttu-id="d5817-2255">このメソッドは、Unicode スカラー値が同じである場合にのみ、文字が別の文字と等価であると見なされる序数 (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2255">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="d5817-2256">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> メソッドを使用します。このメソッドでは、カルチャに応じて、"AE" (u + 0041 という, U + 0045) のように、構成されていない文字を表す Unicode スカラー値 ("AE" (u + 00C6) など) が、正しいシーケンス内の文字のコンポーネントの出現</span><span class="sxs-lookup"><span data-stu-id="d5817-2256">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>



## Examples
 <span data-ttu-id="d5817-2257">次の例では、別の文字列の部分文字列内で文字列 "aid" の任意の文字が出現する位置のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2257">The following example finds the index of the occurrence of any character of the string "aid" within a substring of another string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.indexofany3/CPP/ixany3.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.indexofany3/CS/ixany3.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.indexofany3/VB/ixany3.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2258"><paramref name="anyOf" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2258"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2259"><paramref name="count" /> または <paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2259"><paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="d5817-2260">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2260">-or-</span></span>

 <span data-ttu-id="d5817-2261"><paramref name="count" /> + <paramref name="startIndex" /> が、このインスタンス中の文字数を超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2261"><paramref name="count" /> + <paramref name="startIndex" /> is greater than the number of characters in this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public string Insert (int startIndex, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Insert(int32 startIndex, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (startIndex As Integer, value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Insert(int startIndex, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.Insert : int * string -&gt; string" Usage="string.Insert (startIndex, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="d5817-2262">挿入の 0 から始まるインデックス位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2262">The zero-based index position of the insertion.</span></span></param>
        <param name="value"><span data-ttu-id="d5817-2263">挿入する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2263">The string to insert.</span></span></param>
        <summary><span data-ttu-id="d5817-2264">このインスタンス内の指定したインデックス位置に指定した文字列を挿入する場合の、新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2264">Returns a new string in which a specified string is inserted at a specified index position in this instance.</span></span></summary>
        <returns><span data-ttu-id="d5817-2265">このインスタンスと等価で、<paramref name="value" /> の位置に <paramref name="startIndex" /> が挿入された新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2265">A new string that is equivalent to this instance, but with <paramref name="value" /> inserted at position <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2266">`startIndex` がこのインスタンスの長さと等しい場合、`value` がこのインスタンスの末尾に追加されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2266">If `startIndex` is equal to the length of this instance, `value` is appended to the end of this instance.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2267">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2267">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-2268">代わりに、現在のインスタンスに `value` が挿入される新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2268">Instead, it returns a new string in which `value` is inserted into the current instance.</span></span>

 <span data-ttu-id="d5817-2269">たとえば、`"abc".Insert(2, "XYZ")` の戻り値は "abXYZc" です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2269">For example, the return value of `"abc".Insert(2, "XYZ")` is "abXYZc".</span></span>



## Examples
 <span data-ttu-id="d5817-2270">次の例では、文字列の4番目の文字位置 (インデックス3の文字) に空白文字を挿入します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2270">The following example inserts a space character in the fourth character position (the character at index 3) of a string.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Insert/cs/Insert1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Insert/vb/Insert1.vb" id="Snippet1":::

 <span data-ttu-id="d5817-2271">次のコンソールアプリケーションは、2つの動物を説明するために1つ以上の形容詞を入力するようユーザーに求めます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2271">The following console application prompts the users to enter one or more adjectives to describe two animals.</span></span> <span data-ttu-id="d5817-2272">次に、<xref:System.String.Insert%2A> メソッドを呼び出して、ユーザーが入力したテキストを文字列に挿入します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2272">It then calls the <xref:System.String.Insert%2A> method to insert the text entered by the user into a string.</span></span>

 [!code-cpp[stringinsert#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringinsert/CPP/stringinsert.cpp#1)]
 [!code-csharp[stringinsert#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringinsert/CS/stringinsert.cs#1)]
 [!code-vb[stringinsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringinsert/VB/stringinsert.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2273"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2273"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2274"><paramref name="startIndex" /> が負の数値か、またはこのインスタンスの長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2274"><paramref name="startIndex" /> is negative or greater than the length of this instance.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Intern">
      <MemberSignature Language="C#" Value="public static string Intern (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Intern(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Intern(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Intern (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Intern(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member Intern : string -&gt; string" Usage="System.string.Intern str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="d5817-2275">インターン プールから検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2275">A string to search for in the intern pool.</span></span></param>
        <summary><span data-ttu-id="d5817-2276">指定した <see cref="T:System.String" /> へのシステム参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2276">Retrieves the system's reference to the specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-2277"><paramref name="str" /> がインターン プールに存在する場合は、それに対するシステム参照。それ以外の場合は、値が <paramref name="str" /> の文字列への新しい参照。</span><span class="sxs-lookup"><span data-stu-id="d5817-2277">The system's reference to <paramref name="str" />, if it is interned; otherwise, a new reference to a string with the value of <paramref name="str" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2278">共通言語ランタイムは、インターンプールと呼ばれるテーブルを保持することによって文字列ストレージを節約します。このテーブルには、プログラムで宣言またはプログラムによって作成された一意のリテラル文字列への単一の参照が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2278">The common language runtime conserves string storage by maintaining a table, called the intern pool, that contains a single reference to each unique literal string declared or created programmatically in your program.</span></span> <span data-ttu-id="d5817-2279">その結果、特定の値を持つリテラル文字列のインスタンスは、システム内に1回だけ存在します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2279">Consequently, an instance of a literal string with a particular value only exists once in the system.</span></span>

 <span data-ttu-id="d5817-2280">たとえば、同じリテラル文字列を複数の変数に割り当てた場合、ランタイムは、インターンプールからリテラル文字列への同じ参照を取得し、各変数に代入します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2280">For example, if you assign the same literal string to several variables, the runtime retrieves the same reference to the literal string from the intern pool and assigns it to each variable.</span></span>

 <span data-ttu-id="d5817-2281"><xref:System.String.Intern%2A> メソッドは、インターンプールを使用して、`str`の値と等しい文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2281">The <xref:System.String.Intern%2A> method uses the intern pool to search for a string equal to the value of `str`.</span></span> <span data-ttu-id="d5817-2282">このような文字列が存在する場合は、インターンプール内のその参照が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2282">If such a string exists, its reference in the intern pool is returned.</span></span> <span data-ttu-id="d5817-2283">文字列が存在しない場合は、`str` への参照がインターンプールに追加されると、その参照が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2283">If the string does not exist, a reference to `str` is added to the intern pool, then that reference is returned.</span></span>

 <span data-ttu-id="d5817-2284">次の例では、値が "MyTest" の文字列 s1 は、プログラム内のリテラルであるため、既にインターンされています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2284">In the following example, the string s1, which has a value of "MyTest", is already interned because it is a literal in the program.</span></span> <span data-ttu-id="d5817-2285"><xref:System.Text.StringBuilder?displayProperty=nameWithType> クラスは、s1 と同じ値を持つ新しい文字列オブジェクトを生成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2285">The <xref:System.Text.StringBuilder?displayProperty=nameWithType> class generates a new string object that has the same value as s1.</span></span> <span data-ttu-id="d5817-2286">その文字列への参照が s2 に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2286">A reference to that string is assigned to s2.</span></span> <span data-ttu-id="d5817-2287"><xref:System.String.Intern%2A> メソッドは、s2 と同じ値を持つ文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2287">The <xref:System.String.Intern%2A> method searches for a string that has the same value as s2.</span></span> <span data-ttu-id="d5817-2288">このような文字列が存在するので、このメソッドは s1 に割り当てられているのと同じ参照を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2288">Because such a string exists, the method returns the same reference that is assigned to s1.</span></span> <span data-ttu-id="d5817-2289">その後、その参照が s3 に割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2289">That reference is then assigned to s3.</span></span> <span data-ttu-id="d5817-2290">参照 s1 と s2 は異なるオブジェクトを参照しているため、等しくないと比較します。参照 s1 と s3 は同じ文字列を参照しているため、等しいと比較されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2290">References s1 and s2 compare unequal because they refer to different objects; references s1 and s3 compare equal because they refer to the same string.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern1.vb" id="Snippet1":::

 <span data-ttu-id="d5817-2291">このメソッドと <xref:System.String.IsInterned%2A> メソッドを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2291">Compare this method to the <xref:System.String.IsInterned%2A> method.</span></span>

## <a name="version-considerations"></a><span data-ttu-id="d5817-2292">バージョンに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-2292">Version considerations</span></span>

 <span data-ttu-id="d5817-2293">[!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)]では、<xref:System.String.Intern%2A> メソッドは、インターンが空の文字列であることに関して、.NET Framework 1.0 および1.1 での動作に戻ります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2293">In the [!INCLUDE[net_v35SP1_long](~/includes/net-v35sp1-long-md.md)], the <xref:System.String.Intern%2A> method reverts to its behavior in the .NET Framework 1.0 and 1.1 with regard to interning the empty string.</span></span> <span data-ttu-id="d5817-2294">次の例では、変数 `str1` に <xref:System.String.Empty?displayProperty=nameWithtype>への参照が割り当てられています。変数 `str2` には、<xref:System.String.Intern%2A> オブジェクトを文字列に変換した後に <xref:System.Text.StringBuilder> メソッドを呼び出して返される <xref:System.String.Empty?displayProperty=nameWithtype> への参照が割り当てられます。<xref:System.String.Empty?displayProperty=nameWithtype></span><span class="sxs-lookup"><span data-stu-id="d5817-2294">In the following example, the variable `str1` is assigned a reference to <xref:System.String.Empty?displayProperty=nameWithtype>, and the variable `str2` is assigned the reference to <xref:System.String.Empty?displayProperty=nameWithtype> that is returned by calling the <xref:System.String.Intern%2A> method after converting a <xref:System.Text.StringBuilder> object whose value is <xref:System.String.Empty?displayProperty=nameWithtype> to a string.</span></span> <span data-ttu-id="d5817-2295">次に、`str1` と `str2` に含まれる参照が等しいかどうかを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2295">Then the references contained in `str1` and `str2` are compared for equality.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Intern/cs/Intern2.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Intern/vb/Intern2.vb" id="Snippet2":::

 <span data-ttu-id="d5817-2296">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] と [!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)]では、`str1` と `str2` が等しくありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2296">In the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] and [!INCLUDE[net_v30_long](~/includes/net-v30-long-md.md)], `str1` and `str2` are not equal.</span></span> <span data-ttu-id="d5817-2297">それ以外のすべてのバージョンでは、`str1` と `str2` は同じです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2297">In all other versions, `str1` and `str2` are equal.</span></span>

## <a name="performance-considerations"></a><span data-ttu-id="d5817-2298">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-2298">Performance Considerations</span></span>
 <span data-ttu-id="d5817-2299">アプリケーションによって割り当てられるメモリの総量を減らす場合は、インターン文字列に2つの望ましくない副作用があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2299">If you are trying to reduce the total amount of memory your application allocates, keep in mind that interning a string has two unwanted side effects.</span></span> <span data-ttu-id="d5817-2300">まず、インターンが <xref:System.String> オブジェクトに割り当てられたメモリは、共通言語ランタイム (CLR) が終了するまで解放されない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2300">First, the memory allocated for interned <xref:System.String> objects is not likely to be released until the common language runtime (CLR) terminates.</span></span> <span data-ttu-id="d5817-2301">その理由は、アプリケーションまたはアプリケーションドメインが終了した後も、インターン化された <xref:System.String> オブジェクトへの CLR の参照が保持される可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2301">The reason is that the CLR's reference to the interned <xref:System.String> object can persist after your application, or even your application domain, terminates.</span></span> <span data-ttu-id="d5817-2302">次に、文字列をインターンさせるには、最初に文字列を作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2302">Second, to intern a string, you must first create the string.</span></span> <span data-ttu-id="d5817-2303">メモリが最終的にガベージコレクトされる場合でも、<xref:System.String> オブジェクトによって使用されるメモリを割り当てる必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2303">The memory used by the <xref:System.String> object must still be allocated, even though the memory will eventually be garbage collected.</span></span>

 <span data-ttu-id="d5817-2304">.NET Framework バージョン2.0 では、<xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning?displayProperty=nameWithType> 列挙メンバーが導入されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2304">The .NET Framework version 2.0 introduces the <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning?displayProperty=nameWithType> enumeration member.</span></span> <span data-ttu-id="d5817-2305"><xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> メンバーは、アセンブリをリテラル文字列インターンを必要としないものとしてマークします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2305">The <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> member marks an assembly as not requiring string-literal interning.</span></span> <span data-ttu-id="d5817-2306"><xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute> 属性を使用して、アセンブリに <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> を適用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2306">You can apply <xref:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning> to an assembly using the <xref:System.Runtime.CompilerServices.CompilationRelaxationsAttribute> attribute.</span></span> <span data-ttu-id="d5817-2307">また、 [ngen.exe (ネイティブイメージジェネレーター)](~/docs/framework/tools/ngen-exe-native-image-generator.md)を使用して、実行時より前にアセンブリをコンパイルする場合、文字列はモジュール間でインターンプールされません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2307">Also, when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to compile an assembly in advance of run time, strings are not interned across modules.</span></span>



## Examples
 <span data-ttu-id="d5817-2308">次の例では、値が等しい3つの文字列を使用して、新しく作成された文字列とインターンされた文字列が等しいかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2308">The following example uses three strings that are equal in value to determine whether a newly created string and an interned string are equal.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.intern/CPP/string_intern.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.intern/CS/string_intern.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.intern/VB/string_intern.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2309"><paramref name="str" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2309"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.IsInterned(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsInterned">
      <MemberSignature Language="C#" Value="public static string IsInterned (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string IsInterned(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsInterned(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInterned (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ IsInterned(System::String ^ str);" />
      <MemberSignature Language="F#" Value="static member IsInterned : string -&gt; string" Usage="System.string.IsInterned str" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="str"><span data-ttu-id="d5817-2310">インターン プールから検索する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2310">The string to search for in the intern pool.</span></span></param>
        <summary><span data-ttu-id="d5817-2311">指定した <see cref="T:System.String" /> への参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2311">Retrieves a reference to a specified <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-2312"><paramref name="str" /> が共通言語ランタイムのインターン プール内にある場合は、それへの参照。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2312">A reference to <paramref name="str" /> if it is in the common language runtime intern pool; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2313">共通言語ランタイムは、インターンプールと呼ばれるテーブルを自動的に保持します。このテーブルには、プログラムで宣言された一意のリテラル文字列定数の1つのインスタンスと、<xref:System.String.Intern%2A> メソッドを呼び出すことによってプログラムによって追加する <xref:System.String> の一意のインスタンスが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2313">The common language runtime automatically maintains a table, called the intern pool, which contains a single instance of each unique literal string constant declared in a program, as well as any unique instance of <xref:System.String> you add programmatically by calling the <xref:System.String.Intern%2A> method.</span></span>

 <span data-ttu-id="d5817-2314">インターンプールは、文字列ストレージを節約します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2314">The intern pool conserves string storage.</span></span> <span data-ttu-id="d5817-2315">リテラル文字列定数を複数の変数に割り当てた場合、同じ値を持つ <xref:System.String> の複数のインスタンスを参照するのではなく、各変数がインターンプールで同じ定数を参照するように設定されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2315">If you assign a literal string constant to several variables, each variable is set to reference the same constant in the intern pool instead of referencing several different instances of <xref:System.String> that have identical values.</span></span>

 <span data-ttu-id="d5817-2316">このメソッドは、インターンプール内の `str` を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2316">This method looks up `str` in the intern pool.</span></span> <span data-ttu-id="d5817-2317">`str` が既にインターンされている場合は、そのインスタンスへの参照が返されます。それ以外の場合は `null` が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2317">If `str` has already been interned, a reference to that instance is returned; otherwise, `null` is returned.</span></span>

 <span data-ttu-id="d5817-2318">このメソッドと <xref:System.String.Intern%2A> メソッドを比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2318">Compare this method to the <xref:System.String.Intern%2A> method.</span></span>

 <span data-ttu-id="d5817-2319">このメソッドは、ブール値を返しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2319">This method does not return a Boolean value.</span></span> <span data-ttu-id="d5817-2320">特定の文字列がインターンされているかどうかを示すブール値が必要なためにメソッドを呼び出す場合は、次のようなコードを使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2320">If you call the method because you want a Boolean value that indicates whether a particular string is interned, you can use code such as the following.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isinterned/cs/isinternedex1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isinterned/vb/isinternedex1.vb" id="Snippet1":::

> [!NOTE]
>  <span data-ttu-id="d5817-2321">.NET Framework バージョン2.0 以降では、 [ngen.exe (ネイティブイメージジェネレーター)](~/docs/framework/tools/ngen-exe-native-image-generator.md)を使用してローカルコンピューターのネイティブイメージキャッシュにアセンブリをインストールするときに、インターンプールの使用を無効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2321">Starting with the .NET Framework version 2.0, you can override the use of the intern pool when you use the [Ngen.exe (Native Image Generator)](~/docs/framework/tools/ngen-exe-native-image-generator.md) to install an assembly to the native image cache on a local computer.</span></span> <span data-ttu-id="d5817-2322">詳細については、「<xref:System.String.Intern%2A> プロパティ」の「解説」の「パフォーマンスに関する考慮事項」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2322">For more information, see Performance Considerations in the Remarks section for the <xref:System.String.Intern%2A> property.</span></span>



## Examples
 <span data-ttu-id="d5817-2323">次の例は、リテラル文字列がコンパイラによって自動的にインターンされることを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2323">The following example demonstrates that literal strings are interned automatically by the compiler.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.isinterned/CPP/isin.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.isinterned/CS/isin.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.isinterned/VB/isin.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2324"><paramref name="str" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2324"><paramref name="str" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.Intern(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsNormalized">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-2325">この文字列が、特定の Unicode 正規形であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2325">Indicates whether this string is in a particular Unicode normalization form.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsNormalized">
      <MemberSignature Language="C#" Value="public bool IsNormalized ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNormalized() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNormalized" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNormalized () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNormalized();" />
      <MemberSignature Language="F#" Value="member this.IsNormalized : unit -&gt; bool" Usage="string.IsNormalized " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-2326">この文字列が、Unicode 正規形 C であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2326">Indicates whether this string is in Unicode normalization form C.</span></span></summary>
        <returns><span data-ttu-id="d5817-2327">この文字列が正規形 C である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2327"><see langword="true" /> if this string is in normalization form C; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2328">一部の Unicode 文字には、組み合わせと複合 Unicode 文字のセットで構成される等価のバイナリ表現が複数あります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2328">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="d5817-2329">1つの文字に対して複数の表現が存在すると、検索、並べ替え、照合、およびその他の操作が複雑になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2329">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>

 <span data-ttu-id="d5817-2330">Unicode 規格では、1つの文字に相当するバイナリ表現を指定した場合に1つのバイナリ表現を返す正規化と呼ばれるプロセスが定義されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2330">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="d5817-2331">正規化は、正規化形式と呼ばれるいくつかのアルゴリズムを使用して実行できます。これは、さまざまな規則に従います。</span><span class="sxs-lookup"><span data-stu-id="d5817-2331">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="d5817-2332">現在、.NET では、C、D、KC、および KD の正規化形式がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2332">.NET currently supports normalization forms C, D, KC, and KD.</span></span>

 <span data-ttu-id="d5817-2333">サポートされている Unicode 正規化形式の詳細については、「<xref:System.Text.NormalizationForm?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2333">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>



## Examples
 <span data-ttu-id="d5817-2334">次の例では、文字列がさまざまな正規化形式に正常に正規化されたかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2334">The following example determines whether a string is successfully normalized to various normalization forms.</span></span>

 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2335">現在のインスタンスに、正しくない Unicode 文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2335">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2336"><see cref="Overload:System.String.IsNormalized" /> メソッドは、文字列内の最初の非正規化文字が検出された直後に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2336">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="d5817-2337">したがって、文字列に正規化されていない文字が含まれ、その後に無効な Unicode 文字が続く場合は、<see cref="Overload:System.String.Normalize" /> メソッドによって <see cref="T:System.ArgumentException" /> がスローされますが、<see cref="Overload:System.String.IsNormalized" /> は <see langword="false" />を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2337">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para></block>
        <altmember cref="M:System.String.Normalize" />
      </Docs>
    </Member>
    <Member MemberName="IsNormalized">
      <MemberSignature Language="C#" Value="public bool IsNormalized (System.Text.NormalizationForm normalizationForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsNormalized(valuetype System.Text.NormalizationForm normalizationForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNormalized(System.Text.NormalizationForm)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsNormalized (normalizationForm As NormalizationForm) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsNormalized(System::Text::NormalizationForm normalizationForm);" />
      <MemberSignature Language="F#" Value="member this.IsNormalized : System.Text.NormalizationForm -&gt; bool" Usage="string.IsNormalized normalizationForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizationForm" Type="System.Text.NormalizationForm" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="normalizationForm"><span data-ttu-id="d5817-2338">Unicode 正規形。</span><span class="sxs-lookup"><span data-stu-id="d5817-2338">A Unicode normalization form.</span></span></param>
        <summary><span data-ttu-id="d5817-2339">この文字列が、指定された Unicode 正規形であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2339">Indicates whether this string is in the specified Unicode normalization form.</span></span></summary>
        <returns><span data-ttu-id="d5817-2340">この文字列が <see langword="true" /> パラメーターに指定された正規形である場合は <paramref name="normalizationForm" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2340"><see langword="true" /> if this string is in the normalization form specified by the <paramref name="normalizationForm" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2341">一部の Unicode 文字には、組み合わせと複合 Unicode 文字のセットで構成される等価のバイナリ表現が複数あります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2341">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="d5817-2342">1つの文字に対して複数の表現が存在すると、検索、並べ替え、照合、およびその他の操作が複雑になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2342">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>

 <span data-ttu-id="d5817-2343">Unicode 規格では、1つの文字に相当するバイナリ表現を指定した場合に1つのバイナリ表現を返す正規化と呼ばれるプロセスが定義されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2343">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="d5817-2344">正規化は、正規化形式と呼ばれるいくつかのアルゴリズムを使用して実行できます。これは、さまざまな規則に従います。</span><span class="sxs-lookup"><span data-stu-id="d5817-2344">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="d5817-2345">現在、.NET では、C、D、KC、および KD の正規化形式がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2345">.NET currently supports normalization forms C, D, KC, and KD.</span></span>

 <span data-ttu-id="d5817-2346">サポートされている Unicode 正規化形式の詳細については、「<xref:System.Text.NormalizationForm?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2346">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>



## Examples
 <span data-ttu-id="d5817-2347">次の例は、<xref:System.String.IsNormalized%2A> メソッドと <xref:System.String.Normalize%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2347">The following example demonstrates the <xref:System.String.IsNormalized%2A> and <xref:System.String.Normalize%2A> methods.</span></span>

 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2348">現在のインスタンスに、正しくない Unicode 文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2348">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2349"><see cref="Overload:System.String.IsNormalized" /> メソッドは、文字列内の最初の非正規化文字が検出された直後に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2349">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="d5817-2350">したがって、文字列に正規化されていない文字が含まれ、その後に無効な Unicode 文字が続く場合は、<see cref="Overload:System.String.Normalize" /> メソッドによって <see cref="T:System.ArgumentException" /> がスローされますが、<see cref="Overload:System.String.IsNormalized" /> は <see langword="false" />を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2350">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para></block>
        <altmember cref="M:System.String.Normalize" />
      </Docs>
    </Member>
    <Member MemberName="IsNullOrEmpty">
      <MemberSignature Language="C#" Value="public static bool IsNullOrEmpty (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullOrEmpty(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNullOrEmpty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNullOrEmpty (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNullOrEmpty(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member IsNullOrEmpty : string -&gt; bool" Usage="System.string.IsNullOrEmpty value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2351">テストする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2351">The string to test.</span></span></param>
        <summary><span data-ttu-id="d5817-2352">指定された文字列が <see langword="null" /> または空の文字列 ("") であるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2352">Indicates whether the specified string is <see langword="null" /> or an empty string ("").</span></span></summary>
        <returns><span data-ttu-id="d5817-2353"><paramref name="value" /> パラメーターが <see langword="null" /> または空の文字列 ("") の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2353"><see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or an empty string (""); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2354"><xref:System.String.IsNullOrEmpty%2A> は、<xref:System.String> が `null` か、その値が <xref:System.String.Empty?displayProperty=nameWithType>かどうかを同時にテストできる便利なメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2354"><xref:System.String.IsNullOrEmpty%2A> is a convenience method that enables you to simultaneously test whether a <xref:System.String> is `null` or its value is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-2355">これは、次のコードと同じです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2355">It is equivalent to the following code:</span></span>

 [!code-cpp[System.String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/isnullorempty1.cpp#1)]
 [!code-csharp-interactive[System.String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/isnullorempty1.cs#1)]
 [!code-vb[System.String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/isnullorempty1.vb#1)]

 <span data-ttu-id="d5817-2356"><xref:System.String.IsNullOrWhiteSpace%2A> メソッドを使用して、文字列が `null`か、その値が <xref:System.String.Empty?displayProperty=nameWithType>か、または空白文字だけで構成されているかをテストできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2356">You can use the <xref:System.String.IsNullOrWhiteSpace%2A> method to test whether a string is `null`, its value is <xref:System.String.Empty?displayProperty=nameWithType>,  or it consists only of white-space characters.</span></span>

## <a name="what-is-a-null-string"></a><span data-ttu-id="d5817-2357">Null 文字列とは何ですか。</span><span class="sxs-lookup"><span data-stu-id="d5817-2357">What is a null string?</span></span>

<span data-ttu-id="d5817-2358">値 ( C++および Visual Basic) が割り当てられていない場合、または明示的に `null`の値が割り当てられている場合は、文字列が `null` されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2358">A string is `null` if it has not been assigned a value (in C++ and Visual Basic) or if it has explicitly been assigned a value of `null`.</span></span> <span data-ttu-id="d5817-2359">次の例に示すように、[複合書式指定](~/docs/standard/base-types/composite-formatting.md)機能は null 文字列を適切に処理できますが、メンバーが <xref:System.NullReferenceException>をスローする場合は、を呼び出すようにします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2359">Although the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature can gracefully handle a null string, as the following example shows, attempting to call one if its members throws a <xref:System.NullReferenceException>.</span></span>

[!code-cpp[System.String.IsNullOrEmpty#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#2)]
[!code-csharp-interactive[System.String.IsNullOrEmpty#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#2)]
[!code-vb[System.String.IsNullOrEmpty#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#2)]

## <a name="what-is-an-empty-string"></a><span data-ttu-id="d5817-2360">空の文字列とは何ですか。</span><span class="sxs-lookup"><span data-stu-id="d5817-2360">What is an empty string?</span></span>

<span data-ttu-id="d5817-2361">空の文字列 ("") または <xref:System.String.Empty?displayProperty=nameWithType>が明示的に割り当てられている場合、文字列は空になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2361">A string is empty if it  is explicitly assigned an empty string ("") or <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-2362">空の文字列の <xref:System.String.Length%2A> は0です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2362">An empty string has a <xref:System.String.Length%2A> of 0.</span></span>  <span data-ttu-id="d5817-2363">次の例では、空の文字列を作成し、その値とその長さを表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2363">The following example creates an empty string and displays its value and its length.</span></span>

[!code-cpp[System.String.IsNullOrEmpty#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.isnullorempty/cpp/NullString1.cpp#3)]
[!code-csharp-interactive[System.String.IsNullOrEmpty#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorempty/cs/NullString1.cs#3)]
[!code-vb[System.String.IsNullOrEmpty#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorempty/vb/NullString1.vb#3)]

## Examples
 <span data-ttu-id="d5817-2364">次の例では、3つの文字列を調べて、各文字列に値があるか、空の文字列であるか、または `null`かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2364">The following example examines three strings and determines whether each string has a value, is an empty string, or is `null`.</span></span>

 [!code-cpp[String.IsNullOrEmpty#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.isNullOrEmpty/CPP/inoe.cpp#1)]
 [!code-csharp-interactive[String.IsNullOrEmpty#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.isNullOrEmpty/CS/inoe.cs#1)]
 [!code-vb[String.IsNullOrEmpty#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.isNullOrEmpty/VB/inoe.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrWhiteSpace(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsNullOrWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsNullOrWhiteSpace (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullOrWhiteSpace(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.IsNullOrWhiteSpace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNullOrWhiteSpace (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNullOrWhiteSpace(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member IsNullOrWhiteSpace : string -&gt; bool" Usage="System.string.IsNullOrWhiteSpace value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2365">テストする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2365">The string to test.</span></span></param>
        <summary><span data-ttu-id="d5817-2366">指定された文字列が <see langword="null" /> または空であるか、空白文字だけで構成されているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2366">Indicates whether a specified string is <see langword="null" />, empty, or consists only of white-space characters.</span></span></summary>
        <returns><span data-ttu-id="d5817-2367"><see langword="true" /> パラメーターが <paramref name="value" /> または <see langword="null" /> であるか、<see cref="F:System.String.Empty" /> が空白文字だけで構成されている場合は <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2367"><see langword="true" /> if the <paramref name="value" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, or if <paramref name="value" /> consists exclusively of white-space characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2368"><xref:System.String.IsNullOrWhiteSpace%2A> は、優れたパフォーマンスを提供する点を除いて、次のコードのような便利な方法です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2368"><xref:System.String.IsNullOrWhiteSpace%2A> is a convenience method that is similar to the following  code, except that it offers superior performance:</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace.cs" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace.vb" id="Snippet2":::

 <span data-ttu-id="d5817-2369">空白文字は、Unicode 規格で定義されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2369">White-space characters are defined by the Unicode standard.</span></span> <span data-ttu-id="d5817-2370"><xref:System.String.IsNullOrWhiteSpace%2A> メソッドは、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> メソッドに空白文字として渡されるときに `true` の値を返す任意の文字を解釈します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2370">The <xref:System.String.IsNullOrWhiteSpace%2A> method interprets any character that returns a value of `true` when it is passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method as a white-space character.</span></span>



## Examples
 <span data-ttu-id="d5817-2371">次の例では、文字列配列を作成し、配列の各要素を <xref:System.String.IsNullOrWhiteSpace%2A> メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2371">The following example creates a string array, and then passes each element of the array to the <xref:System.String.IsNullOrWhiteSpace%2A> method.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.isnullorwhitespace/cs/isnullorwhitespace1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.isnullorwhitespace/vb/isnullorwhitespace1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.IsNullOrEmpty(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-2372">指定した配列の要素またはコレクションのメンバーを連結します。各要素の間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2372">Concatenates the elements of a specified array or the members of a collection, using the specified separator between each element or member.</span></span></summary>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, ParamArray values As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : char * obj[] -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="values" Type="System.Object[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-2373">区切り記号として使用する文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2373">The character to use as a separator.</span></span> <span data-ttu-id="d5817-2374"><paramref name="value" /> が 2 つ以上の要素を含む場合のみ、<paramref name="separator" /> が返される文字列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2374"><paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="d5817-2375">文字列表現が連結されるオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2375">An array of objects whose string representations will be concatenated.</span></span></param>
        <summary><span data-ttu-id="d5817-2376">各メンバー間に指定した区切り記号を使用して、オブジェクトの配列の文字列表現を連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2376">Concatenates the string representations of an array of objects, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="d5817-2377"><paramref name="separator" /> 文字で区切られた、<paramref name="values" /> の要素で構成される文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2377">A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> character.</span></span>

<span data-ttu-id="d5817-2378">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2378">-or-</span></span>

<span data-ttu-id="d5817-2379"><paramref name="values" /> に要素がない、または <paramref name="values" /> のすべての要素が <see langword="null" /> の場合は <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2379"><see cref="F:System.String.Empty" /> if <paramref name="values" /> has zero elements or all the elements of <paramref name="values" /> are <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2380"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2380"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="d5817-2381">結果として生成される文字列の長さが、許容される最大長 (<see cref="F:System.Int32.MaxValue" />) をオーバーフローしています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2381">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, params string[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, ParamArray value As String()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, ... cli::array &lt;System::String ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="static member Join : char * string[] -&gt; string" Usage="System.string.Join (separator, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="value" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-2382">区切り記号として使用する文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2382">The character to use as a separator.</span></span> <span data-ttu-id="d5817-2383"><paramref name="value" /> が 2 つ以上の要素を含む場合のみ、<paramref name="separator" /> が返される文字列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2383"><paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</span></span></param>
        <param name="value"><span data-ttu-id="d5817-2384">連結する文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2384">An array of strings to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-2385">各メンバー間に指定した区切り記号を使用して、文字列の配列を連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2385">Concatenates an array of strings, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="d5817-2386"><paramref name="separator" /> 文字で区切られた、<paramref name="value" /> の要素で構成される文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2386">A string that consists of the elements of <paramref name="value" /> delimited by the <paramref name="separator" /> character.</span></span>

<span data-ttu-id="d5817-2387">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2387">-or-</span></span>

<span data-ttu-id="d5817-2388"><paramref name="value" /> に要素がない、または <paramref name="value" /> のすべての要素が <see langword="null" /> の場合は <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2388"><see cref="F:System.String.Empty" /> if <paramref name="value" /> has zero elements or all the elements of <paramref name="value" /> are <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2389"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2389"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="d5817-2390">結果として生成される文字列の長さが、許容される最大長 (<see cref="F:System.Int32.MaxValue" />) をオーバーフローしています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2390">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, System.Collections.Generic.IEnumerable&lt;string&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, class System.Collections.Generic.IEnumerable`1&lt;string&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, values As IEnumerable(Of String)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, System::Collections::Generic::IEnumerable&lt;System::String ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : string * seq&lt;string&gt; -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-2391">区切り記号として使用する文字列。<paramref name="separator" /></span><span class="sxs-lookup"><span data-stu-id="d5817-2391">The string to use as a separator.<paramref name="separator" /></span></span> <span data-ttu-id="d5817-2392">が返される文字列に含まれるのは、<paramref name="values" /> が 2 つ以上の要素を含む場合に限られます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2392">is included in the returned string only if <paramref name="values" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="d5817-2393">連結する文字列を格納しているコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5817-2393">A collection that contains the strings to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-2394"><see cref="T:System.Collections.Generic.IEnumerable`1" /> 型の構築された <see cref="T:System.String" /> コレクションのメンバーを連結します。各メンバーの間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2394">Concatenates the members of a constructed <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of type <see cref="T:System.String" />, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="d5817-2395"><paramref name="values" /> のメンバーからなる、<paramref name="separator" /> 文字列で区切られた文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2395">A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span></span>

<span data-ttu-id="d5817-2396">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2396">-or-</span></span>

<span data-ttu-id="d5817-2397"><paramref name="values" /> に要素がない、または <paramref name="values" /> のすべての要素が <see langword="null" /> の場合は <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2397"><see cref="F:System.String.Empty" /> if <paramref name="values" /> has zero elements or all the elements of <paramref name="values" /> are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2398">`separator` が `null`場合は、代わりに空の文字列 (<xref:System.String.Empty?displayProperty=nameWithType>) が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2398">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="d5817-2399">`values` のいずれかのメンバーが `null`場合は、空の文字列が代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2399">If any member of `values` is `null`, an empty string is used instead.</span></span>

 <span data-ttu-id="d5817-2400"><xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> は、最初に要素を文字列配列に変換しなくても、`IEnumerable(Of String)` コレクション内の各要素を連結できる便利なメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2400"><xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> is a convenience method that lets you concatenate each element in an `IEnumerable(Of String)` collection without first converting the elements to a string array.</span></span> <span data-ttu-id="d5817-2401">これは、統合言語クエリ (LINQ) クエリ式で特に便利です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2401">It is particularly useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="d5817-2402">次の例では、アルファベットの大文字または小文字を含む `List(Of String)` オブジェクトを、特定の文字以上の文字 (例では "M") を選択するラムダ式に渡します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2402">The following example passes a `List(Of String)` object that contains either the uppercase or lowercase letters of the alphabet to a lambda expression that selects letters that are equal to or greater than a particular letter (which, in the example, is "M").</span></span> <span data-ttu-id="d5817-2403"><xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> メソッドによって返された `IEnumerable(Of String)` コレクションを <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> メソッドに渡して、結果を1つの文字列として表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2403">The `IEnumerable(Of String)` collection returned by the <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> method is passed to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method to display the result as a single string.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join4.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join4.vb" id="Snippet4":::

## Examples
 <span data-ttu-id="d5817-2404">次の例では、ありアルゴリズムのエラトステネスを使用して、100以下の素数を計算します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2404">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="d5817-2405"><xref:System.String>型の <xref:System.Collections.Generic.List%601> オブジェクトに結果を代入し、その後 <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2405">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type <xref:System.String>, which it then passes to the <xref:System.String.Join%28System.String%2CSystem.Collections.Generic.IEnumerable%7BSystem.String%7D%29> method.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join3.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join3.vb" id="Snippet3":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2406"><paramref name="values" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2406"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="d5817-2407">結果として生成される文字列の長さが、許容される最大長 (<see cref="F:System.Int32.MaxValue" />) をオーバーフローしています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2407">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, ParamArray values As Object()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : string * obj[] -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="values" Type="System.Object[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-2408">区切り記号として使用する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2408">The string to use as a separator.</span></span> <span data-ttu-id="d5817-2409"><paramref name="values" /> が 2 つ以上の要素を含む場合のみ、<paramref name="separator" /> が返される文字列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2409"><paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="d5817-2410">連結する要素を格納している配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2410">An array that contains the elements to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-2411">オブジェクト配列の要素を連結します。各要素の間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2411">Concatenates the elements of an object array, using the specified separator between each element.</span></span></summary>
        <returns><span data-ttu-id="d5817-2412"><paramref name="values" /> の要素からなる、<paramref name="separator" /> 文字列で区切られた文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2412">A string that consists of the elements of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span></span> <span data-ttu-id="d5817-2413"><paramref name="values" /> が空の配列の場合、メソッドは <see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2413">If <paramref name="values" /> is an empty array, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2414">`separator` が `null` 場合、または最初の要素以外の `values` のいずれかの要素が `null`の場合は、代わりに空の文字列 (<xref:System.String.Empty?displayProperty=nameWithType>) が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2414">If `separator` is `null` or if any element of `values` other than the first element is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="d5817-2415">`values` の最初の要素が `null`場合は、「呼び出し元のメモ」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2415">See the Notes for Callers section if the first element of `values` is `null`.</span></span>

 <span data-ttu-id="d5817-2416"><xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> は、要素を文字列に明示的に変換せずに、オブジェクト配列の各要素を連結できる便利なメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2416"><xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> is a convenience method that lets you concatenate each element in an object array without explicitly converting its elements to strings.</span></span> <span data-ttu-id="d5817-2417">配列内の各オブジェクトの文字列形式は、そのオブジェクトの `ToString` メソッドを呼び出すことによって派生されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2417">The string representation of each object in the array is derived by calling that object's `ToString` method.</span></span>



## Examples
 <span data-ttu-id="d5817-2418">次の例では、ありアルゴリズムのエラトステネスを使用して、100以下の素数を計算します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2418">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="d5817-2419">結果を整数の配列に代入し、次に <xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2419">It assigns the result to a integer array, which it then passes to the <xref:System.String.Join%28System.String%2CSystem.Object%5B%5D%29> method.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2420"><paramref name="values" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2420"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="d5817-2421">結果として生成される文字列の長さが、許容される最大長 (<see cref="F:System.Int32.MaxValue" />) をオーバーフローしています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2421">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2422"><paramref name="values" /> の最初の要素が <see langword="null" />場合、<see cref="M:System.String.Join(System.String,System.Object[])" /> メソッドは <paramref name="values" /> 内の要素を連結するのではなく、<see cref="F:System.String.Empty" />を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2422">If the first element of <paramref name="values" /> is <see langword="null" />, the <see cref="M:System.String.Join(System.String,System.Object[])" /> method does not concatenate the elements in <paramref name="values" /> but instead returns <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="d5817-2423">この問題の回避策は多数あります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2423">A number of workarounds for this issue are available.</span></span> <span data-ttu-id="d5817-2424">最も簡単な方法は、次の例に示すように、配列の最初の要素に <see cref="F:System.String.Empty" /> の値を割り当てることです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2424">The easiest is to assign a value of <see cref="F:System.String.Empty" /> to the first element of the array, as the following example shows.</span></span>

<span data-ttu-id="d5817-2425">[! code-csharp-interactive[# 6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/joinfix1.cs#6)][! code-vb[system.string. Join # 6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/joinfix1.vb#6)]</span><span class="sxs-lookup"><span data-stu-id="d5817-2425">[!code-csharp-interactive[System.String.Join#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/joinfix1.cs#6)] [!code-vb[System.String.Join#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/joinfix1.vb#6)]</span></span></para></block>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, params string[] value);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, string[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, ParamArray value As String()) As String" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, ... cli::array &lt;System::String ^&gt; ^ value);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="static member Join : string * string[] -&gt; string" Usage="System.string.Join (separator, value)" />
      <MemberSignature Language="C#" Value="public static string Join (string separator, string[] value);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, value As String()) As String" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, cli::array &lt;System::String ^&gt; ^ value);" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="value" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-2426">区切り記号として使用する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2426">The string to use as a separator.</span></span> <span data-ttu-id="d5817-2427"><paramref name="value" /> が 2 つ以上の要素を含む場合のみ、<paramref name="separator" /> が返される文字列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2427"><paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</span></span></param>
        <param name="value"><span data-ttu-id="d5817-2428">連結する要素を格納している配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2428">An array that contains the elements to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-2429">文字列配列のすべての要素を連結します。各要素の間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2429">Concatenates all the elements of a string array, using the specified separator between each element.</span></span></summary>
        <returns><span data-ttu-id="d5817-2430"><paramref name="value" /> 内の要素からなる、<paramref name="separator" /> 文字列で区切られた文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2430">A string that consists of the elements in <paramref name="value" /> delimited by the <paramref name="separator" /> string.</span></span> <span data-ttu-id="d5817-2431"><paramref name="value" /> が空の配列の場合、メソッドは <see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2431">If <paramref name="value" /> is an empty array, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2432">たとえば、`separator` が "," で、`value` の要素が "apple"、"オレンジ"、"grape"、および "pear" の場合、`Join(separator, value)` は "apple, オレンジ, grape, pear" を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2432">For example, if `separator` is ", " and the elements of `value` are "apple", "orange", "grape", and "pear", `Join(separator, value)` returns "apple, orange, grape, pear".</span></span>

 <span data-ttu-id="d5817-2433">`separator` が `null`場合は、代わりに空の文字列 (<xref:System.String.Empty?displayProperty=nameWithType>) が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2433">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="d5817-2434">`value` 内のいずれかの要素が `null`場合は、空の文字列が代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2434">If any element in `value` is `null`, an empty string is used instead.</span></span>



## Examples
 <span data-ttu-id="d5817-2435"><xref:System.String.Join%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2435">The following example demonstrates the <xref:System.String.Join%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringjoin/CPP/stringjoin.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringjoin/CS/stringjoin.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringjoin/VB/stringjoin.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2436"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2436"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="d5817-2437">結果として生成される文字列の長さが、許容される最大長 (<see cref="F:System.Int32.MaxValue" />) をオーバーフローしています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2437">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
        <altmember cref="M:System.String.Concat(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (char separator, string[] value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(char separator, string[] value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.Char,System.String[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As Char, value As String(), startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(char separator, cli::array &lt;System::String ^&gt; ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member Join : char * string[] * int * int -&gt; string" Usage="System.string.Join (separator, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="value" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-2438">各メンバー間に指定した区切り記号を使用して、文字列の配列を連結します。指定したインデックス位置にある要素から開始し、指定した数の要素を含めます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2438">Concatenates an array of strings, using the specified separator between each member, starting with the element located at the specified index and including a specified number of elements.</span></span></param>
        <param name="value"><span data-ttu-id="d5817-2439">連結する文字列の配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2439">An array of strings to concatenate.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2440">連結する <paramref name="value" /> の最初の項目。</span><span class="sxs-lookup"><span data-stu-id="d5817-2440">The first item in <paramref name="value" /> to concatenate.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-2441"><paramref name="startIndex" /> の位置にある要素で始まる、連結する <paramref name="value" /> からの要素の数。</span><span class="sxs-lookup"><span data-stu-id="d5817-2441">The number of elements from <paramref name="value" /> to concatenate, starting with the element in the <paramref name="startIndex" /> position.</span></span></param>
        <summary><span data-ttu-id="d5817-2442">各メンバー間に指定した区切り記号を使用して、文字列の配列を連結します。<paramref name="startIndex" /> の位置に配置された <paramref name="value" /> 内の要素から開始し、<paramref name="count" /> 要素までを連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2442">Concatenates an array of strings, using the specified separator between each member, starting with the element in <paramref name="value" /> located at the <paramref name="startIndex" /> position, and concatenating up to <paramref name="count" /> elements.</span></span></summary>
        <returns><span data-ttu-id="d5817-2443"><paramref name="separator" /> 文字で区切られた、<paramref name="value" /> の要素で構成される文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2443">A string that consists of the elements of <paramref name="value" /> delimited by the <paramref name="separator" /> character.</span></span>

<span data-ttu-id="d5817-2444">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2444">-or-</span></span>

<span data-ttu-id="d5817-2445"><paramref name="count" /> が 0 である場合、<paramref name="value" /> に要素がない場合、または <paramref name="value" /> のすべての要素が <see langword="null" /> または <see cref="F:System.String.Empty" /> である場合は <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2445"><see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or all the elements of <paramref name="value" /> are <see langword="null" /> or <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2446"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2446"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2447"><paramref name="startIndex" /> または <paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2447"><paramref name="startIndex" /> or <paramref name="count" /> are negative.</span></span>

<span data-ttu-id="d5817-2448">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2448">-or-</span></span>

<span data-ttu-id="d5817-2449"><paramref name="startIndex" /> が <paramref name="value" />  - <paramref name="count" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2449"><paramref name="startIndex" /> is greater than the length of <paramref name="value" />  - <paramref name="count" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="d5817-2450">結果として生成される文字列の長さが、許容される最大長 (<see cref="F:System.Int32.MaxValue" />) をオーバーフローしています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2450">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string separator, string[] value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join(string separator, string[] value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join (separator As String, value As String(), startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Join(System::String ^ separator, cli::array &lt;System::String ^&gt; ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="static member Join : string * string[] * int * int -&gt; string" Usage="System.string.Join (separator, value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
        <Parameter Name="value" Type="System.String[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-2451">区切り記号として使用する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2451">The string to use as a separator.</span></span> <span data-ttu-id="d5817-2452"><paramref name="value" /> が 2 つ以上の要素を含む場合のみ、<paramref name="separator" /> が返される文字列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2452"><paramref name="separator" /> is included in the returned string only if <paramref name="value" /> has more than one element.</span></span></param>
        <param name="value"><span data-ttu-id="d5817-2453">連結する要素を格納している配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2453">An array that contains the elements to concatenate.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2454">使用する <paramref name="value" /> の最初の要素。</span><span class="sxs-lookup"><span data-stu-id="d5817-2454">The first element in <paramref name="value" /> to use.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-2455">使用する <paramref name="value" /> の要素の数。</span><span class="sxs-lookup"><span data-stu-id="d5817-2455">The number of elements of <paramref name="value" /> to use.</span></span></param>
        <summary><span data-ttu-id="d5817-2456">文字列配列の指定した要素を連結します。各要素の間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2456">Concatenates the specified elements of a string array, using the specified separator between each element.</span></span></summary>
        <returns><span data-ttu-id="d5817-2457"><paramref name="value" /> 内の文字列からなる、<paramref name="separator" /> 文字列で区切られた文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2457">A string that consists of the strings in <paramref name="value" /> delimited by the <paramref name="separator" /> string.</span></span>

<span data-ttu-id="d5817-2458">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2458">-or-</span></span>

 <span data-ttu-id="d5817-2459"><see cref="F:System.String.Empty" /> が 0 である場合、または <paramref name="count" /> に要素がない場合、または <paramref name="value" /> と <paramref name="separator" /> のすべての要素が <paramref name="value" /> である場合、<see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2459"><see cref="F:System.String.Empty" /> if <paramref name="count" /> is zero, <paramref name="value" /> has no elements, or <paramref name="separator" /> and all the elements of <paramref name="value" /> are <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2460">たとえば、`separator` が "," で、`value` の要素が "apple"、"オレンジ"、"grape"、および "pear" の場合、`Join(separator, value, 1, 2)` は "オレンジ, grape" を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2460">For example, if `separator` is ", " and the elements of `value` are "apple", "orange", "grape", and "pear", `Join(separator, value, 1, 2)` returns "orange, grape".</span></span>

 <span data-ttu-id="d5817-2461">`separator` が `null`場合は、代わりに空の文字列 (<xref:System.String.Empty?displayProperty=nameWithType>) が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2461">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="d5817-2462">`value` 内のいずれかの要素が `null`場合は、空の文字列が代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2462">If any element in `value` is `null`, an empty string is used instead.</span></span>



## Examples
 <span data-ttu-id="d5817-2463">次の例では、果物という名前の配列の2つの要素を連結しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2463">The following example concatenates two elements from an array of names of fruit.</span></span>

 [!code-cpp[string.join2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.join2/CPP/join2.cpp#1)]
 [!code-csharp-interactive[string.join2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.join2/CS/join2.cs#1)]
 [!code-vb[string.join2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.join2/VB/join2.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2464"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2464"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2465"><paramref name="startIndex" /> または <paramref name="count" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2465"><paramref name="startIndex" /> or <paramref name="count" /> is less than 0.</span></span>

<span data-ttu-id="d5817-2466">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2466">-or-</span></span>

<span data-ttu-id="d5817-2467"><paramref name="startIndex" /> と <paramref name="count" /> を加算すると、 <paramref name="value" />にある要素の数を超えます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2467"><paramref name="startIndex" /> plus <paramref name="count" /> is greater than the number of elements in <paramref name="value" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="d5817-2468">メモリが不足しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2468">Out of memory.</span></span></exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Join&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Join&lt;T&gt; (char separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join&lt;T&gt;(char separator, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join(Of T) (separator As Char, values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Join(char separator, System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : char * seq&lt;'T&gt; -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="d5817-2469"><paramref name="values" /> のメンバーの型。</span><span class="sxs-lookup"><span data-stu-id="d5817-2469">The type of the members of <paramref name="values" />.</span></span></typeparam>
        <param name="separator"><span data-ttu-id="d5817-2470">区切り記号として使用する文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2470">The character to use as a separator.</span></span> <span data-ttu-id="d5817-2471"><paramref name="values" /> が 2 つ以上の要素を含む場合のみ、<paramref name="separator" /> が返される文字列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2471"><paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="d5817-2472">連結するオブジェクトを格納しているコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5817-2472">A collection that contains the objects to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-2473">コレクションのメンバーを連結します。各メンバーの間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2473">Concatenates the members of a collection, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="d5817-2474"><paramref name="separator" /> 文字で区切られた <paramref name="values" /> のメンバーで構成される文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2474">A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> character.</span></span> <span data-ttu-id="d5817-2475"><paramref name="values" /> にメンバーがない場合、メソッドは <see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2475">If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2476"><paramref name="values" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2476"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="d5817-2477">結果として生成される文字列の長さが、許容される最大長 (<see cref="F:System.Int32.MaxValue" />) をオーバーフローしています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2477">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static string Join&lt;T&gt; (string separator, System.Collections.Generic.IEnumerable&lt;T&gt; values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Join&lt;T&gt;(string separator, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Join(Of T) (separator As String, values As IEnumerable(Of T)) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::String ^ Join(System::String ^ separator, System::Collections::Generic::IEnumerable&lt;T&gt; ^ values);" />
      <MemberSignature Language="F#" Value="static member Join : string * seq&lt;'T&gt; -&gt; string" Usage="System.string.Join (separator, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="values" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="d5817-2478"><paramref name="values" /> のメンバーの型。</span><span class="sxs-lookup"><span data-stu-id="d5817-2478">The type of the members of <paramref name="values" />.</span></span></typeparam>
        <param name="separator"><span data-ttu-id="d5817-2479">区切り記号として使用する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2479">The string to use as a separator.</span></span> <span data-ttu-id="d5817-2480"><paramref name="values" /> が 2 つ以上の要素を含む場合のみ、<paramref name="separator" /> が返される文字列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2480"><paramref name="separator" /> is included in the returned string only if <paramref name="values" /> has more than one element.</span></span></param>
        <param name="values"><span data-ttu-id="d5817-2481">連結するオブジェクトを格納しているコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5817-2481">A collection that contains the objects to concatenate.</span></span></param>
        <summary><span data-ttu-id="d5817-2482">コレクションのメンバーを連結します。各メンバーの間には、指定した区切り記号が挿入されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2482">Concatenates the members of a collection, using the specified separator between each member.</span></span></summary>
        <returns><span data-ttu-id="d5817-2483"><paramref name="values" /> のメンバーからなる、<paramref name="separator" /> 文字列で区切られた文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2483">A string that consists of the members of <paramref name="values" /> delimited by the <paramref name="separator" /> string.</span></span> <span data-ttu-id="d5817-2484"><paramref name="values" /> にメンバーがない場合、メソッドは <see cref="F:System.String.Empty" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2484">If <paramref name="values" /> has no members, the method returns <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2485">`separator` が `null`場合は、代わりに空の文字列 (<xref:System.String.Empty?displayProperty=nameWithType>) が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2485">If `separator` is `null`, an empty string (<xref:System.String.Empty?displayProperty=nameWithType>) is used instead.</span></span> <span data-ttu-id="d5817-2486">`values` のいずれかのメンバーが `null`場合は、空の文字列が代わりに使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2486">If any member of `values` is `null`, an empty string is used instead.</span></span>

 <span data-ttu-id="d5817-2487"><xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> は、<xref:System.Collections.Generic.IEnumerable%601> コレクションの各メンバーを文字列に変換せずに連結できる便利なメソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2487"><xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> is a convenience method that lets you concatenate each member of an <xref:System.Collections.Generic.IEnumerable%601> collection without first converting them to strings.</span></span> <span data-ttu-id="d5817-2488"><xref:System.Collections.Generic.IEnumerable%601> コレクション内の各オブジェクトの文字列形式は、そのオブジェクトの `ToString` メソッドを呼び出すことによって取得されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2488">The string representation of each object in the <xref:System.Collections.Generic.IEnumerable%601> collection is derived by calling that object's `ToString` method.</span></span>

 <span data-ttu-id="d5817-2489">このメソッドは、統合言語クエリ (LINQ) クエリ式で特に便利です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2489">This method is particular useful with Language-Integrated Query (LINQ) query expressions.</span></span> <span data-ttu-id="d5817-2490">たとえば、次のコードでは、動物の名前とそれが属する順序を含む非常に単純な `Animal` クラスを定義しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2490">For example, the following code defines a very simple `Animal` class that contains the name of an animal and the order to which it belongs.</span></span> <span data-ttu-id="d5817-2491">次に、多数の `Animal` オブジェクトを含む <xref:System.Collections.Generic.List%601> オブジェクトを定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2491">It then defines a <xref:System.Collections.Generic.List%601> object that contains a number of `Animal` objects.</span></span> <span data-ttu-id="d5817-2492"><xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> 拡張メソッドは、`Order` プロパティが "げっ歯類" と等しい `Animal` オブジェクトを抽出するために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2492">The <xref:System.Linq.Enumerable.Where%2A?displayProperty=nameWithType> extension method is called to extract the `Animal` objects whose `Order` property equals "Rodent".</span></span> <span data-ttu-id="d5817-2493">結果は <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2493">The result is passed to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join5.cs" interactive="try-dotnet" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join5.vb" id="Snippet5":::

## Examples
 <span data-ttu-id="d5817-2494">次の例では、ありアルゴリズムのエラトステネスを使用して、100以下の素数を計算します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2494">The following example uses the Sieve of Eratosthenes algorithm to calculate the prime numbers that are less than or equal to 100.</span></span> <span data-ttu-id="d5817-2495">結果を integer 型の <xref:System.Collections.Generic.List%601> オブジェクトに代入し、次に <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2495">It assigns the result to a <xref:System.Collections.Generic.List%601> object of type integer, which it then passes to the <xref:System.String.Join%60%601%28System.String%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.join/cs/join2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.join/vb/join2.vb" id="Snippet2":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2496"><paramref name="values" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2496"><paramref name="values" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="d5817-2497">結果として生成される文字列の長さが、許容される最大長 (<see cref="F:System.Int32.MaxValue" />) をオーバーフローしています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2497">The length of the resulting string overflows the maximum allowed length (<see cref="F:System.Int32.MaxValue" />).</span></span></exception>
        <altmember cref="M:System.String.Split(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-2498">このインスタンス内で最後に出現する指定 Unicode 文字または文字列の 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2498">Reports the zero-based index position of the last occurrence of a specified Unicode character or string within this instance.</span></span> <span data-ttu-id="d5817-2499">このインスタンス内で文字または文字列が見つからない場合、このメソッドは -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2499">The method returns -1 if the character or string is not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : char -&gt; int" Usage="string.LastIndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2500">シークする Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2500">The Unicode character to seek.</span></span></param>
        <summary><span data-ttu-id="d5817-2501">このインスタンス内で最後に出現する指定 Unicode 文字の 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2501">Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</span></span></summary>
        <returns><span data-ttu-id="d5817-2502">その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックスでの位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2502">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2503">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2503">Index numbering starts from zero.</span></span> <span data-ttu-id="d5817-2504">つまり、文字列の最初の文字はインデックス0になり、最後の文字は <xref:System.String.Length%2A>-1 になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2504">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="d5817-2505">このメソッドは、このインスタンスの最後の文字位置から検索を開始し、`value` が見つかるか、または最初の文字位置が検査されるまで、先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2505">This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="d5817-2506">検索では大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2506">The search is case-sensitive.</span></span>

 <span data-ttu-id="d5817-2507">このメソッドは、Unicode スカラー値が同じである場合にのみ、文字が別の文字と等価であると見なされる序数 (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2507">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="d5817-2508">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> メソッドを使用します。このメソッドでは、カルチャに応じて、"AE" (u + 0041 という, U + 0045) のように、構成されていない文字を表す Unicode スカラー値 ("AE" (u + 00C6) など) が、正しいシーケンス内の文字のコンポーネントの出現</span><span class="sxs-lookup"><span data-stu-id="d5817-2508">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>



## Examples
 <span data-ttu-id="d5817-2509">次の例では、<xref:System.String.LastIndexOf%28System.Char%29> メソッドを使用して文字列内の最後のディレクトリ区切り文字を検索し、文字列のファイル名を抽出する `ExtractFilename` メソッドを定義しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2509">The following example defines an `ExtractFilename` method that uses the <xref:System.String.LastIndexOf%28System.Char%29> method to find the last directory separator character in a string and to extract the string's file name.</span></span> <span data-ttu-id="d5817-2510">ファイルが存在する場合、メソッドはパスを指定せずにファイル名を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2510">If the file exists, the method returns the file name without its path.</span></span>

 [!code-csharp[System.String.LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/LastIndexOf_Example.cs#1)]
 [!code-vb[System.String.LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/LastIndexOf_Example.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string -&gt; int" Usage="string.LastIndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2511">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2511">The string to seek.</span></span></param>
        <summary><span data-ttu-id="d5817-2512">指定された文字列がこのインスタンス内で最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2512">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span></summary>
        <returns><span data-ttu-id="d5817-2513">その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まる開始インデックス位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2513">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="d5817-2514"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値はこのインスタンスの最後のインデックス位置です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2514">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2515">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2515">Index numbering starts from zero.</span></span> <span data-ttu-id="d5817-2516">つまり、文字列の最初の文字はインデックス0になり、最後の文字は <xref:System.String.Length%2A>-1 になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2516">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="d5817-2517">検索は、このインスタンスの最後の文字位置から開始し、`value` が見つかるか、または最初の文字位置が確認されるまで、先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2517">The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span>

 <span data-ttu-id="d5817-2518">このメソッドは、現在のカルチャを使用して、単語 (大文字と小文字を区別し、カルチャに依存する) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2518">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>

 <span data-ttu-id="d5817-2519">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2519">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2520">カルチャに依存した検索では、`value` に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2520">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="d5817-2521">`value` が1つ以上の無視できる文字で構成されている場合、<xref:System.String.LastIndexOf%28System.String%29> メソッドは常に、現在のインスタンスの最後のインデックス位置を表す <xref:System.String.Length%2A?displayProperty=nameWithType>-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2521">If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%29> method always returns <xref:System.String.Length%2A?displayProperty=nameWithType> - 1, which represents the last index position in the current instance.</span></span> <span data-ttu-id="d5817-2522">次の例では、<xref:System.String.LastIndexOf%28System.String%29> メソッドを使用して、2つの文字列の3つの部分文字列 (ソフトハイフン (U + 00AD)、ソフトハイフンの後に "n"、ソフトハイフンの後に "m") を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2522">In the following example, the <xref:System.String.LastIndexOf%28System.String%29> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="d5817-2523">文字列の 1 つのみにソフト ハイフンが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2523">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="d5817-2524">この例が [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、ソフトハイフンが無視できない文字であるため、結果は `value`にソフトハイフンが含まれていなかった場合と同じになります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2524">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in `value`.</span></span> <span data-ttu-id="d5817-2525">ソフトハイフンのみを検索する場合、メソッドは6と5を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2525">When searching for a soft hyphen only, the method returns 6 and 5.</span></span> <span data-ttu-id="d5817-2526">これらの値は、2つの文字列の最後の文字のインデックスに対応します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2526">These values correspond to the index of the last character in the two strings.</span></span>

 [!code-csharp[System.String.LastIndexOf#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof21.cs#21)]
 [!code-vb[System.String.LastIndexOf#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof21.vb#21)]



## Examples
 <span data-ttu-id="d5817-2527">次の例では、タグが文字列の先頭と末尾にある場合に、HTML タグの開始と終了を文字列から削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2527">The following example removes opening and closing HTML tags from a string if the tags begin and end the string.</span></span> <span data-ttu-id="d5817-2528">文字列が右角かっこの文字 (">") で終わる場合、この例では、<xref:System.String.LastIndexOf%2A> メソッドを使用して終了タグの先頭を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2528">If a string ends with a closing bracket character (">"), the example uses the <xref:System.String.LastIndexOf%2A> method to locate the start of the end tag.</span></span>

 [!code-csharp[System.String.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof_example2.cs#2)]
 [!code-vb[System.String.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof_example2.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2529"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2529"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2530">「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」で説明したように、既定値を置き換える文字列比較メソッドを呼び出さずに、パラメーターを明示的に指定する必要があるメソッドを呼び出すことを避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2530">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="d5817-2531">現在のカルチャの比較規則を使用して、文字列インスタンス内の部分文字列の最後のインデックスを検索するには、<paramref name="comparisonType" /> パラメーターに <see cref="F:System.StringComparison.CurrentCulture" /> 値を指定して <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> メソッドオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2531">To find the last index of a substring within a string instance by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : char * int -&gt; int" Usage="string.LastIndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2532">シークする Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2532">The Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2533">検索の開始位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2533">The starting position of the search.</span></span> <span data-ttu-id="d5817-2534">検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2534">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <summary><span data-ttu-id="d5817-2535">このインスタンス内で最後に出現する指定 Unicode 文字の 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2535">Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</span></span> <span data-ttu-id="d5817-2536">検索は、指定された文字位置から開始され、文字列の先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2536">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span></summary>
        <returns><span data-ttu-id="d5817-2537">その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2537">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2538">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2538">Index numbering starts from zero.</span></span> <span data-ttu-id="d5817-2539">つまり、文字列の最初の文字はインデックス0になり、最後の文字は <xref:System.String.Length%2A>-1 になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2539">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span> <span data-ttu-id="d5817-2540">このメソッドは、このインスタンスの `startIndex` 文字位置から検索を開始し、`value` が見つかるか、または最初の文字位置が検査されるまで、現在のインスタンスの先頭に向かって後方に移動します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2540">This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning of the current instance until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="d5817-2541">たとえば、`startIndex` が-1 <xref:System.String.Length%2A> の場合、メソッドは文字列の最後の文字から先頭までのすべての文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2541">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span> <span data-ttu-id="d5817-2542">検索では大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2542">The search is case-sensitive.</span></span>

 <span data-ttu-id="d5817-2543">このメソッドは、Unicode スカラー値が同じである場合にのみ、文字が別の文字と等価であると見なされる序数 (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2543">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="d5817-2544">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> メソッドを使用します。このメソッドでは、カルチャに応じて、"AE" (u + 0041 という, U + 0045) のように、構成されていない文字を表す Unicode スカラー値 ("AE" (u + 00C6) など) が、正しいシーケンス内の文字のコンポーネントの出現</span><span class="sxs-lookup"><span data-stu-id="d5817-2544">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>



## Examples
 <span data-ttu-id="d5817-2545">次の例では、文字列の末尾から文字列の先頭まで、文字列内のすべての文字が出現する位置のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2545">The following example finds the index of all occurrences of a character in a string, working from the end of the string to the start of the string.</span></span>

 [!code-cpp[string.lastindexof1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.lastindexof1/CPP/lastixof1.cpp#1)]
 [!code-csharp[string.lastindexof1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.lastindexof1/CS/lastixof1.cs#1)]
 [!code-vb[string.lastindexof1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.lastindexof1/VB/lastixof1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2546">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が 0 未満であるか、このインスタンスの長さ以上です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2546">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int -&gt; int" Usage="string.LastIndexOf (value, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2547">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2547">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2548">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2548">The search starting position.</span></span> <span data-ttu-id="d5817-2549">検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2549">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <summary><span data-ttu-id="d5817-2550">指定された文字列がこのインスタンス内で最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2550">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span> <span data-ttu-id="d5817-2551">検索は、指定された文字位置から開始され、文字列の先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2551">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span></summary>
        <returns><span data-ttu-id="d5817-2552">その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まる開始インデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2552">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="d5817-2553"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> かこのインスタンスの最後のインデックス位置のいずれか小さい方です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2553">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2554">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2554">Index numbering starts from zero.</span></span> <span data-ttu-id="d5817-2555">つまり、文字列の最初の文字はインデックス0になり、最後の文字は <xref:System.String.Length%2A>-1 になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2555">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="d5817-2556">検索は、このインスタンスの `startIndex` 文字位置から開始し、`value` が見つかるか最初の文字位置が検査されるまで、先頭に向かって後方に移動します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2556">The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="d5817-2557">たとえば、`startIndex` が-1 <xref:System.String.Length%2A> の場合、メソッドは文字列の最後の文字から先頭までのすべての文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2557">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span>

 <span data-ttu-id="d5817-2558">このメソッドは、現在のカルチャを使用して、単語 (大文字と小文字を区別し、カルチャに依存する) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2558">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>

 <span data-ttu-id="d5817-2559">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2559">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2560">カルチャに依存した検索では、`value` に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2560">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="d5817-2561">`value` が1つ以上の無視できる文字で構成されている場合、<xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> メソッドは常に `startIndex`を返します。これは、検索を開始する文字の位置です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2561">If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="d5817-2562">次の例では、<xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> メソッドを使用して、ソフトハイフン (U + 00AD) を含む部分文字列を検索し、最後の "m" を文字列の前または末尾に含めます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2562">In the following example, the <xref:System.String.LastIndexOf%28System.String%2CSystem.Int32%29> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final "m" in a string.</span></span> <span data-ttu-id="d5817-2563">この例が [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行される場合は、検索文字列内のソフトハイフンが無視されるため、ソフトハイフンで構成される部分文字列を検索するためにメソッドを呼び出し、"m" は文字列内の "m" の位置を返します。それを呼び出して、ソフトハイフンと "n" が "n" の位置を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2563">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and "m" returns the position of the "m" in the string, whereas calling it to find a substring that consists of the soft hyphen and "n" returns the position of the "n".</span></span> <span data-ttu-id="d5817-2564">検索文字列にソフトハイフンのみが含まれている場合、メソッドは、`startIndex`の値を表す "m" のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2564">When the search string contains only the soft hyphen, the method returns the index of the "m", which represents the value of `startIndex`.</span></span>

 [!code-csharp[System.String.LastIndexOf#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof22.cs#22)]
 [!code-vb[System.String.LastIndexOf#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof22.vb#22)]



## Examples
 <span data-ttu-id="d5817-2565">次の例では、ターゲット文字列内のすべての文字列のインデックスを検索し、ターゲット文字列の末尾からターゲット文字列の先頭に向かっています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2565">The following example finds the index of all occurrences of a string in target string, working from the end of the target string to the start of the target string.</span></span>

 [!code-cpp[string.lastindexof7#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOf7/CPP/lastixof7.cpp#1)]
 [!code-csharp[string.lastindexof7#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOf7/CS/lastixof7.cs#1)]
 [!code-vb[string.lastindexof7#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOf7/VB/lastixof7.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2566"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2566"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2567">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が 0 未満であるか、または現在のインスタンスの長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2567">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.</span></span>

<span data-ttu-id="d5817-2568">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2568">-or-</span></span>

<span data-ttu-id="d5817-2569">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="startIndex" /> が -1 未満であるか、または 0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2569">The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2570">「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」で説明したように、既定値を置き換える文字列比較メソッドを呼び出さずに、パラメーターを明示的に指定する必要があるメソッドを呼び出すことを避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2570">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="d5817-2571">現在のカルチャの比較規則を使用して特定の文字位置の前にある部分文字列のインデックスを検索するには、その <paramref name="comparisonType" /> パラメーターに <see cref="F:System.StringComparison.CurrentCulture" /> の値を指定して、<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> メソッドのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2571">To find the index of a substring that precedes a particular character position by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * StringComparison -&gt; int" Usage="string.LastIndexOf (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2572">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2572">The string to seek.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-2573">検索の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-2573">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="d5817-2574">指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最後に見つかった 0 から始まる位置のインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2574">Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="d5817-2575">指定した文字列に使用する検索の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2575">A parameter specifies the type of search to use for the specified string.</span></span></summary>
        <returns><span data-ttu-id="d5817-2576">その文字列が見つかった場合は、<paramref name="value" /> パラメーターの 0 から始まる開始インデックス位置。見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2576">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not.</span></span> <span data-ttu-id="d5817-2577"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値はこのインスタンスの最後のインデックス位置です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2577">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2578">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2578">Index numbering starts from zero.</span></span> <span data-ttu-id="d5817-2579">つまり、文字列の最初の文字はインデックス0になり、最後の文字は <xref:System.String.Length%2A>-1 になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2579">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="d5817-2580">`comparisonType` パラメーターは、大文字と小文字を区別するか、大文字と小文字を区別しない検索を使用し、word または序数の比較規則を使用して、現在のカルチャまたはインバリアントカルチャを使用して `value` パラメーターを検索するように指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2580">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>

 <span data-ttu-id="d5817-2581">検索は、このインスタンスの最後の文字位置から開始し、`value` が見つかるか、または最初の文字位置が確認されるまで、先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2581">The search begins at the last character position of this instance and proceeds backward toward the beginning until either `value` is found or the first character position has been examined.</span></span>



## Examples
 <span data-ttu-id="d5817-2582">次の例は、<xref:System.StringComparison> 列挙体の異なる値を使用して、別の文字列内で最後に出現する文字列を検索する、<xref:System.String.LastIndexOf%2A> メソッドの3つのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2582">The following example demonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>

 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2583"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2583"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2584"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2584"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2585">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2585">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2586">カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2586">In a culture-sensitive search (that is, if <paramref name="options" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="d5817-2587"><paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> メソッドは常に、現在のインスタンスの最後のインデックス位置を表す <see cref="P:System.String.Length" />-1 を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2587">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method always returns <see cref="P:System.String.Length" /> - 1, which represents the last index position in the current instance.</span></span>

<span data-ttu-id="d5817-2588">次の例では、<see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> メソッドを使用して、2つの文字列の3つの部分文字列 (ソフトハイフン (U + 00AD)、ソフトハイフンの後に "n"、ソフトハイフンの後に "m") を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2588">In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.StringComparison)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings.</span></span> <span data-ttu-id="d5817-2589">文字列の 1 つのみにソフト ハイフンが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2589">Only one of the strings contains a soft hyphen.</span></span> <span data-ttu-id="d5817-2590">この例が [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合は、ソフトハイフンが無視できる文字であるため、カルチャに依存した検索では、検索文字列にソフトハイフンが含まれていない場合に返されるのと同じ値が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2590">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string.</span></span> <span data-ttu-id="d5817-2591">ただし、序数検索では、1つの文字列でソフトハイフンが正常に検出され、2番目の文字列に存在しないことが報告されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2591">An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.</span></span>

<span data-ttu-id="d5817-2592">[! code-csharp[LastIndexOf # 26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof26.cs#26)][! code-vb[LastIndexOf # 26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof26.vb#26)]</span><span class="sxs-lookup"><span data-stu-id="d5817-2592">[!code-csharp[System.String.LastIndexOf#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof26.cs#26)] [!code-vb[System.String.LastIndexOf#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof26.vb#26)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As Char, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(char value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : char * int * int -&gt; int" Usage="string.LastIndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2593">シークする Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2593">The Unicode character to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2594">検索の開始位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2594">The starting position of the search.</span></span> <span data-ttu-id="d5817-2595">検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2595">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-2596">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="d5817-2596">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="d5817-2597">このインスタンス内の部分文字列で最後に出現する指定 Unicode 文字の 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2597">Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance.</span></span> <span data-ttu-id="d5817-2598">検索は指定された文字位置から開始し、文字列の開始に向かって後方に移動し、文字位置の指定された数だけ行われます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2598">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="d5817-2599">その文字が見つかった場合は、<paramref name="value" /> の 0 から始まるインデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2599">The zero-based index position of <paramref name="value" /> if that character is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2600">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2600">Index numbering starts from zero.</span></span> <span data-ttu-id="d5817-2601">つまり、文字列の最初の文字はインデックス0になり、最後の文字は <xref:System.String.Length%2A>-1 になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2601">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="d5817-2602">このメソッドは、`startIndex` 文字位置から検索を開始し、`value` が見つかったか `count` 文字位置が検査されるまで、このインスタンスの先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2602">This method begins searching at the `startIndex` character position and proceeds backward toward the beginning of this instance until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="d5817-2603">たとえば、`startIndex` が-1 <xref:System.String.Length%2A> の場合、メソッドは文字列の最後の文字から後方 `count` 文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2603">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span> <span data-ttu-id="d5817-2604">検索では大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2604">The search is case-sensitive.</span></span>

 <span data-ttu-id="d5817-2605">このメソッドは、Unicode スカラー値が同じである場合にのみ、文字が別の文字と等価であると見なされる序数 (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2605">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar value are the same.</span></span> <span data-ttu-id="d5817-2606">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> メソッドを使用します。このメソッドでは、カルチャに応じて、"AE" (u + 0041 という, U + 0045) のように、構成されていない文字を表す Unicode スカラー値 ("AE" (u + 00C6) など) が、正しいシーケンス内の文字のコンポーネントの出現</span><span class="sxs-lookup"><span data-stu-id="d5817-2606">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>



## Examples
 <span data-ttu-id="d5817-2607">次の例では、部分文字列の末尾から部分文字列の先頭までの、部分文字列に出現するすべての文字のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2607">The following example finds the index of all occurrences of a character in a substring, working from the end of the substring to the start of the substring.</span></span>

 [!code-cpp[string.lastindexof2#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.lastindexof2/CPP/lastixof2.cpp#1)]
 [!code-csharp[string.lastindexof2#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.lastindexof2/CS/lastixof2.cs#1)]
 [!code-vb[string.lastindexof2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.lastindexof2/VB/lastixof2.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2608">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が 0 未満であるか、このインスタンスの長さ以上です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2608">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than or equal to the length of this instance.</span></span>

<span data-ttu-id="d5817-2609">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2609">-or-</span></span>

<span data-ttu-id="d5817-2610">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> - <paramref name="count" /> + 1 が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2610">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" /> + 1 is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int * int -&gt; int" Usage="string.LastIndexOf (value, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2611">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2611">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2612">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2612">The search starting position.</span></span> <span data-ttu-id="d5817-2613">検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2613">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-2614">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="d5817-2614">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="d5817-2615">指定された文字列がこのインスタンス内で最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2615">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span> <span data-ttu-id="d5817-2616">検索は指定された文字位置から開始し、文字列の開始に向かって後方に移動し、文字位置の指定された数だけ行われます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2616">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="d5817-2617">その文字列が見つかった場合は、<paramref name="value" /> の 0 から始まる開始インデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2617">The zero-based starting index position of <paramref name="value" /> if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="d5817-2618"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> かこのインスタンスの最後のインデックス位置のいずれか小さい方です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2618">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2619">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2619">Index numbering starts from zero.</span></span> <span data-ttu-id="d5817-2620">つまり、文字列の最初の文字はインデックス0になり、最後の文字は <xref:System.String.Length%2A>-1 になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2620">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="d5817-2621">検索は、このインスタンスの `startIndex` 文字位置から開始し、`value` が見つかるか、または `count` 文字位置が確認されるまで、先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2621">The search begins at the `startIndex` character position of this instance and proceeds backward toward the beginning until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="d5817-2622">たとえば、`startIndex` が-1 <xref:System.String.Length%2A> の場合、メソッドは文字列の最後の文字から後方 `count` 文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2622">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span>

 <span data-ttu-id="d5817-2623">このメソッドは、現在のカルチャを使用して、単語 (大文字と小文字を区別し、カルチャに依存する) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2623">This method performs a word (case-sensitive and culture-sensitive) search using the current culture.</span></span>

 <span data-ttu-id="d5817-2624">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2624">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2625">カルチャに依存した検索では、`value` に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2625">In a culture-sensitive search, if `value` contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="d5817-2626">`value` が1つ以上の無視できる文字で構成されている場合、<xref:System.String.LastIndexOf%2A> メソッドは常に `startIndex`を返します。これは、検索を開始する文字の位置です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2626">If `value` consists only of one or more ignorable characters, the <xref:System.String.LastIndexOf%2A> method always returns `startIndex`, which is the character position at which the search begins.</span></span> <span data-ttu-id="d5817-2627">次の例では、2つの文字列の最後の "m" の前にある2つの文字で、ソフトハイフン (U + 00AD) の位置を検索するために、<xref:System.String.LastIndexOf%2A> メソッドを使用しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2627">In the following example, the <xref:System.String.LastIndexOf%2A> method is used to find the position of a soft hyphen (U+00AD) in the two characters that precede the final "m" of two strings.</span></span> <span data-ttu-id="d5817-2628">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2628">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="d5817-2629">この例が [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、どちらの場合も、ソフトハイフンが無視できない文字であるため、メソッドはカルチャに依存した比較を実行するときに、文字列内の "m" のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2629">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2630">"m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2630">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span>

 [!code-csharp[System.String.LastIndexOf#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof23.cs#23)]
 [!code-vb[System.String.LastIndexOf#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof23.vb#23)]



## Examples
 <span data-ttu-id="d5817-2631">次の例では、部分文字列の末尾から部分文字列の先頭までの文字列の、部分文字列のすべての出現箇所のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2631">The following example finds the index of all occurrences of a string in substring, working from the end of the substring to the start of the substring.</span></span>

 [!code-cpp[string.lastindexof8#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOf8/CPP/lastixof8.cpp#1)]
 [!code-csharp[string.lastindexof8#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOf8/CS/lastixof8.cs#1)]
 [!code-vb[string.lastindexof8#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOf8/VB/lastixof8.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2632"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2632"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2633"><paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2633"><paramref name="count" /> is negative.</span></span>

<span data-ttu-id="d5817-2634">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2634">-or-</span></span>

<span data-ttu-id="d5817-2635">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2635">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="d5817-2636">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2636">-or-</span></span>

<span data-ttu-id="d5817-2637">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> がこのインスタンスの長さより大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2637">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.</span></span>

<span data-ttu-id="d5817-2638">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2638">-or-</span></span>

<span data-ttu-id="d5817-2639">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> - <paramref name="count" /> + 1 した値がこのインスタンス内にはない位置を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2639">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> - <paramref name="count" />+ 1 specifies a position that is not within this instance.</span></span>

<span data-ttu-id="d5817-2640">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2640">-or-</span></span>

<span data-ttu-id="d5817-2641">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="start" /> が -1 より小さいか 0 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2641">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.</span></span>

<span data-ttu-id="d5817-2642">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2642">-or-</span></span>

<span data-ttu-id="d5817-2643">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="count" /> が 1 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2643">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2644">「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」で説明したように、既定値を置き換える文字列比較メソッドを呼び出さずに、パラメーターを明示的に指定する必要があるメソッドを呼び出すことを避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2644">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="d5817-2645">現在のカルチャの比較規則を使用してこの操作を実行するには、<paramref name="comparisonType" /> パラメーターに <see cref="F:System.StringComparison.CurrentCulture" /> 値を指定して <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> メソッドオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2645">To perform this operation by using the comparison rules of the current culture, call the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOfAny(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int * StringComparison -&gt; int" Usage="string.LastIndexOf (value, startIndex, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2646">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2646">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2647">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2647">The search starting position.</span></span> <span data-ttu-id="d5817-2648">検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2648">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-2649">検索の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-2649">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="d5817-2650">指定した文字列が現在の <see cref="T:System.String" /> オブジェクト内で最後に見つかった 0 から始まる位置のインデックスをレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2650">Reports the zero-based index of the last occurrence of a specified string within the current <see cref="T:System.String" /> object.</span></span> <span data-ttu-id="d5817-2651">検索は、指定された文字位置から開始され、文字列の先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2651">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span> <span data-ttu-id="d5817-2652">指定した文字列を検索するときに実行する比較の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2652">A parameter specifies the type of comparison to perform when searching for the specified string.</span></span></summary>
        <returns><span data-ttu-id="d5817-2653">その文字列が見つかった場合は、<paramref name="value" /> パラメーターの 0 から始まる開始インデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2653">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="d5817-2654"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> かこのインスタンスの最後のインデックス位置のいずれか小さい方です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2654">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2655">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2655">Index numbering starts from zero.</span></span> <span data-ttu-id="d5817-2656">つまり、文字列の最初の文字はインデックス0になり、最後の文字は <xref:System.String.Length%2A>-1 になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2656">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="d5817-2657">検索は `startIndex` 文字位置から開始され、`value` が見つかるか、または最初の文字位置が検査されるまで、後方に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2657">The search begins at the `startIndex` character position and proceeds backward until either `value` is found or the first character position has been examined.</span></span> <span data-ttu-id="d5817-2658">たとえば、`startIndex` が-1 <xref:System.String.Length%2A> の場合、メソッドは文字列の最後の文字から先頭までのすべての文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2658">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches every character from the last character in the string to the beginning.</span></span>

 <span data-ttu-id="d5817-2659">`comparisonType` パラメーターは、大文字と小文字を区別するか、大文字と小文字を区別しない検索を使用し、word または序数の比較規則を使用して、現在のカルチャまたはインバリアントカルチャを使用して `value` パラメーターを検索するように指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2659">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>



## Examples
 <span data-ttu-id="d5817-2660">次の例は、<xref:System.StringComparison> 列挙体の異なる値を使用して、別の文字列内で最後に出現する文字列を検索する、<xref:System.String.LastIndexOf%2A> メソッドの3つのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2660">The following example demonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>

 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2661"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2661"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2662">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が 0 未満であるか、または現在のインスタンスの長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2662">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than zero or greater than the length of the current instance.</span></span>

<span data-ttu-id="d5817-2663">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2663">-or-</span></span>

<span data-ttu-id="d5817-2664">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="startIndex" /> が -1 未満であるか、または 0 を超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2664">The current instance equals <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is less than -1 or greater than zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2665"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2665"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2666">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2666">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2667">カルチャに依存する検索の場合 (つまり、<paramref name="comparisonType" /> が <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2667">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="d5817-2668"><paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2668">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>

<span data-ttu-id="d5817-2669">次の例では、<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> メソッドを使用して、2つの文字列の最後の "m" から始まる "m" の後に、ソフトハイフン (U + 00AD) の位置を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2669">In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m", starting with the final "m" in two strings.</span></span> <span data-ttu-id="d5817-2670">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2670">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="d5817-2671">この例が [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、どちらの場合も、ソフトハイフンが無視できない文字であるため、メソッドはカルチャに依存した比較を実行するときに、文字列内の "m" のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2671">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2672">"m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2672">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".</span></span> <span data-ttu-id="d5817-2673">このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2673">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>

<span data-ttu-id="d5817-2674">[! code-csharp[LastIndexOf # 25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof25.cs#25)][! code-vb[LastIndexOf # 25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof25.vb#25)]</span><span class="sxs-lookup"><span data-stu-id="d5817-2674">[!code-csharp[System.String.LastIndexOf#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof25.cs#25)] [!code-vb[System.String.LastIndexOf#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof25.vb#25)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (string value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(string value, int32 startIndex, int32 count, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(System::String ^ value, int startIndex, int count, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : string * int * int * StringComparison -&gt; int" Usage="string.LastIndexOf (value, startIndex, count, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="startIndex" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="3" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2675">シークする文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2675">The string to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2676">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2676">The search starting position.</span></span> <span data-ttu-id="d5817-2677">検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2677">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-2678">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="d5817-2678">The number of character positions to examine.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-2679">検索の規則を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-2679">One of the enumeration values that specifies the rules for the search.</span></span></param>
        <summary><span data-ttu-id="d5817-2680">指定された文字列がこのインスタンス内で最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2680">Reports the zero-based index position of the last occurrence of a specified string within this instance.</span></span> <span data-ttu-id="d5817-2681">検索は指定された文字位置から開始し、文字列の開始に向かって後方に移動し、文字位置の指定された数だけ行われます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2681">The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions.</span></span> <span data-ttu-id="d5817-2682">指定した文字列を検索するときに実行する比較の種類をパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2682">A parameter specifies the type of comparison to perform when searching for the specified string.</span></span></summary>
        <returns><span data-ttu-id="d5817-2683">その文字列が見つかった場合は、<paramref name="value" /> パラメーターの 0 から始まる開始インデックス位置。見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2683">The zero-based starting index position of the <paramref name="value" /> parameter if that string is found, or -1 if it is not found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span> <span data-ttu-id="d5817-2684"><paramref name="value" /> が <see cref="F:System.String.Empty" /> の場合、戻り値は <paramref name="startIndex" /> かこのインスタンスの最後のインデックス位置のいずれか小さい方です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2684">If <paramref name="value" /> is <see cref="F:System.String.Empty" />, the return value is the smaller of <paramref name="startIndex" /> and the last index position in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2685">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2685">Index numbering starts from zero.</span></span> <span data-ttu-id="d5817-2686">つまり、文字列の最初の文字はインデックス0になり、最後の文字は <xref:System.String.Length%2A>-1 になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2686">That is, the first character in the string is at index zero and the last is at <xref:System.String.Length%2A> - 1.</span></span>

 <span data-ttu-id="d5817-2687">検索は `startIndex` 文字位置から開始され、`value` が見つかるか、または `count` 文字位置が調べられるまで、後方に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2687">The search begins at the `startIndex` character position and proceeds backward until either `value` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="d5817-2688">たとえば、`startIndex` が-1 <xref:System.String.Length%2A> の場合、メソッドは文字列の最後の文字から後方 `count` 文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2688">For example, if `startIndex` is <xref:System.String.Length%2A> - 1, the method searches backward `count` characters from the last character in the string.</span></span>

 <span data-ttu-id="d5817-2689">`comparisonType` パラメーターは、大文字と小文字を区別するか、大文字と小文字を区別しない検索を使用し、word または序数の比較規則を使用して、現在のカルチャまたはインバリアントカルチャを使用して `value` パラメーターを検索するように指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2689">The `comparisonType` parameter specifies to search for the `value` parameter using the current or invariant culture, using a case-sensitive or case-insensitive search, and using word or ordinal comparison rules.</span></span>



## Examples
 <span data-ttu-id="d5817-2690">次の例は、<xref:System.StringComparison> 列挙体の異なる値を使用して、別の文字列内で最後に出現する文字列を検索する、<xref:System.String.LastIndexOf%2A> メソッドの3つのオーバーロードを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2690">The following example demonstrates three overloads of the <xref:System.String.LastIndexOf%2A> method that find the last occurrence of a string within another string using different values of the <xref:System.StringComparison> enumeration.</span></span>

 [!code-csharp[system.string.LastIndexOfCmp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/cs/liocmp.cs#1)]
 [!code-vb[system.string.LastIndexOfCmp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.LastIndexOfCmp/vb/liocmp.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2691"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2691"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2692"><paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2692"><paramref name="count" /> is negative.</span></span>

<span data-ttu-id="d5817-2693">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2693">-or-</span></span>

<span data-ttu-id="d5817-2694">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2694">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="d5817-2695">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2695">-or-</span></span>

<span data-ttu-id="d5817-2696">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> がこのインスタンスの長さより大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2696">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> is greater than the length of this instance.</span></span>

<span data-ttu-id="d5817-2697">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2697">-or-</span></span>

<span data-ttu-id="d5817-2698">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> + 1 - <paramref name="count" /> した値がこのインスタンス内にはない位置を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2698">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> + 1 - <paramref name="count" /> specifies a position that is not within this instance.</span></span>

<span data-ttu-id="d5817-2699">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2699">-or-</span></span>

<span data-ttu-id="d5817-2700">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="start" /> が -1 より小さいか 0 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2700">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="start" /> is less than -1 or greater than zero.</span></span>

<span data-ttu-id="d5817-2701">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2701">-or-</span></span>

<span data-ttu-id="d5817-2702">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しく、<paramref name="count" /> が 1 より大きいです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2702">The current instance equals <see cref="F:System.String.Empty" /> and <paramref name="count" /> is greater than 1.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2703"><paramref name="comparisonType" /> は有効な <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2703"><paramref name="comparisonType" /> is not a valid <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2704">文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2704">Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2705">カルチャに依存する検索の場合 (つまり、<paramref name="comparisonType" /> が <see cref="F:System.StringComparison.Ordinal" /> または <see cref="F:System.StringComparison.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2705">In a culture-sensitive search (that is, if <paramref name="comparisonType" /> is not <see cref="F:System.StringComparison.Ordinal" /> or <see cref="F:System.StringComparison.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed.</span></span> <span data-ttu-id="d5817-2706"><paramref name="value" /> が1つ以上の無視できる文字で構成されている場合、<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> メソッドは常に <paramref name="startIndex" />を返します。これは、検索を開始する文字の位置です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2706">If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.</span></span>

<span data-ttu-id="d5817-2707">次の例では、<see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> メソッドを使用して、2つの文字列の最後の "m" の前にある最初の文字位置を除いて、ソフトハイフン (U + 00AD) の位置を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2707">In the following example, the <see cref="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in all but the first character position before the final "m" in two strings.</span></span> <span data-ttu-id="d5817-2708">文字列の 1 つのみに必要な部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2708">Only one of the strings contains the required substring.</span></span> <span data-ttu-id="d5817-2709">この例が [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] 以降で実行されている場合、どちらの場合も、ソフトハイフンが無視できない文字であるため、メソッドはカルチャに依存した比較を実行するときに、文字列内の "m" のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2709">If the example is run on the [!INCLUDE[netfx40_short](~/includes/netfx40-short-md.md)] or later, in both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2710">ただし、序数による比較を実行する場合は、最初の文字列でのみ部分文字列が検索されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2710">When it performs an ordinal comparison, however, it finds the substring only in the first string.</span></span> <span data-ttu-id="d5817-2711">ソフトハイフンの後に "m" が続く最初の文字列の場合、メソッドはソフトハイフンのインデックスを返すのではなく、カルチャに依存した比較を実行するときに "m" のインデックスを返すことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2711">Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison.</span></span> <span data-ttu-id="d5817-2712">このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2712">The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.</span></span>

<span data-ttu-id="d5817-2713">[! code-csharp[LastIndexOf # 24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof24.cs#24)][! code-vb[LastIndexOf # 24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof24.vb#24)]</span><span class="sxs-lookup"><span data-stu-id="d5817-2713">[!code-csharp[System.String.LastIndexOf#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.LastIndexOf/cs/lastindexof24.cs#24)] [!code-vb[System.String.LastIndexOf#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.LastIndexOf/vb/lastindexof24.vb#24)]</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOfAny">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-2714">Unicode 配列内の指定した 1 つ以上の文字がこのインスタンスで最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2714">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span> <span data-ttu-id="d5817-2715">このインスタンス内で配列内の文字が見つからない場合、このメソッドは -1 を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2715">The method returns -1 if the characters in the array are not found in this instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfAny : char[] -&gt; int" Usage="string.LastIndexOfAny anyOf" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="d5817-2716">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2716">A Unicode character array containing one or more characters to seek.</span></span></param>
        <summary><span data-ttu-id="d5817-2717">Unicode 配列内の指定した 1 つ以上の文字がこのインスタンスで最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2717">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span></summary>
        <returns><span data-ttu-id="d5817-2718"><paramref name="anyOf" /> 内の文字がこのインスタンスで最後に見つかった場所のインデックス位置。<paramref name="anyOf" /> 内の文字が見つからなかった場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2718">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2719">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2719">Index numbering starts from zero.</span></span>

 <span data-ttu-id="d5817-2720">このメソッドは、このインスタンスの最後の文字位置から検索を開始し、`anyOf` 内の文字が見つかるか、または最初の文字位置が検査されるまで、先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2720">This method begins searching at the last character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined.</span></span> <span data-ttu-id="d5817-2721">検索では大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2721">The search is case-sensitive.</span></span>

 <span data-ttu-id="d5817-2722">このメソッドは、Unicode スカラー値が同じである場合にのみ、文字が別の文字と等価であると見なされる序数 (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2722">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="d5817-2723">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> メソッドを使用します。このメソッドでは、カルチャに応じて、"AE" (u + 0041 という, U + 0045) のように、構成されていない文字を表す Unicode スカラー値 ("AE" (u + 00C6) など) が、正しいシーケンス内の文字のコンポーネントの出現</span><span class="sxs-lookup"><span data-stu-id="d5817-2723">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>



## Examples
 <span data-ttu-id="d5817-2724">次の例では、別の文字列内の文字列 "is" 内の任意の文字が最後に出現する位置のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2724">The following example finds the index of the last occurrence of any character in the string "is" within another string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny1/CPP/lastixany1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny1/CS/lastixany1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny1/VB/lastixany1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2725"><paramref name="anyOf" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2725"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char(), startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfAny : char[] * int -&gt; int" Usage="string.LastIndexOfAny (anyOf, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="d5817-2726">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2726">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2727">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2727">The search starting position.</span></span> <span data-ttu-id="d5817-2728">検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2728">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <summary><span data-ttu-id="d5817-2729">Unicode 配列内の指定した 1 つ以上の文字がこのインスタンスで最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2729">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span> <span data-ttu-id="d5817-2730">検索は、指定された文字位置から開始され、文字列の先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2730">The search starts at a specified character position and proceeds backward toward the beginning of the string.</span></span></summary>
        <returns><span data-ttu-id="d5817-2731"><paramref name="anyOf" /> 内の文字がこのインスタンスで最後に見つかった場所のインデックス位置。<paramref name="anyOf" /> 内の文字が見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2731">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2732">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2732">Index numbering starts from zero.</span></span>

 <span data-ttu-id="d5817-2733">このメソッドは、このインスタンスの `startIndex` 文字位置から検索を開始し、`anyOf` 内の文字が見つかるか、最初の文字位置が検査されるまで、先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2733">This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or the first character position has been examined.</span></span> <span data-ttu-id="d5817-2734">検索では大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2734">The search is case-sensitive.</span></span>

 <span data-ttu-id="d5817-2735">このメソッドは、Unicode スカラー値が同じである場合にのみ、文字が別の文字と等価であると見なされる序数 (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2735">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="d5817-2736">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> メソッドを使用します。このメソッドでは、カルチャに応じて、"AE" (u + 0041 という, U + 0045) のように、構成されていない文字を表す Unicode スカラー値 ("AE" (u + 00C6) など) が、正しいシーケンス内の文字のコンポーネントの出現</span><span class="sxs-lookup"><span data-stu-id="d5817-2736">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>



## Examples
 <span data-ttu-id="d5817-2737">次の例では、文字列 "is" 内の任意の文字が、別の文字列の部分文字列内で最後に出現する位置のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2737">The following example finds the index of the last occurrence of any character in the string "is" within a substring of another string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny2/CPP/lastixany2.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny2/CS/lastixany2.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny2/VB/lastixany2.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2738"><paramref name="anyOf" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2738"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2739">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> がこのインスタンス内にはない位置を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2739">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> specifies a position that is not within this instance.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOfAny">
      <MemberSignature Language="C#" Value="public int LastIndexOfAny (char[] anyOf, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOfAny(char[] anyOf, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOfAny (anyOf As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOfAny(cli::array &lt;char&gt; ^ anyOf, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOfAny : char[] * int * int -&gt; int" Usage="string.LastIndexOfAny (anyOf, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anyOf" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="anyOf"><span data-ttu-id="d5817-2740">シークする 1 つ以上の文字を格納している、Unicode 文字の配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2740">A Unicode character array containing one or more characters to seek.</span></span></param>
        <param name="startIndex"><span data-ttu-id="d5817-2741">検索が開始される位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2741">The search starting position.</span></span> <span data-ttu-id="d5817-2742">検索は、このインスタンスの先頭に向かって <paramref name="startIndex" /> から開始されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2742">The search proceeds from <paramref name="startIndex" /> toward the beginning of this instance.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-2743">検査する文字位置の数。</span><span class="sxs-lookup"><span data-stu-id="d5817-2743">The number of character positions to examine.</span></span></param>
        <summary><span data-ttu-id="d5817-2744">Unicode 配列内の指定した 1 つ以上の文字がこのインスタンスで最後に見つかった 0 から始まるインデックス位置をレポートします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2744">Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</span></span> <span data-ttu-id="d5817-2745">検索は指定された文字位置から開始し、文字列の開始に向かって後方に移動し、文字位置の指定された数だけ行われます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2745">The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</span></span></summary>
        <returns><span data-ttu-id="d5817-2746"><paramref name="anyOf" /> 内の文字がこのインスタンスで最後に見つかった場所のインデックス位置。<paramref name="anyOf" /> 内の文字が見つからなかった場合、または現在のインスタンスが <see cref="F:System.String.Empty" /> と等しい場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d5817-2746">The index position of the last occurrence in this instance where any character in <paramref name="anyOf" /> was found; -1 if no character in <paramref name="anyOf" /> was found or if the current instance equals <see cref="F:System.String.Empty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2747">インデックス番号は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2747">Index numbering starts from zero.</span></span>

 <span data-ttu-id="d5817-2748">このメソッドは、このインスタンスの `startIndex` 文字位置から検索を開始し、`anyOf` 内の文字が見つかるか `count` 文字位置が検査されるまで、先頭に向かって逆方向に進みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2748">This method begins searching at the `startIndex` character position of this instance and proceeds backward toward the beginning until either a character in `anyOf` is found or `count` character positions have been examined.</span></span> <span data-ttu-id="d5817-2749">検索では大文字と小文字が区別されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2749">The search is case-sensitive.</span></span>

 <span data-ttu-id="d5817-2750">このメソッドは、Unicode スカラー値が同じである場合にのみ、文字が別の文字と等価であると見なされる序数 (カルチャに依存しない) 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2750">This method performs an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode scalar values are the same.</span></span> <span data-ttu-id="d5817-2751">カルチャに依存した検索を実行するには、<xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> メソッドを使用します。このメソッドでは、カルチャに応じて、"AE" (u + 0041 という, U + 0045) のように、構成されていない文字を表す Unicode スカラー値 ("AE" (u + 00C6) など) が、正しいシーケンス内の文字のコンポーネントの出現</span><span class="sxs-lookup"><span data-stu-id="d5817-2751">To perform a culture-sensitive search, use the <xref:System.Globalization.CompareInfo.LastIndexOf%2A?displayProperty=nameWithType> method, where a Unicode scalar value representing a precomposed character, such as the ligature "Æ" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as "AE" (U+0041, U+0045), depending on the culture.</span></span>



## Examples
 <span data-ttu-id="d5817-2752">次の例では、別の文字列の部分文字列内の文字列 "aid" 内の任意の文字が最後に出現する位置のインデックスを検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2752">The following example finds the index of the last occurrence of any character in the string "aid" within a substring of another string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.LastIndexOfAny3/CPP/lastixany3.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.LastIndexOfAny3/CS/lastixany3.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.LastIndexOfAny3/VB/lastixany3.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2753"><paramref name="anyOf" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2753"><paramref name="anyOf" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2754">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="count" /> または <paramref name="startIndex" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2754">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="count" /> or <paramref name="startIndex" /> is negative.</span></span>

<span data-ttu-id="d5817-2755">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2755">-or-</span></span>

<span data-ttu-id="d5817-2756">現在のインスタンスが <see cref="F:System.String.Empty" /> と等しくなく、<paramref name="startIndex" /> - <paramref name="count" /> + 1 が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2756">The current instance does not equal <see cref="F:System.String.Empty" />, and <paramref name="startIndex" /> minus <paramref name="count" /> + 1 is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Array" />
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.String.IndexOfAny(System.Char[])" />
        <altmember cref="M:System.String.LastIndexOf(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.String.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.string.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d5817-2757">現在の <see cref="T:System.String" /> オブジェクト内の文字数を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2757">Gets the number of characters in the current <see cref="T:System.String" /> object.</span></span></summary>
        <value><span data-ttu-id="d5817-2758">現在の文字列の文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-2758">The number of characters in the current string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2759"><xref:System.String.Length%2A> プロパティは、Unicode 文字の数ではなく、このインスタンス内の <xref:System.Char> オブジェクトの数を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2759">The <xref:System.String.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters.</span></span> <span data-ttu-id="d5817-2760">これは、Unicode 文字が複数の <xref:System.Char>によって表される可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2760">The reason is that a Unicode character might be represented by more than one <xref:System.Char>.</span></span> <span data-ttu-id="d5817-2761">各 <xref:System.Char>ではなく各 Unicode 文字を操作するには、<xref:System.Globalization.StringInfo?displayProperty=nameWithType> クラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2761">Use the <xref:System.Globalization.StringInfo?displayProperty=nameWithType> class to work with each Unicode character instead of each <xref:System.Char>.</span></span>

 <span data-ttu-id="d5817-2762">C やC++などの一部の言語では、null 文字は文字列の末尾を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2762">In some languages, such as C and C++, a null character indicates the end of a string.</span></span> <span data-ttu-id="d5817-2763">.NET では、null 文字を文字列に埋め込むことができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2763">In .NET, a null character can be embedded in a string.</span></span> <span data-ttu-id="d5817-2764">文字列に1つ以上の null 文字が含まれている場合は、文字列全体の長さに含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2764">When a string includes one or more null characters, they are included in the length of the total string.</span></span> <span data-ttu-id="d5817-2765">たとえば、次の文字列では、部分文字列 "abc" と "def" が null 文字で区切られています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2765">For example, in the following string, the substrings "abc" and "def" are separated by a null character.</span></span> <span data-ttu-id="d5817-2766"><xref:System.String.Length%2A> プロパティは7を返します。これは、6つの英字と null 文字が含まれていることを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2766">The <xref:System.String.Length%2A> property returns 7, which indicates that it includes the six alphabetic characters as well as the null character.</span></span>

 [!code-cpp[System.String.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Class/cpp/system.string.class.cpp#1)]
 [!code-csharp-interactive[System.String.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Class/cs/System.String.Class.cs#1)]
 [!code-vb[System.String.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Class/vb/System.String.Class.vb#1)]



## Examples
 <span data-ttu-id="d5817-2767"><xref:System.String.Length%2A>プロパティの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2767">The following example demonstrates the <xref:System.String.Length%2A> property.</span></span>

 [!code-cpp[string.length#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.length/CPP/length.cpp#1)]
 [!code-csharp-interactive[string.length#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.length/CS/length.cs#1)]
 [!code-vb[string.length#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.length/VB/length.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Normalize">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-2768">バイナリ表現が特定の Unicode 正規形である新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2768">Returns a new string whose binary representation is in a particular Unicode normalization form.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public string Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Function Normalize () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Normalize();" />
      <MemberSignature Language="F#" Value="member this.Normalize : unit -&gt; string" Usage="string.Normalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-2769">この文字列と同じテキスト値を持ち、なおかつ、バイナリ表現が Unicode 正規形 C である新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2769">Returns a new string whose textual value is the same as this string, but whose binary representation is in Unicode normalization form C.</span></span></summary>
        <returns><span data-ttu-id="d5817-2770">この文字列と同じテキスト値を持ち、なおかつ、バイナリ表現が正規形 C である新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2770">A new, normalized string whose textual value is the same as this string, but whose binary representation is in normalization form C.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2771">一部の Unicode 文字には、組み合わせと複合 Unicode 文字のセットで構成される等価のバイナリ表現が複数あります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2771">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="d5817-2772">たとえば、次のコードポイントは、"ắ" という文字を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2772">For example, any of the following code points can represent the letter "ắ":</span></span>

-   <span data-ttu-id="d5817-2773">U+1EAF</span><span class="sxs-lookup"><span data-stu-id="d5817-2773">U+1EAF</span></span>

-   <span data-ttu-id="d5817-2774">U + 0103 U + 0301</span><span class="sxs-lookup"><span data-stu-id="d5817-2774">U+0103 U+0301</span></span>

-   <span data-ttu-id="d5817-2775">U + 0061 U + 0306 U + 0301</span><span class="sxs-lookup"><span data-stu-id="d5817-2775">U+0061 U+0306 U+0301</span></span>

 <span data-ttu-id="d5817-2776">1つの文字に対して複数の表現が存在すると、検索、並べ替え、照合、およびその他の操作が複雑になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2776">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>

 <span data-ttu-id="d5817-2777">Unicode 規格では、1つの文字に相当するバイナリ表現を指定した場合に1つのバイナリ表現を返す正規化と呼ばれるプロセスが定義されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2777">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="d5817-2778">正規化は、正規化形式と呼ばれるいくつかのアルゴリズムを使用して実行できます。これは、さまざまな規則に従います。</span><span class="sxs-lookup"><span data-stu-id="d5817-2778">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="d5817-2779">.NET では、Unicode 規格で定義されている4つの正規化形式 (C、D、KC、および KD) がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2779">.NET supports the four normalization forms (C, D, KC, and KD) that are defined by the Unicode standard.</span></span> <span data-ttu-id="d5817-2780">2つの文字列が同じ正規化形式で表される場合は、序数に基づく比較を使用して比較できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2780">When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.</span></span>

 <span data-ttu-id="d5817-2781">2つの文字列を正規化して比較するには、次の手順を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2781">To normalize and compare two strings, do the following:</span></span>

1.  <span data-ttu-id="d5817-2782">ファイルやユーザー入力デバイスなどの入力ソースと比較する文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2782">Obtain the strings to be compared from an input source, such as a file or a user input device.</span></span>

2.  <span data-ttu-id="d5817-2783"><xref:System.String.Normalize> メソッドを呼び出して、文字列を正規形 C に正規化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2783">Call the <xref:System.String.Normalize> method to normalize the strings to normalization form C.</span></span>

3.  <span data-ttu-id="d5817-2784">2つの文字列を比較するには、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> メソッドなどの序数の文字列比較をサポートするメソッドを呼び出し、<xref:System.StringComparison> 引数として <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> または <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2784">To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> as the <xref:System.StringComparison> argument.</span></span> <span data-ttu-id="d5817-2785">正規化された文字列の配列を並べ替えるには、<xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> または <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> の `comparer` 値を <xref:System.Array.Sort%2A?displayProperty=nameWithType>の適切なオーバーロードに渡します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2785">To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=nameWithType>.</span></span>

4.  <span data-ttu-id="d5817-2786">前の手順で示された順序に基づいて、並べ替えられた出力内の文字列を生成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2786">Emit the strings in the sorted output based on the order indicated by the previous step.</span></span>

 <span data-ttu-id="d5817-2787">サポートされている Unicode 正規化形式の詳細については、「<xref:System.Text.NormalizationForm?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2787">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>



## Examples
 <span data-ttu-id="d5817-2788">次の例では、文字列を4つの正規化された各形式に正規化し、文字列が指定した正規化形式に正規化されたことを確認した後、正規化された文字列内のコードポイントを一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2788">The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</span></span>

 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2789">現在のインスタンスに、正しくない Unicode 文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2789">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2790"><see cref="Overload:System.String.IsNormalized" /> メソッドは、文字列内の最初の非正規化文字が検出された直後に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2790">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="d5817-2791">したがって、文字列に正規化されていない文字が含まれ、その後に無効な Unicode 文字が続く場合は、<see cref="Overload:System.String.Normalize" /> メソッドによって <see cref="T:System.ArgumentException" /> がスローされますが、<see cref="Overload:System.String.IsNormalized" /> は <see langword="false" />を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2791">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method will throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para></block>
        <altmember cref="M:System.String.IsNormalized" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public string Normalize (System.Text.NormalizationForm normalizationForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Normalize(valuetype System.Text.NormalizationForm normalizationForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Normalize(System.Text.NormalizationForm)" />
      <MemberSignature Language="VB.NET" Value="Public Function Normalize (normalizationForm As NormalizationForm) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Normalize(System::Text::NormalizationForm normalizationForm);" />
      <MemberSignature Language="F#" Value="member this.Normalize : System.Text.NormalizationForm -&gt; string" Usage="string.Normalize normalizationForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizationForm" Type="System.Text.NormalizationForm" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="normalizationForm"><span data-ttu-id="d5817-2792">Unicode 正規形。</span><span class="sxs-lookup"><span data-stu-id="d5817-2792">A Unicode normalization form.</span></span></param>
        <summary><span data-ttu-id="d5817-2793">この文字列と同じテキスト値を持ち、なおかつ、バイナリ表現が、指定された Unicode 正規形である新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2793">Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.</span></span></summary>
        <returns><span data-ttu-id="d5817-2794">この文字列と同じテキスト値を持ち、なおかつ、バイナリ表現が、<paramref name="normalizationForm" /> パラメーターで指定された正規形である新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2794">A new string whose textual value is the same as this string, but whose binary representation is in the normalization form specified by the <paramref name="normalizationForm" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2795">一部の Unicode 文字には、組み合わせと複合 Unicode 文字のセットで構成される等価のバイナリ表現が複数あります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2795">Some Unicode characters have multiple equivalent binary representations consisting of sets of combining and/or composite Unicode characters.</span></span> <span data-ttu-id="d5817-2796">1つの文字に対して複数の表現が存在すると、検索、並べ替え、照合、およびその他の操作が複雑になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2796">The existence of multiple representations for a single character complicates searching, sorting, matching, and other operations.</span></span>

 <span data-ttu-id="d5817-2797">Unicode 規格では、1つの文字に相当するバイナリ表現を指定した場合に1つのバイナリ表現を返す正規化と呼ばれるプロセスが定義されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2797">The Unicode standard defines a process called normalization that returns one binary representation when given any of the equivalent binary representations of a character.</span></span> <span data-ttu-id="d5817-2798">正規化は、正規化形式と呼ばれるいくつかのアルゴリズムを使用して実行できます。これは、さまざまな規則に従います。</span><span class="sxs-lookup"><span data-stu-id="d5817-2798">Normalization can be performed with several algorithms, called normalization forms, that obey different rules.</span></span> <span data-ttu-id="d5817-2799">.NET では、Unicode 規格で定義されている4つの正規化形式 (C、D、KC、および KD) がサポートされています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2799">.NET supports the four normalization forms (C, D, KC, and KD) that are defined by the Unicode standard.</span></span> <span data-ttu-id="d5817-2800">2つの文字列が同じ正規化形式で表される場合は、序数に基づく比較を使用して比較できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2800">When two strings are represented in the same normalization form, they can be compared by using ordinal comparison.</span></span>

 <span data-ttu-id="d5817-2801">2つの文字列を正規化して比較するには、次の手順を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2801">To normalize and compare two strings, do the following:</span></span>

1.  <span data-ttu-id="d5817-2802">ファイルやユーザー入力デバイスなどの入力ソースと比較する文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2802">Obtain the strings to be compared from an input source, such as a file or a user input device.</span></span>

2.  <span data-ttu-id="d5817-2803">文字列を指定した正規化形式に正規化するには、<xref:System.String.Normalize%28System.Text.NormalizationForm%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2803">Call the <xref:System.String.Normalize%28System.Text.NormalizationForm%29> method to normalize the strings to a specified normalization form.</span></span>

3.  <span data-ttu-id="d5817-2804">2つの文字列を比較するには、<xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> メソッドなどの序数の文字列比較をサポートするメソッドを呼び出し、<xref:System.StringComparison> 引数として <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> または <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2804">To compare two strings, call a method that supports ordinal string comparison, such as the <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.StringComparison%29> method, and supply a value of <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> as the <xref:System.StringComparison> argument.</span></span> <span data-ttu-id="d5817-2805">正規化された文字列の配列を並べ替えるには、<xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> または <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> の `comparer` 値を <xref:System.Array.Sort%2A?displayProperty=nameWithType>の適切なオーバーロードに渡します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2805">To sort an array of normalized strings, pass a `comparer` value of <xref:System.StringComparer.Ordinal%2A?displayProperty=nameWithType> or <xref:System.StringComparer.OrdinalIgnoreCase%2A?displayProperty=nameWithType> to an appropriate overload of <xref:System.Array.Sort%2A?displayProperty=nameWithType>.</span></span>

4.  <span data-ttu-id="d5817-2806">前の手順で示された順序に基づいて、並べ替えられた出力内の文字列を生成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2806">Emit the strings in the sorted output based on the order indicated by the previous step.</span></span>

 <span data-ttu-id="d5817-2807">サポートされている Unicode 正規化形式の詳細については、「<xref:System.Text.NormalizationForm?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2807">For a description of supported Unicode normalization forms, see <xref:System.Text.NormalizationForm?displayProperty=nameWithType>.</span></span>



## Examples
 <span data-ttu-id="d5817-2808">次の例では、文字列を4つの正規化された各形式に正規化し、文字列が指定した正規化形式に正規化されたことを確認した後、正規化された文字列内のコードポイントを一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2808">The following example normalizes a string to each of four normalization forms, confirms the string was normalized to the specified normalization form, then lists the code points in the normalized string.</span></span>

 [!code-cpp[string.normalize#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.normalize/CPP/norm.cpp#1)]
 [!code-csharp[string.normalize#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.normalize/CS/norm.cs#1)]
 [!code-vb[string.normalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.normalize/VB/norm.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2809">現在のインスタンスに、正しくない Unicode 文字が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2809">The current instance contains invalid Unicode characters.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-2810"><see cref="Overload:System.String.IsNormalized" /> メソッドは、文字列内の最初の非正規化文字が検出された直後に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2810">The <see cref="Overload:System.String.IsNormalized" /> method returns <see langword="false" /> as soon as it encounters the first non-normalized character in a string.</span></span> <span data-ttu-id="d5817-2811">したがって、文字列に正規化されていない文字が含まれ、その後に無効な Unicode 文字が続く場合は、<see cref="Overload:System.String.IsNormalized" /> が <see langword="false" />を返す場合でも、<see cref="Overload:System.String.Normalize" /> メソッドで <see cref="T:System.ArgumentException" /> がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2811">Therefore, if a string contains non-normalized characters followed by invalid Unicode characters, the <see cref="Overload:System.String.Normalize" /> method may throw an <see cref="T:System.ArgumentException" /> although <see cref="Overload:System.String.IsNormalized" /> returns <see langword="false" />.</span></span></para></block>
        <altmember cref="M:System.String.IsNormalized" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (string a, string b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Equality(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::String ^ a, System::String ^ b);" />
      <MemberSignature Language="F#" Value="static member ( = ) : string * string -&gt; bool" Usage="a = b" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="d5817-2812">比較する最初の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2812">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="d5817-2813">比較する 2 番目の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2813">The second string to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d5817-2814">指定した 2 つの文字列の値が同一かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2814">Determines whether two specified strings have the same value.</span></span></summary>
        <returns><span data-ttu-id="d5817-2815"><paramref name="a" /> の値が <paramref name="b" /> の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2815"><see langword="true" /> if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2816"><xref:System.String.op_Equality%2A> メソッドは、<xref:System.String> クラスの等値演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2816">The <xref:System.String.op_Equality%2A> method defines the operation of the equality operator for the <xref:System.String> class.</span></span> <span data-ttu-id="d5817-2817">ここでは、例のセクションに示されているようなコードを有効にします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2817">It enables code such as that shown in the Example section.</span></span> <span data-ttu-id="d5817-2818">さらに、演算子は静的な <xref:System.String.Equals%28System.String%2CSystem.String%29> メソッドを呼び出します。このメソッドは、序数 (大文字と小文字を区別し、カルチャに依存しない) の比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2818">The operator, in turn, calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2819">Visual Basic コンパイラは、<xref:System.String.op_Equality%2A> メソッドの呼び出しとして等値演算子を解決しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2819">The Visual Basic compiler does not resolve the equality operator as a call to the <xref:System.String.op_Equality%2A> method.</span></span> <span data-ttu-id="d5817-2820">代わりに、等値演算子は、<xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> メソッドの呼び出しをラップします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2820">Instead, the equality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> method.</span></span>



## Examples
 <span data-ttu-id="d5817-2821">等値演算子の例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2821">The following example demonstrates the equality operator.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Equality/CPP/equalityop.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Equality/CS/equalityop.cs" interactive="try-dotnet" id="Snippet1":::
 
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator ReadOnlySpan&lt;char&gt; (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.ReadOnlySpan`1&lt;char&gt; op_Implicit(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Implicit(System.String)~System.ReadOnlySpan{System.Char}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (value As String) As ReadOnlySpan(Of Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static operator ReadOnlySpan&lt;char&gt;(System::String ^ value);" />
      <MemberSignature Language="F#" Value="static member op_Implicit : string -&gt; ReadOnlySpan&lt;char&gt;" Usage="System.string.op_Implicit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-2822">暗黙的に変換する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2822">A string to implicitly convert.</span></span></param>
        <summary><span data-ttu-id="d5817-2823">指定された文字列から文字の読み取り専用スパンへの暗黙的な変換を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2823">Defines an implicit conversion of a given string to a read-only span of characters.</span></span></summary>
        <returns><span data-ttu-id="d5817-2824">文字列を表す文字の新しい読み取り専用スパン。</span><span class="sxs-lookup"><span data-stu-id="d5817-2824">A new read-only span of characters representing the string.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (string a, string b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(string a, string b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.op_Inequality(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (a As String, b As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::String ^ a, System::String ^ b);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : string * string -&gt; bool" Usage="System.string.op_Inequality (a, b)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.String" />
        <Parameter Name="b" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="d5817-2825">比較する最初の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2825">The first string to compare, or <see langword="null" />.</span></span></param>
        <param name="b"><span data-ttu-id="d5817-2826">比較する 2 番目の文字列または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2826">The second string to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d5817-2827">指定した 2 つの文字列の値が異なるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2827">Determines whether two specified strings have different values.</span></span></summary>
        <returns><span data-ttu-id="d5817-2828"><see langword="true" /> の値が <paramref name="a" /> の値と異なる場合は <paramref name="b" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2828"><see langword="true" /> if the value of <paramref name="a" /> is different from the value of <paramref name="b" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2829"><xref:System.String.op_Inequality%2A> メソッドは、<xref:System.String> クラスの非等値演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2829">The <xref:System.String.op_Inequality%2A> method defines the operation of the inequality operator for the <xref:System.String> class.</span></span>   <span data-ttu-id="d5817-2830">これにより、「例」のセクションに示されているようなコードが有効になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2830">It enables code such as that shown in the Examples section.</span></span>

 <span data-ttu-id="d5817-2831"><xref:System.String.op_Inequality%2A> 演算子は、序数 (大文字と小文字を区別し、カルチャに依存しない) の比較を実行する静的な <xref:System.String.Equals%28System.String%2CSystem.String%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2831">The <xref:System.String.op_Inequality%2A> operator in turn calls the static <xref:System.String.Equals%28System.String%2CSystem.String%29> method, which  performs an ordinal (case-sensitive and culture-insensitive) comparison.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2832">Visual Basic コンパイラは、<xref:System.String.op_Inequality%2A> メソッドの呼び出しとして非等値演算子を解決しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2832">The Visual Basic compiler does not resolve the inequality operator as a call to the <xref:System.String.op_Inequality%2A> method.</span></span> <span data-ttu-id="d5817-2833">代わりに、非等値演算子は <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> メソッドの呼び出しをラップします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2833">Instead, the inequality operator wraps a call to the <xref:Microsoft.VisualBasic.CompilerServices.Operators.CompareString%2A?displayProperty=nameWithType> method.</span></span>



## Examples
 <span data-ttu-id="d5817-2834">次の例は、非等値演算子を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2834">The following example demonstrates the inequality operator.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Inequality/CPP/inequalityop.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Inequality/CS/inequalityop.cs" interactive="try-dotnet" id="Snippet1":::

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PadLeft">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-2835">現在の文字列の先頭に空白または指定された Unicode 文字が埋め込まれた指定された長さの新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2835">Returns a new string of a specified length in which the beginning of the current string is padded with spaces or with a specified Unicode character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PadLeft">
      <MemberSignature Language="C#" Value="public string PadLeft (int totalWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadLeft(int32 totalWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadLeft(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadLeft (totalWidth As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadLeft(int totalWidth);" />
      <MemberSignature Language="F#" Value="member this.PadLeft : int -&gt; string" Usage="string.PadLeft totalWidth" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="d5817-2836">結果として生成される文字列の文字数。これは、元の文字数と、埋め込み文字がある場合はその数を加えた数に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2836">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <summary><span data-ttu-id="d5817-2837">指定された文字数になるまで左側に空白を埋め込むことで、このインスタンス内の文字を右寄せした新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2837">Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="d5817-2838">このインスタンスと等価な新しい文字列。ただし右揃えであり、<paramref name="totalWidth" /> の長さになるまで左側に空白が埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2838">A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="d5817-2839">ただし、<paramref name="totalWidth" /> がこのインスタンスの長さより短い場合、メソッドは既存のインスタンスへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2839">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="d5817-2840"><paramref name="totalWidth" /> がこのインスタンスの長さと等しい場合、メソッドはこのインスタンスと同一の新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2840">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2841">Unicode 空間は、16進数の0x0020 として定義されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2841">A Unicode space is defined as hexadecimal 0x0020.</span></span>

 <span data-ttu-id="d5817-2842"><xref:System.String.PadLeft%28System.Int32%29> メソッドは、返された文字列の先頭に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2842">The <xref:System.String.PadLeft%28System.Int32%29> method pads the beginning of the returned string.</span></span> <span data-ttu-id="d5817-2843">つまり、右から左に記述された言語で使用すると、文字列の右側の部分が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2843">This means that, when used with right-to-left languages, it pads the right portion of the string.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2844"><xref:System.String.PadLeft%2A> メソッドで現在のインスタンスに空白文字が埋め込まれている場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2844">If the <xref:System.String.PadLeft%2A> method pads the current instance with white-space characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-2845">代わりに、先頭に空白が埋め込まれている新しい文字列を返します。これにより、合計の長さが文字 `totalWidth` になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2845">Instead, it returns a new string that is padded with leading white space so that its total length is `totalWidth` characters.</span></span>



## Examples
 <span data-ttu-id="d5817-2846"><xref:System.String.PadLeft%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2846">The following example demonstrates the <xref:System.String.PadLeft%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadLeft Example/CPP/source.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadLeft Example/CS/source.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadLeft Example/VB/source.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2847"><paramref name="totalWidth" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2847"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadRight(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="PadLeft">
      <MemberSignature Language="C#" Value="public string PadLeft (int totalWidth, char paddingChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadLeft(int32 totalWidth, char paddingChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadLeft(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadLeft (totalWidth As Integer, paddingChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadLeft(int totalWidth, char paddingChar);" />
      <MemberSignature Language="F#" Value="member this.PadLeft : int * char -&gt; string" Usage="string.PadLeft (totalWidth, paddingChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
        <Parameter Name="paddingChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="d5817-2848">結果として生成される文字列の文字数。これは、元の文字数と、埋め込み文字がある場合はその数を加えた数に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2848">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <param name="paddingChar"><span data-ttu-id="d5817-2849">Unicode 埋め込み文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2849">A Unicode padding character.</span></span></param>
        <summary><span data-ttu-id="d5817-2850">指定された文字数になるまで左側に指定された Unicode 文字を埋め込むことで、このインスタンス内の文字を右寄せした新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2850">Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="d5817-2851">このインスタンスと等価な新しい文字列。ただし右揃えであり、<paramref name="totalWidth" /> の長さになるまで左側に <paramref name="paddingChar" /> の文字が埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2851">A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="d5817-2852">ただし、<paramref name="totalWidth" /> がこのインスタンスの長さより短い場合、メソッドは既存のインスタンスへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2852">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="d5817-2853"><paramref name="totalWidth" /> がこのインスタンスの長さと等しい場合、メソッドはこのインスタンスと同一の新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2853">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2854"><xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29> メソッドは、返された文字列の先頭に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2854">The <xref:System.String.PadLeft%28System.Int32%2CSystem.Char%29> method pads the beginning of the returned string.</span></span> <span data-ttu-id="d5817-2855">つまり、右から左に記述された言語で使用すると、文字列の右側の部分が埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2855">This means that, when used with right-to-left languages, it pads the right portion of the string.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2856"><xref:System.String.PadLeft%2A> メソッドで現在のインスタンスに空白文字が埋め込まれている場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2856">If the <xref:System.String.PadLeft%2A> method pads the current instance with white-space characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-2857">代わりに、先頭 `paddingChar` 文字が埋め込まれた新しい文字列を返して、合計長が `totalWidth` 文字になるようにします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2857">Instead, it returns a new string that is padded with leading `paddingChar` characters so that its total length is `totalWidth` characters.</span></span>



## Examples
 <span data-ttu-id="d5817-2858"><xref:System.String.PadLeft%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2858">The following example demonstrates the <xref:System.String.PadLeft%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/CPP/source.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/CS/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadLeft1 Example/VB/source.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2859"><paramref name="totalWidth" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2859"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadRight(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PadRight">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-2860">現在の文字列の末尾に空白または指定された Unicode 文字が埋め込まれた指定された長さの新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2860">Returns a new string of a specified length in which the end of the current string is padded with spaces or with a specified Unicode character.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PadRight">
      <MemberSignature Language="C#" Value="public string PadRight (int totalWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadRight(int32 totalWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadRight(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadRight (totalWidth As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadRight(int totalWidth);" />
      <MemberSignature Language="F#" Value="member this.PadRight : int -&gt; string" Usage="string.PadRight totalWidth" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="d5817-2861">結果として生成される文字列の文字数。これは、元の文字数と、埋め込み文字がある場合はその数を加えた数に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2861">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <summary><span data-ttu-id="d5817-2862">指定された文字数になるまで右側に空白を埋め込むことで、この文字列内の文字を左寄せした新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2862">Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="d5817-2863">このインスタンスと等価な新しい文字列。ただし左揃えであり、<paramref name="totalWidth" /> の長さになるまで右側に空白が埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2863">A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="d5817-2864">ただし、<paramref name="totalWidth" /> がこのインスタンスの長さより短い場合、メソッドは既存のインスタンスへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2864">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="d5817-2865"><paramref name="totalWidth" /> がこのインスタンスの長さと等しい場合、メソッドはこのインスタンスと同一の新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2865">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2866">Unicode 空間は、16進数の0x0020 として定義されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2866">A Unicode space is defined as hexadecimal 0x0020.</span></span>

 <span data-ttu-id="d5817-2867"><xref:System.String.PadRight%28System.Int32%29> メソッドは、返された文字列の末尾に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2867">The <xref:System.String.PadRight%28System.Int32%29> method pads the end of the returned string.</span></span> <span data-ttu-id="d5817-2868">つまり、右から左に記述された言語で使用すると、文字列の左側に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2868">This means that, when used with right-to-left languages, it pads the left portion of the string.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2869"><xref:System.String.PadRight%2A> メソッドで現在のインスタンスに空白文字が埋め込まれている場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2869">If the <xref:System.String.PadRight%2A> method pads the current instance with white-space characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-2870">代わりに、末尾に空白が埋め込まれている新しい文字列を返します。これにより、合計の長さが文字 `totalWidth` になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2870">Instead, it returns a new string that is padded with trailing white space so that its total length is `totalWidth` characters.</span></span>



## Examples
 <span data-ttu-id="d5817-2871"><xref:System.String.PadRight%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2871">The following example demonstrates the <xref:System.String.PadRight%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadRight Example/CPP/source.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadRight Example/cs/source.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadRight Example/VB/source.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2872"><paramref name="totalWidth" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2872"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadLeft(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="PadRight">
      <MemberSignature Language="C#" Value="public string PadRight (int totalWidth, char paddingChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string PadRight(int32 totalWidth, char paddingChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.PadRight(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function PadRight (totalWidth As Integer, paddingChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PadRight(int totalWidth, char paddingChar);" />
      <MemberSignature Language="F#" Value="member this.PadRight : int * char -&gt; string" Usage="string.PadRight (totalWidth, paddingChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalWidth" Type="System.Int32" />
        <Parameter Name="paddingChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="totalWidth"><span data-ttu-id="d5817-2873">結果として生成される文字列の文字数。これは、元の文字数と、埋め込み文字がある場合はその数を加えた数に等しくなります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2873">The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters.</span></span></param>
        <param name="paddingChar"><span data-ttu-id="d5817-2874">Unicode 埋め込み文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2874">A Unicode padding character.</span></span></param>
        <summary><span data-ttu-id="d5817-2875">指定された文字数になるまで右側に指定された Unicode 文字を埋め込むことで、この文字列内の文字を左寄せした新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2875">Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</span></span></summary>
        <returns><span data-ttu-id="d5817-2876">このインスタンスと等価な新しい文字列。ただし左揃えであり、<paramref name="totalWidth" /> の長さになるまで右側に <paramref name="paddingChar" /> の文字が埋め込まれています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2876">A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <paramref name="paddingChar" /> characters as needed to create a length of <paramref name="totalWidth" />.</span></span> <span data-ttu-id="d5817-2877">ただし、<paramref name="totalWidth" /> がこのインスタンスの長さより短い場合、メソッドは既存のインスタンスへの参照を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2877">However, if <paramref name="totalWidth" /> is less than the length of this instance, the method returns a reference to the existing instance.</span></span> <span data-ttu-id="d5817-2878"><paramref name="totalWidth" /> がこのインスタンスの長さと等しい場合、メソッドはこのインスタンスと同一の新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2878">If <paramref name="totalWidth" /> is equal to the length of this instance, the method returns a new string that is identical to this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2879"><xref:System.String.PadRight%28System.Int32%2CSystem.Char%29> メソッドは、返された文字列の末尾に埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2879">The <xref:System.String.PadRight%28System.Int32%2CSystem.Char%29> method pads the end of the returned string.</span></span> <span data-ttu-id="d5817-2880">つまり、右から左に記述された言語で使用すると、文字列の左側に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2880">This means that, when used with right-to-left languages, it pads the left portion of the string.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2881"><xref:System.String.PadRight%2A> メソッドで現在のインスタンスに空白文字が埋め込まれている場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2881">If the <xref:System.String.PadRight%2A> method pads the current instance with white-space characters, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-2882">代わりに、末尾 `paddingChar` 文字が埋め込まれた新しい文字列を返して、合計長が `totalWidth` 文字になるようにします。</span><span class="sxs-lookup"><span data-stu-id="d5817-2882">Instead, it returns a new string that is padded with trailing `paddingChar` characters so that its total length is `totalWidth` characters.</span></span>



## Examples
 <span data-ttu-id="d5817-2883"><xref:System.String.PadRight%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2883">The following example demonstrates the <xref:System.String.PadRight%2A> method.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/CPP/source.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/cs/source.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.PadRight1 Example/VB/source.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2884"><paramref name="totalWidth" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2884"><paramref name="totalWidth" /> is less than zero.</span></span></exception>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.PadLeft(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-2885">現在の文字列から指定された文字数を削除した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2885">Returns a new string in which a specified number of characters from the current string are deleted.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public string Remove (int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Remove(int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (startIndex As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Remove(int startIndex);" />
      <MemberSignature Language="F#" Value="member this.Remove : int -&gt; string" Usage="string.Remove startIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="d5817-2886">文字を削除する際の 0 から始まる開始位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2886">The zero-based position to begin deleting characters.</span></span></param>
        <summary><span data-ttu-id="d5817-2887">現在のインスタンスの指定した位置から指定した最後の位置までの全文字が削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2887">Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</span></span></summary>
        <returns><span data-ttu-id="d5817-2888">この文字列から対象となる文字を取り除いた新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2888">A new string that is equivalent to this string except for the removed characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2889">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]では、文字列は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2889">In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based.</span></span> <span data-ttu-id="d5817-2890">`startIndex` パラメーターの値は、0から文字列インスタンスの長さまでの範囲で指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2890">The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2891">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2891">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-2892">代わりに、元の文字列の末尾に `startIndex` 位置からのすべての文字が削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2892">Instead, it returns a new string in which all characters from position `startIndex` to the end of the original string have been removed.</span></span>



## Examples
 <span data-ttu-id="d5817-2893"><xref:System.String.Remove%2A>メソッドの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2893">The following example demonstrates the <xref:System.String.Remove%2A> method.</span></span> <span data-ttu-id="d5817-2894">最後から2番目のケースでは、指定したインデックスから文字列の末尾までのすべてのテキストが削除されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2894">The next-to-last case removes all text starting from the specified index through the end of the string.</span></span> <span data-ttu-id="d5817-2895">最後の例では、指定されたインデックスを開始位置として3文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2895">The last case removes three characters starting from the specified index.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.remove/CPP/r.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.remove/CS/r.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.remove/VB/r.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2896"><paramref name="startIndex" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2896"><paramref name="startIndex" /> is less than zero.</span></span>

<span data-ttu-id="d5817-2897">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2897">-or-</span></span>

 <span data-ttu-id="d5817-2898"><paramref name="startIndex" /> が、この文字列内にはない位置を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2898"><paramref name="startIndex" /> specifies a position that is not within this string.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public string Remove (int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Remove(int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Remove(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (startIndex As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Remove(int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.Remove : int * int -&gt; string" Usage="string.Remove (startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="d5817-2899">文字を削除する際の 0 から始まる開始位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-2899">The zero-based position to begin deleting characters.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-2900">削除する文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-2900">The number of characters to delete.</span></span></param>
        <summary><span data-ttu-id="d5817-2901">現在のインスタンス内の指定した位置から指定した文字数が削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2901">Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</span></span></summary>
        <returns><span data-ttu-id="d5817-2902">このインスタンスから対象となる文字を取り除いた新しい文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2902">A new string that is equivalent to this instance except for the removed characters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2903">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]では、文字列は0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-2903">In the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], strings are zero-based.</span></span> <span data-ttu-id="d5817-2904">`startIndex` パラメーターの値は、0から文字列インスタンスの長さまでの範囲で指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2904">The value of the `startIndex` parameter can range from zero to one less than the length of the string instance.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2905">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2905">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-2906">代わりに、`count` パラメーターによって指定された文字数が削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2906">Instead, it returns a new string in which the number of characters specified by the `count` parameter have been removed.</span></span> <span data-ttu-id="d5817-2907">文字は `startIndex`によって指定された位置で削除されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2907">The characters are removed at the position specified by `startIndex`.</span></span>



## Examples
 <span data-ttu-id="d5817-2908">次の例は、完全な名前からミドルネームを削除する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2908">The following example demonstrates how you can remove the middle name from a complete name.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringremove/CPP/stringremove.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringremove/CS/stringremove.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringremove/VB/stringremove.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-2909"><paramref name="startIndex" /> または <paramref name="count" /> のいずれかが 0 より小さい値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2909">Either <paramref name="startIndex" /> or <paramref name="count" /> is less than zero.</span></span>

<span data-ttu-id="d5817-2910">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-2910">-or-</span></span>

 <span data-ttu-id="d5817-2911"><paramref name="startIndex" /> に <paramref name="count" /> を加えたものが、このインスタンスの外部の位置を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2911"><paramref name="startIndex" /> plus <paramref name="count" /> specify a position outside this instance.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-2912">現在の文字列に出現する指定した Unicode 文字または <see cref="T:System.String" /> をすべて、別の指定した Unicode 文字または <see cref="T:System.String" /> に置換した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2912">Returns a new string in which all occurrences of a specified Unicode character or <see cref="T:System.String" /> in the current string are replaced with another specified Unicode character or <see cref="T:System.String" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (char oldChar, char newChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(char oldChar, char newChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldChar As Char, newChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(char oldChar, char newChar);" />
      <MemberSignature Language="F#" Value="member this.Replace : char * char -&gt; string" Usage="string.Replace (oldChar, newChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldChar" Type="System.Char" />
        <Parameter Name="newChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="oldChar"><span data-ttu-id="d5817-2913">置換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2913">The Unicode character to be replaced.</span></span></param>
        <param name="newChar"><span data-ttu-id="d5817-2914">出現するすべての <paramref name="oldChar" /> を置換する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-2914">The Unicode character to replace all occurrences of <paramref name="oldChar" />.</span></span></param>
        <summary><span data-ttu-id="d5817-2915">このインスタンスに出現する指定された Unicode 文字をすべて、別の指定された Unicode 文字に置換した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2915">Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</span></span></summary>
        <returns><span data-ttu-id="d5817-2916"><paramref name="oldChar" /> のすべてのインスタンスが <paramref name="newChar" /> で置き換えられることを除いて、このインスタンスと等価な文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2916">A string that is equivalent to this instance except that all instances of <paramref name="oldChar" /> are replaced with <paramref name="newChar" />.</span></span> <span data-ttu-id="d5817-2917"><paramref name="oldChar" /> が現在のインスタンス内に見つからない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2917">If <paramref name="oldChar" /> is not found in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2918">このメソッドは、序数 (大文字と小文字を区別し、カルチャに依存しない) 検索を実行して `oldChar`を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2918">This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldChar`.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2919">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2919">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-2920">代わりに、`oldChar` のすべての出現箇所が `newChar`に置き換えられた新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2920">Instead, it returns a new string in which all occurrences of `oldChar` are replaced by `newChar`.</span></span>

 <span data-ttu-id="d5817-2921">このメソッドは変更された文字列を返すため、<xref:System.String.Replace%2A> メソッドの連続した呼び出しを連結して、元の文字列に対して複数の置換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2921">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="d5817-2922">メソッドの呼び出しは左から右に実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2922">Method calls are executed from left to right.</span></span> <span data-ttu-id="d5817-2923">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2923">The following example provides an illustration.</span></span>

 [!code-csharp-interactive[System.String.Replace#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace2.cs#2)]
 [!code-vb[System.String.Replace#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace2.vb#2)]



## Examples
 <span data-ttu-id="d5817-2924">次の例では、コンマ区切り値リストを作成します。そのためには、一連の数値の間の空白をコンマで区切って指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2924">The following example creates a comma separated value list by substituting commas for the blanks between a series of numbers.</span></span>

 [!code-cpp[string.replace1#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.replace1/CPP/string.replace1.cpp#1)]
 [!code-csharp-interactive[string.replace1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.replace1/CS/string.replace1.cs#1)]
 [!code-vb[string.replace1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.replace1/VB/string.replace1.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string -&gt; string" Usage="string.Replace (oldValue, newValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" />
        <Parameter Name="newValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="d5817-2925">置換される文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2925">The string to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="d5817-2926">出現するすべての <paramref name="oldValue" /> を置換する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2926">The string to replace all occurrences of <paramref name="oldValue" />.</span></span></param>
        <summary><span data-ttu-id="d5817-2927">現在のインスタンスに出現する指定した文字列をすべて、別に指定した文字列に置換した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2927">Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</span></span></summary>
        <returns><span data-ttu-id="d5817-2928"><paramref name="oldValue" /> のすべてのインスタンスが <paramref name="newValue" /> で置き換えられることを除いて、現在の文字列と等価な文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2928">A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />.</span></span> <span data-ttu-id="d5817-2929"><paramref name="oldValue" /> が現在のインスタンス内に見つからない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2929">If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2930">`newValue` が `null`場合、すべての `oldValue` が削除されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2930">If `newValue` is `null`, all occurrences of `oldValue` are removed.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2931">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2931">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-2932">代わりに、`oldValue` のすべての出現箇所が `newValue`に置き換えられた新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2932">Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.</span></span>

 <span data-ttu-id="d5817-2933">このメソッドは、序数 (大文字と小文字を区別し、カルチャに依存しない) 検索を実行して `oldValue`を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2933">This method performs an ordinal (case-sensitive and culture-insensitive) search to find `oldValue`.</span></span>

 <span data-ttu-id="d5817-2934">このメソッドは変更された文字列を返すため、<xref:System.String.Replace%2A> メソッドの連続した呼び出しを連結して、元の文字列に対して複数の置換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2934">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="d5817-2935">メソッドの呼び出しは左から右に実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2935">Method calls are executed from left to right.</span></span> <span data-ttu-id="d5817-2936">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2936">The following example provides an illustration.</span></span>

 [!code-csharp-interactive[System.String.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)]
 [!code-vb[System.String.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)]



## Examples
 <span data-ttu-id="d5817-2937">次の例は、<xref:System.String.Replace%2A> メソッドを使用してスペルミスを修正する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2937">The following example demonstrates how you can use the <xref:System.String.Replace%2A> method to correct a spelling error.</span></span>

 [!code-cpp[stringreplace#1](~/samples/snippets/cpp/VS_Snippets_CLR/stringreplace/CPP/stringreplace.cpp#1)]
 [!code-csharp-interactive[stringreplace#1](~/samples/snippets/csharp/VS_Snippets_CLR/stringreplace/CS/stringreplace.cs#1)]
 [!code-vb[stringreplace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/stringreplace/VB/stringreplace.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2938"><paramref name="oldValue" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2938"><paramref name="oldValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2939"><paramref name="oldValue" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2939"><paramref name="oldValue" /> is the empty string ("").</span></span></exception>
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String, comparisonType As StringComparison) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * StringComparison -&gt; string" Usage="string.Replace (oldValue, newValue, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="newValue" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="d5817-2940">置換される文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2940">The string to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="d5817-2941">出現するすべての <paramref name="oldValue" /> を置換する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2941">The string to replace all occurrences of <paramref name="oldValue" />.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-2942">このインスタンス内で <paramref name="oldValue" /> を検索する方法を決定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-2942">One of the enumeration values that determines how <paramref name="oldValue" /> is searched within this instance.</span></span></param>
        <summary><span data-ttu-id="d5817-2943">指定された比較型を使用して、現在のインスタンスに出現する指定した文字列をすべて、別に指定した文字列に置換した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2943">Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string, using the provided comparison type.</span></span></summary>
        <returns><span data-ttu-id="d5817-2944"><paramref name="oldValue" /> のすべてのインスタンスが <paramref name="newValue" /> で置き換えられることを除いて、現在の文字列と等価な文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2944">A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />.</span></span> <span data-ttu-id="d5817-2945"><paramref name="oldValue" /> が現在のインスタンス内に見つからない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2945">If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="d5817-2946">`newValue` が `null`場合、すべての `oldValue` が削除されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2946">If `newValue` is `null`, all occurrences of `oldValue` are removed.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2947">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2947">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-2948">代わりに、`oldValue` のすべての出現箇所が `newValue`に置き換えられた新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2948">Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.</span></span>

<span data-ttu-id="d5817-2949">このメソッドは、`comparisonType`で説明されているカルチャおよび大文字と小文字の区別を使用して `oldValue` 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2949">This method performs a search to find `oldValue` using the culture and case sensitivity described by `comparisonType`.</span></span>

<span data-ttu-id="d5817-2950">このメソッドは変更された文字列を返すため、<xref:System.String.Replace%2A> メソッドの連続した呼び出しを連結して、元の文字列に対して複数の置換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2950">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="d5817-2951">メソッドの呼び出しは左から右に実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2951">Method calls are executed from left to right.</span></span> <span data-ttu-id="d5817-2952">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2952">The following example provides an illustration.</span></span>

[!code-csharp[System.String.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)]
[!code-vb[System.String.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)]

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2953"><paramref name="oldValue" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2953"><paramref name="oldValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2954"><paramref name="oldValue" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2954"><paramref name="oldValue" /> is the empty string ("").</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public string Replace (string oldValue, string newValue, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Replace(string oldValue, string newValue, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As String, newValue As String, ignoreCase As Boolean, culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Replace(System::String ^ oldValue, System::String ^ newValue, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.Replace : string * string * bool * System.Globalization.CultureInfo -&gt; string" Usage="string.Replace (oldValue, newValue, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="newValue" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="d5817-2955">置換される文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2955">The string to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="d5817-2956">出現するすべての <paramref name="oldValue" /> を置換する文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2956">The string to replace all occurrences of <paramref name="oldValue" />.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d5817-2957">比較するときに大文字と小文字の指定を無視するには <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-2957"><see langword="true" /> to ignore casing when comparing; <see langword="false" /> otherwise.</span></span></param>
        <param name="culture"><span data-ttu-id="d5817-2958">比較するときに使用するカルチャ。</span><span class="sxs-lookup"><span data-stu-id="d5817-2958">The culture to use when comparing.</span></span></param>
        <summary><span data-ttu-id="d5817-2959">指定されたカルチャおよび大文字と小文字の区別を使用して、現在のインスタンスに出現する指定した文字列をすべて、別に指定した文字列に置換した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2959">Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string, using the provided culture and case sensitivity.</span></span></summary>
        <returns><span data-ttu-id="d5817-2960"><paramref name="oldValue" /> のすべてのインスタンスが <paramref name="newValue" /> で置き換えられることを除いて、現在の文字列と等価な文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-2960">A string that is equivalent to the current string except that all instances of <paramref name="oldValue" /> are replaced with <paramref name="newValue" />.</span></span> <span data-ttu-id="d5817-2961"><paramref name="oldValue" /> が現在のインスタンス内に見つからない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2961">If <paramref name="oldValue" /> is not found in the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="d5817-2962">`newValue` が `null`場合、すべての `oldValue` が削除されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2962">If `newValue` is `null`, all occurrences of `oldValue` are removed.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-2963">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2963">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-2964">代わりに、`oldValue` のすべての出現箇所が `newValue`に置き換えられた新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2964">Instead, it returns a new string in which all occurrences of `oldValue` are replaced by `newValue`.</span></span>

<span data-ttu-id="d5817-2965">このメソッドは、指定された `culture` と `ignoreCase` 大文字小文字の区別を使用して `oldValue` 検索を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2965">This method performs a search to find `oldValue` using the provided `culture` and `ignoreCase` case sensitivity.</span></span>

<span data-ttu-id="d5817-2966">このメソッドは変更された文字列を返すため、<xref:System.String.Replace%2A> メソッドの連続した呼び出しを連結して、元の文字列に対して複数の置換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2966">Because this method returns the modified string, you can chain together successive calls to the <xref:System.String.Replace%2A> method to perform multiple replacements on the original string.</span></span> <span data-ttu-id="d5817-2967">メソッドの呼び出しは左から右に実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2967">Method calls are executed from left to right.</span></span> <span data-ttu-id="d5817-2968">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2968">The following example provides an illustration.</span></span>

[!code-csharp[System.String.Replace#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.replace/cs/replace1.cs#1)]
[!code-vb[System.String.Replace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.replace/vb/replace1.vb#1)]

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-2969"><paramref name="oldValue" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2969"><paramref name="oldValue" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-2970"><paramref name="oldValue" /> が空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2970"><paramref name="oldValue" /> is the empty string ("").</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Split">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-2971">このインスタンス内の、指定された文字列または Unicode 文字の配列の要素で区切られた部分文字列を格納する文字列配列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2971">Returns a string array that contains the substrings in this instance that are delimited by elements of a specified string or Unicode character array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-2972"><xref:System.String.Split%2A> は、区切られた文字列を部分文字列に分割するために使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2972"><xref:System.String.Split%2A> is used to break a delimited string into substrings.</span></span> <span data-ttu-id="d5817-2973">文字配列を使用して、0個、1個、または複数の区切り文字 (<xref:System.String.Split%28System.Char%5B%5D%29> メソッド) を指定できます。または、文字配列を使用して、0個、1個、または複数の区切り文字列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2973">You can use either a character array to specify zero, one, or multiple delimiting characters (the <xref:System.String.Split%28System.Char%5B%5D%29> method), or you can use a character array to specify zero, one, or multiple delimiting strings.</span></span> <span data-ttu-id="d5817-2974"><xref:System.String.Split%2A> メソッドのオーバーロードを使用すると、メソッドによって返される部分文字列の数 (<xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%29> メソッド) を制限し、返された部分文字列に空の文字列を含めるかどうかを決定できます (<xref:System.String.Split%28System.Char%5B%5D%2CSystem.StringSplitOptions%29> および <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> メソッド、または両方を実行します (<xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29> メソッドと <xref:System.String.Split%28System.String%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29> メソッド)。</span><span class="sxs-lookup"><span data-stu-id="d5817-2974">Overloads of the <xref:System.String.Split%2A> method allow you to limit the number of substrings returned by the method (the <xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%29> method), to determine whether empty strings are included in the returned substrings (the <xref:System.String.Split%28System.Char%5B%5D%2CSystem.StringSplitOptions%29> and <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> methods, or to do both (the <xref:System.String.Split%28System.Char%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29> and <xref:System.String.Split%28System.String%5B%5D%2CSystem.Int32%2CSystem.StringSplitOptions%29> methods).</span></span>

### <a name="alternatives-to-stringsplit"></a><span data-ttu-id="d5817-2975">文字列分割の代替手段</span><span class="sxs-lookup"><span data-stu-id="d5817-2975">Alternatives to String.Split</span></span>

 <span data-ttu-id="d5817-2976"><xref:System.String.Split%2A> メソッドは、区切られた文字列を部分文字列に分割するのに必ずしも最適な方法ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2976">The <xref:System.String.Split%2A> method is not always the best way to break a delimited string into substrings.</span></span> <span data-ttu-id="d5817-2977">区切られた文字列の一部の部分文字列を抽出したくない場合、または区切り文字のセットではなくパターンに基づいて文字列を解析する場合は、次の代替手段を検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-2977">If you don't want to extract all of the substrings of a delimited string, or if you want to parse a string based on a pattern instead of a set of delimiter characters, consider the following alternatives.</span></span>

### <a name="regular-expressions"></a><span data-ttu-id="d5817-2978">正規表現</span><span class="sxs-lookup"><span data-stu-id="d5817-2978">Regular expressions</span></span>
 <span data-ttu-id="d5817-2979">文字列が固定パターンに準拠している場合は、正規表現を使用してその要素を抽出して処理できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2979">If your strings conform to a fixed pattern, you can use a regular expression to extract and handle their elements.</span></span> <span data-ttu-id="d5817-2980">たとえば、文字列の形式が "*数値**オペランド**数値*" の場合、[正規表現](~/docs/standard/base-types/regular-expressions.md)を使用して文字列の要素を抽出し、処理することができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2980">For example, if strings take the form "*number* *operand* *number*" you can use a [regular expression](~/docs/standard/base-types/regular-expressions.md) to extract and handle the string's elements.</span></span> <span data-ttu-id="d5817-2981">次に例を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2981">Here's an example:</span></span>

 [!code-csharp-interactive[System.String.Split#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt1.cs#8)]
 [!code-vb[System.String.Split#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt1.vb#8)]

 <span data-ttu-id="d5817-2982">正規表現パターン `(\d+)\s+([-+*/])\s+(\d+)` は次のように定義されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2982">The regular expression pattern `(\d+)\s+([-+*/])\s+(\d+)` is defined like this:</span></span>

|<span data-ttu-id="d5817-2983">パターン</span><span class="sxs-lookup"><span data-stu-id="d5817-2983">Pattern</span></span>|<span data-ttu-id="d5817-2984">説明</span><span class="sxs-lookup"><span data-stu-id="d5817-2984">Description</span></span>|
|-------------|-----------------|
|`(\d+)`|<span data-ttu-id="d5817-2985">1 個以上の 10 進数と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2985">Match one or more decimal digits.</span></span> <span data-ttu-id="d5817-2986">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2986">This is the first capturing group.</span></span>|
|`\s+`|<span data-ttu-id="d5817-2987">1個以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2987">Match one or more white-space characters.</span></span>|
|`([-+*/])`|<span data-ttu-id="d5817-2988">算術演算子の符号 (+、-、\*、/) と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2988">Match an arithmetic operator sign (+, -, \*, or /).</span></span> <span data-ttu-id="d5817-2989">これが 2 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2989">This is the second capturing group.</span></span>|
|`\s+`|<span data-ttu-id="d5817-2990">1個以上の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2990">Match one or more white-space characters.</span></span>|
|`(\d+)`|<span data-ttu-id="d5817-2991">1 個以上の 10 進数と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-2991">Match one or more decimal digits.</span></span> <span data-ttu-id="d5817-2992">これが 3 番目のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2992">This is the third capturing group.</span></span>|

 <span data-ttu-id="d5817-2993">また、正規表現を使用して、固定された文字のセットではなく、パターンに基づいて文字列から部分文字列を抽出することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2993">You can also use a regular expression to extract substrings from a string based on a pattern rather than a fixed set of characters.</span></span> <span data-ttu-id="d5817-2994">これは、次のいずれかの条件が発生した場合の一般的なシナリオです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2994">This is a common scenario when either of these conditions occurs:</span></span>

-   <span data-ttu-id="d5817-2995">1つ以上の区切り文字が <xref:System.String> インスタンスの区切り記号として機能しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-2995">One or more of the delimiter characters does not always serve as a delimiter in the <xref:System.String> instance.</span></span>

-   <span data-ttu-id="d5817-2996">区切り文字のシーケンスと数は、変数または unknown です。</span><span class="sxs-lookup"><span data-stu-id="d5817-2996">The sequence and number of delimiter characters is variable or unknown.</span></span>

 <span data-ttu-id="d5817-2997">たとえば、<xref:System.String.Split%2A> メソッドを使用して、次の文字列を分割することはできません。 `\n` C#(in) または `vbCrLf` (Visual Basic) の文字数は変数であり、常に区切り記号として機能しないためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-2997">For example, the <xref:System.String.Split%2A> method cannot be used to split the following string, because the number of `\n` (in C#) or `vbCrLf` (in Visual Basic) characters is variable, and they don't always serve as delimiters.</span></span>

```text
[This is captured\ntext.]\n\n[\n[This is more captured text.]\n]
\n[Some more captured text:\n   Option1\n   Option2][Terse text.]
```

 <span data-ttu-id="d5817-2998">次の例に示すように、正規表現では、この文字列を簡単に分割できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-2998">A regular expression can split this string easily, as the following example shows.</span></span>

 [!code-csharp-interactive[System.String.Split#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt2.cs#9)]
 [!code-vb[System.String.Split#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt2.vb#9)]

 <span data-ttu-id="d5817-2999">正規表現パターン `\[([^\[\]]+)\]` は次のように定義されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-2999">The regular expression pattern `\[([^\[\]]+)\]` is defined like this:</span></span>

|<span data-ttu-id="d5817-3000">パターン</span><span class="sxs-lookup"><span data-stu-id="d5817-3000">Pattern</span></span>|<span data-ttu-id="d5817-3001">説明</span><span class="sxs-lookup"><span data-stu-id="d5817-3001">Description</span></span>|
|-------------|-----------------|
|`\[`|<span data-ttu-id="d5817-3002">左角かっこと一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3002">Match an opening bracket.</span></span>|
|`([^\[\]]+)`|<span data-ttu-id="d5817-3003">左または右の角かっこではない任意の文字と1回以上一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3003">Match any character that is not an opening or a closing bracket one or more times.</span></span> <span data-ttu-id="d5817-3004">これが最初のキャプチャ グループです。</span><span class="sxs-lookup"><span data-stu-id="d5817-3004">This is the first capturing group.</span></span>|
|`\]`|<span data-ttu-id="d5817-3005">右角かっこと一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3005">Match a closing bracket.</span></span>|

 <span data-ttu-id="d5817-3006"><xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> メソッドは <xref:System.String.Split%2A?displayProperty=nameWithType>とほぼ同じですが、固定文字セットではなく正規表現パターンに基づいて文字列を分割する点が異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3006">The <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method is almost identical to <xref:System.String.Split%2A?displayProperty=nameWithType>, except that it splits a string based on a regular expression pattern instead of a fixed character set.</span></span> <span data-ttu-id="d5817-3007">たとえば、次の例では、<xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> メソッドを使用して、ハイフンとその他の文字のさまざまな組み合わせで区切られた部分文字列を含む文字列を分割します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3007">For example, the following example uses the <xref:System.Text.RegularExpressions.Regex.Split%2A?displayProperty=nameWithType> method to split a string that contains substrings delimited by various combinations of hyphens and other characters.</span></span>

 [!code-csharp-interactive[System.String.Split#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt3.cs#10)]
 [!code-vb[System.String.Split#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt3.vb#10)]

 <span data-ttu-id="d5817-3008">正規表現パターン `\s-\s?[+*]?\s?-\s` は次のように定義されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3008">The regular expression pattern `\s-\s?[+*]?\s?-\s` is defined like this:</span></span>

|<span data-ttu-id="d5817-3009">パターン</span><span class="sxs-lookup"><span data-stu-id="d5817-3009">Pattern</span></span>|<span data-ttu-id="d5817-3010">説明</span><span class="sxs-lookup"><span data-stu-id="d5817-3010">Description</span></span>|
|-------------|-----------------|
|`\s-`|<span data-ttu-id="d5817-3011">空白文字の後にハイフンが続くパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3011">Match a white-space character followed by a hyphen.</span></span>|
|`\s?`|<span data-ttu-id="d5817-3012">0 個または 1 個の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3012">Match zero or one white-space character.</span></span>|
|`[+*]?`|<span data-ttu-id="d5817-3013">+ または \* のいずれかの文字の0回または1回の繰り返しに一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3013">Match zero or one occurrence of either the + or \* character.</span></span>|
|`\s?`|<span data-ttu-id="d5817-3014">0 個または 1 個の空白文字と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3014">Match zero or one white-space character.</span></span>|
|`-\s`|<span data-ttu-id="d5817-3015">ハイフンの後に空白文字が続くパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3015">Match a hyphen followed by a white-space character.</span></span>|

### <a name="search-methods-and-the-substring-method"></a><span data-ttu-id="d5817-3016">検索メソッドと Substring メソッド</span><span class="sxs-lookup"><span data-stu-id="d5817-3016">Search methods and the Substring method</span></span>
 <span data-ttu-id="d5817-3017">文字列内のすべての部分文字列に関心がない場合は、一致を開始する位置のインデックスを返す文字列比較メソッドのいずれかを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3017">If you aren't interested in all of the substrings in a string, you might prefer to work with one of the string comparison methods that returns the index at which the match begins.</span></span> <span data-ttu-id="d5817-3018">その後、<xref:System.String.Substring%2A> メソッドを呼び出して、必要な部分文字列を抽出できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3018">You can then call the <xref:System.String.Substring%2A> method to extract the substring that you want.</span></span> <span data-ttu-id="d5817-3019">文字列比較のメソッドは次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="d5817-3019">The string comparison methods include:</span></span>

-   <span data-ttu-id="d5817-3020"><xref:System.String.IndexOf%2A>。文字列インスタンス内で文字または文字列が最初に出現する位置の0から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3020"><xref:System.String.IndexOf%2A>, which returns the zero-based index of the first occurrence of a character or string in a string instance.</span></span>

-   <span data-ttu-id="d5817-3021"><xref:System.String.IndexOfAny%2A>。これは、文字配列内の任意の文字が最初に出現する位置の、現在の文字列インスタンス内の0から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3021"><xref:System.String.IndexOfAny%2A>, which returns the zero-based index in the current string instance of the first occurrence of any character in a character array.</span></span>

-   <span data-ttu-id="d5817-3022"><xref:System.String.LastIndexOf%2A>。文字列インスタンス内で文字または文字列が最後に出現する位置の0から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3022"><xref:System.String.LastIndexOf%2A>, which returns the zero-based index of the last occurrence of a character or string in a string instance.</span></span>

-   <span data-ttu-id="d5817-3023"><xref:System.String.LastIndexOfAny%2A>。これは、文字配列内で最後に出現する文字の現在の文字列インスタンス内にある、0から始まるインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3023"><xref:System.String.LastIndexOfAny%2A>, which returns a zero-based index in the current string instance of the last occurrence of any character in a character array.</span></span>

 <span data-ttu-id="d5817-3024">次の例では、<xref:System.String.IndexOf%2A> メソッドを使用して、文字列内の期間を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3024">The following example uses the <xref:System.String.IndexOf%2A> method to find the periods in a string.</span></span> <span data-ttu-id="d5817-3025">次に、<xref:System.String.Substring%2A> メソッドを使用して完全な文を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3025">It then uses the <xref:System.String.Substring%2A> method to return full sentences.</span></span>

 [!code-csharp-interactive[System.String.Split#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/splitalt4.cs#11)]
 [!code-vb[System.String.Split#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/splitalt4.vb#11)]

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (params char[] separator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (ParamArray separator As Char()) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(... cli::array &lt;char&gt; ^ separator);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] -&gt; string[]" Usage="string.Split separator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-3026">この文字列から部分文字列を取り出すために区切り文字として使用する文字配列、区切り文字が含まれていない空の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3026">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d5817-3027">区切り記号の配列内の文字に基づいて文字列を部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3027">Splits a string into substrings that are based on the characters in the separator array.</span></span></summary>
        <returns><span data-ttu-id="d5817-3028">このインスタンスを <paramref name="separator" /> の 1 つ以上の文字で区切った部分文字列を要素に格納する配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3028">An array whose elements contain the substrings from this instance that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="d5817-3029">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3029">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3030">文字列が既知の文字のセットで区切られている場合は、<xref:System.String.Split%28System.Char%5B%5D%29> メソッドを使用して、文字列を部分文字列に区切ることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3030">When a string is delimited by a known set of characters, you can use the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate it into substrings.</span></span>

### <a name="return-value-details"></a><span data-ttu-id="d5817-3031">戻り値の詳細</span><span class="sxs-lookup"><span data-stu-id="d5817-3031">Return value details</span></span>
 <span data-ttu-id="d5817-3032">区切り文字は、返される配列の要素には含まれません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3032">Delimiter characters are not included in the elements of the returned array.</span></span> <span data-ttu-id="d5817-3033">たとえば、区切り記号配列に文字 "-" が含まれていて、現在の文字列インスタンスの値が "aa-bb-cc" の場合、メソッドは、"aa"、"bb"、および "cc" の3つの要素を含む配列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3033">For example, if the separator array includes the character "-" and the value of the current string instance is "aa-bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>

 <span data-ttu-id="d5817-3034">このインスタンスに `separator`内の文字が含まれていない場合、返される配列は、このインスタンスを格納する1つの要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3034">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span>

 <span data-ttu-id="d5817-3035">`separator` の各要素は、個別の区切り文字を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3035">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="d5817-3036">2つの区切り記号が隣接している場合、またはこのインスタンスの先頭または末尾に区切り記号がある場合、返された配列内の対応する要素には <xref:System.String.Empty?displayProperty=nameWithtype>が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3036">If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding element in the returned array contains <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span> <span data-ttu-id="d5817-3037">次にいくつかの例を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3037">Here are some examples:</span></span>

|<span data-ttu-id="d5817-3038">文字列値</span><span class="sxs-lookup"><span data-stu-id="d5817-3038">String value</span></span>|<span data-ttu-id="d5817-3039">区切り記号</span><span class="sxs-lookup"><span data-stu-id="d5817-3039">Separator</span></span>|<span data-ttu-id="d5817-3040">返された配列</span><span class="sxs-lookup"><span data-stu-id="d5817-3040">Returned array</span></span>|
|------------------|---------------|--------------------|
|<span data-ttu-id="d5817-3041">"42, 12, 19"</span><span class="sxs-lookup"><span data-stu-id="d5817-3041">"42, 12, 19"</span></span>|<span data-ttu-id="d5817-3042">新しい Char [] {', ', ' '} (C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3042">new Char[] {',', ' '} (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3043">Char () = {"," c, "" c}) (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3043">Char() = {","c, " "c}) (Visual Basic)</span></span>|<span data-ttu-id="d5817-3044">{"42", "", "12", "", "19"}</span><span class="sxs-lookup"><span data-stu-id="d5817-3044">{"42", "", "12", "", "19"}</span></span>|
|<span data-ttu-id="d5817-3045">"42..12..19"</span><span class="sxs-lookup"><span data-stu-id="d5817-3045">"42..12..19"</span></span>|<span data-ttu-id="d5817-3046">新しい Char [] {'}</span><span class="sxs-lookup"><span data-stu-id="d5817-3046">new Char[] {'.'}</span></span> <span data-ttu-id="d5817-3047">(C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3047">(C#)</span></span><br /><br /> <span data-ttu-id="d5817-3048">Char () = {"."c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3048">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="d5817-3049">{"42", "", "12", "", "19"}</span><span class="sxs-lookup"><span data-stu-id="d5817-3049">{"42", "", "12", "", "19"}</span></span>|
|<span data-ttu-id="d5817-3050">バナナ</span><span class="sxs-lookup"><span data-stu-id="d5817-3050">"Banana"</span></span>|<span data-ttu-id="d5817-3051">新しい Char [] {'}</span><span class="sxs-lookup"><span data-stu-id="d5817-3051">new Char[] {'.'}</span></span> <span data-ttu-id="d5817-3052">(C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3052">(C#)</span></span><br /><br /> <span data-ttu-id="d5817-3053">Char () = {"."c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3053">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="d5817-3054">{"バナナ"}</span><span class="sxs-lookup"><span data-stu-id="d5817-3054">{"Banana"}</span></span>|
|<span data-ttu-id="d5817-3055">"Darb\nSmarba" (C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3055">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3056">"Darb" & vbLf & "Smarba" (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3056">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="d5817-3057">新しい Char [] {} (C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3057">new Char[] {} (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3058">Char () = {} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3058">Char() = {} (Visual Basic)</span></span>|<span data-ttu-id="d5817-3059">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="d5817-3059">{"Darb", "Smarba"}</span></span>|
|<span data-ttu-id="d5817-3060">"Darb\nSmarba" (C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3060">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3061">"Darb" & vbLf & "Smarba" (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3061">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="d5817-3062">null (C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3062">null (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3063">Nothing (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3063">Nothing (Visual Basic)</span></span>|<span data-ttu-id="d5817-3064">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="d5817-3064">{"Darb", "Smarba"}</span></span>|

### <a name="the-separator-array"></a><span data-ttu-id="d5817-3065">区切り記号配列</span><span class="sxs-lookup"><span data-stu-id="d5817-3065">The separator array</span></span>
 <span data-ttu-id="d5817-3066">Separator の各要素は、1つの文字で構成される個別の区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3066">Each element of separator defines a separate delimiter that consists of a single character.</span></span> <span data-ttu-id="d5817-3067">`separator` 引数が `null` か、文字が含まれていない場合、メソッドは空白文字を区切り記号として扱います。</span><span class="sxs-lookup"><span data-stu-id="d5817-3067">If the `separator` argument is `null` or contains no characters, the method treats white-space characters as the delimiters.</span></span> <span data-ttu-id="d5817-3068">空白文字は Unicode 規格で定義されています。これらのメソッドは、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> メソッドに渡されると `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3068">White-space characters are defined by the Unicode standard; they return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>

### <a name="stringsplitchar-and-compiler-overload-resolution"></a><span data-ttu-id="d5817-3069">String. Split (Char []) とコンパイラのオーバーロードの解決</span><span class="sxs-lookup"><span data-stu-id="d5817-3069">String.Split(Char[]) and compiler overload resolution</span></span>
 <span data-ttu-id="d5817-3070"><xref:System.String.Split%2A?displayProperty=nameWithType> のこのオーバーロードの1つのパラメーターは文字配列ですが、次の例に示すように、1つの文字で呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3070">Although the single parameter for this overload of <xref:System.String.Split%2A?displayProperty=nameWithType> is a character array, you can call it with a single character, as the following example shows.</span></span>

 [!code-csharp-interactive[System.String.Split#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split_CompilerResolution1.cs#12)]
 [!code-vb[System.String.Split#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split_CompilerResolution1.vb#12)]

 <span data-ttu-id="d5817-3071">`separator` パラメーターは <xref:System.ParamArrayAttribute> 属性で修飾されているため、コンパイラは1つの文字を単一要素の文字配列として解釈します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3071">Because the `separator` parameter is decorated  with the <xref:System.ParamArrayAttribute> attribute, compilers will interpret a single character as a single-element character array.</span></span> <span data-ttu-id="d5817-3072">これは、`separator` パラメーターを含むその他の <xref:System.String.Split%2A?displayProperty=nameWithType> のオーバーロードには当てはまりません。これらのオーバーロードは、`separator` 引数として文字配列に明示的に渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3072">This is not the case for other <xref:System.String.Split%2A?displayProperty=nameWithType> overloads that include a `separator` parameter; you must explicitly pass these overloads a character array as the `separator` argument.</span></span>

### <a name="comparison-details"></a><span data-ttu-id="d5817-3073">比較の詳細</span><span class="sxs-lookup"><span data-stu-id="d5817-3073">Comparison details</span></span>
 <span data-ttu-id="d5817-3074"><xref:System.String.Split%28System.Char%5B%5D%29> メソッドは、`separator` 配列内の1つ以上の文字で区切られたこの文字列の部分文字列を抽出し、それらの部分文字列を配列の要素として返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3074">The <xref:System.String.Split%28System.Char%5B%5D%29> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` array, and returns those substrings as elements of an array.</span></span>

 <span data-ttu-id="d5817-3075"><xref:System.String.Split%28System.Char%5B%5D%29> メソッドは、大文字と小文字を区別する序数の並べ替え規則を使用して比較を実行することで、区切り記号を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3075">The <xref:System.String.Split%28System.Char%5B%5D%29> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="d5817-3076">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 列挙型」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3076">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>

### <a name="performance-considerations"></a><span data-ttu-id="d5817-3077">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-3077">Performance Considerations</span></span>
 <span data-ttu-id="d5817-3078"><xref:System.String.Split%2A> メソッドは、返された配列オブジェクトにメモリを割り当て、各配列要素の <xref:System.String> オブジェクトを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3078">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="d5817-3079">アプリケーションで最適なパフォーマンスが求められる場合、またはアプリケーションでメモリ割り当てを管理することが重要な場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> 方法の使用を検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3079">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method.</span></span> <span data-ttu-id="d5817-3080">また、<xref:System.String.Compare%2A> メソッドを使用して、文字列内の部分文字列を検索することもできます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3080">You also have the option of using the <xref:System.String.Compare%2A> method to locate a substring within a string.</span></span>

 <span data-ttu-id="d5817-3081">文字列を区切り文字で分割するには、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッドを使用して、文字列内の区切り文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3081">To split a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="d5817-3082">区切り文字列で文字列を分割するには、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッドを使用して、区切り記号文字列の最初の文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3082">To split a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="d5817-3083">次に、<xref:System.String.Compare%2A> メソッドを使用して、その最初の文字の後の文字が区切り記号の文字列の残りの文字と等しいかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3083">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>

 <span data-ttu-id="d5817-3084">また、同じ文字セットを使用して複数の <xref:System.String.Split%2A> メソッドの呼び出しで文字列を分割する場合は、1つの配列を作成し、各メソッド呼び出しで参照することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3084">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="d5817-3085">これにより、各メソッド呼び出しのオーバーヘッドが大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3085">This significantly reduces the additional overhead of each method call.</span></span>

## Examples
 <span data-ttu-id="d5817-3086">次の例では、空白と句読点を区切り記号として扱うことによって、テキストのブロックから個々の単語を抽出する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3086">The following example demonstrates how to extract individual words from a block of text by treating white space and punctuation marks as delimiters.</span></span> <span data-ttu-id="d5817-3087"><xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> メソッドの `separator` パラメーターに渡される文字配列は、スペース文字とタブ文字で構成され、いくつかの一般的な区切り記号と共に使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3087">The character array passed to the `separator` parameter of the <xref:System.String.Split%28System.Char%5B%5D%29?displayProperty=nameWithType> method consists of a space character and a tab character, together with some common punctuation symbols.</span></span>

 [!code-csharp-interactive[System.String.Split#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split2.cs#2)]
 [!code-vb[System.String.Split#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split2.vb#2)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3088">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、<see cref="M:System.String.Split(System.Char[])" /> メソッドに <see langword="null" /> または文字が含まれていない <paramref name="separator" /> が渡された場合、メソッドは文字列を分割するために少し異なる文字のセットを使用します。これは、<see cref="M:System.String.Trim(System.Char[])" /> メソッドが文字列をトリミングする場合とは異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3088">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="d5817-3089">.NET Framework 4 以降では、両方のメソッドで同じセットの Unicode 空白文字が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3089">Starting with the .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char separator, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : char * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-3090">この文字列内の部分文字列を区切る文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-3090">A character that delimits the substrings in this string.</span></span></param>
        <param name="options"><span data-ttu-id="d5817-3091">分割操作で、戻り値から空の部分文字列を省略する必要があるかどうかを決定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-3091">One of the enumeration values that determines whether the split operation should omit empty substrings from the return value.</span></span></param>
        <summary><span data-ttu-id="d5817-3092">指定された文字区切り記号に基づいて文字列を部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3092">Splits a string into substrings based on the provided character separator.</span></span></summary>
        <returns><span data-ttu-id="d5817-3093"><paramref name="separator" /> によって区切られた、このインスタンスの部分文字列を要素に格納する配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3093">An array whose elements contain the substrings from this instance that are delimited by <paramref name="separator" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), count As Integer) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, int count);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] * int -&gt; string[]" Usage="string.Split (separator, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-3094">この文字列から部分文字列を取り出すために区切り文字として使用する文字配列、区切り文字が含まれていない空の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3094">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-3095">返される最大の部分文字列数。</span><span class="sxs-lookup"><span data-stu-id="d5817-3095">The maximum number of substrings to return.</span></span></param>
        <summary><span data-ttu-id="d5817-3096">配列内の文字に基づいて文字列を最大数の部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3096">Splits a string into a maximum number of substrings based on the characters in an array.</span></span> <span data-ttu-id="d5817-3097">返される部分文字列の最大数を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3097">You also specify the maximum number of substrings to return.</span></span></summary>
        <returns><span data-ttu-id="d5817-3098">このインスタンスを、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字) で区切ることによって取り出された部分文字列を格納する配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3098">An array whose elements contain the substrings in this instance that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="d5817-3099">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3099">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3100">区切り文字は、返される配列の要素には含まれません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3100">Delimiter characters are not included in the elements of the returned array.</span></span>

 <span data-ttu-id="d5817-3101">このインスタンスに `separator`内の文字が含まれていない場合、返される配列は、このインスタンスを格納する1つの要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3101">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="d5817-3102">`count` が0の場合は、空の配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3102">If `count` is zero, an empty array is returned.</span></span>

 <span data-ttu-id="d5817-3103">`separator` パラメーターが `null` の場合、または文字が含まれていない場合は、空白文字が区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3103">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="d5817-3104">空白文字は Unicode 標準によって定義され、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> メソッドに渡される場合は `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3104">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>

 <span data-ttu-id="d5817-3105">`separator` の各要素は、個別の区切り文字を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3105">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="d5817-3106">2つの区切り記号が隣接している場合、またはこのインスタンスの先頭または末尾に区切り記号がある場合、対応する配列要素には <xref:System.String.Empty?displayProperty=nameWithtype>が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3106">If two delimiters are adjacent, or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

 <span data-ttu-id="d5817-3107">このインスタンスに `count` 複数の部分文字列が含まれている場合は、最初の `count`-1 の部分文字列が戻り値の1番目の `count`-1 要素から返され、このインスタンスの残りの文字が戻り値の最後の要素に返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3107">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>

 <span data-ttu-id="d5817-3108">`count` が部分文字列の数より大きい場合は、使用可能な部分文字列が返され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3108">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>

 <span data-ttu-id="d5817-3109">次の表に例を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3109">The following table provides examples.</span></span>

|<span data-ttu-id="d5817-3110">文字列値</span><span class="sxs-lookup"><span data-stu-id="d5817-3110">String value</span></span>|<span data-ttu-id="d5817-3111">区切り記号</span><span class="sxs-lookup"><span data-stu-id="d5817-3111">Separator</span></span>|<span data-ttu-id="d5817-3112">カウント</span><span class="sxs-lookup"><span data-stu-id="d5817-3112">Count</span></span>|<span data-ttu-id="d5817-3113">返された配列</span><span class="sxs-lookup"><span data-stu-id="d5817-3113">Returned array</span></span>|
|------------------|---------------|-----------|--------------------|
|<span data-ttu-id="d5817-3114">"42, 12, 19"</span><span class="sxs-lookup"><span data-stu-id="d5817-3114">"42, 12, 19"</span></span>|<span data-ttu-id="d5817-3115">新しい Char [] {', ', ' '} (C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3115">new Char[] {',', ' '} (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3116">Char () = {"," c "," c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3116">Char() = {","c, " "c} (Visual Basic)</span></span>|<span data-ttu-id="d5817-3117">2</span><span class="sxs-lookup"><span data-stu-id="d5817-3117">2</span></span>|<span data-ttu-id="d5817-3118">{"42", " 12, 19"}</span><span class="sxs-lookup"><span data-stu-id="d5817-3118">{"42", " 12, 19"}</span></span>|
|<span data-ttu-id="d5817-3119">"42..12..19"</span><span class="sxs-lookup"><span data-stu-id="d5817-3119">"42..12..19"</span></span>|<span data-ttu-id="d5817-3120">新しい Char [] {'}</span><span class="sxs-lookup"><span data-stu-id="d5817-3120">new Char[] {'.'}</span></span> <span data-ttu-id="d5817-3121">(C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3121">(C#)</span></span><br /><br /> <span data-ttu-id="d5817-3122">Char () = {"."c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3122">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="d5817-3123">4</span><span class="sxs-lookup"><span data-stu-id="d5817-3123">4</span></span>|<span data-ttu-id="d5817-3124">{"42", "", "12", ".19"}</span><span class="sxs-lookup"><span data-stu-id="d5817-3124">{"42", "", "12", ".19"}</span></span>|
|<span data-ttu-id="d5817-3125">バナナ</span><span class="sxs-lookup"><span data-stu-id="d5817-3125">"Banana"</span></span>|<span data-ttu-id="d5817-3126">新しい Char [] {'}</span><span class="sxs-lookup"><span data-stu-id="d5817-3126">new Char[] {'.'}</span></span> <span data-ttu-id="d5817-3127">(C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3127">(C#)</span></span><br /><br /> <span data-ttu-id="d5817-3128">Char () = {"."c} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3128">Char() = {"."c} (Visual Basic)</span></span>|<span data-ttu-id="d5817-3129">2</span><span class="sxs-lookup"><span data-stu-id="d5817-3129">2</span></span>|<span data-ttu-id="d5817-3130">{"バナナ"}</span><span class="sxs-lookup"><span data-stu-id="d5817-3130">{"Banana"}</span></span>|
|<span data-ttu-id="d5817-3131">"Darb\nSmarba" (C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3131">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3132">"Darb" & vbLf & "Smarba" (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3132">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="d5817-3133">新しい Char [] {} (C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3133">new Char[] {} (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3134">Char () = {} (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3134">Char() = {} (Visual Basic)</span></span>|<span data-ttu-id="d5817-3135">1</span><span class="sxs-lookup"><span data-stu-id="d5817-3135">1</span></span>|<span data-ttu-id="d5817-3136">{"Darb\nSmarba"}(C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3136">{"Darb\nSmarba"} (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3137">"Darb" & vbLf & "Smarba" (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3137">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|
|<span data-ttu-id="d5817-3138">"Darb\nSmarba" (C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3138">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3139">"Darb" & vbLf & "Smarba" (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3139">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="d5817-3140">new Char [] null (C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3140">new Char[] null (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3141">Char () = Nothing</span><span class="sxs-lookup"><span data-stu-id="d5817-3141">Char() = Nothing</span></span>|<span data-ttu-id="d5817-3142">2</span><span class="sxs-lookup"><span data-stu-id="d5817-3142">2</span></span>|<span data-ttu-id="d5817-3143">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="d5817-3143">{"Darb", "Smarba"}</span></span>|
|<span data-ttu-id="d5817-3144">"Darb\nSmarba" (C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3144">"Darb\nSmarba" (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3145">"Darb" & vbLf & "Smarba" (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d5817-3145">"Darb" & vbLf & "Smarba" (Visual Basic)</span></span>|<span data-ttu-id="d5817-3146">new Char [] null (C#)</span><span class="sxs-lookup"><span data-stu-id="d5817-3146">new Char[] null (C#)</span></span><br /><br /> <span data-ttu-id="d5817-3147">Char () = Nothing</span><span class="sxs-lookup"><span data-stu-id="d5817-3147">Char() = Nothing</span></span>|<span data-ttu-id="d5817-3148">100</span><span class="sxs-lookup"><span data-stu-id="d5817-3148">100</span></span>|<span data-ttu-id="d5817-3149">{"Darb", "Smarba"}</span><span class="sxs-lookup"><span data-stu-id="d5817-3149">{"Darb", "Smarba"}</span></span>|

### <a name="performance-considerations"></a><span data-ttu-id="d5817-3150">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-3150">Performance Considerations</span></span>
 <span data-ttu-id="d5817-3151"><xref:System.String.Split%2A> メソッドは、返された配列オブジェクトにメモリを割り当て、各配列要素の <xref:System.String> オブジェクトを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3151">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="d5817-3152">アプリケーションで最適なパフォーマンスが求められる場合、またはアプリケーションでメモリ割り当てを管理することが重要な場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッド、および必要に応じて <xref:System.String.Compare%2A> メソッドを使用して、文字列内の部分文字列を検索することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3152">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>

 <span data-ttu-id="d5817-3153">文字列を区切り文字で分割する場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッドを使用して、文字列内の区切り文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3153">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="d5817-3154">区切り文字列で文字列を分割する場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッドを使用して、区切り記号の文字列の最初の文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3154">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="d5817-3155">次に、<xref:System.String.Compare%2A> メソッドを使用して、その最初の文字の後の文字が区切り記号の文字列の残りの文字と等しいかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3155">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>

 <span data-ttu-id="d5817-3156">また、同じ文字セットを使用して複数の <xref:System.String.Split%2A> メソッドの呼び出しで文字列を分割する場合は、1つの配列を作成し、各メソッド呼び出しで参照することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3156">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="d5817-3157">これにより、各メソッド呼び出しのオーバーヘッドが大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3157">This significantly reduces the additional overhead of each method call.</span></span>



## Examples
 <span data-ttu-id="d5817-3158">次の例は、`count` が <xref:System.String.Split%2A>によって返される文字列の数にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3158">The following example demonstrates how `count` affects the number of strings returned by <xref:System.String.Split%2A>.</span></span>

 [!code-csharp-interactive[StringSplit2#10](~/samples/snippets/csharp/VS_Snippets_CLR/StringSplit2/CS/StringSplit10.cs#10)]
 [!code-vb[StringSplit2#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/StringSplit2/VB/stringsplit10.vb#10)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-3159"><paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3159"><paramref name="count" /> is negative.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3160">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、<see cref="M:System.String.Split(System.Char[])" /> メソッドに <see langword="null" /> または文字が含まれていない <paramref name="separator" /> が渡された場合、メソッドは文字列を分割するために少し異なる文字のセットを使用します。これは、<see cref="M:System.String.Trim(System.Char[])" /> メソッドが文字列をトリミングする場合とは異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3160">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="d5817-3161">.NET Framework 4 以降では、両方のメソッドで同じセットの Unicode 空白文字が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3161">Starting with the .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Substring(System.Int32)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-3162">この文字列から部分文字列を取り出すために区切り文字として使用する文字配列、区切り文字が含まれていない空の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3162">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="options"><span data-ttu-id="d5817-3163">返される配列から空の配列要素を省略する場合は <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />。返される配列に空の配列要素も含める場合は <see cref="F:System.StringSplitOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3163"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span></span></param>
        <summary><span data-ttu-id="d5817-3164">配列内の文字に基づいて文字列を部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3164">Splits a string into substrings based on the characters in an array.</span></span> <span data-ttu-id="d5817-3165">部分文字列が空の配列の要素を含めるかどうかを指定することができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3165">You can specify whether the substrings include empty array elements.</span></span></summary>
        <returns><span data-ttu-id="d5817-3166">この文字列を、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字) で区切ることによって取り出された部分文字列を格納する配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3166">An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="d5817-3167">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3167">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

### <a name="return-value-details"></a><span data-ttu-id="d5817-3168">戻り値の詳細</span><span class="sxs-lookup"><span data-stu-id="d5817-3168">Return value details</span></span>
 <span data-ttu-id="d5817-3169">区切り文字 (`separator` 配列内の文字) は、返される配列の要素には含まれません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3169">Delimiter characters (the characters in the `separator` array) are not included in the elements of the returned array.</span></span> <span data-ttu-id="d5817-3170">たとえば、`separator` 配列に文字 "-" が含まれていて、現在の文字列インスタンスの値が "aa-bb-cc" である場合、メソッドは、"aa"、"bb"、および "cc" の3つの要素を含む配列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3170">For example, if the `separator` array includes the character "-" and the value of the current string instance is "aa-bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>

 <span data-ttu-id="d5817-3171">このインスタンスに `separator`内の文字が含まれていない場合、返される配列は、このインスタンスを格納する1つの要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3171">If this instance does not contain any of the characters in `separator`, the returned array consists of a single element that contains this instance.</span></span>

 <span data-ttu-id="d5817-3172">`options` パラメーターが <xref:System.StringSplitOptions.RemoveEmptyEntries> で、このインスタンスの長さが0の場合、メソッドは空の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3172">If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.</span></span>

 <span data-ttu-id="d5817-3173">`separator` の各要素は、1つの文字で構成される個別の区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3173">Each element of `separator` defines a separate delimiter that consists of a single character.</span></span> <span data-ttu-id="d5817-3174">`options` 引数が <xref:System.StringSplitOptions.None>で、2つの区切り記号が隣接している場合、またはこのインスタンスの先頭または末尾に区切り記号がある場合は、対応する配列要素に <xref:System.String.Empty?displayProperty=nameWithType>が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3174">If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-3175">たとえば、`separator` に "-" と "\_" の2つの要素が含まれている場合、文字列インスタンスの値は "-\_aa-\_" で、`options` 引数の値が <xref:System.StringSplitOptions.None>の場合、メソッドは次の5つの要素を持つ文字列配列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3175">For example, if `separator` includes  two elements, "-" and "\_", the value of the string instance is "-\_aa-\_", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a string array with the following five elements:</span></span>

1.  <span data-ttu-id="d5817-3176"><xref:System.String.Empty?displayProperty=nameWithType>。インデックス0の "-" 文字の前にある空の文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3176"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that precedes the "-" character at index 0.</span></span>

2.  <span data-ttu-id="d5817-3177"><xref:System.String.Empty?displayProperty=nameWithType>。インデックス0の "-" 文字とインデックス1の "_" 文字の間の空の文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3177"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string between the "-" character at index 0 and the "_" character at index 1.</span></span>

3.  <span data-ttu-id="d5817-3178">"aa"、</span><span class="sxs-lookup"><span data-stu-id="d5817-3178">"aa",</span></span>

4.  <span data-ttu-id="d5817-3179"><xref:System.String.Empty?displayProperty=nameWithType>。インデックス4の "_" 文字の後に続く空の文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3179"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "_" character at index 4.</span></span>

5.  <span data-ttu-id="d5817-3180"><xref:System.String.Empty?displayProperty=nameWithType>。インデックス5の "-" 文字の後に続く空の文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3180"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "-" character at index 5.</span></span>

### <a name="the-separator-array"></a><span data-ttu-id="d5817-3181">区切り記号配列</span><span class="sxs-lookup"><span data-stu-id="d5817-3181">The separator array</span></span>
 <span data-ttu-id="d5817-3182">`separator` パラメーターが `null` の場合、または文字が含まれていない場合は、空白文字が区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3182">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="d5817-3183">空白文字は Unicode 標準によって定義され、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> メソッドに渡される場合は `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3183">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>

 <span data-ttu-id="d5817-3184">このメソッドオーバーロードの呼び出しの `separator` パラメーターが `null`場合、コンパイラのオーバーロードの解決は失敗します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3184">If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="d5817-3185">呼び出されたメソッドを明確に識別するには、コードで `null`の型を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3185">To unambiguously identify the called method, your code must indicate the type of the `null`.</span></span> <span data-ttu-id="d5817-3186">次の例は、このオーバーロードを明確に識別するいくつかの方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3186">The following example shows several ways to unambiguously identify this overload.</span></span>

 [!code-csharp[System.String.Split#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#5)]
 [!code-vb[System.String.Split#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#5)]

### <a name="comparison-details"></a><span data-ttu-id="d5817-3187">比較の詳細</span><span class="sxs-lookup"><span data-stu-id="d5817-3187">Comparison details</span></span>
 <span data-ttu-id="d5817-3188"><xref:System.String.Split%2A> メソッドは、`separator` パラメーターの1つ以上の文字で区切られたこの文字列の部分文字列を抽出し、それらの部分文字列を配列の要素として返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3188">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the characters in the `separator` parameter, and returns those substrings as elements of an array.</span></span>

 <span data-ttu-id="d5817-3189"><xref:System.String.Split%2A> メソッドは、大文字と小文字を区別する序数の並べ替え規則を使用して比較を実行することで、区切り記号を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3189">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="d5817-3190">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 列挙型」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3190">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>

### <a name="performance-considerations"></a><span data-ttu-id="d5817-3191">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-3191">Performance Considerations</span></span>
 <span data-ttu-id="d5817-3192"><xref:System.String.Split%2A> メソッドは、返された配列オブジェクトにメモリを割り当て、各配列要素の <xref:System.String> オブジェクトを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3192">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="d5817-3193">アプリケーションで最適なパフォーマンスが求められる場合、またはアプリケーションでメモリ割り当てを管理することが重要な場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッド、および必要に応じて <xref:System.String.Compare%2A> メソッドを使用して、文字列内の部分文字列を検索することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3193">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>

 <span data-ttu-id="d5817-3194">文字列を区切り文字で分割する場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッドを使用して、文字列内の区切り文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3194">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="d5817-3195">区切り文字列で文字列を分割する場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッドを使用して、区切り記号の文字列の最初の文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3195">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="d5817-3196">次に、<xref:System.String.Compare%2A> メソッドを使用して、その最初の文字の後の文字が区切り記号の文字列の残りの文字と等しいかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3196">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>

 <span data-ttu-id="d5817-3197">また、同じ文字セットを使用して複数の <xref:System.String.Split%2A> メソッドの呼び出しで文字列を分割する場合は、1つの配列を作成し、各メソッド呼び出しで参照することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3197">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="d5817-3198">これにより、各メソッド呼び出しのオーバーヘッドが大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3198">This significantly reduces the additional overhead of each method call.</span></span>



## Examples
 <span data-ttu-id="d5817-3199">次の例では、<xref:System.StringSplitOptions> 列挙体を使用して、<xref:System.String.Split%2A> メソッドによって生成される部分文字列を含めたり除外したりします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3199">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>

 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp-interactive[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-3200"><paramref name="options" /> は <see cref="T:System.StringSplitOptions" /> 値のいずれでもありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3200"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3201">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、<see cref="M:System.String.Split(System.Char[])" /> メソッドに <see langword="null" /> または文字が含まれていない <paramref name="separator" /> が渡された場合、メソッドは文字列を分割するために少し異なる文字のセットを使用します。これは、<see cref="M:System.String.Trim(System.Char[])" /> メソッドが文字列をトリミングする場合とは異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3201">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="d5817-3202">.NET Framework 4 以降では、両方のメソッドで同じセットの Unicode 空白文字が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3202">Starting with the .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string separator, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : string * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-3203">この文字列内の部分文字列を区切る文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3203">A string that delimits the substrings in this string.</span></span></param>
        <param name="options"><span data-ttu-id="d5817-3204">分割操作で、戻り値から空の部分文字列を省略する必要があるかどうかを決定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-3204">One of the enumeration values that determines whether the split operation should omit empty substrings from the return value.</span></span></param>
        <summary><span data-ttu-id="d5817-3205">指定された文字列の区切り記号に基づいて文字列を部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3205">Splits a string into substrings that are based on the provided string separator.</span></span></summary>
        <returns><span data-ttu-id="d5817-3206"><paramref name="separator" /> によって区切られた、このインスタンスの部分文字列を要素に格納する配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3206">An array whose elements contain the substrings from this instance that are delimited by <paramref name="separator" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string[] separator, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string[] separator, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String[],System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String(), options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;System::String ^&gt; ^ separator, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : string[] * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-3207">この文字列から部分文字列を取り出すために区切り文字として使用する文字列配列。区切り文字が含まれていない空の配列。または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3207">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="options"><span data-ttu-id="d5817-3208">返される配列から空の配列要素を省略する場合は <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />。返される配列に空の配列要素も含める場合は <see cref="F:System.StringSplitOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3208"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span></span></param>
        <summary><span data-ttu-id="d5817-3209">配列内の文字列に基づいて文字列を部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3209">Splits a string into substrings based on the strings in an array.</span></span> <span data-ttu-id="d5817-3210">部分文字列が空の配列の要素を含めるかどうかを指定することができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3210">You can specify whether the substrings include empty array elements.</span></span></summary>
        <returns><span data-ttu-id="d5817-3211">この文字列を、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字列) で区切ることによって取り出された部分文字列を格納する配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3211">An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />.</span></span> <span data-ttu-id="d5817-3212">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3212">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3213">文字列が既知の文字列セットで区切られている場合は、<xref:System.String.Split%2A> メソッドを使用して、文字列を部分文字列に区切ることができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3213">When a string is delimited by a known set of strings, you can use the <xref:System.String.Split%2A> method to separate it into substrings.</span></span>

### <a name="return-value-details"></a><span data-ttu-id="d5817-3214">戻り値の詳細</span><span class="sxs-lookup"><span data-stu-id="d5817-3214">Return value details</span></span>
 <span data-ttu-id="d5817-3215">区切り記号文字列は、返される配列の要素には含まれません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3215">Delimiter strings are not included in the elements of the returned array.</span></span> <span data-ttu-id="d5817-3216">たとえば、`separator` 配列に文字列 "--" が含まれていて、現在の文字列インスタンスの値が "aa--bb-cc" である場合、メソッドは、"aa"、"bb"、および "cc" という3つの要素を含む配列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3216">For example, if the `separator` array includes the string "--" and the value of the current string instance is "aa--bb-cc", the method returns an array that contains three elements: "aa", "bb", and "cc".</span></span>

 <span data-ttu-id="d5817-3217">このインスタンスに `separator`内のいずれの文字列も含まれていない場合、返される配列は、このインスタンスを格納する1つの要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3217">If this instance does not contain any of the strings in `separator`, the returned array consists of a single element that contains this instance.</span></span>

 <span data-ttu-id="d5817-3218">`options` パラメーターが <xref:System.StringSplitOptions.RemoveEmptyEntries> で、このインスタンスの長さが0の場合、メソッドは空の配列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3218">If the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, the method returns an empty array.</span></span>

 <span data-ttu-id="d5817-3219">`separator` の各要素は、1つ以上の文字で構成される個別の区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3219">Each element of `separator` defines a separate delimiter that consists of one or more characters.</span></span> <span data-ttu-id="d5817-3220">`options` 引数が <xref:System.StringSplitOptions.None>で、2つの区切り記号が隣接している場合、またはこのインスタンスの先頭または末尾に区切り記号がある場合は、対応する配列要素に <xref:System.String.Empty?displayProperty=nameWithType>が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3220">If the `options` argument is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-3221">たとえば、`separator` に "-" と "\_" の2つの要素が含まれている場合、文字列インスタンスの値は "-\_aa-\_" になり、`options` 引数の値が <xref:System.StringSplitOptions.None>になると、メソッドは次の5つの要素を含む配列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3221">For example, if `separator` includes  two elements, "-" and "\_", the value of the string instance is "-\_aa-\_", and the value of   the `options` argument is <xref:System.StringSplitOptions.None>, the method returns a sting array with the following five elements:</span></span>

1.  <span data-ttu-id="d5817-3222"><xref:System.String.Empty?displayProperty=nameWithType>。インデックス0の "-" 部分文字列の前にある空の文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3222"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that precedes the "-" substring at index 0.</span></span>

2.  <span data-ttu-id="d5817-3223"><xref:System.String.Empty?displayProperty=nameWithType>。インデックス0の "-" 部分文字列とインデックス1の "_" 部分文字列の間の空の文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3223"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string between the "-" substring at index 0 and the "_" substring at index 1.</span></span>

3.  <span data-ttu-id="d5817-3224">"aa"、</span><span class="sxs-lookup"><span data-stu-id="d5817-3224">"aa",</span></span>

4.  <span data-ttu-id="d5817-3225"><xref:System.String.Empty?displayProperty=nameWithType>。インデックス4の "_" 部分文字列の後にある空の文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3225"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "_" substring at index 4.</span></span>

5.  <span data-ttu-id="d5817-3226"><xref:System.String.Empty?displayProperty=nameWithType>。インデックス5の "-" 部分文字列の後に続く空の文字列を表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3226"><xref:System.String.Empty?displayProperty=nameWithType>, which represents the empty string that follows the "-" substring at index 5.</span></span>

### <a name="the-separator-array"></a><span data-ttu-id="d5817-3227">区切り記号配列</span><span class="sxs-lookup"><span data-stu-id="d5817-3227">The separator array</span></span>
 <span data-ttu-id="d5817-3228">`separator` 内のいずれかの要素が複数の文字で構成されている場合、部分文字列全体が区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3228">If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter.</span></span> <span data-ttu-id="d5817-3229">たとえば、`separator` 内のいずれかの要素が "10" の場合、文字列 "This10is10a10string" を分割しようとしています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3229">For example, if one of the elements in `separator` is "10", attempting to split the string "This10is10a10string."</span></span> <span data-ttu-id="d5817-3230">は、次の4つの要素から成る配列を返します: {"This"、"is"、"a"、"string"</span><span class="sxs-lookup"><span data-stu-id="d5817-3230">returns the following four-element array: { "This", "is", "a", "string."</span></span> <span data-ttu-id="d5817-3231">}.</span><span class="sxs-lookup"><span data-stu-id="d5817-3231">}.</span></span>

 <span data-ttu-id="d5817-3232">`separator` パラメーターが `null` の場合、または文字が含まれていない場合は、空白文字が区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3232">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="d5817-3233">空白文字は Unicode 標準によって定義され、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> メソッドに渡される場合は `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3233">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>

 <span data-ttu-id="d5817-3234">このメソッドオーバーロードの呼び出しの `separator` パラメーターが `null`場合、コンパイラのオーバーロードの解決は失敗します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3234">If the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="d5817-3235">呼び出されたメソッドを明確に識別するには、コードで `null`の型を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3235">To unambiguously identify the called method, your code must indicate the type of the `null`.</span></span> <span data-ttu-id="d5817-3236">次の例は、このオーバーロードを明確に識別するいくつかの方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3236">The following example shows several ways to unambiguously identify this overload.</span></span>

 [!code-csharp[System.String.Split#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#6)]
 [!code-vb[System.String.Split#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#6)]

### <a name="comparison-details"></a><span data-ttu-id="d5817-3237">比較の詳細</span><span class="sxs-lookup"><span data-stu-id="d5817-3237">Comparison details</span></span>
 <span data-ttu-id="d5817-3238"><xref:System.String.Split%2A> メソッドは、`separator` パラメーターの1つ以上の文字列で区切られたこの文字列の部分文字列を抽出し、それらの部分文字列を配列の要素として返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3238">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.</span></span>

 <span data-ttu-id="d5817-3239"><xref:System.String.Split%2A> メソッドは、大文字と小文字を区別する序数の並べ替え規則を使用して比較を実行することで、区切り記号を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3239">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="d5817-3240">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 列挙型」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3240">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>

 <span data-ttu-id="d5817-3241"><xref:System.String.Split%2A> メソッドは、値が `null` または空の文字列 ("") である `separator` のすべての要素を無視します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3241">The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string ("").</span></span>

 <span data-ttu-id="d5817-3242">`separator` の文字列に共通の文字が含まれている場合に、あいまいな結果が得られないようにするには、<xref:System.String.Split%2A> 操作をインスタンスの最初から最後まで続行し、インスタンス内の区切り記号と等しい `separator` の最初の要素と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3242">To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> operation proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance.</span></span> <span data-ttu-id="d5817-3243">インスタンスで部分文字列が検出される順序は、`separator`内の要素の順序よりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3243">The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.</span></span>

 <span data-ttu-id="d5817-3244">たとえば、値が "abcdef" であるインスタンスについて考えてみます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3244">For example, consider an instance whose value is "abcdef".</span></span> <span data-ttu-id="d5817-3245">`separator` の最初の要素が "ef" で、2番目の要素が "bcde" の場合、split 操作の結果は、"a" と "f" の2つの要素を含む文字列配列になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3245">If the first element in `separator` was "ef" and the second element was "bcde", the result of the split operation would be a string array that contains two elements, "a" and "f".</span></span> <span data-ttu-id="d5817-3246">これは、"bcde" というインスタンス内の部分文字列が検出され、部分文字列 "f" が検出される前に `separator` 内の要素と一致するためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-3246">This is because the substring in the instance, "bcde", is encountered and matches an element in `separator` before the substring "f" is encountered.</span></span>

 <span data-ttu-id="d5817-3247">ただし、`separator` の最初の要素が "bcd" で、2番目の要素が "bc" の場合、split 操作の結果は、"a" と "ef" の2つの要素を含む文字列配列になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3247">However, if the first element of `separator` was "bcd" and the second element was "bc", the result of the split operation would be a string array that contains two elements, "a" and "ef".</span></span> <span data-ttu-id="d5817-3248">これは、"bcd" が、インスタンス内の区切り記号に一致する `separator` の最初の区切り記号であるためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-3248">This is because "bcd" is the first delimiter in `separator` that matches a delimiter in the instance.</span></span> <span data-ttu-id="d5817-3249">最初の要素が "bc" で、2番目の要素が "bcd" であるために、区切り記号の順序が逆になった場合、結果は、"a" と "def" の2つの要素を含む文字列配列になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3249">If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be a string array that contains two elements,  "a" and "def".</span></span>

### <a name="performance-considerations"></a><span data-ttu-id="d5817-3250">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-3250">Performance considerations</span></span>
 <span data-ttu-id="d5817-3251"><xref:System.String.Split%2A> メソッドは、返された配列オブジェクトにメモリを割り当て、各配列要素の <xref:System.String> オブジェクトを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3251">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="d5817-3252">アプリケーションで最適なパフォーマンスが求められる場合、またはアプリケーションでメモリ割り当てを管理することが重要な場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッド、および必要に応じて <xref:System.String.Compare%2A> メソッドを使用して、文字列内の部分文字列を検索することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3252">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>

 <span data-ttu-id="d5817-3253">文字列を区切り文字で分割する場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッドを使用して、文字列内の区切り文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3253">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="d5817-3254">区切り文字列で文字列を分割する場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッドを使用して、区切り記号の文字列の最初の文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3254">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="d5817-3255">次に、<xref:System.String.Compare%2A> メソッドを使用して、その最初の文字の後の文字が区切り記号の文字列の残りの文字と等しいかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3255">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>

 <span data-ttu-id="d5817-3256">また、同じ文字セットを使用して複数の <xref:System.String.Split%2A> メソッドの呼び出しで文字列を分割する場合は、1つの配列を作成し、各メソッド呼び出しで参照することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3256">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="d5817-3257">これにより、各メソッド呼び出しのオーバーヘッドが大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3257">This significantly reduces the additional overhead of each method call.</span></span>



## Examples
 <span data-ttu-id="d5817-3258">次の例は、文字列の <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29?displayProperty=nameWithType> メソッドを呼び出すことによって返される配列の違いを示しています。これは、`options` パラメーターを <xref:System.StringSplitOptions.None?displayProperty=nameWithType> および <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>と同じにしたものです。</span><span class="sxs-lookup"><span data-stu-id="d5817-3258">The following example illustrates the difference in the arrays returned by calling a string's <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29?displayProperty=nameWithType> method with its `options` parameter equal to <xref:System.StringSplitOptions.None?displayProperty=nameWithType> and <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>.</span></span>

 [!code-csharp-interactive[System.String.Split#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/Split.cs#1)]
 [!code-vb[System.String.Split#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/Split.vb#1)]

 <span data-ttu-id="d5817-3259">次の例では、句読点と空白文字を含む区切り記号の配列を定義しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3259">The following example defines an array of separators that include punctuation and white-space characters.</span></span> <span data-ttu-id="d5817-3260">この配列を <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> の値と共に <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> メソッドに渡すと、文字列の個々の単語で構成される配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3260">Passing this array along with a value of <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType> to the <xref:System.String.Split%28System.String%5B%5D%2CSystem.StringSplitOptions%29> method returns an array that consists of the individual words from the string.</span></span>

 [!code-csharp-interactive[System.String.Split#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split7.cs#7)]
 [!code-vb[System.String.Split#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split7.vb#7)]

 <span data-ttu-id="d5817-3261">`options` 引数を <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>に設定してメソッドが呼び出されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3261">Note that the method is called with the `options` argument set to <xref:System.StringSplitOptions.RemoveEmptyEntries?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d5817-3262">これにより、返される配列に、区切り記号と空白文字の間の空の部分文字列の一致を表す <xref:System.String.Empty?displayProperty=nameWithType> 値が含まれないようにします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3262">This prevents the returned array from including <xref:System.String.Empty?displayProperty=nameWithType> values that represent empty substring matches between punctuation marks and white-space characters.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-3263"><paramref name="options" /> は <see cref="T:System.StringSplitOptions" /> 値のいずれでもありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3263"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3264">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、<see cref="M:System.String.Split(System.Char[])" /> メソッドに <see langword="null" /> または文字が含まれていない <paramref name="separator" /> が渡された場合、メソッドは文字列を分割するために少し異なる文字のセットを使用します。これは、<see cref="M:System.String.Trim(System.Char[])" /> メソッドが文字列をトリミングする場合とは異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3264">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="d5817-3265">.NET Framework 4 以降では、両方のメソッドで同じセットの Unicode 空白文字が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3265">Starting with the .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char separator, int count, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char, count As Integer, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : char * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-3266">このインスタンス内の部分文字列を区切る文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-3266">A character that delimits the substrings in this instance.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-3267">配列に必要な要素の最大数。</span><span class="sxs-lookup"><span data-stu-id="d5817-3267">The maximum number of elements expected in the array.</span></span></param>
        <param name="options"><span data-ttu-id="d5817-3268">分割操作で、戻り値から空の部分文字列を省略する必要があるかどうかを決定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-3268">One of the enumeration values that determines whether the split operation should omit empty substrings from the return value.</span></span></param>
        <summary><span data-ttu-id="d5817-3269">指定された文字区切り記号に基づいて文字列を最大数の部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3269">Splits a string into a maximum number substrings based on the provided character separator.</span></span></summary>
        <returns><span data-ttu-id="d5817-3270"><paramref name="separator" /> で区切られた、このインスタンスの最大 <paramref name="count" /> の部分文字列を要素に格納する配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3270">An array whose elements contain at most <paramref name="count" /> substrings from this instance that are delimited by <paramref name="separator" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3271">文字列が既に1回 `count` 分割されていても、文字列の末尾に達していない場合、返された配列の最後の文字列には、このインスタンスの末尾の部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3271">If the string has already been split `count` - 1 times, but the end of the string has not been reached, then the last string in the returned array will contain this instance's remaining trailing substring, untouched.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (char[] separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(char[] separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As Char(), count As Integer, options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;char&gt; ^ separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : char[] * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.Char[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-3272">この文字列から部分文字列を取り出すために区切り文字として使用する文字配列、区切り文字が含まれていない空の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3272">A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-3273">返される最大の部分文字列数。</span><span class="sxs-lookup"><span data-stu-id="d5817-3273">The maximum number of substrings to return.</span></span></param>
        <param name="options"><span data-ttu-id="d5817-3274">返される配列から空の配列要素を省略する場合は <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />。返される配列に空の配列要素も含める場合は <see cref="F:System.StringSplitOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3274"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span></span></param>
        <summary><span data-ttu-id="d5817-3275">配列内の文字に基づいて文字列を最大数の部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3275">Splits a string into a maximum number of substrings based on the characters in an array.</span></span></summary>
        <returns><span data-ttu-id="d5817-3276">この文字列を、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字) で区切ることによって取り出された部分文字列を格納する配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3276">An array whose elements contain the substrings in this string that are delimited by one or more characters in <paramref name="separator" />.</span></span> <span data-ttu-id="d5817-3277">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3277">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3278">区切り文字は、返される配列の要素には含まれません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3278">Delimiter characters are not included in the elements of the returned array.</span></span>

 <span data-ttu-id="d5817-3279">このインスタンスに `separator`内の文字が含まれていない場合、または `count` パラメーターが1の場合、返される配列は、このインスタンスを格納する1つの要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3279">If this instance does not contain any of the characters in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="d5817-3280">`separator` パラメーターが `null` の場合、または文字が含まれていない場合は、空白文字が区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3280">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="d5817-3281">空白文字は Unicode 標準によって定義され、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> メソッドに渡される場合は `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3281">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d5817-3282">ただし、このメソッドオーバーロードの呼び出しの `separator` パラメーターが `null`場合、コンパイラのオーバーロードの解決は失敗します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3282">However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="d5817-3283">呼び出されたメソッドを明確に識別するには、コードが null の型を示す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3283">To unambiguously identify the called method, your code must indicate the type of the null.</span></span> <span data-ttu-id="d5817-3284">次の例は、このオーバーロードを明確に識別するいくつかの方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3284">The following example shows several ways to unambiguously identify this overload.</span></span>

 [!code-csharp[System.String.Split#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#3)]
 [!code-vb[System.String.Split#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#3)]

 <span data-ttu-id="d5817-3285">`count` パラメーターがゼロの場合、または `options` パラメーターが <xref:System.StringSplitOptions.RemoveEmptyEntries> で、このインスタンスの長さがゼロの場合は、空の配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3285">If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.</span></span>

 <span data-ttu-id="d5817-3286">`separator` の各要素は、個別の区切り文字を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3286">Each element of `separator` defines a separate delimiter character.</span></span> <span data-ttu-id="d5817-3287">`options` パラメーターが <xref:System.StringSplitOptions.None>で、2つの区切り記号が隣接している場合、またはこのインスタンスの先頭または末尾に区切り記号がある場合は、対応する配列要素に <xref:System.String.Empty?displayProperty=nameWithtype>が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3287">If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

 <span data-ttu-id="d5817-3288">このインスタンスに `count` 複数の部分文字列が含まれている場合は、最初の `count`-1 の部分文字列が戻り値の1番目の `count`-1 要素から返され、このインスタンスの残りの文字が戻り値の最後の要素に返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3288">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>

 <span data-ttu-id="d5817-3289">`count` が部分文字列の数より大きい場合は、使用可能な部分文字列が返され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3289">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>

### <a name="performance-considerations"></a><span data-ttu-id="d5817-3290">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-3290">Performance Considerations</span></span>
 <span data-ttu-id="d5817-3291"><xref:System.String.Split%2A> メソッドは、返された配列オブジェクトにメモリを割り当て、各配列要素の <xref:System.String> オブジェクトを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3291">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="d5817-3292">アプリケーションで最適なパフォーマンスが求められる場合、またはアプリケーションでメモリ割り当てを管理することが重要な場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッド、および必要に応じて <xref:System.String.Compare%2A> メソッドを使用して、文字列内の部分文字列を検索することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3292">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>

 <span data-ttu-id="d5817-3293">文字列を区切り文字で分割する場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッドを使用して、文字列内の区切り文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3293">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="d5817-3294">区切り文字列で文字列を分割する場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッドを使用して、区切り記号の文字列の最初の文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3294">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="d5817-3295">次に、<xref:System.String.Compare%2A> メソッドを使用して、その最初の文字の後の文字が区切り記号の文字列の残りの文字と等しいかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3295">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>

 <span data-ttu-id="d5817-3296">また、同じ文字セットを使用して複数の <xref:System.String.Split%2A> メソッドの呼び出しで文字列を分割する場合は、1つの配列を作成し、各メソッド呼び出しで参照することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3296">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="d5817-3297">これにより、各メソッド呼び出しのオーバーヘッドが大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3297">This significantly reduces the additional overhead of each method call.</span></span>



## Examples
 <span data-ttu-id="d5817-3298">次の例では、<xref:System.StringSplitOptions> 列挙体を使用して、<xref:System.String.Split%2A> メソッドによって生成される部分文字列を含めたり除外したりします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3298">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>

 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp-interactive[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-3299"><paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3299"><paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-3300"><paramref name="options" /> は <see cref="T:System.StringSplitOptions" /> 値のいずれでもありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3300"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3301">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、<see cref="M:System.String.Split(System.Char[])" /> メソッドに <see langword="null" /> または文字が含まれていない <paramref name="separator" /> が渡された場合、メソッドは文字列を分割するために少し異なる文字のセットを使用します。これは、<see cref="M:System.String.Trim(System.Char[])" /> メソッドが文字列をトリミングする場合とは異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3301">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="d5817-3302">.NET Framework 4 以降では、両方のメソッドで同じセットの Unicode 空白文字が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3302">Starting with the .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string separator, int count, StringSplitOptions options = System.StringSplitOptions.None);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String,System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String, count As Integer, Optional options As StringSplitOptions = System.StringSplitOptions.None) As String()" />
      <MemberSignature Language="F#" Value="member this.Split : string * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-3303">このインスタンス内の部分文字列を区切る文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3303">A string that delimits the substrings in this instance.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-3304">配列に必要な要素の最大数。</span><span class="sxs-lookup"><span data-stu-id="d5817-3304">The maximum number of elements expected in the array.</span></span></param>
        <param name="options"><span data-ttu-id="d5817-3305">分割操作で、戻り値から空の部分文字列を省略する必要があるかどうかを決定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-3305">One of the enumeration values that determines whether the split operation should omit empty substrings from the return value.</span></span></param>
        <summary><span data-ttu-id="d5817-3306">指定された文字列区切り記号に基づいて文字列を最大数の部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3306">Splits a string into a maximum number of substrings based on the provided string separator.</span></span></summary>
        <returns><span data-ttu-id="d5817-3307"><paramref name="separator" /> で区切られた、このインスタンスの最大 <paramref name="count" /> の部分文字列を要素に格納する配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3307">An array whose elements contain at most <paramref name="count" /> substrings from this instance that are delimited by <paramref name="separator" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3308">文字列が既に1回 `count` 分割されていても、文字列の末尾に達していない場合、返された配列の最後の文字列には、このインスタンスの末尾の部分文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3308">If the string has already been split `count` - 1 times, but the end of the string has not been reached, then the last string in the returned array will contain this instance's remaining trailing substring, untouched.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public string[] Split (string[] separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] Split(string[] separator, int32 count, valuetype System.StringSplitOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (separator As String(), count As Integer, options As StringSplitOptions) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ Split(cli::array &lt;System::String ^&gt; ^ separator, int count, StringSplitOptions options);" />
      <MemberSignature Language="F#" Value="member this.Split : string[] * int * StringSplitOptions -&gt; string[]" Usage="string.Split (separator, count, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.StringSplitOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="separator"><span data-ttu-id="d5817-3309">この文字列から部分文字列を取り出すために区切り文字として使用する文字列配列。区切り文字が含まれていない空の配列。または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3309">A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <see langword="null" />.</span></span></param>
        <param name="count"><span data-ttu-id="d5817-3310">返される最大の部分文字列数。</span><span class="sxs-lookup"><span data-stu-id="d5817-3310">The maximum number of substrings to return.</span></span></param>
        <param name="options"><span data-ttu-id="d5817-3311">返される配列から空の配列要素を省略する場合は <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />。返される配列に空の配列要素も含める場合は <see cref="F:System.StringSplitOptions.None" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3311"><see cref="F:System.StringSplitOptions.RemoveEmptyEntries" /> to omit empty array elements from the array returned; or <see cref="F:System.StringSplitOptions.None" /> to include empty array elements in the array returned.</span></span></param>
        <summary><span data-ttu-id="d5817-3312">配列内の文字列に基づいて文字列を最大数の部分文字列に分割します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3312">Splits a string into a maximum number of substrings based on the strings in an array.</span></span> <span data-ttu-id="d5817-3313">部分文字列が空の配列の要素を含めるかどうかを指定することができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3313">You can specify whether the substrings include empty array elements.</span></span></summary>
        <returns><span data-ttu-id="d5817-3314">この文字列を、<paramref name="separator" /> 配列のいずれかまたは複数の要素 (文字列) で区切ることによって取り出された部分文字列を格納する配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3314">An array whose elements contain the substrings in this string that are delimited by one or more strings in <paramref name="separator" />.</span></span> <span data-ttu-id="d5817-3315">詳細については、「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3315">For more information, see the Remarks section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

### <a name="return-value-details"></a><span data-ttu-id="d5817-3316">戻り値の詳細</span><span class="sxs-lookup"><span data-stu-id="d5817-3316">Return value details</span></span>
 <span data-ttu-id="d5817-3317">区切り記号文字列は、返される配列の要素には含まれません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3317">Delimiter strings are not included in the elements of the returned array.</span></span>

 <span data-ttu-id="d5817-3318">このインスタンスに `separator`内のいずれかの文字列が含まれていない場合、または `count` パラメーターが1の場合、返される配列は、このインスタンスを格納する1つの要素で構成されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3318">If this instance does not contain any of the strings in `separator`, or the `count` parameter is 1, the returned array consists of a single element that contains this instance.</span></span> <span data-ttu-id="d5817-3319">`separator` パラメーターが `null` の場合、または文字が含まれていない場合は、空白文字が区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3319">If the `separator` parameter is `null` or contains no characters, white-space characters are assumed to be the delimiters.</span></span> <span data-ttu-id="d5817-3320">空白文字は Unicode 標準によって定義され、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> メソッドに渡される場合は `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3320">White-space characters are defined by the Unicode standard and return `true` if they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d5817-3321">ただし、このメソッドオーバーロードの呼び出しの `separator` パラメーターが `null`場合、コンパイラのオーバーロードの解決は失敗します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3321">However, if the `separator` parameter in the call to this method overload is `null`, compiler overload resolution fails.</span></span> <span data-ttu-id="d5817-3322">呼び出されたメソッドを明確に識別するには、コードで `null`の型を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3322">To unambiguously identify the called method, your code must indicate the type of the `null`.</span></span> <span data-ttu-id="d5817-3323">次の例は、このオーバーロードを明確に識別するいくつかの方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3323">The following example shows several ways to unambiguously identify this overload.</span></span>

 [!code-csharp[System.String.Split#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Split/cs/split3.cs#4)]
 [!code-vb[System.String.Split#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Split/vb/split3.vb#4)]

 <span data-ttu-id="d5817-3324">`count` パラメーターがゼロの場合、または `options` パラメーターが <xref:System.StringSplitOptions.RemoveEmptyEntries> で、このインスタンスの長さがゼロの場合は、空の配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3324">If the `count` parameter is zero, or the `options` parameter is <xref:System.StringSplitOptions.RemoveEmptyEntries> and the length of this instance is zero, an empty array is returned.</span></span>

 <span data-ttu-id="d5817-3325">`separator` の各要素は、1つ以上の文字で構成される個別の区切り記号を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3325">Each element of `separator` defines a separate delimiter that consists of one or more characters.</span></span> <span data-ttu-id="d5817-3326">`options` パラメーターが <xref:System.StringSplitOptions.None>で、2つの区切り記号が隣接している場合、またはこのインスタンスの先頭または末尾に区切り記号がある場合は、対応する配列要素に <xref:System.String.Empty?displayProperty=nameWithtype>が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3326">If the `options` parameter is <xref:System.StringSplitOptions.None>, and two delimiters are adjacent or a delimiter is found at the beginning or end of this instance, the corresponding array element contains <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

 <span data-ttu-id="d5817-3327">このインスタンスに `count` 複数の部分文字列が含まれている場合は、最初の `count`-1 の部分文字列が戻り値の1番目の `count`-1 要素から返され、このインスタンスの残りの文字が戻り値の最後の要素に返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3327">If there are more than `count` substrings in this instance, the first `count` minus 1 substrings are returned in the first `count` minus 1 elements of the return value, and the remaining characters in this instance are returned in the last element of the return value.</span></span>

 <span data-ttu-id="d5817-3328">`count` が部分文字列の数より大きい場合は、使用可能な部分文字列が返され、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3328">If `count` is greater than the number of substrings, the available substrings are returned and no exception is thrown.</span></span>

### <a name="the-separator-array"></a><span data-ttu-id="d5817-3329">区切り記号配列</span><span class="sxs-lookup"><span data-stu-id="d5817-3329">The separator array</span></span>
 <span data-ttu-id="d5817-3330">`separator` 内のいずれかの要素が複数の文字で構成されている場合、部分文字列全体が区切り記号と見なされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3330">If any of the elements in `separator` consists of multiple characters, the entire substring is considered a delimiter.</span></span> <span data-ttu-id="d5817-3331">たとえば、`separator` 内のいずれかの要素が "10" の場合、文字列 "This10is10a10string" を分割しようとしています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3331">For example, if one of the elements in `separator` is "10", attempting to split the string "This10is10a10string."</span></span> <span data-ttu-id="d5817-3332">この4つの要素を持つ配列 {"This"、"is"、"a"、"string" を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3332">returns this four-element array: { "This", "is", "a", "string."</span></span> <span data-ttu-id="d5817-3333">}.</span><span class="sxs-lookup"><span data-stu-id="d5817-3333">}.</span></span>

### <a name="comparison-details"></a><span data-ttu-id="d5817-3334">比較の詳細</span><span class="sxs-lookup"><span data-stu-id="d5817-3334">Comparison details</span></span>
 <span data-ttu-id="d5817-3335"><xref:System.String.Split%2A> メソッドは、`separator` パラメーターの1つ以上の文字列で区切られたこの文字列の部分文字列を抽出し、それらの部分文字列を配列の要素として返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3335">The <xref:System.String.Split%2A> method extracts the substrings in this string that are delimited by one or more of the strings in the `separator` parameter, and returns those substrings as elements of an array.</span></span>

 <span data-ttu-id="d5817-3336"><xref:System.String.Split%2A> メソッドは、大文字と小文字を区別する序数の並べ替え規則を使用して比較を実行することで、区切り記号を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3336">The <xref:System.String.Split%2A> method looks for delimiters by performing comparisons using case-sensitive ordinal sort rules.</span></span> <span data-ttu-id="d5817-3337">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType> 列挙型」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3337">For more information about word, string, and ordinal sorts, see the <xref:System.Globalization.CompareOptions?displayProperty=nameWithType> enumeration.</span></span>

 <span data-ttu-id="d5817-3338"><xref:System.String.Split%2A> メソッドは、値が `null` または空の文字列 ("") である `separator` のすべての要素を無視します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3338">The <xref:System.String.Split%2A> method ignores any element of `separator` whose value is `null` or the empty string ("").</span></span>

 <span data-ttu-id="d5817-3339">`separator` 内の文字列に共通の文字が含まれている場合に、あいまいな結果を避けるために、<xref:System.String.Split%2A> メソッドは、インスタンスの値の先頭から末尾まで処理を進め、インスタンス内の区切り記号と等しい `separator` 内の最初の要素と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3339">To avoid ambiguous results when strings in `separator` have characters in common, the <xref:System.String.Split%2A> method proceeds from the beginning to the end of the value of the instance, and matches the first element in `separator` that is equal to a delimiter in the instance.</span></span> <span data-ttu-id="d5817-3340">インスタンスで部分文字列が検出される順序は、`separator`内の要素の順序よりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3340">The order in which substrings are encountered in the instance takes precedence over the order of elements in `separator`.</span></span>

 <span data-ttu-id="d5817-3341">たとえば、値が "abcdef" であるインスタンスについて考えてみます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3341">For example, consider an instance whose value is "abcdef".</span></span> <span data-ttu-id="d5817-3342">`separator` の最初の要素が "ef" で、2番目の要素が "bcde" の場合、分割操作の結果は "a" と "f" になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3342">If the first element in `separator` was "ef" and the second element was "bcde", the result of the split operation would be "a" and "f".</span></span> <span data-ttu-id="d5817-3343">これは、"bcde" というインスタンス内の部分文字列が検出され、部分文字列 "f" が検出される前に `separator` 内の要素と一致するためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-3343">This is because the substring in the instance, "bcde", is encountered and matches an element in `separator` before the substring "f" is encountered.</span></span>

 <span data-ttu-id="d5817-3344">ただし、`separator` の最初の要素が "bcd" で、2番目の要素が "bc" の場合、分割操作の結果は "a" と "ef" になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3344">However, if the first element of `separator` was "bcd" and the second element was "bc", the result of the split operation would be "a" and "ef".</span></span> <span data-ttu-id="d5817-3345">これは、"bcd" が、インスタンス内の区切り記号に一致する `separator` の最初の区切り記号であるためです。</span><span class="sxs-lookup"><span data-stu-id="d5817-3345">This is because "bcd" is the first delimiter in `separator` that matches a delimiter in the instance.</span></span> <span data-ttu-id="d5817-3346">最初の要素が "bc" で、2番目の要素が "bcd" であるために、区切り記号の順序が逆になった場合、結果は "a" と "def" になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3346">If the order of the separators was reversed so the first element was "bc" and the second element was "bcd", the result would be "a" and "def".</span></span>

### <a name="performance-considerations"></a><span data-ttu-id="d5817-3347">パフォーマンスに関する考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-3347">Performance considerations</span></span>
 <span data-ttu-id="d5817-3348"><xref:System.String.Split%2A> メソッドは、返された配列オブジェクトにメモリを割り当て、各配列要素の <xref:System.String> オブジェクトを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3348">The <xref:System.String.Split%2A> methods allocate memory for the returned array object and a <xref:System.String> object for each array element.</span></span> <span data-ttu-id="d5817-3349">アプリケーションで最適なパフォーマンスが求められる場合、またはアプリケーションでメモリ割り当てを管理することが重要な場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッド、および必要に応じて <xref:System.String.Compare%2A> メソッドを使用して、文字列内の部分文字列を検索することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3349">If your application requires optimal performance or if managing memory allocation is critical in your application, consider using the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method, and optionally the <xref:System.String.Compare%2A> method, to locate a substring within a string.</span></span>

 <span data-ttu-id="d5817-3350">文字列を区切り文字で分割する場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッドを使用して、文字列内の区切り文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3350">If you are splitting a string at a separator character, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate a separator character in the string.</span></span> <span data-ttu-id="d5817-3351">区切り文字列で文字列を分割する場合は、<xref:System.String.IndexOf%2A> または <xref:System.String.IndexOfAny%2A> メソッドを使用して、区切り記号の文字列の最初の文字を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3351">If you are splitting a string at a separator string, use the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOfAny%2A> method to locate the first character of the separator string.</span></span> <span data-ttu-id="d5817-3352">次に、<xref:System.String.Compare%2A> メソッドを使用して、その最初の文字の後の文字が区切り記号の文字列の残りの文字と等しいかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3352">Then use the <xref:System.String.Compare%2A> method to determine whether the characters after that first character are equal to the remaining characters of the separator string.</span></span>

 <span data-ttu-id="d5817-3353">また、同じ文字セットを使用して複数の <xref:System.String.Split%2A> メソッドの呼び出しで文字列を分割する場合は、1つの配列を作成し、各メソッド呼び出しで参照することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3353">In addition, if the same set of characters is used to split strings in multiple <xref:System.String.Split%2A> method calls, consider creating a single array and referencing it in each method call.</span></span> <span data-ttu-id="d5817-3354">これにより、各メソッド呼び出しのオーバーヘッドが大幅に減少します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3354">This significantly reduces the additional overhead of each method call.</span></span>



## Examples
 <span data-ttu-id="d5817-3355">次の例では、<xref:System.StringSplitOptions> 列挙体を使用して、<xref:System.String.Split%2A> メソッドによって生成される部分文字列を含めたり除外したりします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3355">The following example uses the <xref:System.StringSplitOptions> enumeration to include or exclude substrings generated by the <xref:System.String.Split%2A> method.</span></span>

 [!code-cpp[string.split3#1](~/samples/snippets/cpp/VS_Snippets_CLR/string.split3/CPP/omit.cpp#1)]
 [!code-csharp-interactive[string.split3#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.split3/CS/omit.cs#1)]
 [!code-vb[string.split3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.split3/VB/omit.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-3356"><paramref name="count" /> が負の値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3356"><paramref name="count" /> is negative.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-3357"><paramref name="options" /> は <see cref="T:System.StringSplitOptions" /> 値のいずれでもありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3357"><paramref name="options" /> is not one of the <see cref="T:System.StringSplitOptions" /> values.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3358">[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、<see cref="M:System.String.Split(System.Char[])" /> メソッドに <see langword="null" /> または文字が含まれていない <paramref name="separator" /> が渡された場合、メソッドは文字列を分割するために少し異なる文字のセットを使用します。これは、<see cref="M:System.String.Trim(System.Char[])" /> メソッドが文字列をトリミングする場合とは異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3358">In the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] and earlier versions, if the <see cref="M:System.String.Split(System.Char[])" /> method is passed a <paramref name="separator" /> that is <see langword="null" /> or contains no characters, the method uses a slightly different set of characters to split the string than the <see cref="M:System.String.Trim(System.Char[])" /> method does to trim the string.</span></span> <span data-ttu-id="d5817-3359">.NET Framework 4 以降では、両方のメソッドで同じセットの Unicode 空白文字が使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3359">Starting with the .NET Framework 4, both methods use an identical set of Unicode white-space characters.</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="StartsWith">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-3360">この文字列インスタンスの先頭が、指定した文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3360">Determines whether the beginning of this string instance matches a specified string.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(char value);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : char -&gt; bool" Usage="string.StartsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-3361">比較対象の文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-3361">The character to compare.</span></span></param>
        <summary><span data-ttu-id="d5817-3362">この文字列インスタンスが指定した文字で始まっているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3362">Determines whether this string instance starts with the specified character.</span></span></summary>
        <returns><span data-ttu-id="d5817-3363">この文字列の先頭が <paramref name="value" /> と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3363"><see langword="true" /> if <paramref name="value" /> matches the beginning of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3364">このメソッドは、現在のカルチャを使用して、単語 (大文字と小文字を区別し、カルチャに依存する) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3364">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string -&gt; bool" Usage="string.StartsWith value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-3365">比較対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3365">The string to compare.</span></span></param>
        <summary><span data-ttu-id="d5817-3366">この文字列インスタンスの先頭が、指定した文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3366">Determines whether the beginning of this string instance matches the specified string.</span></span></summary>
        <returns><span data-ttu-id="d5817-3367">この文字列の先頭が <paramref name="value" /> と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3367"><see langword="true" /> if <paramref name="value" /> matches the beginning of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3368">このメソッドは、`value` を、このインスタンスの先頭にある、`value`と同じ長さの部分文字列と比較し、等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3368">This method compares `value` to the substring at the beginning of this instance that is the same length as `value`, and returns an indication whether they are equal.</span></span> <span data-ttu-id="d5817-3369">同じにするには、`value` が空の文字列 (<xref:System.String.Empty?displayProperty=nameWithType>) であるか、この同じインスタンスへの参照であるか、またはこのインスタンスの先頭と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3369">To be equal, `value` must be an empty string (<xref:System.String.Empty?displayProperty=nameWithType>), must be a reference to this same instance, or must match the beginning of this instance.</span></span>

<span data-ttu-id="d5817-3370">このメソッドは、現在のカルチャを使用して、単語 (大文字と小文字を区別し、カルチャに依存する) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3370">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span>

## Examples

<span data-ttu-id="d5817-3371">次の例では、<xref:System.String.StartsWith%28System.String%29> メソッドを使用して、文字列の先頭から HTML 開始タグを削除する `StripStartTags` メソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3371">The following example defines a `StripStartTags` method that uses the <xref:System.String.StartsWith%28System.String%29> method to remove HTML start tags from the beginning of a string.</span></span> <span data-ttu-id="d5817-3372">`StripStartTags` メソッドは、行の先頭にある複数の HTML 開始タグが削除されるように、再帰的に呼び出されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3372">Note that the `StripStartTags` method is called recursively to ensure that multiple HTML start tags at the beginning of the line are removed.</span></span> <span data-ttu-id="d5817-3373">この例では、文字列に埋め込まれている HTML タグは削除されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3373">The example does not remove HTML tags embedded in a string.</span></span>

:::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringstartswith/CPP/stringstartswith.cpp" id="Snippet1":::
:::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringstartswith/CS/stringstartswith.cs" interactive="try-dotnet" id="Snippet1":::
:::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringstartswith/VB/stringstartswith.vb" id="Snippet1":::

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-3374"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3374"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3375">「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」で説明したように、既定値を置き換える文字列比較メソッドを呼び出さずに、パラメーターを明示的に指定する必要があるメソッドを呼び出すことを避けることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3375">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string comparison methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="d5817-3376">現在のカルチャの文字列比較規則を使用して文字列が特定の部分文字列で始まるかどうかを判断するには、その <paramref name="comparisonType" /> パラメーターに <see cref="F:System.StringComparison.CurrentCulture" /> の値を指定して、<see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /> メソッドのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3376">To determine whether a string begins with a particular substring by using the string comparison rules of the current culture, call the <see cref="M:System.String.StartsWith(System.String,System.StringComparison)" /> method overload with a value of <see cref="F:System.StringComparison.CurrentCulture" /> for its <paramref name="comparisonType" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.EndsWith(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value, StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value, valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String,System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String, comparisonType As StringComparison) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value, StringComparison comparisonType);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string * StringComparison -&gt; bool" Usage="string.StartsWith (value, comparisonType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="comparisonType" Type="System.StringComparison" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-3377">比較対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3377">The string to compare.</span></span></param>
        <param name="comparisonType"><span data-ttu-id="d5817-3378">この文字列と <paramref name="value" /> との比較方法を決定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="d5817-3378">One of the enumeration values that determines how this string and <paramref name="value" /> are compared.</span></span></param>
        <summary><span data-ttu-id="d5817-3379">指定された比較オプションを使って比較した場合に、この文字列インスタンスの先頭が、指定された文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3379">Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</span></span></summary>
        <returns><span data-ttu-id="d5817-3380">インスタンスが <see langword="true" /> で開始する場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3380"><see langword="true" /> if this instance begins with <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3381"><xref:System.String.StartsWith%2A> メソッドは、`value` パラメーターをこの文字列の先頭の部分文字列と比較し、等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3381">The <xref:System.String.StartsWith%2A> method compares the `value` parameter to the substring at the beginning of this string and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="d5817-3382">同じにするには、`value` がこの同じ文字列への参照であるか、空の文字列 ("") であるか、またはこの文字列の先頭と一致している必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3382">To be equal, `value` must be a reference to this same string, must be the empty string (""), or must match the beginning of this string.</span></span> <span data-ttu-id="d5817-3383"><xref:System.String.StartsWith%2A> メソッドによって実行される比較の種類は、`comparisonType` パラメーターの値によって異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3383">The type of comparison performed by the <xref:System.String.StartsWith%2A> method depends on the value of the `comparisonType` parameter.</span></span> <span data-ttu-id="d5817-3384">この比較では、現在のカルチャの規則 (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> と <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>) またはインバリアントカルチャ (<xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType> および <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>) を使用するか、コードポイント (<xref:System.StringComparison.Ordinal?displayProperty=nameWithType> または <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>) の文字単位の比較で構成することができます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3384">The comparison can use the conventions of the current culture (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType> and <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>) or the invariant culture (<xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType> and <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>), or it can consist of a character-by-character comparison of code points (<xref:System.StringComparison.Ordinal?displayProperty=nameWithType> or <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span></span> <span data-ttu-id="d5817-3385">比較では、大文字と小文字を区別することもできます (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>、<xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType>、または <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>)。または、大文字小文字を無視することもできます (<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>、<xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>、<xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="d5817-3385">The comparison can also be case-sensitive (<xref:System.StringComparison.CurrentCulture?displayProperty=nameWithType>, <xref:System.StringComparison.InvariantCulture?displayProperty=nameWithType>, or <xref:System.StringComparison.Ordinal?displayProperty=nameWithType>), or it can ignore case (<xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType>, <xref:System.StringComparison.InvariantCultureIgnoreCase?displayProperty=nameWithType>, <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType>).</span></span>



## Examples
 <span data-ttu-id="d5817-3386">次の例では、"the" という語で始まる長い文字列の先頭にある文字列 "the" を検索します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3386">The following example searches for the string "the" at the beginning of a longer string that begins with the word "The".</span></span> <span data-ttu-id="d5817-3387">この例の出力に示すように、カルチャを認識しないが大文字と小文字を区別する比較を実行する <xref:System.String.StartsWith%28System.String%2CSystem.StringComparison%29> メソッドへの呼び出しは、文字列に一致しません。一方、カルチャおよび大文字と小文字を区別しない比較を実行する呼び出しは文字列に一致します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3387">As the output from the example shows, a call to the <xref:System.String.StartsWith%28System.String%2CSystem.StringComparison%29> method that performs a culture-insensitive but case-sensitive comparison fails to match the string, while a call that performs a culture- and case-insensitive comparison matches the string.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.startswith/cpp/StartsWith2.cpp" id="Snippet2":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.startswith/cs/StartsWith2.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.startswith/vb/StartsWith2.vb" id="Snippet2":::

 <span data-ttu-id="d5817-3388">次の例では、文字列が特定の部分文字列で始まるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3388">The following example determines whether a string starts with a particular substring.</span></span> <span data-ttu-id="d5817-3389">2次元の文字列配列を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3389">It initializes a two-dimensional string array.</span></span> <span data-ttu-id="d5817-3390">2番目の次元の最初の要素には文字列が含まれ、2番目の要素には、最初の文字列の先頭で検索する文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3390">The first element in the second dimension contains a string, and the second element contains the string to search for at the start of the first string.</span></span> <span data-ttu-id="d5817-3391">結果は、カルチャの選択、case が無視されるかどうか、および序数に基づく比較が実行されるかどうかによって影響を受けます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3391">The results are affected by the choice of culture, whether case is ignored, and whether an ordinal comparison is performed.</span></span> <span data-ttu-id="d5817-3392">文字列インスタンスに合字が含まれている場合、その連続する文字とのカルチャに依存した比較が正常に行われることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3392">Note that when the string instance contains a ligature, culture-sensitive comparisons with its consecutive characters successfully match.</span></span>

 [!code-cpp[System.String.StartsWith#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.string.startswith/cpp/startswith1.cpp#1)]
 [!code-csharp[System.String.StartsWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.startswith/cs/startswith1.cs#1)]
 [!code-vb[System.String.StartsWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.startswith/vb/startswith1.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-3393"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3393"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-3394"><paramref name="comparisonType" /> が <see cref="T:System.StringComparison" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3394"><paramref name="comparisonType" /> is not a <see cref="T:System.StringComparison" /> value.</span></span></exception>
        <altmember cref="T:System.StringComparison" />
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool StartsWith(string value, bool ignoreCase, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartsWith (value As String, ignoreCase As Boolean, culture As CultureInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool StartsWith(System::String ^ value, bool ignoreCase, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.StartsWith : string * bool * System.Globalization.CultureInfo -&gt; bool" Usage="string.StartsWith (value, ignoreCase, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="ignoreCase" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-3395">比較対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3395">The string to compare.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d5817-3396">比較時に大文字と小文字の区別を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3396"><see langword="true" /> to ignore case during the comparison; otherwise, <see langword="false" />.</span></span></param>
        <param name="culture"><span data-ttu-id="d5817-3397">この文字列と <paramref name="value" /> との比較方法を決定するカルチャ情報。</span><span class="sxs-lookup"><span data-stu-id="d5817-3397">Cultural information that determines how this string and <paramref name="value" /> are compared.</span></span> <span data-ttu-id="d5817-3398"><paramref name="culture" /> が <see langword="null" /> の場合は、現在のカルチャが使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3398">If <paramref name="culture" /> is <see langword="null" />, the current culture is used.</span></span></param>
        <summary><span data-ttu-id="d5817-3399">指定されたカルチャを使って比較した場合に、この文字列インスタンスの先頭が、指定された文字列と一致するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3399">Determines whether the beginning of this string instance matches the specified string when compared using the specified culture.</span></span></summary>
        <returns><span data-ttu-id="d5817-3400"><see langword="true" /> パラメーターがこの文字列の先頭と一致する場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3400"><see langword="true" /> if the <paramref name="value" /> parameter matches the beginning of this string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3401">このメソッドは、`value` パラメーターを、この文字列の先頭にある、`value`と同じ長さの部分文字列と比較し、等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3401">This method compares the `value` parameter to the substring at the beginning of this string that is the same length as `value`, and returns a value that indicates whether they are equal.</span></span> <span data-ttu-id="d5817-3402">同じにするには、`value` が空の文字列 (<xref:System.String.Empty?displayProperty=nameWithType>) であるか、この同じインスタンスへの参照であるか、またはこのインスタンスの先頭と一致する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3402">To be equal, `value` must be an empty string (<xref:System.String.Empty?displayProperty=nameWithType>), must be a reference to this same instance, or must match the beginning of this instance.</span></span>

 <span data-ttu-id="d5817-3403">このメソッドは、指定された大文字と小文字の区別とカルチャを使用して比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3403">This method performs a comparison using the specified casing and culture.</span></span>



## Examples
 <span data-ttu-id="d5817-3404">次の例では、文字列が別の文字列の先頭にあるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3404">The following example determines whether a string occurs at the beginning of another string.</span></span> <span data-ttu-id="d5817-3405"><xref:System.String.StartsWith%2A> メソッドは、大文字と小文字の区別、大文字と小文字の区別、および検索結果に影響を与えるさまざまなカルチャを使用して、複数回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3405">The <xref:System.String.StartsWith%2A> method is called several times using case sensitivity, case insensitivity, and different cultures that influence the results of the search.</span></span>

 [!code-csharp[system.string.StartsWithCI#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.StartsWithCI/cs/swci.cs#1)]
 [!code-vb[system.string.StartsWithCI#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.StartsWithCI/vb/swci.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-3406"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3406"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Substring">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-3407">インスタンスから部分文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3407">Retrieves a substring from this instance.</span></span>

 <span data-ttu-id="d5817-3408">このメンバーはオーバーロードされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3408">This member is overloaded.</span></span> <span data-ttu-id="d5817-3409">構文、使用方法、例など、このメンバーの詳細については、オーバーロード リストで名前をクリックしてください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3409">For complete information about this member, including syntax, usage, and examples, click a name in the overload list.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public string Substring (int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Substring(int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Substring(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substring (startIndex As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Substring(int startIndex);" />
      <MemberSignature Language="F#" Value="member this.Substring : int -&gt; string" Usage="string.Substring startIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="d5817-3410">このインスタンス内の部分文字列の 0 から始まる開始文字位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-3410">The zero-based starting character position of a substring in this instance.</span></span></param>
        <summary><span data-ttu-id="d5817-3411">インスタンスから部分文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3411">Retrieves a substring from this instance.</span></span> <span data-ttu-id="d5817-3412">部分文字列は、文字列中の指定した文字の位置で開始し、文字列の末尾まで続きます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3412">The substring starts at a specified character position and continues to the end of the string.</span></span></summary>
        <returns><span data-ttu-id="d5817-3413">このインスタンスの <paramref name="startIndex" /> で始まる部分文字列と等価な文字列。または、<paramref name="startIndex" /> がこのインスタンスの長さと等しい場合は <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3413">A string that is equivalent to the substring that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3414"><xref:System.String.Substring%28System.Int32%29> メソッドを呼び出して、指定した文字位置から開始し、文字列の末尾で終わる文字列から部分文字列を抽出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3414">You call the <xref:System.String.Substring%28System.Int32%29> method to extract a substring from a string that begins at a specified character position and ends at the end of the string.</span></span> <span data-ttu-id="d5817-3415">開始文字の位置は0から始まります。つまり、文字列の最初の文字は、インデックス1ではなくインデックス0になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3415">The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.</span></span> <span data-ttu-id="d5817-3416">指定した文字位置から開始し、文字列の末尾の前にある部分文字列を抽出するには、<xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3416">To extract a substring that begins at a specified character position and ends before the end of the string, call the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3417">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3417">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3418">代わりに、現在の文字列の `startIndex` 位置から始まる新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3418">Instead, it returns a new string that begins at the `startIndex` position in the current string.</span></span>

 <span data-ttu-id="d5817-3419">特定の文字または文字シーケンスで始まる部分文字列を抽出するには、<xref:System.String.IndexOf%2A> や <xref:System.String.IndexOf%2A> などのメソッドを呼び出して、`startIndex`の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3419">To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> to get the value of `startIndex`.</span></span> <span data-ttu-id="d5817-3420">2番目の例では、これを示します。"=" 文字の後に1文字位置を開始するキー値を抽出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3420">The second example illustrates this; it extracts a key value that begins one character position after the "=" character.</span></span>

 <span data-ttu-id="d5817-3421">`startIndex` が0に等しい場合、メソッドは元の文字列を変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3421">If `startIndex` is equal to zero, the method returns the original string unchanged.</span></span>


## Examples
 <span data-ttu-id="d5817-3422">文字列から部分文字列を取得する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3422">The following example demonstrates obtaining a substring from a string.</span></span>

 [!code-cpp[System.String.Substring#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.String.Substring/cpp/Substring10.cpp#10)]
 [!code-csharp-interactive[System.String.Substring#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring10.cs#10)]
 [!code-vb[System.String.Substring#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring10.vb#10)]

 <span data-ttu-id="d5817-3423">次の例では、<xref:System.String.Substring%2A> メソッドを使用して、等号 ("=") 文字で区切られたキーと値のペアを区切ります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3423">The following example uses the <xref:System.String.Substring%2A> method to separate key/value pairs that are delimited by an equals ("=") character.</span></span>

 [!code-csharp-interactive[System.String.Substring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring1.cs#1)]
 [!code-vb[System.String.Substring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring1.vb#1)]

 <span data-ttu-id="d5817-3424">文字列内の equals 文字の位置を取得するには、<xref:System.String.IndexOf%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3424">The <xref:System.String.IndexOf%2A> method is used to get the position of the equals character in the string.</span></span> <span data-ttu-id="d5817-3425"><xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> メソッドを呼び出すと、キー名が抽出されます。キー名は、文字列の最初の文字から始まり、<xref:System.String.IndexOf%2A> メソッドへの呼び出しによって返される文字数に対してが拡張されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3425">The call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method extracts the key name, which starts from the first character in the string and extends for the number of characters returned by the call to the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="d5817-3426"><xref:System.String.Substring%28System.Int32%29> メソッドを呼び出すと、キーに割り当てられた値が抽出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3426">The call to the <xref:System.String.Substring%28System.Int32%29> method then extracts the value assigned to the key.</span></span> <span data-ttu-id="d5817-3427">これは、等号文字を超えて1文字位置から開始し、文字列の末尾まで拡張します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3427">It starts at one character position beyond the equals character and extends to the end of the string.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-3428"><paramref name="startIndex" /> が、0 未満か、またはこのインスタンスの長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3428"><paramref name="startIndex" /> is less than zero or greater than the length of this instance.</span></span></exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="M:System.String.Concat(System.Object)" />
        <altmember cref="M:System.String.Insert(System.Int32,System.String)" />
        <altmember cref="M:System.String.Join(System.String,System.String[])" />
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Split(System.Char[])" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public string Substring (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Substring(int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Substring(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Substring (startIndex As Integer, length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Substring(int startIndex, int length);" />
      <MemberSignature Language="F#" Value="member this.Substring : int * int -&gt; string" Usage="string.Substring (startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="d5817-3429">このインスタンス内の部分文字列の 0 から始まる開始文字位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-3429">The zero-based starting character position of a substring in this instance.</span></span></param>
        <param name="length"><span data-ttu-id="d5817-3430">部分文字列の文字数。</span><span class="sxs-lookup"><span data-stu-id="d5817-3430">The number of characters in the substring.</span></span></param>
        <summary><span data-ttu-id="d5817-3431">インスタンスから部分文字列を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3431">Retrieves a substring from this instance.</span></span> <span data-ttu-id="d5817-3432">この部分文字列は、指定した文字位置から開始し、指定した文字数の文字列です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3432">The substring starts at a specified character position and has a specified length.</span></span></summary>
        <returns><span data-ttu-id="d5817-3433">このインスタンスの <paramref name="startIndex" /> から始まる長さ <paramref name="length" /> の部分文字列と等価な文字列。または、<paramref name="startIndex" /> がこのインスタンスの長さと等しく、<paramref name="length" /> がゼロの場合は <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3433">A string that is equivalent to the substring of length <paramref name="length" /> that begins at <paramref name="startIndex" /> in this instance, or <see cref="F:System.String.Empty" /> if <paramref name="startIndex" /> is equal to the length of this instance and <paramref name="length" /> is zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3434"><xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> メソッドを呼び出して、指定した文字位置から開始し、文字列の末尾の前にある文字列から部分文字列を抽出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3434">You call the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method to extract a substring from a string that begins at a specified character position and ends before the end of the string.</span></span> <span data-ttu-id="d5817-3435">開始文字の位置は0から始まります。つまり、文字列の最初の文字は、インデックス1ではなくインデックス0になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3435">The starting character position is a zero-based; in other words, the first character in the string is at index 0, not index 1.</span></span> <span data-ttu-id="d5817-3436">指定した文字位置から開始し、文字列の末尾まで続く部分文字列を抽出するには、<xref:System.String.Substring%28System.Int32%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3436">To extract a substring that begins at a specified character position and continues to the end of the string, call the <xref:System.String.Substring%28System.Int32%29> method.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3437">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3437">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3438">代わりに、現在の文字列の `startIndex` 位置から始まる `length` 文字を含む新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3438">Instead, it returns a new string with `length` characters starting from the `startIndex` position in the current string.</span></span>

 <span data-ttu-id="d5817-3439">`length` パラメーターは、現在の文字列インスタンスから抽出する文字の合計数を表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3439">The `length` parameter represents the total number of characters to extract from the current string instance.</span></span> <span data-ttu-id="d5817-3440">これには、インデックス `startIndex`で見つかった開始文字も含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3440">This includes the starting character found at index  `startIndex`.</span></span>  <span data-ttu-id="d5817-3441">言い換えると、<xref:System.String.Substring%2A> メソッドは、インデックス `startIndex` からインデックス `startIndex` + `length`-1 に文字を抽出しようとします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3441">In other words, the <xref:System.String.Substring%2A> method attempts to extract characters from index `startIndex` to index `startIndex` + `length` - 1.</span></span>

 <span data-ttu-id="d5817-3442">特定の文字または文字シーケンスで始まる部分文字列を抽出するには、<xref:System.String.IndexOf%2A> や <xref:System.String.LastIndexOf%2A> などのメソッドを呼び出して、`startIndex`の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3442">To extract a substring that begins with a particular character or character sequence, call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the value of `startIndex`.</span></span>

 <span data-ttu-id="d5817-3443">部分文字列が `startIndex` から指定した文字シーケンスに拡張される場合、<xref:System.String.IndexOf%2A> や <xref:System.String.LastIndexOf%2A> などのメソッドを呼び出して、終了文字または文字シーケンスのインデックスを取得できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3443">If the substring extends from `startIndex` to a specified character sequence, you can call a method such as  <xref:System.String.IndexOf%2A> or <xref:System.String.LastIndexOf%2A> to get the index of the ending character or character sequence.</span></span>  <span data-ttu-id="d5817-3444">その後、次のように、その値を文字列内のインデックス位置に変換できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3444">You can then convert that value to an index position in the string as follows:</span></span>

-   <span data-ttu-id="d5817-3445">部分文字列の末尾を示す1文字を検索した場合、`length` パラメーターは `endIndex` - `startIndex` + 1 と等しくなります。ここで、`endIndex` は <xref:System.String.IndexOf%2A> メソッドまたは <xref:System.String.IndexOf%2A> メソッドの戻り値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3445">If you've searched for a single character that is to mark the end of the substring, the `length` parameter equals  `endIndex` - `startIndex` + 1, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="d5817-3446">次の例では、文字列から "b" 文字の連続ブロックを抽出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3446">The following example extracts a continuous block of "b" characters from a string.</span></span>

     [!code-csharp-interactive[System.String.Substring#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring2.cs#2)]
     [!code-vb[System.String.Substring#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring2.vb#2)]

-   <span data-ttu-id="d5817-3447">部分文字列の末尾を示す複数の文字を検索した場合、`length` パラメーターは `endIndex` + `endMatchLength` - の `startIndex`と等しくなります。 `endIndex` は <xref:System.String.IndexOf%2A> メソッドまたは <xref:System.String.IndexOf%2A> メソッドの戻り値であり、`endMatchLength` は、部分文字列の末尾を示す文字シーケンスの長さです。</span><span class="sxs-lookup"><span data-stu-id="d5817-3447">If you've searched for multiple characters that are to mark the end of the substring, the `length` parameter equals  `endIndex` + `endMatchLength` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method, and `endMatchLength` is the length of the character sequence that marks the end of the substring.</span></span> <span data-ttu-id="d5817-3448">次の例では、XML `<definition>` 要素を含むテキストのブロックを抽出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3448">The following example extracts a block of text that contains an XML `<definition>` element.</span></span>

     [!code-csharp-interactive[System.String.Substring#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring3.cs#3)]
     [!code-vb[System.String.Substring#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring3.vb#3)]

-   <span data-ttu-id="d5817-3449">文字または文字のシーケンスが部分文字列の末尾に含まれていない場合、`length` パラメーターは `endIndex` - `startIndex`と等しくなります。ここで、`endIndex` は <xref:System.String.IndexOf%2A> メソッドまたは <xref:System.String.IndexOf%2A> メソッドの戻り値です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3449">If the character or character sequence is not included in the end of the substring, the `length` parameter equals `endIndex` - `startIndex`, where `endIndex` is the return value of the <xref:System.String.IndexOf%2A> or <xref:System.String.IndexOf%2A> method.</span></span>

 <span data-ttu-id="d5817-3450">`startIndex` が0で、現在の文字列の長さと等しい場合、メソッドは元の文字列を変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3450">If `startIndex` is equal to zero and  equals the length of the current string, the method returns the original string unchanged.</span></span>



## Examples
 <span data-ttu-id="d5817-3451">次の例は、6番目の文字位置 (つまり、インデックス 5) から始まる文字列から2つの文字を抽出する <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> メソッドの単純な呼び出しを示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3451">The following example illustrates a simple call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method that extracts two characters from a string starting at the sixth character position (that is, at index five).</span></span>

 [!code-csharp-interactive[System.String.Substring#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring4.cs#4)]
 [!code-vb[System.String.Substring#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring4.vb#4)]

 <span data-ttu-id="d5817-3452">次の例では、文字列内で部分文字列を分離するために、次の3つのケースで <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> メソッドを使用しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3452">The following example uses the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method in the following three cases to isolate substrings within a string.</span></span> <span data-ttu-id="d5817-3453">2つのケースでは、部分文字列が比較に使用されます。3番目のケースでは、無効なパラメーターが指定されているため、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3453">In two cases the substrings are used in comparisons, and in the third case an exception is thrown because invalid parameters are specified.</span></span>

-   <span data-ttu-id="d5817-3454">このメソッドは、文字列内の1文字と3番目の位置 (インデックス 2) を抽出し、それを "c" と比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3454">It extracts the single character and the third position in the string (at index 2) and compares it with a "c".</span></span> <span data-ttu-id="d5817-3455">この比較は `true`を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3455">This comparison returns `true`.</span></span>

-   <span data-ttu-id="d5817-3456">文字列の4番目の位置 (インデックス 3) から開始してゼロ文字を抽出し、それを <xref:System.String.IsNullOrEmpty%2A> メソッドに渡します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3456">It extracts zero characters starting at the fourth position in the string (at index 3) and passes it to the <xref:System.String.IsNullOrEmpty%2A> method.</span></span> <span data-ttu-id="d5817-3457">これは、<xref:System.String.Substring%2A> メソッドの呼び出しが <xref:System.String.Empty?displayProperty=nameWithType>を返すため、true を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3457">This returns true because the call to the <xref:System.String.Substring%2A> method returns <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>

-   <span data-ttu-id="d5817-3458">文字列の4番目の位置から1文字を抽出しようとします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3458">It attempts to extract one character starting at the fourth position in the string.</span></span> <span data-ttu-id="d5817-3459">その位置に文字がないため、メソッドの呼び出しは <xref:System.ArgumentOutOfRangeException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3459">Because there is no character at that position, the method call throws an <xref:System.ArgumentOutOfRangeException> exception.</span></span>

 [!code-csharp-interactive[Classic String.Substring1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic String.Substring1 Example/CS/source.cs#1)]
 [!code-vb[Classic String.Substring1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic String.Substring1 Example/VB/source.vb#1)]

 <span data-ttu-id="d5817-3460">次の例では、<xref:System.String.Substring%2A> メソッドを使用して、等号 ("=") 文字で区切られたキーと値のペアを区切ります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3460">The following example uses the <xref:System.String.Substring%2A> method to separate key/value pairs that are delimited by an equals ("=") character.</span></span>

 [!code-csharp-interactive[System.String.Substring#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.String.Substring/cs/Substring1.cs#1)]
 [!code-vb[System.String.Substring#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.String.Substring/vb/Substring1.vb#1)]

 <span data-ttu-id="d5817-3461">文字列内の equals 文字の位置を取得するには、<xref:System.String.IndexOf%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3461">The <xref:System.String.IndexOf%2A> method is used to get the position of the equals character in the string.</span></span> <span data-ttu-id="d5817-3462"><xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> メソッドを呼び出すと、キー名が抽出されます。キー名は、文字列の最初の文字から始まり、<xref:System.String.IndexOf%2A> メソッドへの呼び出しによって返される文字数に対してが拡張されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3462">The call to the <xref:System.String.Substring%28System.Int32%2CSystem.Int32%29> method extracts the key name, which starts from the first character in the string and extends for the number of characters returned by the call to the <xref:System.String.IndexOf%2A> method.</span></span> <span data-ttu-id="d5817-3463"><xref:System.String.Substring%28System.Int32%29> メソッドを呼び出すと、キーに割り当てられた値が抽出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3463">The call to the <xref:System.String.Substring%28System.Int32%29> method then extracts the value assigned to the key.</span></span> <span data-ttu-id="d5817-3464">これは、等号文字を超えて1文字位置から開始し、文字列の末尾まで拡張します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3464">It starts at one character position beyond the equals character and extends to the end of the string.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-3465"><paramref name="startIndex" /> に<paramref name="length" /> を加算した値はこのインスタンスの範囲外である位置を示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3465"><paramref name="startIndex" /> plus <paramref name="length" /> indicates a position not within this instance.</span></span>

<span data-ttu-id="d5817-3466">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-3466">-or-</span></span>

 <span data-ttu-id="d5817-3467"><paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3467"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span></exception>
        <altmember cref="M:System.String.Remove(System.Int32,System.Int32)" />
        <altmember cref="M:System.String.Replace(System.Char,System.Char)" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Char&gt;.GetEnumerator" ExplicitInterfaceMemberName="System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;char&gt; IEnumerable&lt;char&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;char&gt; System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#Collections#Generic#IEnumerable&lt;char&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of Char) Implements IEnumerable(Of Char).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;char&gt; ^ System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;char&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;char&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;char&gt;" Usage="string.System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-3468">現在の <see cref="T:System.String" /> オブジェクトを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3468">Returns an enumerator that iterates through the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="d5817-3469">現在の <see cref="T:System.String" /> オブジェクトを反復処理するために使用できる、厳密に型指定された列挙子。</span><span class="sxs-lookup"><span data-stu-id="d5817-3469">A strongly-typed enumerator that can be used to iterate through the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3470">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3470">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3471"><xref:System.String> インスタンスが <xref:System.Collections.Generic.IEnumerable%601> インターフェイスオブジェクトにキャストされている場合にのみ使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3471">It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface object.</span></span> <span data-ttu-id="d5817-3472">詳細については、<xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3472">For more information, see the <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="string.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-3473">現在の <see cref="T:System.String" /> オブジェクトを反復処理する列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3473">Returns an enumerator that iterates through the current <see cref="T:System.String" /> object.</span></span></summary>
        <returns><span data-ttu-id="d5817-3474">現在の文字列を反復処理するために使用できる列挙子。</span><span class="sxs-lookup"><span data-stu-id="d5817-3474">An enumerator that can be used to iterate through the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3475">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3475">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3476">これは、<xref:System.String> のインスタンスが <xref:System.Collections.IEnumerable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3476">It can be used only when the <xref:System.String> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span> <span data-ttu-id="d5817-3477">詳細については、<xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3477">For more information, see the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="string.System.IComparable.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d5817-3478"><see cref="T:System.String" /> に評価されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3478">An object that evaluates to a <see cref="T:System.String" />.</span></span></param>
        <summary><span data-ttu-id="d5817-3479">このインスタンスと指定した <see cref="T:System.Object" /> とを比較し、並べ替え順序において、このインスタンスの位置が指定した <see cref="T:System.Object" /> の前、後ろ、または同じのいずれであるかを示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3479">Compares this instance with a specified <see cref="T:System.Object" /> and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3480">並べ替え順序において、このインスタンスの位置が <paramref name="value" /> パラメーターよりも前、後ろ、または同じのいずれであるかを示す 32 ビット符号付き整数。</span><span class="sxs-lookup"><span data-stu-id="d5817-3480">A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <paramref name="value" /> parameter.</span></span>

<list type="table"><listheader><term><span data-ttu-id="d5817-3481">[値]</span><span class="sxs-lookup"><span data-stu-id="d5817-3481">Value</span></span></term><description><span data-ttu-id="d5817-3482">条件</span><span class="sxs-lookup"><span data-stu-id="d5817-3482">Condition</span></span></description></listheader><item><term><span data-ttu-id="d5817-3483">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="d5817-3483">Less than zero</span></span></term><description><span data-ttu-id="d5817-3484">このインスタンスの位置が <paramref name="value" /> よりも前です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3484">This instance precedes <paramref name="value" />.</span></span></description></item><item><term><span data-ttu-id="d5817-3485">0</span><span class="sxs-lookup"><span data-stu-id="d5817-3485">Zero</span></span></term><description><span data-ttu-id="d5817-3486">このインスタンスの位置が、並べ替え順序において <paramref name="value" /> と同じです。</span><span class="sxs-lookup"><span data-stu-id="d5817-3486">This instance has the same position in the sort order as <paramref name="value" />.</span></span></description></item><item><term><span data-ttu-id="d5817-3487">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="d5817-3487">Greater than zero</span></span></term><description><span data-ttu-id="d5817-3488">このインスタンスの位置が <paramref name="value" /> よりも後ろです。</span><span class="sxs-lookup"><span data-stu-id="d5817-3488">This instance follows <paramref name="value" />.</span></span>

<span data-ttu-id="d5817-3489">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-3489">-or-</span></span>

<span data-ttu-id="d5817-3490"><paramref name="value" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3490"><paramref name="value" /> is <see langword="null" />.</span></span></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3491">`value` は <xref:System.String> オブジェクトである必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3491">`value` must be a <xref:System.String> object.</span></span>

> [!CAUTION]
>  <span data-ttu-id="d5817-3492"><xref:System.String.CompareTo%2A> メソッドは、主に並べ替え操作または alphabetizing 操作で使用するように設計されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3492">The <xref:System.String.CompareTo%2A> method was designed primarily for use in sorting or alphabetizing operations.</span></span> <span data-ttu-id="d5817-3493">2つの文字列が等価かどうかを判断するために、メソッド呼び出しの主な目的がである場合は、使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3493">It should not be used when the primary purpose of the method call is to determine whether two strings are equivalent.</span></span> <span data-ttu-id="d5817-3494">2つの文字列が等価かどうかを判断するには、<xref:System.String.Equals%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3494">To determine whether two strings are equivalent, call the <xref:System.String.Equals%2A> method.</span></span>

<span data-ttu-id="d5817-3495">このメソッドは、現在のカルチャを使用して、単語 (大文字と小文字を区別し、カルチャに依存する) 比較を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3495">This method performs a word (case-sensitive and culture-sensitive) comparison using the current culture.</span></span> <span data-ttu-id="d5817-3496">単語、文字列、および序数の並べ替えの詳細については、「<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3496">For more information about word, string, and ordinal sorts, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="d5817-3497">このメソッドの動作の詳細については、<xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3497">For more information about the behavior of this method, see the Remarks section of the <xref:System.String.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method.</span></span>

## Examples

<span data-ttu-id="d5817-3498">次の例では、<xref:System.Object>と共に <xref:System.String.CompareTo%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3498">The following example uses the <xref:System.String.CompareTo%2A> method with an <xref:System.Object>.</span></span> <span data-ttu-id="d5817-3499"><xref:System.String> インスタンスを `TestClass` オブジェクトと比較しようとするため、メソッドは <xref:System.ArgumentException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3499">Because it attempts to compare a <xref:System.String> instance to a `TestClass` object, the method throws an <xref:System.ArgumentException>.</span></span>

[!code-cpp[ExToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ExToString/CPP/extostring.cpp#1)]
[!code-csharp[ExToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ExToString/CS/extostring.cs#1)]
[!code-vb[ExToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ExToString/VB/extostring.vb#1)]

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d5817-3500"><paramref name="value" /> が <see cref="T:System.String" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3500"><paramref name="value" /> is not a <see cref="T:System.String" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.GetTypeCode : unit -&gt; TypeCode&#xA;override this.System.IConvertible.GetTypeCode : unit -&gt; TypeCode" Usage="string.System.IConvertible.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-3501"><see cref="T:System.String" /> クラスには <see cref="T:System.TypeCode" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3501">Returns the <see cref="T:System.TypeCode" /> for the <see cref="T:System.String" /> class.</span></span></summary>
        <returns><span data-ttu-id="d5817-3502">列挙型定数 <see cref="F:System.TypeCode.String" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3502">The enumerated constant, <see cref="F:System.TypeCode.String" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples

<span data-ttu-id="d5817-3503">次の例では、<xref:System.String> 型の <xref:System.TypeCode> 列挙定数を表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3503">The following example displays the <xref:System.TypeCode> enumerated constant for the <xref:System.String> type.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.gettypecode/CPP/gtc.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.gettypecode/CS/gtc.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.gettypecode/VB/gtc.vb" id="Snippet1":::

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToBoolean : IFormatProvider -&gt; bool&#xA;override this.System.IConvertible.ToBoolean : IFormatProvider -&gt; bool" Usage="string.System.IConvertible.ToBoolean provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3504">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3504">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="d5817-3505">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3505">For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3506">現在の文字列の値が <see langword="true" /> の場合は <see cref="F:System.Boolean.TrueString" />。現在の文字列の値が <see langword="false" /> の場合は <see cref="F:System.Boolean.FalseString" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3506"><see langword="true" /> if the value of the current string is <see cref="F:System.Boolean.TrueString" />; <see langword="false" /> if the value of the current string is <see cref="F:System.Boolean.FalseString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3507">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3507">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3508">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3508">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3509">別の方法として、<xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3509">The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-3510">現在の文字列の値が <see cref="F:System.Boolean.TrueString" /> または <see cref="F:System.Boolean.FalseString" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3510">The value of the current string is not <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToByte : IFormatProvider -&gt; byte&#xA;override this.System.IConvertible.ToByte : IFormatProvider -&gt; byte" Usage="string.System.IConvertible.ToByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3511">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3511">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3512">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3512">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3513">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3513">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3514">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3514">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3515">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3515">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3516">別の方法として、<xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3516">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-3517">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3517">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="d5817-3518">現在の <see cref="T:System.String" /> オブジェクトの値は、<see cref="F:System.Byte.MaxValue" /> より大きい数か、<see cref="F:System.Byte.MinValue" />&lt;bpt i="1000001" x="1000001" type="formatting"&gt;{b&amp;gt;&lt;/bpt&gt; &lt;ept i="1000001"&gt;&amp;lt;b}&lt;/ept&gt;未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3518">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Byte.MaxValue" /> or less than <see cref="F:System.Byte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToChar : IFormatProvider -&gt; char&#xA;override this.System.IConvertible.ToChar : IFormatProvider -&gt; char" Usage="string.System.IConvertible.ToChar provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3519">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3519">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3520">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3520">For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3521">現在の <see cref="T:System.String" /> オブジェクトのインデックス 0 位置にある文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-3521">The character at index 0 in the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3522">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3522">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3523">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3523">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3524">別の方法として、<xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3524">The recommended alternative is to call the <xref:System.Convert.ToChar%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime&#xA;override this.System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime" Usage="string.System.IConvertible.ToDateTime provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3525">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3525">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3526">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3526">For a description of this member, see <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3527">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3527">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3528">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3528">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3529">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3529">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3530">別の方法として、<xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3530">The recommended alternative is to call the <xref:System.Convert.ToDateTime%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal&#xA;override this.System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal" Usage="string.System.IConvertible.ToDecimal provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3531">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3531">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3532">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3532">For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3533">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3533">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3534">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3534">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3535">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3535">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3536">別の方法として、<xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3536">The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-3537">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3537">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="d5817-3538">現在の <see cref="T:System.String" /> オブジェクトの値は、<see cref="F:System.Decimal.MinValue" /> 未満か、<see cref="F:System.Decimal.MaxValue" /> より大きい数です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3538">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Decimal.MinValue" /> or than <see cref="F:System.Decimal.MaxValue" /> greater.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDouble : IFormatProvider -&gt; double&#xA;override this.System.IConvertible.ToDouble : IFormatProvider -&gt; double" Usage="string.System.IConvertible.ToDouble provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3539">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3539">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3540">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3540">For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3541">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3541">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3542">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3542">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3543">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3543">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3544">別の方法として、<xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3544">The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-3545">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3545">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="d5817-3546">現在の <see cref="T:System.String" /> オブジェクトの値は、<see cref="F:System.Double.MinValue" /> 未満か、<see cref="F:System.Double.MaxValue" /> より大きい数です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3546">The value of the current <see cref="T:System.String" /> object is a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt16 : IFormatProvider -&gt; int16&#xA;override this.System.IConvertible.ToInt16 : IFormatProvider -&gt; int16" Usage="string.System.IConvertible.ToInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3547">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3547">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3548">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3548">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3549">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3549">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3550">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3550">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3551">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3551">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3552">別の方法として、<xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3552">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-3553">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3553">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="d5817-3554">現在の <see cref="T:System.String" /> オブジェクトの値は、<see cref="F:System.Int16.MaxValue" /> より大きい数か、<see cref="F:System.Int16.MinValue" />&lt;bpt i="1000001" x="1000001" type="formatting"&gt;{b&amp;gt;&lt;/bpt&gt; &lt;ept i="1000001"&gt;&amp;lt;b}&lt;/ept&gt;未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3554">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.Int16.MaxValue" /> or less than <see cref="F:System.Int16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt32 : IFormatProvider -&gt; int&#xA;override this.System.IConvertible.ToInt32 : IFormatProvider -&gt; int" Usage="string.System.IConvertible.ToInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3555">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3555">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3556">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3556">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3557">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3557">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3558">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3558">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3559">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3559">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3560">別の方法として、<xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3560">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt64 : IFormatProvider -&gt; int64&#xA;override this.System.IConvertible.ToInt64 : IFormatProvider -&gt; int64" Usage="string.System.IConvertible.ToInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3561">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3561">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3562">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3562">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3563">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3563">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3564">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3564">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3565">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3565">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3566">別の方法として、<xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3566">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte&#xA;override this.System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte" Usage="string.System.IConvertible.ToSByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3567">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3567">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3568">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3568">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3569">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3569">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3570">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3570">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3571">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3571">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3572">別の方法として、<xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3572">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-3573">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3573">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="d5817-3574">現在の <see cref="T:System.String" /> オブジェクトの値は、<see cref="F:System.SByte.MaxValue" /> より大きい数か、<see cref="F:System.SByte.MinValue" />&lt;bpt i="1000001" x="1000001" type="formatting"&gt;{b&amp;gt;&lt;/bpt&gt; &lt;ept i="1000001"&gt;&amp;lt;b}&lt;/ept&gt;未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3574">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.SByte.MaxValue" /> or less than <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSingle : IFormatProvider -&gt; single&#xA;override this.System.IConvertible.ToSingle : IFormatProvider -&gt; single" Usage="string.System.IConvertible.ToSingle provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3575">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3575">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3576">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3576">For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3577">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3577">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3578">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3578">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3579">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3579">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3580">別の方法として、<xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3580">The recommended alternative is to call the <xref:System.Convert.ToSingle%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToString : IFormatProvider -&gt; string&#xA;override this.System.IConvertible.ToString : IFormatProvider -&gt; string" Usage="string.System.IConvertible.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3581">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3581">An object that supplies culture-specific formatting information.</span></span>

<span data-ttu-id="d5817-3582">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-3582">-or-</span></span>

<span data-ttu-id="d5817-3583">現在のカルチャの書式指定規則を使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3583"><see langword="null" /> to use the formatting conventions of the current culture.</span></span></param>
        <summary><span data-ttu-id="d5817-3584">このメンバーの詳細については、「<see cref="T:System.IConvertible.ToString(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3584">For a description of this member, see <see cref="T:System.IConvertible.ToString(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3585">対象のインスタンスの値と等価な <see cref="T:System.String" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="d5817-3585">A <see cref="T:System.String" /> instance equivalent to the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3586">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3586">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3587">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3587">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToType (type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToType : Type * IFormatProvider -&gt; obj&#xA;override this.System.IConvertible.ToType : Type * IFormatProvider -&gt; obj" Usage="string.System.IConvertible.ToType (type, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="d5817-3588">取得するオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="d5817-3588">The type of the returned object.</span></span></param>
        <param name="provider"><span data-ttu-id="d5817-3589">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3589">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3590">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3590">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3591">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3591">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3592">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3592">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3593">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3593">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3594">別の方法として、<xref:System.Convert.ChangeType%2A> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3594">The recommended alternative is to call the <xref:System.Convert.ChangeType%2A> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-3595"><paramref name="type" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3595"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="d5817-3596">現在の <see cref="T:System.String" /> オブジェクトの値を、<paramref name="type" /> パラメーターで指定された型に変換できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3596">The value of the current <see cref="T:System.String" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16&#xA;override this.System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16" Usage="string.System.IConvertible.ToUInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3597">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3597">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3598">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3598">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3599">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3599">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3600">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3600">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3601">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3601">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3602">別の方法として、<xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3602">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-3603">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3603">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="d5817-3604">現在の <see cref="T:System.String" /> オブジェクトの値は、<see cref="F:System.UInt16.MaxValue" /> より大きい数か、<see cref="F:System.UInt16.MinValue" />&lt;bpt i="1000001" x="1000001" type="formatting"&gt;{b&amp;gt;&lt;/bpt&gt; &lt;ept i="1000001"&gt;&amp;lt;b}&lt;/ept&gt;未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3604">The value of the current <see cref="T:System.String" /> object is a number greater than <see cref="F:System.UInt16.MaxValue" /> or less than <see cref="F:System.UInt16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32&#xA;override this.System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32" Usage="string.System.IConvertible.ToUInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3605">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3605">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3606">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3606">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3607">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3607">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3608">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3608">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3609">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3609">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3610">別の方法として、<xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3610">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="d5817-3611">現在の <see cref="T:System.String" /> オブジェクトの値を解析できません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3611">The value of the current <see cref="T:System.String" /> object cannot be parsed.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="d5817-3612">現在の <see cref="T:System.String" /> オブジェクトの値は、<see cref="F:System.UInt32.MaxValue" /> より大きい数か、<see cref="F:System.UInt32.MinValue" />&lt;bpt i="1000001" x="1000001" type="formatting"&gt;{b&amp;gt;&lt;/bpt&gt; &lt;ept i="1000001"&gt;&amp;lt;b}&lt;/ept&gt;未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3612">The value of the current <see cref="T:System.String" /> object is a number greater <see cref="F:System.UInt32.MaxValue" /> or less than <see cref="F:System.UInt32.MinValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64&#xA;override this.System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64" Usage="string.System.IConvertible.ToUInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3613">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3613">An object that provides culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3614">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3614">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="d5817-3615">現在の <see cref="T:System.String" /> オブジェクトの変換後の値。</span><span class="sxs-lookup"><span data-stu-id="d5817-3615">The converted value of the current <see cref="T:System.String" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3616">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3616">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d5817-3617">これは、<xref:System.String> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3617">It can be used only when the <xref:System.String> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="d5817-3618">別の方法として、<xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3618">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToCharArray">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-3619">このインスタンスの文字を Unicode 文字配列へコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3619">Copies the characters in this instance to a Unicode character array.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToCharArray">
      <MemberSignature Language="C#" Value="public char[] ToCharArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char[] ToCharArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToCharArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToCharArray () As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;char&gt; ^ ToCharArray();" />
      <MemberSignature Language="F#" Value="member this.ToCharArray : unit -&gt; char[]" Usage="string.ToCharArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-3620">このインスタンスの文字を Unicode 文字配列へコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3620">Copies the characters in this instance to a Unicode character array.</span></span></summary>
        <returns><span data-ttu-id="d5817-3621">このインスタンスの各文字を要素とする Unicode 文字配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3621">A Unicode character array whose elements are the individual characters of this instance.</span></span> <span data-ttu-id="d5817-3622">このインスタンスが空の文字列である場合、返される配列は空で、長さは 0 になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3622">If this instance is an empty string, the returned array is empty and has a zero length.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3623">このメソッドは、文字列内の各文字 (つまり <xref:System.Char> オブジェクト) を文字配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3623">This method copies each character (that is, each <xref:System.Char> object) in a string to a character array.</span></span> <span data-ttu-id="d5817-3624">コピーされた最初の文字は、返された文字配列のインデックス0になります。コピーされた最後の文字は、インデックス <xref:System.Array.Length%2A?displayProperty=nameWithType>-1 になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3624">The first character copied is at index zero of the returned character array; the last character copied is at index <xref:System.Array.Length%2A?displayProperty=nameWithType> - 1.</span></span>

 <span data-ttu-id="d5817-3625">文字配列内の文字から文字列を作成するには、<xref:System.String.%23ctor%28System.Char%5B%5D%29> コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3625">To create a string from the characters in a character array, call the <xref:System.String.%23ctor%28System.Char%5B%5D%29> constructor.</span></span>

 <span data-ttu-id="d5817-3626">文字列内のエンコードされた文字を含むバイト配列を作成するには、適切な <xref:System.Text.Encoding> オブジェクトをインスタンス化し、その <xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3626">To create a byte array that contains the encoded characters in a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d5817-3627">.NET で使用できる標準エンコーディングには、次のようなものがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3627">Some of the standard encodings available in .NET include the following:</span></span>

|<span data-ttu-id="d5817-3628">エンコード</span><span class="sxs-lookup"><span data-stu-id="d5817-3628">Encoding</span></span>|<span data-ttu-id="d5817-3629">Object</span><span class="sxs-lookup"><span data-stu-id="d5817-3629">Object</span></span>|
|--------------|------------|
|<span data-ttu-id="d5817-3630">ASCII</span><span class="sxs-lookup"><span data-stu-id="d5817-3630">ASCII</span></span>|<xref:System.Text.ASCIIEncoding>|
|<span data-ttu-id="d5817-3631">UTF-7</span><span class="sxs-lookup"><span data-stu-id="d5817-3631">UTF-7</span></span>|<xref:System.Text.UTF7Encoding>|
|<span data-ttu-id="d5817-3632">UTF-8</span><span class="sxs-lookup"><span data-stu-id="d5817-3632">UTF-8</span></span>|<xref:System.Text.UTF8Encoding>|
|<span data-ttu-id="d5817-3633">UTF-16</span><span class="sxs-lookup"><span data-stu-id="d5817-3633">UTF-16</span></span>|<xref:System.Text.UnicodeEncoding>|
|<span data-ttu-id="d5817-3634">UTF-32</span><span class="sxs-lookup"><span data-stu-id="d5817-3634">UTF-32</span></span>|<xref:System.Text.UTF32Encoding>|

 <span data-ttu-id="d5817-3635">詳細については、「 [.net での文字エンコード](~/docs/standard/base-types/character-encoding.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3635">For more information, see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md).</span></span>



## Examples
 <span data-ttu-id="d5817-3636">次の例では、<xref:System.String.ToCharArray%2A> メソッドを呼び出して、文字列内の文字を文字配列に抽出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3636">The following example calls the <xref:System.String.ToCharArray%2A> method to extract the characters in a string to a character array.</span></span> <span data-ttu-id="d5817-3637">次に、元の文字列と配列内の要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3637">It then displays the original string and the elements in the array.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.tochararray/cs/ToCharArray1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.tochararray/vb/ToCharArray1.vb" id="Snippet1":::

 <span data-ttu-id="d5817-3638">次の例では、区切り記号で区切られた文字列で区切り文字として機能する文字を含む文字列を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3638">The following example defines a string containing the characters that serve as delimiters in a delimited string.</span></span> <span data-ttu-id="d5817-3639">次に、<xref:System.String.ToCharArray%2A> メソッドを呼び出して、区切られた文字列を個々の部分文字列に区切るために <xref:System.String.Split%28System.Char%5B%5D%29> メソッドに渡すことができる文字配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3639">It then calls the <xref:System.String.ToCharArray%2A> method to create a character array that can be passed to the <xref:System.String.Split%28System.Char%5B%5D%29> method to separate the delimited string into its individual substrings.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/StringSplit2/CPP/stringsplit2.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/StringSplit2/CS/stringsplit2.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/StringSplit2/VB/stringsplit2.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="ToCharArray">
      <MemberSignature Language="C#" Value="public char[] ToCharArray (int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char[] ToCharArray(int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToCharArray(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToCharArray (startIndex As Integer, length As Integer) As Char()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;char&gt; ^ ToCharArray(int startIndex, int length);" />
      <MemberSignature Language="F#" Value="member this.ToCharArray : int * int -&gt; char[]" Usage="string.ToCharArray (startIndex, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startIndex"><span data-ttu-id="d5817-3640">このインスタンス内の部分文字列の開始位置。</span><span class="sxs-lookup"><span data-stu-id="d5817-3640">The starting position of a substring in this instance.</span></span></param>
        <param name="length"><span data-ttu-id="d5817-3641">このインスタンス内の部分文字列の長さ。</span><span class="sxs-lookup"><span data-stu-id="d5817-3641">The length of the substring in this instance.</span></span></param>
        <summary><span data-ttu-id="d5817-3642">このインスタンスの指定した部分文字列の文字を Unicode 文字配列へコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3642">Copies the characters in a specified substring in this instance to a Unicode character array.</span></span></summary>
        <returns><span data-ttu-id="d5817-3643">文字位置 <paramref name="startIndex" /> から始まる、このインスタンス内の文字の <paramref name="length" /> 数を要素とする Unicode 文字配列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3643">A Unicode character array whose elements are the <paramref name="length" /> number of characters in this instance starting from character position <paramref name="startIndex" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3644">このメソッドは、文字列の一部の文字を文字配列にコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3644">This method copies the characters in a portion of a string to a character array.</span></span> <span data-ttu-id="d5817-3645">文字配列内の文字範囲から文字列を作成するには、<xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3645">To create a string from a range of characters in a character array, call the  <xref:System.String.%23ctor%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> constructor.</span></span>

 <span data-ttu-id="d5817-3646">`startIndex` パラメーターは0から始まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3646">The `startIndex` parameter is zero-based.</span></span> <span data-ttu-id="d5817-3647">つまり、文字列インスタンス内の最初の文字のインデックスは0です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3647">That is, the index of the first character in the string instance is zero.</span></span>

 <span data-ttu-id="d5817-3648">`length` が0の場合、返される配列は空で、長さは0になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3648">If `length` is zero, the returned array is empty and has a zero length.</span></span> <span data-ttu-id="d5817-3649">このインスタンスが `null` または空の文字列 ("") の場合、返される配列は空で、長さは0になります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3649">If this instance is `null` or an empty string (""), the returned array is empty and has a zero length.</span></span>

 <span data-ttu-id="d5817-3650">文字列の一部にエンコードされた文字を含むバイト配列を作成するには、適切な <xref:System.Text.Encoding> オブジェクトをインスタンス化し、その <xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3650">To create a byte array that contains the encoded characters in a portion of a string, instantiate the appropriate <xref:System.Text.Encoding> object and call its <xref:System.Text.Encoding.GetBytes%28System.String%2CSystem.Int32%2CSystem.Int32%2CSystem.Byte%5B%5D%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="d5817-3651">.NET で使用できる標準エンコーディングには、次のようなものがあります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3651">Some of the standard encodings available in .NET include:</span></span>

|<span data-ttu-id="d5817-3652">エンコード</span><span class="sxs-lookup"><span data-stu-id="d5817-3652">Encoding</span></span>|<span data-ttu-id="d5817-3653">Object</span><span class="sxs-lookup"><span data-stu-id="d5817-3653">Object</span></span>|
|--------------|------------|
|<span data-ttu-id="d5817-3654">ASCII</span><span class="sxs-lookup"><span data-stu-id="d5817-3654">ASCII</span></span>|<xref:System.Text.ASCIIEncoding>|
|<span data-ttu-id="d5817-3655">UTF-7</span><span class="sxs-lookup"><span data-stu-id="d5817-3655">UTF-7</span></span>|<xref:System.Text.UTF7Encoding>|
|<span data-ttu-id="d5817-3656">UTF-8</span><span class="sxs-lookup"><span data-stu-id="d5817-3656">UTF-8</span></span>|<xref:System.Text.UTF8Encoding>|
|<span data-ttu-id="d5817-3657">UTF-16</span><span class="sxs-lookup"><span data-stu-id="d5817-3657">UTF-16</span></span>|<xref:System.Text.UnicodeEncoding>|
|<span data-ttu-id="d5817-3658">UTF-32</span><span class="sxs-lookup"><span data-stu-id="d5817-3658">UTF-32</span></span>|<xref:System.Text.UTF32Encoding>|

 <span data-ttu-id="d5817-3659">詳細については、「 [.net での文字エンコード](~/docs/standard/base-types/character-encoding.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3659">For more information, see [Character Encoding in .NET](~/docs/standard/base-types/character-encoding.md).</span></span>



## Examples
 <span data-ttu-id="d5817-3660">次の例では、文字列内の部分文字列を文字の配列に変換してから、配列の要素を列挙して表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3660">The following example converts a substring within a string to an array of characters, then enumerates and displays the elements of the array.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.ToCharArray1/CPP/tocharry1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.ToCharArray1/CS/tocharry1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.ToCharArray1/VB/tocharry1.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d5817-3661"><paramref name="startIndex" /> または <paramref name="length" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3661"><paramref name="startIndex" /> or <paramref name="length" /> is less than zero.</span></span>

<span data-ttu-id="d5817-3662">- または -</span><span class="sxs-lookup"><span data-stu-id="d5817-3662">-or-</span></span>

 <span data-ttu-id="d5817-3663"><paramref name="startIndex" /> に <paramref name="length" /> を加算した値がこのインスタンスの長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3663"><paramref name="startIndex" /> plus <paramref name="length" /> is greater than the length of this instance.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-3664">この文字列のコピーを小文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3664">Returns a copy of this string converted to lowercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public string ToLower ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLower() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLower" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLower () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLower();" />
      <MemberSignature Language="F#" Value="member this.ToLower : unit -&gt; string" Usage="string.ToLower " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-3665">この文字列のコピーを小文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3665">Returns a copy of this string converted to lowercase.</span></span></summary>
        <returns><span data-ttu-id="d5817-3666">小文字の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3666">A string in lowercase.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3667">このメソッドは、現在のカルチャの大文字と小文字の規則を考慮します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3667">This method takes into account the casing rules of the current culture.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3668">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3668">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3669">代わりに、現在のインスタンス内のすべての文字が小文字に変換される新しい文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3669">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>

## <a name="security-considerations"></a><span data-ttu-id="d5817-3670">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-3670">Security Considerations</span></span>
 <span data-ttu-id="d5817-3671"><xref:System.String.ToLower> メソッドを呼び出すことによって生成される大文字と小文字の演算では、現在のカルチャの大文字と小文字の表記規則が考慮されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3671">The casing operation that results from calling the <xref:System.String.ToLower> method takes the casing conventions of the current culture into account.</span></span> <span data-ttu-id="d5817-3672">ファイル名、名前付きパイプ、レジストリキーなど、オペレーティングシステム識別子の小文字または大文字のバージョンが必要な場合は、<xref:System.String.ToLowerInvariant%2A> または <xref:System.String.ToUpperInvariant%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3672">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span> <span data-ttu-id="d5817-3673">これにより、(<xref:System.String.ToLower> メソッドとは異なり) すべてのカルチャで同じ結果が生成され、より効率的に実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3673">This produces the same result in every culture (unlike the <xref:System.String.ToLower> method) and performs more efficiently.</span></span>



## Examples
 <span data-ttu-id="d5817-3674">次の例では、複数の大文字と小文字が混在する文字列を小文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3674">The following example converts several mixed case strings to lowercase.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/stringlowerupper/CPP/stringtolower.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/stringlowerupper/CS/stringtolower.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/stringlowerupper/VB/stringtolower.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3675">「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」で説明されているように、既定値を置き換える文字列の大文字と小文字の使い分けメソッドを呼び出さずに、パラメーターを明示的に指定する必要があるメソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3675">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string casing methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="d5817-3676">現在のカルチャの大文字と小文字の表記規則を使用して文字を小文字に変換するには、その <paramref name="culture" /> パラメーターに <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> 値を指定して、<see cref="M:System.String.ToLower(System.Globalization.CultureInfo)" /> メソッドのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3676">To convert a character to lowercase by using the casing conventions of the current culture, call the <see cref="M:System.String.ToLower(System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public string ToLower (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLower(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLower(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLower (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLower(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.ToLower : System.Globalization.CultureInfo -&gt; string" Usage="string.ToLower culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="d5817-3677">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3677">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="d5817-3678">指定されたカルチャの大文字と小文字の規則を使用して、この文字列のコピーを小文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3678">Returns a copy of this string converted to lowercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="d5817-3679">現在の文字列を小文字にしたもの。</span><span class="sxs-lookup"><span data-stu-id="d5817-3679">The lowercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3680">`culture` パラメーターによって指定されたカルチャの大文字と小文字の規則によって、文字列の大文字と小文字の変更方法が決まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3680">The casing rules of the culture specified by the `culture` parameter determine the way the case of the string is changed.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3681">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3681">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3682">代わりに、現在のインスタンス内のすべての文字が小文字に変換される新しい文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3682">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>

## <a name="security-considerations"></a><span data-ttu-id="d5817-3683">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-3683">Security Considerations</span></span>
 <span data-ttu-id="d5817-3684"><xref:System.String.ToLower%28System.Globalization.CultureInfo%29> メソッドに <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>以外の <xref:System.Globalization.CultureInfo> オブジェクトを渡すと、大文字と小文字の操作によってカルチャ固有の規則が考慮されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3684">If you pass the <xref:System.String.ToLower%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>, the casing operation will take culture-specific rules into account.</span></span> <span data-ttu-id="d5817-3685">ファイル名、名前付きパイプ、レジストリキーなど、オペレーティングシステム識別子の小文字または大文字のバージョンが必要な場合は、<xref:System.String.ToLowerInvariant%2A> または <xref:System.String.ToUpperInvariant%2A> 方法を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3685">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="d5817-3686">これにより、すべてのカルチャで同じ結果が生成され、より効率的に実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3686">This produces the same result in every culture and performs more efficiently.</span></span>



## Examples
 <span data-ttu-id="d5817-3687">次の例では、大文字の2つの文字列を、英語 (米国) とトルコ語 (トルコ) のカルチャを使用して小文字に変換し、その後、小文字の文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3687">The following example converts two strings of uppercase characters to lowercase characters using the English-United States and Turkish-Turkey cultures, then compares the lowercase strings.</span></span> <span data-ttu-id="d5817-3688">大文字の文字列は同じですが、1つの文字列に Unicode ラテン大文字 I が出現するたびに、もう一方の文字列には上記のドット付きのラテン大文字 I が含まれている点が異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3688">The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.tolower1/CPP/tolower.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.tolower1/CS/tolower.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.tolower1/VB/tolower.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-3689"><paramref name="culture" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3689"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="M:System.String.ToUpper" />
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public string ToLowerInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLowerInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToLowerInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLowerInvariant () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLowerInvariant();" />
      <MemberSignature Language="F#" Value="member this.ToLowerInvariant : unit -&gt; string" Usage="string.ToLowerInvariant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-3690">インバリアント カルチャの大文字と小文字の規則を使用して、この <see cref="T:System.String" /> オブジェクトのコピーを小文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3690">Returns a copy of this <see cref="T:System.String" /> object converted to lowercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="d5817-3691">現在の文字列を小文字にしたもの。</span><span class="sxs-lookup"><span data-stu-id="d5817-3691">The lowercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3692">インバリアントカルチャは、カルチャを認識しないカルチャを表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3692">The invariant culture represents a culture that is culture-insensitive.</span></span> <span data-ttu-id="d5817-3693">英語と関連付けられていますが、特定の国または地域には関連付けられていません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3693">It is associated with the English language but not with a specific country or region.</span></span> <span data-ttu-id="d5817-3694">詳細については、<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3694">For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span>

 <span data-ttu-id="d5817-3695">現在のカルチャの影響を受けない予測可能な方法で文字列が変更された場合にアプリケーションが依存している場合は、<xref:System.String.ToLowerInvariant%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3695">If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToLowerInvariant%2A> method.</span></span> <span data-ttu-id="d5817-3696"><xref:System.String.ToLowerInvariant%2A> メソッドは `ToLower(CultureInfo.InvariantCulture)`と同じです。</span><span class="sxs-lookup"><span data-stu-id="d5817-3696">The <xref:System.String.ToLowerInvariant%2A> method is equivalent to `ToLower(CultureInfo.InvariantCulture)`.</span></span> <span data-ttu-id="d5817-3697">文字列のコレクションをユーザーインターフェイスコントロールで予測可能な順序で表示する必要がある場合は、メソッドをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3697">The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3698">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3698">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3699">代わりに、現在のインスタンス内のすべての文字が小文字に変換される新しい文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3699">Instead, it returns a new string in which all characters in the current instance are converted to lowercase.</span></span>

## <a name="security-considerations"></a><span data-ttu-id="d5817-3700">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-3700">Security Considerations</span></span>
 <span data-ttu-id="d5817-3701">ファイル名、名前付きパイプ、レジストリキーなど、オペレーティングシステム識別子の小文字または大文字のバージョンが必要な場合は、<xref:System.String.ToLowerInvariant%2A> または <xref:System.String.ToUpperInvariant%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3701">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span>



## Examples
 <span data-ttu-id="d5817-3702">次の例では、複数の言語に含まれる1つの単語を含む文字列配列を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3702">The following example defines a string array that contains a single word in a number of languages.</span></span> <span data-ttu-id="d5817-3703"><xref:System.String.ToLowerInvariant%2A> メソッドは、各単語の大文字と小文字を区別しないバージョンで並列配列の要素を設定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3703">The <xref:System.String.ToLowerInvariant%2A> method is used to populate the elements of a parallel array with the case-insensitive version of each word.</span></span> <span data-ttu-id="d5817-3704"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> メソッドを使用して、小文字配列内の要素の順序に基づいて大文字と小文字を区別する配列を並べ替え、要素が言語に関係なく同じ順序で表示されるようにします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3704">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method is used to sort the case-sensitive array based on the order of elements in the lowercase array to ensure that elements appear in the same order regardless of language.</span></span>

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.tolowerinvariant/cs/tolowerinvariant.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.tolowerinvariant/vb/tolowerinvariant.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToUpperInvariant" />
        <altmember cref="M:System.String.ToLower(System.Globalization.CultureInfo)" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-3705">このインスタンスの値を <see cref="T:System.String" /> に変換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3705">Converts the value of this instance to a <see cref="T:System.String" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="string.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-3706"><see cref="T:System.String" /> のこのインスタンスを返します。実際の変換処理は実行されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3706">Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</span></span></summary>
        <returns><span data-ttu-id="d5817-3707">現在の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3707">The current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3708">このメソッドは、現在の文字列をそのまま返すだけなので、直接呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3708">Because this method simply returns the current string unchanged, there is no need to call it directly.</span></span> <span data-ttu-id="d5817-3709">この例に示すように、通常、複合書式指定操作で暗黙的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3709">It is usually called implicitly in a composite formatting operation, as the example shows.</span></span>



## Examples
 <span data-ttu-id="d5817-3710"><xref:System.String.ToString%2A> メソッドの例を次に示します。この例では、<xref:System.String.ToString%2A> メソッドが明示的に呼び出されないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3710">The following example demonstrates the <xref:System.String.ToString%2A> method.Note that the example does not explicitly call the <xref:System.String.ToString%2A> method.</span></span> <span data-ttu-id="d5817-3711">代わりに、メソッドは[複合書式指定](~/docs/standard/base-types/composite-formatting.md)機能によって暗黙的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3711">Instead, the method is called implicitly by the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature.</span></span>

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/string.tostring/CPP/string.tostring.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/string.tostring/CS/string.tostring.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/string.tostring/VB/string.tostring.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Clone" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="string.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="d5817-3712">(予約済み) カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3712">(Reserved) An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="d5817-3713"><see cref="T:System.String" /> のこのインスタンスを返します。実際の変換処理は実行されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3713">Returns this instance of <see cref="T:System.String" />; no actual conversion is performed.</span></span></summary>
        <returns><span data-ttu-id="d5817-3714">現在の文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3714">The current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3715">`provider` は予約されており、現在この操作に参加していません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3715">`provider` is reserved, and does not currently participate in this operation.</span></span>

 <span data-ttu-id="d5817-3716">このメソッドは、現在の文字列をそのまま返すだけなので、直接呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3716">Because this method simply returns the current string unchanged, there is no need to call it directly.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-3717">この文字列のコピーを大文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3717">Returns a copy of this string converted to uppercase.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public string ToUpper ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpper() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpper" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpper () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpper();" />
      <MemberSignature Language="F#" Value="member this.ToUpper : unit -&gt; string" Usage="string.ToUpper " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-3718">この文字列のコピーを大文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3718">Returns a copy of this string converted to uppercase.</span></span></summary>
        <returns><span data-ttu-id="d5817-3719">現在の文字列を大文字にしたもの。</span><span class="sxs-lookup"><span data-stu-id="d5817-3719">The uppercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3720">このメソッドは、現在のカルチャの大文字と小文字の規則を使用して、現在のインスタンスの各文字を、それと等価な大文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3720">This method uses the casing rules of the current culture to convert each character in the current instance to its uppercase equivalent.</span></span> <span data-ttu-id="d5817-3721">文字に大文字と小文字が含まれていない場合は、返された文字列にそのまま含まれます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3721">If a character does not have an uppercase equivalent, it is included unchanged in the returned string.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3722">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3722">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3723">代わりに、現在のインスタンス内のすべての文字が大文字に変換される新しい文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3723">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>

 <span data-ttu-id="d5817-3724"><xref:System.String.ToUpper%2A> メソッドは、大文字と小文字を区別しない比較で使用できるように、文字列を大文字に変換するためによく使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3724">The <xref:System.String.ToUpper%2A> method is often used to convert a string to uppercase so that it can be used in a case-insensitive comparison.</span></span> <span data-ttu-id="d5817-3725">大文字と小文字を区別しない比較を実行するには、カルチャに依存し、大文字と小文字を区別しない比較のために <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType> に設定した値を持つ <xref:System.StringComparison> パラメーターを持つ文字列比較メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3725">A better method to perform case-insensitive comparison is to call a string comparison method that has a <xref:System.StringComparison> parameter whose value you set to <xref:System.StringComparison.CurrentCultureIgnoreCase?displayProperty=nameWithType> for a culture-sensitive, case-insensitive comparison.</span></span>

## <a name="security-considerations"></a><span data-ttu-id="d5817-3726">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-3726">Security Considerations</span></span>
 <span data-ttu-id="d5817-3727"><xref:System.String.ToUpper> メソッドを呼び出すことによって生成される大文字と小文字の演算では、現在のカルチャの大文字と小文字の表記規則が考慮されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3727">The casing operation that results from calling the <xref:System.String.ToUpper> method takes the casing conventions of the current culture into account.</span></span> <span data-ttu-id="d5817-3728">ファイル名、名前付きパイプ、レジストリキーなど、オペレーティングシステム識別子の小文字または大文字のバージョンが必要な場合は、<xref:System.String.ToLowerInvariant%2A> または <xref:System.String.ToUpperInvariant%2A> 方法を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3728">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="d5817-3729">これにより、(<xref:System.String.ToUpper> メソッドとは異なり) すべてのカルチャで同じ結果が生成され、より効率的に実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3729">This produces the same result in every culture (unlike the <xref:System.String.ToUpper> method) and performs more efficiently.</span></span>



## Examples
 <span data-ttu-id="d5817-3730">次の例では、<xref:System.String.ToUpper%2A> メソッドを呼び出して、基本的なラテン、ラテン1の追加、およびラテン拡張文字セットの各文字を含む一連の1文字の文字列を変換します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3730">The following example calls the <xref:System.String.ToUpper%2A> method to convert a series of one-character strings that contain each character in the Basic Latin, Latin-1 Supplement, and Latin Extended-A character sets.</span></span> <span data-ttu-id="d5817-3731">次に、大文字が小文字と異なる文字列をそれぞれ表示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3731">It then displays each string whose uppercase character is different from its lowercase character.</span></span>

 [!code-cpp[System.String.ToUpper#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.ToUpper/cpp/ToUpperEx.cpp#1)]
 [!code-csharp[System.String.ToUpper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.ToUpper/cs/ToUpperEx.cs#1)]
 [!code-vb[System.String.ToUpper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.ToUpper/vb/ToUpperEx.vb#1)]

 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3732">「[文字列を使用するためのベストプラクティス](~/docs/standard/base-types/best-practices-strings.md)」で説明されているように、既定値を置き換える文字列の大文字と小文字の使い分けメソッドを呼び出さずに、パラメーターを明示的に指定する必要があるメソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3732">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling string casing methods that substitute default values and instead call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="d5817-3733">現在のカルチャの大文字と小文字の表記規則を使用して文字列を大文字に変換するには、その <paramref name="culture" /> パラメーターに <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> の値を指定して、<see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" /> メソッドのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3733">To convert a string to uppercase by using the casing conventions of the current culture, call the <see cref="M:System.String.ToUpper(System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public string ToUpper (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpper(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpper(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpper (culture As CultureInfo) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpper(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.ToUpper : System.Globalization.CultureInfo -&gt; string" Usage="string.ToUpper culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="d5817-3734">カルチャ固有の大文字と小文字の規則を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5817-3734">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="d5817-3735">指定されたカルチャの大文字と小文字の規則を使用して、この文字列のコピーを大文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3735">Returns a copy of this string converted to uppercase, using the casing rules of the specified culture.</span></span></summary>
        <returns><span data-ttu-id="d5817-3736">現在の文字列を大文字にしたもの。</span><span class="sxs-lookup"><span data-stu-id="d5817-3736">The uppercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3737">`culture` パラメーターによって指定されたカルチャの大文字と小文字の規則によって、文字列の大文字と小文字の変更方法が決まります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3737">The casing rules of the culture specified by the `culture` parameter determine the way the case of a string is changed.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3738">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3738">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3739">代わりに、現在のインスタンス内のすべての文字が大文字に変換される新しい文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3739">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>

## <a name="security-considerations"></a><span data-ttu-id="d5817-3740">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-3740">Security Considerations</span></span>
 <span data-ttu-id="d5817-3741"><xref:System.String.ToUpper%28System.Globalization.CultureInfo%29> メソッドに <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>以外の <xref:System.Globalization.CultureInfo> オブジェクトを渡すと、大文字と小文字の操作によってカルチャ固有の規則が考慮されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3741">If you pass the <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29> method a <xref:System.Globalization.CultureInfo> object other than <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>, the casing operation will take culture-specific rules into account.</span></span> <span data-ttu-id="d5817-3742">ファイル名、名前付きパイプ、レジストリキーなど、オペレーティングシステム識別子の小文字または大文字のバージョンが必要な場合は、<xref:System.String.ToLowerInvariant%2A> または <xref:System.String.ToUpperInvariant%2A> 方法を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3742">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="d5817-3743">これにより、すべてのカルチャで同じ結果が生成され、より効率的に実行されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3743">This produces the same result in every culture and performs more efficiently.</span></span>



## Examples
 <span data-ttu-id="d5817-3744">次の例では、米国英語とトルコ語のカルチャを使用して小文字の文字列を大文字の2つの文字列に変換し、その後、大文字の文字列を比較します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3744">The following example converts a string of lowercase characters to two strings of uppercase characters using the English-United States and Turkish-Turkey cultures, then compares the uppercase strings.</span></span> <span data-ttu-id="d5817-3745">大文字の文字列は同じですが、1つの文字列に Unicode ラテン大文字 I が出現するたびに、もう一方の文字列には上記のドット付きのラテン大文字 I が含まれている点が異なります。</span><span class="sxs-lookup"><span data-stu-id="d5817-3745">The uppercase strings are identical except that for each occurrence of the Unicode LATIN CAPITAL LETTER I in one string, the other string contains LATIN CAPITAL LETTER I WITH DOT ABOVE.</span></span>

 [!code-csharp[string.toupper1#1](~/samples/snippets/csharp/VS_Snippets_CLR/string.toupper1/CS/toupper.cs#1)]
 [!code-vb[string.toupper1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/string.toupper1/VB/toupper.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d5817-3746"><paramref name="culture" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3746"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpperInvariant" />
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public string ToUpperInvariant ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToUpperInvariant() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.ToUpperInvariant" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUpperInvariant () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToUpperInvariant();" />
      <MemberSignature Language="F#" Value="member this.ToUpperInvariant : unit -&gt; string" Usage="string.ToUpperInvariant " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-3747">インバリアント カルチャの大文字と小文字の規則を使用して、この <see cref="T:System.String" /> オブジェクトのコピーを大文字に変換して返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3747">Returns a copy of this <see cref="T:System.String" /> object converted to uppercase using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="d5817-3748">現在の文字列を大文字にしたもの。</span><span class="sxs-lookup"><span data-stu-id="d5817-3748">The uppercase equivalent of the current string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="d5817-3749">インバリアントカルチャは、カルチャを認識しないカルチャを表します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3749">The invariant culture represents a culture that is culture-insensitive.</span></span> <span data-ttu-id="d5817-3750">英語と関連付けられていますが、特定の国または地域には関連付けられていません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3750">It is associated with the English language but not with a specific country or region.</span></span> <span data-ttu-id="d5817-3751">詳細については、<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> プロパティを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d5817-3751">For more information, see the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> property.</span></span>

 <span data-ttu-id="d5817-3752">現在のカルチャの影響を受けない予測可能な方法で文字列が変更された場合にアプリケーションが依存している場合は、<xref:System.String.ToUpperInvariant%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3752">If your application depends on the case of a string changing in a predictable way that is unaffected by the current culture, use the <xref:System.String.ToUpperInvariant%2A> method.</span></span> <span data-ttu-id="d5817-3753"><xref:System.String.ToUpperInvariant%2A> メソッドは `ToUpper(CultureInfo.InvariantCulture)`と同じです。</span><span class="sxs-lookup"><span data-stu-id="d5817-3753">The <xref:System.String.ToUpperInvariant%2A> method is equivalent to `ToUpper(CultureInfo.InvariantCulture)`.</span></span> <span data-ttu-id="d5817-3754">文字列のコレクションをユーザーインターフェイスコントロールで予測可能な順序で表示する必要がある場合は、メソッドをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3754">The method is recommended when a collection of strings must appear in a predictable order in a user interface control.</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3755">このメソッドは、現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3755">This method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3756">代わりに、現在のインスタンス内のすべての文字が大文字に変換される新しい文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3756">Instead, it returns a new string in which all characters in the current instance are converted to uppercase.</span></span>

## <a name="security-considerations"></a><span data-ttu-id="d5817-3757">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="d5817-3757">Security Considerations</span></span>
 <span data-ttu-id="d5817-3758">ファイル名、名前付きパイプ、レジストリキーなど、オペレーティングシステム識別子の小文字または大文字のバージョンが必要な場合は、<xref:System.String.ToLowerInvariant%2A> または <xref:System.String.ToUpperInvariant%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3758">If you need the lowercase or uppercase version of an operating system identifier, such as a file name, named pipe, or registry key, use the <xref:System.String.ToLowerInvariant%2A> or <xref:System.String.ToUpperInvariant%2A> methods.</span></span>



## Examples
 <span data-ttu-id="d5817-3759">次の例では、複数の言語に含まれる1つの単語を含む文字列配列を定義します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3759">The following example defines a string array that contains a single word in a number of languages.</span></span> <span data-ttu-id="d5817-3760"><xref:System.String.ToUpperInvariant%2A> メソッドは、各単語の大文字と小文字を区別しないバージョンで並列配列の要素を設定するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3760">The <xref:System.String.ToUpperInvariant%2A> method is used to populate the elements of a parallel array with the case-insensitive version of each word.</span></span> <span data-ttu-id="d5817-3761"><xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> メソッドは、大文字の配列の要素の順序に基づいて大文字と小文字を区別する配列を並べ替えるために使用されます。これにより、要素は言語に関係なく同じ順序で表示されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3761">The <xref:System.Array.Sort%60%602%28%60%600%5B%5D%2C%60%601%5B%5D%2CSystem.Collections.Generic.IComparer%7B%60%600%7D%29?displayProperty=nameWithType> method is used to sort the case-sensitive array based on the order of elements in the uppercase array to ensure that elements appear in the same order regardless of language.</span></span>

 [!code-csharp[System.String.ToUpperInvariant#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.toupperinvariant/cs/toupperinvariant.cs#1)]
 [!code-vb[System.String.ToUpperInvariant#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.toupperinvariant/vb/toupperinvariant.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToLowerInvariant" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Trim">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d5817-3762">現在の文字列から、指定した文字セットを先頭および末尾の出現箇所からすべて削除した新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3762">Returns a new string in which all leading and trailing occurrences of a set of specified characters from the current string are removed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim();" />
      <MemberSignature Language="F#" Value="member this.Trim : unit -&gt; string" Usage="string.Trim " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-3763">現在の文字列から、先頭および末尾にある空白文字をすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3763">Removes all leading and trailing white-space characters from the current string.</span></span></summary>
        <returns><span data-ttu-id="d5817-3764">現在の文字列の先頭および末尾から空白文字をすべて削除した後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3764">The string that remains after all white-space characters are removed from the start and end of the current string.</span></span> <span data-ttu-id="d5817-3765">現在のインスタンスから文字をトリミングできない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3765">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3766">`Trim` メソッドは、現在の文字列からすべての先頭および末尾の空白文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3766">The `Trim` method removes from the current string all leading and trailing white-space characters.</span></span> <span data-ttu-id="d5817-3767">それぞれの先頭および末尾のトリム操作は、空白以外の文字が検出されると停止します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3767">Each leading and trailing trim operation stops when a non-white-space character is encountered.</span></span> <span data-ttu-id="d5817-3768">たとえば、現在の文字列が "abc xyz" の場合、`Trim` メソッドは "abc xyz" を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3768">For example, if the current string is "   abc   xyz    ", the `Trim` method returns "abc   xyz".</span></span> <span data-ttu-id="d5817-3769">文字列内の単語間の空白文字を削除するには、 [.net の正規表現](~/docs/standard/base-types/regular-expressions.md)を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3769">To remove white-space characters between words in a string, use [.NET Regular Expressions](~/docs/standard/base-types/regular-expressions.md).</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3770">`Trim` メソッドが現在のインスタンスから文字を削除した場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3770">If the `Trim` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3771">代わりに、現在のインスタンスで見つかった先頭および末尾の空白文字がすべて削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3771">Instead, it returns a new string in which all leading and trailing white space characters found in the current instance are removed.</span></span>

<span data-ttu-id="d5817-3772">現在の文字列が <xref:System.String.Empty?displayProperty=nameWithtype> に等しい場合、または現在のインスタンス内のすべての文字が空白文字で構成されている場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithtype>を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3772">If the current string equals <xref:System.String.Empty?displayProperty=nameWithtype> or all the characters in the current instance consist of white-space characters, the method returns <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

<span data-ttu-id="d5817-3773">空白文字は、Unicode 規格で定義されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3773">White-space characters are defined by the Unicode standard.</span></span> <span data-ttu-id="d5817-3774">`Trim` メソッドは、<xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> メソッドに渡されるときに `true` の戻り値を生成する先頭と末尾の文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3774">The `Trim` method removes any leading and trailing characters that produce a return value of `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>

## Examples

<span data-ttu-id="d5817-3775">次の例では、<xref:System.String.Trim?displayProperty=nameWithType> メソッドを使用して、ユーザーが入力した文字列から余分な空白をすべて削除してから、それらを連結します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3775">The following example uses the <xref:System.String.Trim?displayProperty=nameWithType> method to remove any extra white space from strings entered by the user before concatenating them.</span></span>

[!code-cpp[System.String.Trim#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Trim/cpp/trim2.cpp#2)]
[!code-csharp[System.String.Trim#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Trim/cs/Trim2.cs#2)]
[!code-vb[System.String.Trim#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Trim/vb/Trim2.vb#2)]

          ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3776">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 以前のバージョンでは、このメソッドがトリムする空白文字の内部リストが保持されています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3776">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintain an internal list of white-space characters that this method trims.</span></span> <span data-ttu-id="d5817-3777">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降では、メソッドはすべての Unicode 空白文字 (つまり、<see cref="M:System.Char.IsWhiteSpace(System.Char)" /> メソッドに渡されるときに <see langword="true" /> 戻り値を生成する文字) をトリムします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3777">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="d5817-3778">この変更のため、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 以前のバージョンの <see cref="M:System.String.Trim" /> メソッドでは、2つの文字、0の幅のスペース (U + 200B) とゼロ幅の改行なしスペース (U + FEFF) が削除されます。これは、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降のバージョンの <see cref="M:System.String.Trim" /> メソッドでは削除されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3778">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and later versions does not remove.</span></span> <span data-ttu-id="d5817-3779">さらに、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 以前のバージョンの <see cref="M:System.String.Trim" /> メソッドでは、3つの Unicode の空白文字 (モンゴル語の母音の区切り記号 (U + 180 e)、ナローの区切りスペース (U + 202F)、中かっこ (U + 205F)) は削除されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3779">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para></block>
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(char trimChar);" />
      <MemberSignature Language="F#" Value="member this.Trim : char -&gt; string" Usage="string.Trim trimChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="trimChar"><span data-ttu-id="d5817-3780">削除する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-3780">A Unicode character to remove.</span></span></param>
        <summary><span data-ttu-id="d5817-3781">現在の文字列から、文字の先頭および末尾のインスタンスをすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3781">Removes all leading and trailing instances of a character from the current string.</span></span></summary>
        <returns><span data-ttu-id="d5817-3782">現在の文字列の先頭と末尾から <paramref name="trimChar" /> 文字のすべてのインスタンスが削除された後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3782">The string that remains after all instances of the <paramref name="trimChar" /> character are removed from the start and end of the current string.</span></span> <span data-ttu-id="d5817-3783">現在のインスタンスから文字をトリミングできない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3783">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3784">`Trim(System.Char)` メソッドは、`trimChar` 文字の先頭および末尾のすべてのインスタンスを現在の文字列から削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3784">The `Trim(System.Char)` method removes from the current string all leading and trailing instances of the `trimChar` character.</span></span> <span data-ttu-id="d5817-3785">`trimChar` とは異なる文字が検出されると、それぞれの先頭および末尾のトリム操作が停止します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3785">Each leading and trailing trim operation stops when a character different from `trimChar` is encountered.</span></span> <span data-ttu-id="d5817-3786">たとえば、`trimChar` が `-`、現在の文字列が "---abc---xyz----" の場合、`Trim(System.Char)` メソッドは "abc---xyz" を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3786">For example, if `trimChar` is `-` and the current string is "---abc---xyz----", the `Trim(System.Char)` method returns "abc---xyz".</span></span> <span data-ttu-id="d5817-3787">文字列内の単語間の文字を削除するには、 [.net の正規表現](~/docs/standard/base-types/regular-expressions.md)を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3787">To remove characters between words in a string, use [.NET Regular Expressions](~/docs/standard/base-types/regular-expressions.md).</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3788">`Trim(System.Char)` メソッドが現在のインスタンスから文字を削除した場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3788">If the `Trim(System.Char)` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3789">代わりに、現在のインスタンスで見つかったすべての先頭および末尾の `trimChar` 文字が削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3789">Instead, it returns a new string in which all leading and trailing `trimChar` characters found in the current instance are removed.</span></span>

<span data-ttu-id="d5817-3790">現在の文字列が <xref:System.String.Empty?displayProperty=nameWithtype> に等しい場合、または現在のインスタンス内のすべての文字が `trimChar` 文字で構成されている場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithtype>を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3790">If the current string equals <xref:System.String.Empty?displayProperty=nameWithtype> or all the characters in the current instance consist of `trimChar` characters, the method returns <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public string Trim (params char[] trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Trim(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.Trim(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Trim(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberSignature Language="F#" Value="member this.Trim : char[] -&gt; string" Usage="string.Trim trimChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars"><span data-ttu-id="d5817-3791">削除する Unicode 文字の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3791">An array of Unicode characters to remove, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d5817-3792">現在の文字列から、配列で指定された一連の文字が先頭および末尾に現れる箇所をすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3792">Removes all leading and trailing occurrences of a set of characters specified in an array from the current string.</span></span></summary>
        <returns><span data-ttu-id="d5817-3793">現在の文字列の先頭および末尾から、<paramref name="trimChars" /> パラメーターの文字をすべて削除した後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3793">The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the start and end of the current string.</span></span> <span data-ttu-id="d5817-3794"><paramref name="trimChars" /> が <see langword="null" /> または空の配列の場合は、代わりに空白文字が削除されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3794">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead.</span></span> <span data-ttu-id="d5817-3795">現在のインスタンスから文字をトリミングできない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3795">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3796">`Trim(System.Char[])` メソッドは、`trimChars` パラメーターに含まれる先頭と末尾のすべての文字を現在の文字列から削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3796">The `Trim(System.Char[])` method removes from the current string all leading and trailing characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="d5817-3797">`trimChars` に含まれていない文字が検出されると、それぞれの先頭および末尾のトリム操作が停止します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3797">Each leading and trailing trim operation stops when a character that is not in `trimChars` is encountered.</span></span> <span data-ttu-id="d5817-3798">たとえば、現在の文字列が "123abc456xyz789" で、`trimChars` に "1" ~ "9" の数字が含まれている場合、`Trim(System.Char[])` メソッドは "abc456xyz" を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3798">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the `Trim(System.Char[])` method returns "abc456xyz".</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3799">`Trim(System.Char[])` メソッドが現在のインスタンスから文字を削除した場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3799">If the `Trim(System.Char[])` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3800">代わりに、現在のインスタンスで見つかったすべての先頭および末尾の `trimChars` 文字が削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3800">Instead, it returns a new string in which all leading and trailing `trimChars` characters found in the current instance are removed.</span></span>

<span data-ttu-id="d5817-3801">現在の文字列が <xref:System.String.Empty?displayProperty=nameWithtype> に等しい場合、または現在のインスタンス内のすべての文字が `trimChars` 配列内の文字で構成されている場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithtype>を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3801">If the current string equals <xref:System.String.Empty?displayProperty=nameWithtype> or all the characters in the current instance consist of characters in the `trimChars` array, the method returns <xref:System.String.Empty?displayProperty=nameWithtype>.</span></span>

<span data-ttu-id="d5817-3802">`trimChars` が `null` または空の配列の場合、このメソッドは、メソッドが <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> メソッドに渡されたときに `true` を返す、先頭または末尾の文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3802">If `trimChars` is `null` or an empty array, this method removes any leading or trailing characters that result in the method returning `true` when they are passed to the <xref:System.Char.IsWhiteSpace%2A?displayProperty=nameWithType> method.</span></span>

## Examples

<span data-ttu-id="d5817-3803">次の例では、`Trim(System.Char[])` メソッドを使用して、文字列からスペース、アスタリスク (\*)、およびアポストロフィ (') 文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3803">The following example uses the `Trim(System.Char[])` method to remove space, asterisk (\*), and apostrophe (') characters from a string.</span></span>

[!code-cpp[System.String.Trim#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.String.Trim/cpp/trim1.cpp#1)]
[!code-csharp-interactive[System.String.Trim#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Trim/cs/Trim1.cs#1)]
[!code-vb[System.String.Trim#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Trim/vb/Trim1.vb#1)]

          ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3804">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 以前のバージョンは、<paramref name="trimChars" /> が <see langword="null" /> または空の配列の場合に、このメソッドがトリムする空白文字の内部リストを保持します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3804">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array.</span></span> <span data-ttu-id="d5817-3805">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降では、<paramref name="trimChars" /> が <see langword="null" /> または空の配列の場合、メソッドはすべての Unicode 空白文字 (つまり、<see cref="M:System.Char.IsWhiteSpace(System.Char)" /> メソッドに渡されるときに <see langword="true" /> 戻り値を生成する文字) をトリムします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3805">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="d5817-3806">この変更のため、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 以前のバージョンの <see cref="M:System.String.Trim" /> メソッドでは、2つの文字、0の幅のスペース (U + 200B) とゼロ幅の改行なしスペース (U + FEFF) が削除されます。これは、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降のバージョンの <see cref="M:System.String.Trim" /> メソッドでは削除されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3806">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and later versions does not remove.</span></span> <span data-ttu-id="d5817-3807">さらに、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 以前のバージョンの <see cref="M:System.String.Trim" /> メソッドでは、3つの Unicode の空白文字 (モンゴル語の母音の区切り記号 (U + 180 e)、ナローの区切りスペース (U + 202F)、中かっこ (U + 205F)) は削除されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3807">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd();" />
      <MemberSignature Language="F#" Value="member this.TrimEnd : unit -&gt; string" Usage="string.TrimEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-3808">現在の文字列から末尾の空白文字をすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3808">Removes all the trailing white-space characters from the current string.</span></span></summary>
        <returns><span data-ttu-id="d5817-3809">現在の文字列の末尾から空白文字をすべて削除した後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3809">The string that remains after all white-space characters are removed from the end of the current string.</span></span> <span data-ttu-id="d5817-3810">現在のインスタンスから文字をトリミングできない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3810">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3811">`TrimEnd` メソッドは、現在の文字列からすべての末尾の空白文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3811">The `TrimEnd` method removes from the current string all trailing white-space characters.</span></span> <span data-ttu-id="d5817-3812">トリム操作は、文字列の末尾に空白以外の文字が最初に出現したときに停止します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3812">The trim operation stops when the first non white-space character is encountered at the end of the string.</span></span> <span data-ttu-id="d5817-3813">たとえば、現在の文字列が "abc xyz" の場合、`TrimEnd` メソッドは "abc xyz" を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3813">For example, if the current string is "   abc   xyz    ", the `TrimEnd` method returns "   abc   xyz".</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3814">`TrimEnd` メソッドが現在のインスタンスから文字を削除した場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3814">If the `TrimEnd` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3815">代わりに、すべての末尾の空白文字が現在の文字列から削除される新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3815">Instead, it returns a new string in which all trailing white-space characters are removed from the current string.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd(char trimChar);" />
      <MemberSignature Language="F#" Value="member this.TrimEnd : char -&gt; string" Usage="string.TrimEnd trimChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="trimChar"><span data-ttu-id="d5817-3816">削除する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-3816">A Unicode character to remove.</span></span></param>
        <summary><span data-ttu-id="d5817-3817">現在の文字列から、末尾に出現する文字をすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3817">Removes all the trailing occurrences of a character from the current string.</span></span></summary>
        <returns><span data-ttu-id="d5817-3818">現在の文字列の末尾から、<paramref name="trimChar" /> 文字の出現箇所がすべて削除された後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3818">The string that remains after all occurrences of the <paramref name="trimChar" /> character are removed from the end of the current string.</span></span> <span data-ttu-id="d5817-3819">現在のインスタンスから文字をトリミングできない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3819">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3820">`TrimEnd(System.Char)` メソッドは、現在の文字列からすべての末尾の文字 `trimChar` を削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3820">The `TrimEnd(System.Char)` method removes from the current string all trailing `trimChar` characters.</span></span> <span data-ttu-id="d5817-3821">トリム操作は、文字列の末尾で `trimChar` されていない最初の文字が見つかったときに停止します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3821">The trim operation stops when the first character that is not `trimChar` is encountered at the end of the string.</span></span> <span data-ttu-id="d5817-3822">たとえば、`trimChar` が `-`、現在の文字列が "---abc---xyz----" の場合、`TrimEnd(System.Char)` メソッドは "---abc---xyz" を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3822">For example, if `trimChar` is `-` and the current string is "---abc---xyz----", the `TrimEnd(System.Char)` method returns "---abc---xyz".</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3823">`TrimEnd(System.Char)` メソッドが現在のインスタンスから文字を削除した場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3823">If the `TrimEnd(System.Char)` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3824">代わりに、現在の文字列からすべての末尾の `trimChar` 文字が削除される新しい文字列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3824">Instead, it returns a new string in which all trailing `trimChar` characters are removed from the current string.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimEnd">
      <MemberSignature Language="C#" Value="public string TrimEnd (params char[] trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimEnd(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimEnd(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimEnd (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimEnd(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberSignature Language="F#" Value="member this.TrimEnd : char[] -&gt; string" Usage="string.TrimEnd trimChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars"><span data-ttu-id="d5817-3825">削除する Unicode 文字の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3825">An array of Unicode characters to remove, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d5817-3826">現在の文字列から、配列で指定された一連の文字が末尾に現れる箇所をすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3826">Removes all the trailing occurrences of a set of characters specified in an array from the current string.</span></span></summary>
        <returns><span data-ttu-id="d5817-3827">現在の文字列の末尾から、<paramref name="trimChars" /> パラメーターの文字をすべて削除した後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3827">The string that remains after all occurrences of the characters in the <paramref name="trimChars" /> parameter are removed from the end of the current string.</span></span> <span data-ttu-id="d5817-3828"><paramref name="trimChars" /> が <see langword="null" /> または空の配列の場合は、代わりに Unicode の空白文字が削除されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3828">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, Unicode white-space characters are removed instead.</span></span> <span data-ttu-id="d5817-3829">現在のインスタンスから文字をトリミングできない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3829">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3830">`TrimEnd(System.Char[])` メソッドは、`trimChars` パラメーターに含まれるすべての末尾の文字を現在の文字列から削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3830">The `TrimEnd(System.Char[])` method removes from the current string all trailing characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="d5817-3831">`trimChars` に含まれていない最初の文字が文字列の末尾で見つかった場合、トリム操作は停止します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3831">The trim operation stops when the first character that is not in `trimChars` is encountered at the end of the string.</span></span> <span data-ttu-id="d5817-3832">たとえば、現在の文字列が "123abc456xyz789" で、`trimChars` に "1" ~ "9" の数字が含まれている場合、`TrimEnd(System.Char[])` メソッドは "123abc456xyz" を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3832">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the `TrimEnd(System.Char[])` method returns "123abc456xyz".</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3833">`TrimEnd(System.Char[])` メソッドが現在のインスタンスから文字を削除した場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3833">If the `TrimEnd(System.Char[])` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3834">代わりに、`trimChars` で見つかったすべての末尾の文字が現在の文字列から削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3834">Instead, it returns a new string in which all trailing characters found in `trimChars` are removed from the current string.</span></span>

## Examples

<span data-ttu-id="d5817-3835">次の例は、`TrimEnd(System.Char[])` メソッドを使用して、文字列の末尾から空白や句読点を除去する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3835">The following example demonstrates how you can use the `TrimEnd(System.Char[])` method to trim white space or punctuation marks from the end of a string.</span></span>

[!code-csharp-interactive[System.String.TrimEnd#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimEnd/cs/sample2.cs#2)]
[!code-vb[System.String.TrimEnd#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimEnd/vb/Sample2.vb#2)]

          ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3836">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 以前のバージョンは、<paramref name="trimChars" /> が <see langword="null" /> または空の配列の場合に、このメソッドがトリムする空白文字の内部リストを保持します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3836">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array.</span></span> <span data-ttu-id="d5817-3837">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降では、<paramref name="trimChars" /> が <see langword="null" /> または空の配列の場合、メソッドはすべての Unicode 空白文字 (つまり、<see cref="M:System.Char.IsWhiteSpace(System.Char)" /> メソッドに渡されるときに <see langword="true" /> 戻り値を生成する文字) をトリムします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3837">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="d5817-3838">この変更のため、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 以前のバージョンの <see cref="M:System.String.Trim" /> メソッドでは、2つの文字、0の幅のスペース (U + 200B) とゼロ幅の改行なしスペース (U + FEFF) が削除されます。これは、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 以降のバージョンの <see cref="M:System.String.Trim" /> メソッドでは削除されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3838">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and later versions does not remove.</span></span> <span data-ttu-id="d5817-3839">さらに、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 以前のバージョンの <see cref="M:System.String.Trim" /> メソッドでは、3つの Unicode の空白文字 (モンゴル語の母音の区切り記号 (U + 180 e)、ナローの区切りスペース (U + 202F)、中かっこ (U + 205F)) は削除されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3839">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
        <altmember cref="M:System.String.TrimStart(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart();" />
      <MemberSignature Language="F#" Value="member this.TrimStart : unit -&gt; string" Usage="string.TrimStart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d5817-3840">現在の文字列から先頭の空白文字をすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3840">Removes all the leading white-space characters from the current string.</span></span></summary>
        <returns><span data-ttu-id="d5817-3841">現在の文字列の先頭からすべての空白文字が削除された後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3841">The string that remains after all white-space characters are removed from the start of the current string.</span></span> <span data-ttu-id="d5817-3842">現在のインスタンスから文字をトリミングできない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3842">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3843">`TrimStart` メソッドは、現在の文字列からすべての先頭の空白文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3843">The `TrimStart` method removes from the current string all leading white-space characters.</span></span> <span data-ttu-id="d5817-3844">空白以外の文字が検出されると、トリム操作は停止します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3844">The trim operation stops when a non white-space character is encountered.</span></span> <span data-ttu-id="d5817-3845">たとえば、現在の文字列が "abc xyz" の場合、`TrimStart` メソッドは "abc xyz" を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3845">For example, if the current string is "   abc   xyz    ", the `TrimStart` method returns "abc   xyz    ".</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3846">`TrimStart` メソッドが現在のインスタンスから文字を削除した場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3846">If the `TrimStart` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3847">代わりに、現在のインスタンスで見つかったすべての先頭の空白文字が削除される新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3847">Instead, it returns a new string in which all leading white space characters found in the current instance are removed.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart (char trimChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart(char trimChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart (trimChar As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart(char trimChar);" />
      <MemberSignature Language="F#" Value="member this.TrimStart : char -&gt; string" Usage="string.TrimStart trimChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChar" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="trimChar"><span data-ttu-id="d5817-3848">削除する Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="d5817-3848">The Unicode character to remove.</span></span></param>
        <summary><span data-ttu-id="d5817-3849">現在の文字列から、指定した文字が先頭に現れる箇所をすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3849">Removes all the leading occurrences of a specified character from the current string.</span></span></summary>
        <returns><span data-ttu-id="d5817-3850">現在の文字列の先頭から、<paramref name="trimChar" /> 文字の出現箇所がすべて削除された後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3850">The string that remains after all occurrences of the <paramref name="trimChar" /> character are removed from the start of the current string.</span></span> <span data-ttu-id="d5817-3851">現在のインスタンスから文字をトリミングできない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3851">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3852">`TrimStart(System.Char)` メソッドは、現在の文字列からすべての先頭 `trimChar` 文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3852">The `TrimStart(System.Char)` method removes from the current string all leading `trimChar` characters.</span></span> <span data-ttu-id="d5817-3853">`trimChar` ない文字が検出されると、トリム操作は停止します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3853">The trim operation stops when a character that is not `trimChar` is encountered.</span></span> <span data-ttu-id="d5817-3854">たとえば、`trimChar` が `-`、現在の文字列が "---abc---xyz----" の場合、`TrimStart(System.Char)` メソッドは "abc---xyz----" を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3854">For example, if `trimChar` is `-` and the current string is "---abc---xyz----", the `TrimStart(System.Char)` method returns "abc---xyz----".</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3855">`TrimStart(System.Char)` メソッドが現在のインスタンスから文字を削除した場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3855">If the `TrimStart(System.Char)` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3856">代わりに、現在のインスタンスで見つかったすべての先頭 `trimChar` 文字が削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3856">Instead, it returns a new string in which all leading `trimChar` characters found in the current instance are removed.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimStart">
      <MemberSignature Language="C#" Value="public string TrimStart (params char[] trimChars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string TrimStart(char[] trimChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.String.TrimStart(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Function TrimStart (ParamArray trimChars As Char()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ TrimStart(... cli::array &lt;char&gt; ^ trimChars);" />
      <MemberSignature Language="F#" Value="member this.TrimStart : char[] -&gt; string" Usage="string.TrimStart trimChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trimChars" Type="System.Char[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trimChars"><span data-ttu-id="d5817-3857">削除する Unicode 文字の配列、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d5817-3857">An array of Unicode characters to remove, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d5817-3858">現在の文字列から、配列で指定された一連の文字が先頭に現れる箇所をすべて削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3858">Removes all the leading occurrences of a set of characters specified in an array from the current string.</span></span></summary>
        <returns><span data-ttu-id="d5817-3859">現在の文字列の先頭から、<paramref name="trimChars" /> パラメーターの文字をすべて削除した後に残った文字列。</span><span class="sxs-lookup"><span data-stu-id="d5817-3859">The string that remains after all occurrences of characters in the <paramref name="trimChars" /> parameter are removed from the start of the current string.</span></span> <span data-ttu-id="d5817-3860"><paramref name="trimChars" /> が <see langword="null" /> または空の配列の場合は、代わりに空白文字が削除されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3860">If <paramref name="trimChars" /> is <see langword="null" /> or an empty array, white-space characters are removed instead.</span></span> <span data-ttu-id="d5817-3861">現在のインスタンスから文字をトリミングできない場合、メソッドは現在のインスタンスを変更せずに返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3861">If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="d5817-3862">`TrimStart(System.Char[])` メソッドは、`trimChars` パラメーターに含まれるすべての先頭文字を現在の文字列から削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3862">The `TrimStart(System.Char[])` method removes from the current string all leading characters that are in the `trimChars` parameter.</span></span> <span data-ttu-id="d5817-3863">`trimChars` に含まれていない文字が検出されると、トリム操作は停止します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3863">The trim operation stops when a character that is not in `trimChars` is encountered.</span></span> <span data-ttu-id="d5817-3864">たとえば、現在の文字列が "123abc456xyz789" で、`trimChars` に "1" ~ "9" の数字が含まれている場合、`TrimStart(System.Char[])` メソッドは "abc456xyz789" を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3864">For example, if the current string is "123abc456xyz789" and `trimChars` contains the digits from "1" through "9", the `TrimStart(System.Char[])` method returns "abc456xyz789".</span></span>

> [!NOTE]
>  <span data-ttu-id="d5817-3865">`TrimStart(System.Char[])` メソッドが現在のインスタンスから文字を削除した場合、このメソッドは現在のインスタンスの値を変更しません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3865">If the `TrimStart(System.Char[])` method removes any characters from the current instance, this method does not modify the value of the current instance.</span></span> <span data-ttu-id="d5817-3866">代わりに、現在のインスタンスで見つかった `trimChars` パラメーターに含まれるすべての先頭文字が削除された新しい文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3866">Instead, it returns a new string in which all leading characters that are in the `trimChars` parameter found in the current instance are removed.</span></span>

## Examples

<span data-ttu-id="d5817-3867">次の例は、<xref:System.String.TrimStart%2A> メソッドの基本的な機能を示しています。</span><span class="sxs-lookup"><span data-stu-id="d5817-3867">The following example demonstrates the basic functionality of the <xref:System.String.TrimStart%2A> method:</span></span>

:::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs" id="Snippet1":::
:::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb" id="Snippet1":::

<span data-ttu-id="d5817-3868">次の例では、<xref:System.String.TrimStart%2A> メソッドを使用して、ソースコードの行から空白とコメント文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3868">The following example uses the <xref:System.String.TrimStart%2A> method to trim white space and comment characters from lines of source code.</span></span> <span data-ttu-id="d5817-3869">`StripComments` メソッドは、<xref:System.String.TrimStart%2A> への呼び出しをラップし、空白とコメント文字を含む文字配列を渡します。これは、Visual Basic のアポストロフィ (') と、のC#スラッシュ (/) です。</span><span class="sxs-lookup"><span data-stu-id="d5817-3869">The `StripComments` method wraps a call to <xref:System.String.TrimStart%2A> and passes it a character array that contains a space and the comment character, which is an apostrophe ( ' ) in Visual Basic and a slash ( / ) in C#.</span></span> <span data-ttu-id="d5817-3870"><xref:System.String.TrimStart%2A> メソッドは、文字列がコメントであるかどうかを評価するときに先頭の空白を削除するためにも呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d5817-3870">The <xref:System.String.TrimStart%2A> method is also called to remove leading white space when evaluating whether a string is a comment.</span></span>

[!code-csharp[System.String.TrimStart#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#2)]
[!code-vb[System.String.TrimStart#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#2)]

<span data-ttu-id="d5817-3871">`StripComments` メソッドを呼び出す例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3871">The following example then illustrates a call to the `StripComments` method.</span></span>

[!code-csharp[System.String.TrimStart#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.TrimStart/cs/sample.cs#3)]
[!code-vb[System.String.TrimStart#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.TrimStart/vb/sample.vb#3)]

          ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="d5817-3872">[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 以前のバージョンは、<paramref name="trimChars" /> が <see langword="null" /> または空の配列の場合に、このメソッドがトリムする空白文字の内部リストを保持します。</span><span class="sxs-lookup"><span data-stu-id="d5817-3872">The [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions maintains an internal list of white-space characters that this method trims if <paramref name="trimChars" /> is <see langword="null" /> or an empty array.</span></span> <span data-ttu-id="d5817-3873">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]以降では、<paramref name="trimChars" /> が <see langword="null" /> または空の配列の場合、メソッドはすべての Unicode 空白文字 (つまり、<see cref="M:System.Char.IsWhiteSpace(System.Char)" /> メソッドに渡されるときに <see langword="true" /> 戻り値を生成する文字) をトリムします。</span><span class="sxs-lookup"><span data-stu-id="d5817-3873">Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], if <paramref name="trimChars" /> is <see langword="null" /> or an empty array, the method trims all Unicode white-space characters (that is, characters that produce a <see langword="true" /> return value when they are passed to the <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> method).</span></span> <span data-ttu-id="d5817-3874">この変更のため、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 以前のバージョンの <see cref="M:System.String.Trim" /> メソッドでは、2つの文字、0の幅のスペース (U + 200B) とゼロ幅の改行なしスペース (U + FEFF) が削除されます。これは、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 以降のバージョンの <see cref="M:System.String.Trim" /> メソッドでは削除されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3874">Because of this change, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions removes two characters, ZERO WIDTH SPACE (U+200B) and ZERO WIDTH NO-BREAK SPACE (U+FEFF), that the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] and later versions does not remove.</span></span> <span data-ttu-id="d5817-3875">さらに、[!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] 以前のバージョンの <see cref="M:System.String.Trim" /> メソッドでは、3つの Unicode の空白文字 (モンゴル語の母音の区切り記号 (U + 180 e)、ナローの区切りスペース (U + 202F)、中かっこ (U + 205F)) は削除されません。</span><span class="sxs-lookup"><span data-stu-id="d5817-3875">In addition, the <see cref="M:System.String.Trim" /> method in the [!INCLUDE[net_v35SP1_short](~/includes/net-v35sp1-short-md.md)] and earlier versions does not trim three Unicode white-space characters: MONGOLIAN VOWEL SEPARATOR (U+180E), NARROW NO-BREAK SPACE (U+202F), and MEDIUM MATHEMATICAL SPACE (U+205F).</span></span></para></block>
        <altmember cref="T:System.Char" />
        <altmember cref="M:System.String.Trim(System.Char[])" />
        <altmember cref="M:System.String.TrimEnd(System.Char[])" />
        <altmember cref="M:System.Char.IsWhiteSpace(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>
