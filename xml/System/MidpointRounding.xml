<Type Name="MidpointRounding" FullName="System.MidpointRounding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="16852c5650fe39be383a2014289015f7c26bc340" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82485751" /></Metadata><TypeSignature Language="C#" Value="public enum MidpointRounding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed MidpointRounding extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.MidpointRounding" />
  <TypeSignature Language="VB.NET" Value="Public Enum MidpointRounding" />
  <TypeSignature Language="C++ CLI" Value="public enum class MidpointRounding" />
  <TypeSignature Language="F#" Value="type MidpointRounding = " />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Intrinsics</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime.Extensions" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Runtime.Extensions" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Extensions" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Runtime.Extensions" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Runtime.Extensions" FromVersion="4.2.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="503e3-101">数値の丸め処理を行うメソッドで、2 つの数値の中間に位置する数値を処理する方法を指定します。</span><span class="sxs-lookup"><span data-stu-id="503e3-101">Specifies how mathematical rounding methods should process a number that is midway between two numbers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="503e3-102">`MidpointRounding` を <xref:System.Math.Round%2A?displayProperty=nameWithType> の適切なオーバーロードと共に使用して、丸め処理の制御を強化します。</span><span class="sxs-lookup"><span data-stu-id="503e3-102">Use `MidpointRounding` with appropriate overloads of <xref:System.Math.Round%2A?displayProperty=nameWithType> to provide more control of the rounding process.</span></span>  
  
 <span data-ttu-id="503e3-103">丸め演算では、暗黙的または指定された有効桁数を使用して元の数値を取得します。その有効桁数に1を加えた次の数字を調べます。とは、元の数値と同じ有効桁数を持つ最も近い数値を返します。</span><span class="sxs-lookup"><span data-stu-id="503e3-103">A rounding operation takes an original number with an implicit or specified precision; examines the next digit, which is at that precision plus one; and returns the nearest number with the same precision as the original number.</span></span> <span data-ttu-id="503e3-104">正の数値の場合、次の桁が 0 ~ 4 の場合、最も近い数値は負の無限大になります。</span><span class="sxs-lookup"><span data-stu-id="503e3-104">For positive numbers, if the next digit is from 0 through 4, the nearest number is toward negative infinity.</span></span> <span data-ttu-id="503e3-105">次の数字が 6 ~ 9 の場合、最も近い数値は正の無限大になります。</span><span class="sxs-lookup"><span data-stu-id="503e3-105">If the next digit is from 6 through 9, the nearest number is toward positive infinity.</span></span> <span data-ttu-id="503e3-106">負の数値の場合、次の桁が 0 ~ 4 の場合、最も近い数値は正の無限大になります。</span><span class="sxs-lookup"><span data-stu-id="503e3-106">For negative numbers, if the next digit is from 0 through 4, the nearest number is toward positive infinity.</span></span> <span data-ttu-id="503e3-107">次の数字が 6 ~ 9 の場合、最も近い数値は負の無限大になります。</span><span class="sxs-lookup"><span data-stu-id="503e3-107">If the next digit is from 6 through 9, the nearest number is toward negative infinity.</span></span>  
  
 <span data-ttu-id="503e3-108">前の例では、`MidpointRounding` 列挙体は丸め演算の結果には影響しません。</span><span class="sxs-lookup"><span data-stu-id="503e3-108">In the previous cases, the `MidpointRounding` enumeration does not affect the result of the rounding operation.</span></span> <span data-ttu-id="503e3-109">ただし、次の桁が5で、これが2つの結果の中間点であり、残りのすべての桁が0であるか、残りの桁がない場合は、最も近い数値があいまいになります。</span><span class="sxs-lookup"><span data-stu-id="503e3-109">However, if the next digit is 5, which is the midpoint between two possible results, and all remaining digits are zero or there are no remaining digits, the nearest number is ambiguous.</span></span> <span data-ttu-id="503e3-110">この場合、`MidpointRounding` 列挙体を使用すると、丸め操作で最も近い数値を0または最も近い偶数に返すかどうかを指定できます。</span><span class="sxs-lookup"><span data-stu-id="503e3-110">In this case, the `MidpointRounding` enumeration enables you to specify whether the rounding operation returns the nearest number away from zero or the nearest even number.</span></span>  
  
 <span data-ttu-id="503e3-111">次の表は、負の数と正の数値を `MidpointRounding`の値と組み合わせて丸めた結果を示しています。</span><span class="sxs-lookup"><span data-stu-id="503e3-111">The following table demonstrates the results of rounding some negative and positive numbers in conjunction with the values of `MidpointRounding`.</span></span> <span data-ttu-id="503e3-112">数値の丸めに使用される精度は0です。これは、小数点の後の数値が丸め演算に影響することを意味します。</span><span class="sxs-lookup"><span data-stu-id="503e3-112">The precision used to round the numbers is zero, which means the number after the decimal point affects the rounding operation.</span></span> <span data-ttu-id="503e3-113">たとえば、数値-2.5 の場合、小数点の後の桁は5です。</span><span class="sxs-lookup"><span data-stu-id="503e3-113">For example, for the number -2.5, the digit after the decimal point is 5.</span></span> <span data-ttu-id="503e3-114">この数字は中間点であるため、`MidpointRounding` 値を使用して丸め処理の結果を判断できます。</span><span class="sxs-lookup"><span data-stu-id="503e3-114">Because that digit is the midpoint, you can use a `MidpointRounding` value to determine the result of rounding.</span></span> <span data-ttu-id="503e3-115">`AwayFromZero` が指定されている場合、-3 が返されます。これは、有効桁数が0の0から遠い方の数値であるためです。</span><span class="sxs-lookup"><span data-stu-id="503e3-115">If `AwayFromZero` is specified, -3 is returned because it is the nearest number away from zero with a precision of zero.</span></span> <span data-ttu-id="503e3-116">`ToEven` が指定されている場合、-2 が返されます。これは、有効桁数が0の最も近い偶数であるためです。</span><span class="sxs-lookup"><span data-stu-id="503e3-116">If `ToEven` is specified, -2 is returned because it is the nearest even number with a precision of zero.</span></span>  
  
|<span data-ttu-id="503e3-117">元の番号</span><span class="sxs-lookup"><span data-stu-id="503e3-117">Original number</span></span>|<span data-ttu-id="503e3-118">AwayFromZero</span><span class="sxs-lookup"><span data-stu-id="503e3-118">AwayFromZero</span></span>|<span data-ttu-id="503e3-119">ToEven</span><span class="sxs-lookup"><span data-stu-id="503e3-119">ToEven</span></span>|  
|---------------------|------------------|------------|  
|<span data-ttu-id="503e3-120">3.5</span><span class="sxs-lookup"><span data-stu-id="503e3-120">3.5</span></span>|<span data-ttu-id="503e3-121">4</span><span class="sxs-lookup"><span data-stu-id="503e3-121">4</span></span>|<span data-ttu-id="503e3-122">4</span><span class="sxs-lookup"><span data-stu-id="503e3-122">4</span></span>|  
|<span data-ttu-id="503e3-123">2.8</span><span class="sxs-lookup"><span data-stu-id="503e3-123">2.8</span></span>|<span data-ttu-id="503e3-124">3</span><span class="sxs-lookup"><span data-stu-id="503e3-124">3</span></span>|<span data-ttu-id="503e3-125">3</span><span class="sxs-lookup"><span data-stu-id="503e3-125">3</span></span>|  
|<span data-ttu-id="503e3-126">2.5</span><span class="sxs-lookup"><span data-stu-id="503e3-126">2.5</span></span>|<span data-ttu-id="503e3-127">3</span><span class="sxs-lookup"><span data-stu-id="503e3-127">3</span></span>|<span data-ttu-id="503e3-128">2</span><span class="sxs-lookup"><span data-stu-id="503e3-128">2</span></span>|  
|<span data-ttu-id="503e3-129">2.1</span><span class="sxs-lookup"><span data-stu-id="503e3-129">2.1</span></span>|<span data-ttu-id="503e3-130">2</span><span class="sxs-lookup"><span data-stu-id="503e3-130">2</span></span>|<span data-ttu-id="503e3-131">2</span><span class="sxs-lookup"><span data-stu-id="503e3-131">2</span></span>|  
|<span data-ttu-id="503e3-132">-2.1</span><span class="sxs-lookup"><span data-stu-id="503e3-132">-2.1</span></span>|<span data-ttu-id="503e3-133">-2</span><span class="sxs-lookup"><span data-stu-id="503e3-133">-2</span></span>|<span data-ttu-id="503e3-134">-2</span><span class="sxs-lookup"><span data-stu-id="503e3-134">-2</span></span>|  
|<span data-ttu-id="503e3-135">-2.5</span><span class="sxs-lookup"><span data-stu-id="503e3-135">-2.5</span></span>|<span data-ttu-id="503e3-136">-3</span><span class="sxs-lookup"><span data-stu-id="503e3-136">-3</span></span>|<span data-ttu-id="503e3-137">-2</span><span class="sxs-lookup"><span data-stu-id="503e3-137">-2</span></span>|  
|<span data-ttu-id="503e3-138">-2.8</span><span class="sxs-lookup"><span data-stu-id="503e3-138">-2.8</span></span>|<span data-ttu-id="503e3-139">-3</span><span class="sxs-lookup"><span data-stu-id="503e3-139">-3</span></span>|<span data-ttu-id="503e3-140">-3</span><span class="sxs-lookup"><span data-stu-id="503e3-140">-3</span></span>|  
|<span data-ttu-id="503e3-141">-3.5</span><span class="sxs-lookup"><span data-stu-id="503e3-141">-3.5</span></span>|<span data-ttu-id="503e3-142">-4</span><span class="sxs-lookup"><span data-stu-id="503e3-142">-4</span></span>|<span data-ttu-id="503e3-143">-4</span><span class="sxs-lookup"><span data-stu-id="503e3-143">-4</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="503e3-144">次の例は、`MidpointRounding` 列挙体と共に <xref:System.Math.Round%2A?displayProperty=nameWithType> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="503e3-144">The following example demonstrates the <xref:System.Math.Round%2A?displayProperty=nameWithType> method in conjunction with the `MidpointRounding` enumeration:</span></span>
  
 [!code-cpp[math.midpointrounding#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.midpointrounding/cpp/mpr.cpp#1)]
 [!code-csharp[math.midpointrounding#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.midpointrounding/CS/mpr.cs#1)]
 [!code-vb[math.midpointrounding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.midpointrounding/VB/mpr.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AwayFromZero">
      <MemberSignature Language="C#" Value="AwayFromZero" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.MidpointRounding AwayFromZero = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.MidpointRounding.AwayFromZero" />
      <MemberSignature Language="VB.NET" Value="AwayFromZero" />
      <MemberSignature Language="C++ CLI" Value="AwayFromZero" />
      <MemberSignature Language="F#" Value="AwayFromZero = 1" Usage="System.MidpointRounding.AwayFromZero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Intrinsics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.MidpointRounding</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="503e3-145">数値が 2 つの数値の中間に位置するときに、ゼロから遠い方の近似値に丸められます。</span><span class="sxs-lookup"><span data-stu-id="503e3-145">When a number is halfway between two others, it is rounded toward the nearest number that is away from zero.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ToEven">
      <MemberSignature Language="C#" Value="ToEven" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.MidpointRounding ToEven = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.MidpointRounding.ToEven" />
      <MemberSignature Language="VB.NET" Value="ToEven" />
      <MemberSignature Language="C++ CLI" Value="ToEven" />
      <MemberSignature Language="F#" Value="ToEven = 0" Usage="System.MidpointRounding.ToEven" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Intrinsics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.MidpointRounding</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="503e3-146">数値が 2 つの数値の中間に位置するときに、最も近い偶数方向に丸められます。</span><span class="sxs-lookup"><span data-stu-id="503e3-146">When a number is halfway between two others, it is rounded toward the nearest even number.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ToNegativeInfinity">
      <MemberSignature Language="C#" Value="ToNegativeInfinity" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.MidpointRounding ToNegativeInfinity = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.MidpointRounding.ToNegativeInfinity" />
      <MemberSignature Language="VB.NET" Value="ToNegativeInfinity" />
      <MemberSignature Language="C++ CLI" Value="ToNegativeInfinity" />
      <MemberSignature Language="F#" Value="ToNegativeInfinity = 3" Usage="System.MidpointRounding.ToNegativeInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Intrinsics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.MidpointRounding</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary><span data-ttu-id="503e3-147">数値が他の 2 つの数値の中間に位置するとき、無限精度の結果に最も近く、それより大きくない結果に丸められます。</span><span class="sxs-lookup"><span data-stu-id="503e3-147">When a number is halfway between two others, it is rounded toward the result closest to and no greater than the infinitely precise result.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ToPositiveInfinity">
      <MemberSignature Language="C#" Value="ToPositiveInfinity" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.MidpointRounding ToPositiveInfinity = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.MidpointRounding.ToPositiveInfinity" />
      <MemberSignature Language="VB.NET" Value="ToPositiveInfinity" />
      <MemberSignature Language="C++ CLI" Value="ToPositiveInfinity" />
      <MemberSignature Language="F#" Value="ToPositiveInfinity = 4" Usage="System.MidpointRounding.ToPositiveInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Intrinsics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.MidpointRounding</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary><span data-ttu-id="503e3-148">数値が他の 2 つの数値の中間に位置するとき、無限精度の結果に最も近く、それより小さくない結果に丸められます。</span><span class="sxs-lookup"><span data-stu-id="503e3-148">When a number is halfway between two others, it is rounded toward the result closest to and no less than the infinitely precise result.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ToZero">
      <MemberSignature Language="C#" Value="ToZero" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.MidpointRounding ToZero = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.MidpointRounding.ToZero" />
      <MemberSignature Language="VB.NET" Value="ToZero" />
      <MemberSignature Language="C++ CLI" Value="ToZero" />
      <MemberSignature Language="F#" Value="ToZero = 2" Usage="System.MidpointRounding.ToZero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Intrinsics</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.MidpointRounding</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="503e3-149">数値が他の 2 つの数値の中間に位置するとき、大きさで無限精度の結果に最も近く、それより大きくない結果に丸められます。</span><span class="sxs-lookup"><span data-stu-id="503e3-149">When a number is halfway between two others, it is rounded toward the result closest to and no greater in magnitude than the infinitely precise result.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>
