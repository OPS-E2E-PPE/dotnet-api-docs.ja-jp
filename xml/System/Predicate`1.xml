<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2807c60dd598b1659c5585f8fb52e07d73619806" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75039971" /></Metadata><TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">比較するオブジェクトの型。</typeparam>
    <param name="obj">このデリゲートで表されるメソッド内で定義された基準と照らし合わせて比較するオブジェクト。</param>
    <summary>条件のセットを定義し、指定されたオブジェクトがその条件を満たしているかどうかを判断するメソッドを表わします。</summary>
    <returns>このデリゲートで表されるメソッド内で定義された基準を <see langword="true" /> が満たしている場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このデリゲートは、<xref:System.Array> クラスと <xref:System.Collections.Generic.List%601> クラスのいくつかのメソッドによって、コレクション内の要素を検索するために使用されます。  
  
 通常、<xref:System.Predicate%601> デリゲートはラムダ式で表されます。 ラムダ式ではローカルにスコープが設定された変数を使用できるため、コンパイル時に正確にわからない条件をテストするのは簡単です。 これは、次の例でシミュレートされています。この例では、National ホッケーリーグチームとそのチームが設立された年に関する情報を含む `HockeyTeam` クラスを定義しています。 この例では、年を表す整数値の配列を定義し、配列の1つの要素をランダムに `foundedBeforeYear`に割り当てます。この変数は、この例の `Main` メソッドにローカルにスコープが設定されています。 ローカルスコープの変数はラムダ式で使用できるため、<xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> メソッドに渡されるラムダ式は、その年の前または前に設立された各チームの `HockeyTeam` オブジェクトを返すことができます。  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 次のコード例では、<xref:System.Array.Find%2A?displayProperty=nameWithType> メソッドを使用して <xref:System.Predicate%601> デリゲートを使用して、<xref:System.Drawing.Point> 構造体の配列を検索します。 この例では、`predicate` という名前の <xref:System.Predicate%601> デリゲートを明示的に定義し、<xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> フィールドと <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> フィールドの積が10万より大きい場合に `true` を返す `FindPoints` という名前のメソッドを割り当てます。 2番目の例に示すように、<xref:System.Predicate%601>型のデリゲートを明示的に定義するのではなく、ラムダ式を使用するのが一般的であることに注意してください。  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 次の例は、前の例と同じですが、ラムダ式を使用して <xref:System.Predicate%601> デリゲートを表している点が異なります。  `points` 配列の各要素は、検索条件を満たす要素が見つかるまでラムダ式に渡されます。 この場合、ラムダ式は、X フィールドと Y フィールドの積が10万より大きい場合に `true` を返します。  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>
