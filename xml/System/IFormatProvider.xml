<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="72d66561130682fb23b46c2b27e13781ba92cf22" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78684707" /></Metadata><TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="068c8-101">書式設定を制御するオブジェクトを取得するためのメカニズムを定義します。</span><span class="sxs-lookup"><span data-stu-id="068c8-101">Provides a mechanism for retrieving an object to control formatting.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="068c8-102"><xref:System.IFormatProvider> インターフェイスは、書式設定および解析操作のための書式設定情報を提供するオブジェクトを提供します。</span><span class="sxs-lookup"><span data-stu-id="068c8-102">The <xref:System.IFormatProvider> interface supplies an object that provides formatting information for formatting and parsing operations.</span></span> <span data-ttu-id="068c8-103">書式設定操作は、型の値をその値の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="068c8-103">Formatting operations convert the value of a type to the string representation of that value.</span></span> <span data-ttu-id="068c8-104">一般的な書式指定メソッドは、型の `ToString` メソッドであり、<xref:System.String.Format%2A>もあります。</span><span class="sxs-lookup"><span data-stu-id="068c8-104">Typical formatting methods are the `ToString` methods of a type, as well as <xref:System.String.Format%2A>.</span></span> <span data-ttu-id="068c8-105">解析操作では、値の文字列形式を、その値を持つ型に変換します。</span><span class="sxs-lookup"><span data-stu-id="068c8-105">Parsing operations convert the string representation of a value to a type with that value.</span></span> <span data-ttu-id="068c8-106">一般的な解析メソッドは、`Parse` と `TryParse`です。</span><span class="sxs-lookup"><span data-stu-id="068c8-106">Typical parsing methods are `Parse` and `TryParse`.</span></span>  
  
 <span data-ttu-id="068c8-107"><xref:System.IFormatProvider> インターフェイスは、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>の1つのメソッドで構成されます。</span><span class="sxs-lookup"><span data-stu-id="068c8-107">The <xref:System.IFormatProvider> interface consists of a single method, <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="068c8-108"><xref:System.IFormatProvider.GetFormat%2A> はコールバックメソッドであり、解析メソッドまたは書式指定メソッドはそれを呼び出し、書式設定または解析メソッドが想定するオブジェクトの型を表す <xref:System.Type> オブジェクトを渡します。</span><span class="sxs-lookup"><span data-stu-id="068c8-108"><xref:System.IFormatProvider.GetFormat%2A> is a callback method: The parsing or formatting method calls it and passes it a <xref:System.Type> object that represents the type of object that the formatting or parsing method expects will provide formatting information.</span></span> <span data-ttu-id="068c8-109"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、その型のオブジェクトを返す役割を担います。</span><span class="sxs-lookup"><span data-stu-id="068c8-109">The <xref:System.IFormatProvider.GetFormat%2A> method is responsible for returning an object of that type.</span></span>  
  
 <span data-ttu-id="068c8-110"><xref:System.IFormatProvider> の実装は、メソッドを書式設定および解析することによって暗黙的に使用されることがよくあります。</span><span class="sxs-lookup"><span data-stu-id="068c8-110"><xref:System.IFormatProvider> implementations are often used implicitly by formatting and parsing methods.</span></span> <span data-ttu-id="068c8-111">たとえば、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> メソッドは、システムの現在のカルチャを表す <xref:System.IFormatProvider> の実装を暗黙的に使用します。</span><span class="sxs-lookup"><span data-stu-id="068c8-111">For example, the <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> method implicitly uses an <xref:System.IFormatProvider> implementation that represents the system's current culture.</span></span> <span data-ttu-id="068c8-112"><xref:System.IFormatProvider> の実装は、<xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> や <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>など、<xref:System.IFormatProvider>型のパラメーターを持つメソッドによって明示的に指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="068c8-112"><xref:System.IFormatProvider> implementations can also be specified explicitly by methods that have a parameter of type <xref:System.IFormatProvider>, such as <xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> and <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="068c8-113">.NET Framework には、数値および日付と時刻の値の書式設定または解析に使用されるカルチャ固有の情報を提供するために、次の3つの定義済み <xref:System.IFormatProvider> 実装が含まれています。</span><span class="sxs-lookup"><span data-stu-id="068c8-113">The .NET Framework includes the following three predefined <xref:System.IFormatProvider> implementations to provide culture-specific information that is used in formatting or parsing numeric and date and time values:</span></span>  
  
-   <span data-ttu-id="068c8-114"><xref:System.Globalization.NumberFormatInfo> クラス。特定のカルチャの通貨、桁区切り記号、小数点記号などの数値を書式設定するために使用される情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="068c8-114">The <xref:System.Globalization.NumberFormatInfo> class, which provides information that is used to format numbers, such as the currency, thousands separator, and decimal separator symbols for a particular culture.</span></span> <span data-ttu-id="068c8-115"><xref:System.Globalization.NumberFormatInfo> オブジェクトによって認識され、数値の書式設定操作で使用される定義済みの書式指定文字列の詳細については、「[標準の数値書式指定](~/docs/standard/base-types/standard-numeric-format-strings.md)文字列」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="068c8-115">For information about the predefined format strings recognized by a <xref:System.Globalization.NumberFormatInfo> object and used in numeric formatting operations, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="068c8-116"><xref:System.Globalization.DateTimeFormatInfo> クラス。特定のカルチャの日付と時刻の区切り記号、日付の年、月、日のコンポーネントの順序と形式など、日付と時刻の書式設定に使用される情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="068c8-116">The <xref:System.Globalization.DateTimeFormatInfo> class, which provides information that is used to format dates and times, such as the date and time separator symbols for a particular culture or the order and format of a date's year, month, and day components.</span></span> <span data-ttu-id="068c8-117"><xref:System.Globalization.DateTimeFormatInfo> オブジェクトによって認識され、数値の書式設定操作で使用される定義済みの書式指定文字列の詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="068c8-117">For information about the predefined format strings recognized by a <xref:System.Globalization.DateTimeFormatInfo> object and used in numeric formatting operations, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
-   <span data-ttu-id="068c8-118">特定のカルチャを表す <xref:System.Globalization.CultureInfo> クラス。</span><span class="sxs-lookup"><span data-stu-id="068c8-118">The <xref:System.Globalization.CultureInfo> class, which represents a particular culture.</span></span> <span data-ttu-id="068c8-119"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、数値または日付と時刻を含む書式設定操作または解析操作で <xref:System.Globalization.CultureInfo> オブジェクトが使用されているかどうかに応じて、カルチャ固有の <xref:System.Globalization.NumberFormatInfo> または <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="068c8-119">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a culture-specific <xref:System.Globalization.NumberFormatInfo> or <xref:System.Globalization.DateTimeFormatInfo> object, depending on whether the <xref:System.Globalization.CultureInfo> object is used in a formatting or parsing operation that involves numbers or dates and times.</span></span>  
  
 <span data-ttu-id="068c8-120">.NET Framework は、カスタム書式設定もサポートしています。</span><span class="sxs-lookup"><span data-stu-id="068c8-120">The .NET Framework also supports custom formatting.</span></span> <span data-ttu-id="068c8-121">これには、通常、<xref:System.IFormatProvider> と <xref:System.ICustomFormatter>の両方を実装する書式指定クラスの作成が含まれます。</span><span class="sxs-lookup"><span data-stu-id="068c8-121">This typically involves the creation of a formatting class that implements both <xref:System.IFormatProvider> and <xref:System.ICustomFormatter>.</span></span> <span data-ttu-id="068c8-122">このクラスのインスタンスは、パラメーターとして、カスタム書式設定操作を実行するメソッドにパラメーターとして渡されます。たとえば <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 例では、数値を12桁のアカウント番号として書式設定するカスタム実装を示しています。</span><span class="sxs-lookup"><span data-stu-id="068c8-122">An instance of this class is then passed as a parameter to a method that performs a custom formatting operation, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> The example provides an illustration of such a custom implementation that formats a number as a 12-digit account number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="068c8-123">次の例は、<xref:System.IFormatProvider> の実装で日付と時刻の値の表現を変更する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="068c8-123">The following example illustrates how an <xref:System.IFormatProvider> implementation can change the representation of a date and time value.</span></span> <span data-ttu-id="068c8-124">この場合、4つの異なるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを使用して、1つの日付が表示されます。</span><span class="sxs-lookup"><span data-stu-id="068c8-124">In this case, a single date is displayed by using <xref:System.Globalization.CultureInfo> objects that represent four different cultures.</span></span>  
  
 [!code-csharp[System.IFormatProvider.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs#3)]
 [!code-vb[System.IFormatProvider.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb#3)]  
  
 <span data-ttu-id="068c8-125">次の例は、<xref:System.IFormatProvider> インターフェイスと <xref:System.IFormatProvider.GetFormat%2A> メソッドを実装するクラスの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="068c8-125">The following example illustrates the use of a class that implements the <xref:System.IFormatProvider> interface and the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="068c8-126">`AcctNumberFormat` クラスは、アカウント番号を表す <xref:System.Int64> 値を、書式設定された12桁のアカウント番号に変換します。</span><span class="sxs-lookup"><span data-stu-id="068c8-126">The `AcctNumberFormat` class converts an <xref:System.Int64> value that represents an account number to a formatted 12-digit account number.</span></span> <span data-ttu-id="068c8-127">`formatType` パラメーターが <xref:System.ICustomFormatter>を実装するクラスを参照している場合、`GetFormat` メソッドは、現在の `AcctNumberFormat` インスタンスへの参照を返します。それ以外の場合、`GetFormat` は `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="068c8-127">Its `GetFormat` method returns a reference to the current `AcctNumberFormat` instance if the `formatType` parameter refers to a class that implements <xref:System.ICustomFormatter>; otherwise, `GetFormat` returns `null`.</span></span>  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 <span data-ttu-id="068c8-128"><xref:System.IFormatProvider> を実装するクラスは、書式設定および解析操作の呼び出しで使用できます。</span><span class="sxs-lookup"><span data-stu-id="068c8-128">The class that implements <xref:System.IFormatProvider> can then be used in a call to a formatting and parsing operation.</span></span> <span data-ttu-id="068c8-129">たとえば、次のコードは、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> メソッドを呼び出して、書式設定された12桁の勘定科目番号を含む文字列を生成します。</span><span class="sxs-lookup"><span data-stu-id="068c8-129">For example, the following code calls the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method to generate a string that contains a formatted 12-digit account number.</span></span>  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
    <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="068c8-130">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="068c8-130">Formatting Types in .NET</span></span></related>
    <related type="Article" href="~/docs/standard/base-types/how-to-define-and-use-custom-numeric-format-providers.md"><span data-ttu-id="068c8-131">方法 : カスタム数値書式プロバイダーを定義して使用する</span><span class="sxs-lookup"><span data-stu-id="068c8-131">How to: Define and Use Custom Numeric Format Providers</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType"><span data-ttu-id="068c8-132">返す書式オブジェクトの型を指定するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="068c8-132">An object that specifies the type of format object to return.</span></span></param>
        <summary><span data-ttu-id="068c8-133">指定した型の書式指定サービスを提供するオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="068c8-133">Returns an object that provides formatting services for the specified type.</span></span></summary>
        <returns><span data-ttu-id="068c8-134"><see cref="T:System.IFormatProvider" /> の実装が <paramref name="formatType" /> で指定された型のオブジェクトを提供できる場合は、そのオブジェクトのインスタンス。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="068c8-134">An instance of the object specified by <paramref name="formatType" />, if the <see cref="T:System.IFormatProvider" /> implementation can supply that type of object; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="068c8-135"><xref:System.IFormatProvider.GetFormat%2A> は、書式設定および解析メソッドを呼び出して、解析操作の入力文字列の形式に関する情報を取得したり、書式設定操作で出力文字列の形式に関する情報を取得したりするコールバックメソッドです。</span><span class="sxs-lookup"><span data-stu-id="068c8-135"><xref:System.IFormatProvider.GetFormat%2A> is a callback method that formatting and parsing methods invoke to retrieve information about the format of the input string in parsing operations or the format of the output string in formatting operations.</span></span> <span data-ttu-id="068c8-136">`formatType` パラメーターでは、書式設定または解析メソッドは、操作を実行するために必要なオブジェクトの型を渡します。</span><span class="sxs-lookup"><span data-stu-id="068c8-136">In the `formatType` parameter, the formatting or parsing method passes the type of object it requires to perform its operation.</span></span> <span data-ttu-id="068c8-137"><xref:System.IFormatProvider> の実装がこの書式設定または解析オブジェクトを提供できる場合は、そのオブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="068c8-137">If the <xref:System.IFormatProvider> implementation can supply this formatting or parsing object, it returns that object.</span></span> <span data-ttu-id="068c8-138">そうでない場合は、`null`を返します。</span><span class="sxs-lookup"><span data-stu-id="068c8-138">If not, it returns `null`.</span></span>  
  
 <span data-ttu-id="068c8-139">たとえば、<xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> メソッドの呼び出しでは、メソッドの引数は、現在の整数インスタンスの文字列形式がどのように書式設定されるかについての情報を提供する <xref:System.IFormatProvider> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="068c8-139">For example, in the call to the <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> method, the method argument is an <xref:System.IFormatProvider> object that provides information about how the string representation of the current integer instance might be formatted.</span></span> <span data-ttu-id="068c8-140">ランタイムは、メソッドを実行すると、<xref:System.IFormatProvider> オブジェクトの <xref:System.IFormatProvider.GetFormat%2A> メソッドを呼び出し、<xref:System.Globalization.NumberFormatInfo> 型を表す <xref:System.Type> オブジェクトに渡します。</span><span class="sxs-lookup"><span data-stu-id="068c8-140">When the runtime executes the method, it calls the <xref:System.IFormatProvider> object's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="068c8-141"><xref:System.IFormatProvider> オブジェクトが <xref:System.Globalization.NumberFormatInfo> オブジェクトを提供できる場合は、そのオブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="068c8-141">If the <xref:System.IFormatProvider> object can supply a <xref:System.Globalization.NumberFormatInfo> object, it returns that object.</span></span> <span data-ttu-id="068c8-142">その型のオブジェクトを指定できない場合は `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="068c8-142">If it cannot supply an object of that type, it returns `null`.</span></span>  
  
 <span data-ttu-id="068c8-143"><xref:System.IFormatProvider> インターフェイスと <xref:System.IFormatProvider.GetFormat%2A> メソッドは、カスタムの書式設定または解析サービスを提供するクラスで実装できます。</span><span class="sxs-lookup"><span data-stu-id="068c8-143">You can implement the <xref:System.IFormatProvider> interface and the <xref:System.IFormatProvider.GetFormat%2A> method in classes that provide custom formatting or parsing services.</span></span> <span data-ttu-id="068c8-144"><xref:System.IFormatProvider> の実装は、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>、<xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>など、<xref:System.IFormatProvider>型のパラメーターを持つ解析または書式指定メソッドのオーバーロードに引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="068c8-144">The <xref:System.IFormatProvider> implementation is then passed as an argument to any overload of a parsing or formatting method that has a parameter of type <xref:System.IFormatProvider>, such as <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>, <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>, or <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="068c8-145">次の例は、<xref:System.IFormatProvider> インターフェイスと <xref:System.IFormatProvider.GetFormat%2A> メソッドを実装するクラスの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="068c8-145">The following example illustrates the use of a class that implements the <xref:System.IFormatProvider> interface and the <xref:System.IFormatProvider.GetFormat%2A> method.</span></span> <span data-ttu-id="068c8-146">`AcctNumberFormat` クラスは、アカウント番号を表す <xref:System.Int64> 値を、書式設定された12桁のアカウント番号に変換します。</span><span class="sxs-lookup"><span data-stu-id="068c8-146">The `AcctNumberFormat` class converts an <xref:System.Int64> value that represents an account number to a formatted 12-digit account number.</span></span> <span data-ttu-id="068c8-147">この `GetFormat` メソッドは、`formatType` パラメーターが <xref:System.ICustomFormatter>を実装するクラスを参照している場合に、それ自体への参照を返します。それ以外の場合、`GetFormat` は `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="068c8-147">Its `GetFormat` method returns a reference to itself if the `formatType` parameter refers to a class that implements <xref:System.ICustomFormatter>; otherwise, `GetFormat` returns `null`.</span></span>  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 <span data-ttu-id="068c8-148">その後、`AcctNumberFormat` クラスのインスタンスを引数として、書式設定または解析サービスを提供するメソッドに渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="068c8-148">An instance of the `AcctNumberFormat` class can then be passed as an argument to a method that provides formatting or parsing services.</span></span> <span data-ttu-id="068c8-149">たとえば、次のコードは、`AcctNumberFormat` クラスを <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> メソッドに渡して、書式設定された12桁の勘定科目番号を生成します。</span><span class="sxs-lookup"><span data-stu-id="068c8-149">For example, the following code passes an `AcctNumberFormat` class to the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method to generate a formatted 12-digit account number.</span></span>  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
