<Type Name="Single" FullName="System.Single">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3758367ad4442ff2fc5fcdbbb2f7a7616fa00aac" /><Meta Name="ms.sourcegitcommit" Value="394eb46af92ad32373cd2c7855b688846886ed40" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/23/2019" /><Meta Name="ms.locfileid" Value="74424728" /></Metadata><TypeSignature Language="C#" Value="public struct Single : IComparable, IComparable&lt;float&gt;, IConvertible, IEquatable&lt;float&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit float32 extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;float32&gt;, class System.IConvertible, class System.IEquatable`1&lt;float32&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.Single" />
  <TypeSignature Language="VB.NET" Value="Public Structure Single&#xA;Implements IComparable, IComparable(Of Single), IConvertible, IEquatable(Of Single), IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Single : IComparable, IComparable&lt;float&gt;, IConvertible, IEquatable&lt;float&gt;, IFormattable" />
  <TypeSignature Language="F#" Value="type single = struct&#xA;    interface IFormattable&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Single&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="31b2e-101">単精度浮動小数点数を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-101">Represents a single-precision floating-point number.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-102"><xref:System.Single> 値型は、負の 3.402823 e38 から正の 3.402823 e38 までの値を持つ単精度32ビット数値を表します。また、正または負の0、<xref:System.Single.PositiveInfinity>、<xref:System.Single.NegativeInfinity>、および非数 (<xref:System.Single.NaN>) を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-102">The <xref:System.Single> value type represents a single-precision 32-bit number with values ranging from negative 3.402823e38 to positive 3.402823e38, as well as positive or negative zero, <xref:System.Single.PositiveInfinity>, <xref:System.Single.NegativeInfinity>, and not a number (<xref:System.Single.NaN>).</span></span> <span data-ttu-id="31b2e-103">これは、非常に大きい (惑星または galaxies 間の距離など) または非常に小さい値 (たとえば、キログラムの物質の分子質量) を表すことを目的としており、多くの場合、(地球から別の太陽システムへの距離など) 不正確になることがあります。).</span><span class="sxs-lookup"><span data-stu-id="31b2e-103">It is intended to represent values that are extremely large (such as distances between planets or galaxies) or extremely small (such as the molecular mass of a substance in kilograms) and that often are imprecise (such as the distance from earth to another solar system).</span></span> <span data-ttu-id="31b2e-104"><xref:System.Single> 型は、バイナリ浮動小数点演算の IEC 60559:1989 (IEEE 754) 標準に準拠しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-104">The <xref:System.Single> type complies with the IEC 60559:1989 (IEEE 754) standard for binary floating-point arithmetic.</span></span>  
  
 <span data-ttu-id="31b2e-105">このトピックは、次のセクションで構成されています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-105">This topic consists of the following sections:</span></span>  
  
-   [<span data-ttu-id="31b2e-106">浮動小数点表現と有効桁数</span><span class="sxs-lookup"><span data-stu-id="31b2e-106">Floating-point representation and precision</span></span>](#Precision)  
  
-   [<span data-ttu-id="31b2e-107">等しいかどうかのテスト</span><span class="sxs-lookup"><span data-stu-id="31b2e-107">Testing for equality</span></span>](#Equality)  
  
-   [<span data-ttu-id="31b2e-108">浮動小数点値と例外</span><span class="sxs-lookup"><span data-stu-id="31b2e-108">Floating-point values and exceptions</span></span>](#Exceptions)  
  
-   [<span data-ttu-id="31b2e-109">型変換と単一の構造体</span><span class="sxs-lookup"><span data-stu-id="31b2e-109">Type conversion and the Single structure</span></span>](#Conversion)  
  
-   [<span data-ttu-id="31b2e-110">浮動小数点機能</span><span class="sxs-lookup"><span data-stu-id="31b2e-110">Floating-point functionality</span></span>](#Functionality)  
  
 <span data-ttu-id="31b2e-111"><xref:System.Single?displayProperty=nameWithType> には、この型のインスタンスを比較し、インスタンスの値をその文字列形式に変換し、数値の文字列形式をこの型のインスタンスに変換するメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-111"><xref:System.Single?displayProperty=nameWithType> provides methods to compare instances of this type, to convert the value of an instance to its string representation, and to convert the string representation of a number to an instance of this type.</span></span> <span data-ttu-id="31b2e-112">書式指定コードによる値型の文字列形式の制御方法の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」、および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-112">For information about how format specification codes control the string representation of value types, see [Formatting Types](~/docs/standard/base-types/formatting-types.md), [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md), and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
<a name="Precision"></a>   
## <a name="floating-point-representation-and-precision"></a><span data-ttu-id="31b2e-113">浮動小数点表現と有効桁数</span><span class="sxs-lookup"><span data-stu-id="31b2e-113">Floating-point representation and precision</span></span>  
 <span data-ttu-id="31b2e-114"><xref:System.Single> データ型には、次の表に示すように、単精度浮動小数点値が32ビットのバイナリ形式で格納されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-114">The <xref:System.Single> data type stores single-precision floating-point values in a 32-bit binary format, as shown in the following table:</span></span>  
  
|<span data-ttu-id="31b2e-115">パーツ</span><span class="sxs-lookup"><span data-stu-id="31b2e-115">Part</span></span>|<span data-ttu-id="31b2e-116">Bits</span><span class="sxs-lookup"><span data-stu-id="31b2e-116">Bits</span></span>|  
|----------|----------|  
|<span data-ttu-id="31b2e-117">有効桁または仮数</span><span class="sxs-lookup"><span data-stu-id="31b2e-117">Significand or mantissa</span></span>|<span data-ttu-id="31b2e-118">0-22</span><span class="sxs-lookup"><span data-stu-id="31b2e-118">0-22</span></span>|  
|<span data-ttu-id="31b2e-119">Exponent</span><span class="sxs-lookup"><span data-stu-id="31b2e-119">Exponent</span></span>|<span data-ttu-id="31b2e-120">23-30</span><span class="sxs-lookup"><span data-stu-id="31b2e-120">23-30</span></span>|  
|<span data-ttu-id="31b2e-121">符号 (0 = 正、1 = 負)</span><span class="sxs-lookup"><span data-stu-id="31b2e-121">Sign (0 = positive, 1 = negative)</span></span>|<span data-ttu-id="31b2e-122">31</span><span class="sxs-lookup"><span data-stu-id="31b2e-122">31</span></span>|  
  
 <span data-ttu-id="31b2e-123">10分の分数では、一部の小数部 (1/3 や <xref:System.Math.PI?displayProperty=nameWithType>など) を正確に表すことができないのと同様に、バイナリの分数では小数部の値を表すことができません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-123">Just as decimal fractions are unable to precisely represent some fractional values (such as 1/3 or <xref:System.Math.PI?displayProperty=nameWithType>), binary fractions are unable to represent some fractional values.</span></span> <span data-ttu-id="31b2e-124">たとえば、10進数として0.2 によって正確に表される2/10 は、0011111001001100によって "1100" というパターンの無限大点として表されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-124">For example, 2/10, which is represented precisely by .2 as a decimal fraction, is represented by .0011111001001100 as a binary fraction, with the pattern "1100" repeating to infinity.</span></span> <span data-ttu-id="31b2e-125">この場合、浮動小数点値は、それが表す数値の不正確な表現を提供します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-125">In this case, the floating-point value provides an imprecise representation of the number that it represents.</span></span> <span data-ttu-id="31b2e-126">多くの場合、元の浮動小数点値に対して追加の数学演算を実行すると、精度が高くなります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-126">Performing additional mathematical operations on the original floating-point value often increases its lack of precision.</span></span> <span data-ttu-id="31b2e-127">たとえば、.3 と10を乗算した結果を比較し、.3 を. 3 9 回追加した場合、乗算よりも8個の操作が含まれているため、加算によってより正確な結果が得られないことがわかります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-127">For example, if you compare the results of multiplying .3 by 10 and adding .3 to .3 nine times, you will see that addition produces the less precise result, because it involves eight more operations than multiplication.</span></span> <span data-ttu-id="31b2e-128">この違いは、"R"[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)を使用して2つの <xref:System.Single> 値を表示した場合にのみわかります。これは、必要に応じて、<xref:System.Single> 型でサポートされている9桁すべての有効桁数を表示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-128">Note that this disparity is apparent only if you display the two <xref:System.Single> values by using the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md), which, if necessary, displays all 9 digits of precision supported by the <xref:System.Single> type.</span></span>  
  
 [!code-csharp[System.Single.Structure#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/representation1.cs#3)]
 [!code-vb[System.Single.Structure#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/representation1.vb#3)]  
  
 <span data-ttu-id="31b2e-129">一部の数値は小数部のバイナリ値として正確に表すことができないため、浮動小数点数は実数のみを概数にすることができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-129">Because some numbers cannot be represented exactly as fractional binary values, floating-point numbers can only approximate real numbers.</span></span>  
  
 <span data-ttu-id="31b2e-130">すべての浮動小数点数には、有効桁数が制限されています。これにより、浮動小数点値が実数を近似する精度も決まります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-130">All floating-point numbers have a limited number of significant digits, which also determines how accurately a floating-point value approximates a real number.</span></span> <span data-ttu-id="31b2e-131"><xref:System.Single> 値には、最大7桁の有効桁数がありますが、内部的に保持されるのは最大9桁です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-131">A <xref:System.Single> value has up to 7 decimal digits of precision, although a maximum of 9 digits is maintained internally.</span></span> <span data-ttu-id="31b2e-132">これは、浮動小数点演算によっては、浮動小数点値を変更するための有効桁数が不足している場合があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-132">This means that some floating-point operations may lack the precision to change a floating-point value.</span></span> <span data-ttu-id="31b2e-133">次の例では、大きな単精度浮動小数点値を定義し、<xref:System.Single.Epsilon?displayProperty=nameWithType> の製品と1つの quadrillion を追加します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-133">The following example defines a large single-precision floating-point value, and then adds the product of <xref:System.Single.Epsilon?displayProperty=nameWithType> and one quadrillion to it.</span></span> <span data-ttu-id="31b2e-134">ただし、元の浮動小数点値を変更するには、製品が小さすぎます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-134">However, the product is too small to modify the original floating-point value.</span></span> <span data-ttu-id="31b2e-135">最下位桁は1000桁ですが、製品の最上位桁は 10<sup>-30</sup>です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-135">Its least significant digit is thousandths, whereas the most significant digit in the product is 10<sup>-30</sup>.</span></span>  
  
 [!code-csharp[System.Single.Structure#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/representation2.cs#4)]
 [!code-vb[System.Single.Structure#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/representation2.vb#4)]  
  
 <span data-ttu-id="31b2e-136">浮動小数点数の有効桁数には、次のような結果があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-136">The limited precision of a floating-point number has several consequences:</span></span>  
  
-   <span data-ttu-id="31b2e-137">特定の精度に等しいと見なされる2つの浮動小数点数は、最下位の桁が異なるため、等しいと比較されない場合があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-137">Two floating-point numbers that appear equal for a particular precision might not compare equal because their least significant digits are different.</span></span> <span data-ttu-id="31b2e-138">次の例では、一連の数値が加算され、それらの合計が予想される合計と比較されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-138">In the following example, a series of numbers are added together, and their total is compared with their expected total.</span></span> <span data-ttu-id="31b2e-139">2つの値は同じように見えますが、`Equals` メソッドを呼び出すと、その値がではないことが示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-139">Although the two values appear to be the same, a call to the `Equals` method indicates that they are not.</span></span>  
  
     [!code-csharp[System.Single.Structure#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist3.cs#6)]
     [!code-vb[System.Single.Structure#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/precisionlist3.vb#6)]  
  
     <span data-ttu-id="31b2e-140"><xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType> ステートメントの書式項目を `{0}` と `{1}` から `{0:R}` および `{1:R}` に変更して、2つの <xref:System.Single> 値のすべての有効桁を表示すると、有効桁数が失われるため、2つの値が等しくないことが明らかになります。追加操作中。</span><span class="sxs-lookup"><span data-stu-id="31b2e-140">If you change the format items in the <xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%29?displayProperty=nameWithType> statement from `{0}` and `{1}` to `{0:R}` and `{1:R}` to display all significant digits of the two <xref:System.Single> values, it is clear that the two values are unequal because of a loss of precision during the addition operations.</span></span> <span data-ttu-id="31b2e-141">この場合は、<xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType> メソッドを呼び出して、比較を実行する前に <xref:System.Single> 値を目的の精度に丸めることによって、問題を解決できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-141">In this case, the issue can be resolved by calling the <xref:System.Math.Round%28System.Double%2CSystem.Int32%29?displayProperty=nameWithType> method to round the <xref:System.Single> values to the desired precision before performing the comparison.</span></span>  
  
-   <span data-ttu-id="31b2e-142">浮動小数点数を使用する数学的演算または比較演算では、10進数が使用されている場合、同じ結果が得られないことがあります。これは、バイナリ浮動小数点数が10進数と等しくない可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="31b2e-142">A mathematical or comparison operation that uses a floating-point number might not yield the same result if a decimal number is used, because the binary floating-point number might not equal the decimal number.</span></span> <span data-ttu-id="31b2e-143">前の例では、.3 に10を乗算し、.3 を. 3 9 回に加算した結果を表示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-143">A previous example illustrated this by displaying the result of multiplying .3 by 10 and adding .3 to .3 nine times.</span></span>  
  
     <span data-ttu-id="31b2e-144">小数部の値を持つ数値演算の精度が重要な場合は、<xref:System.Single> 型ではなく <xref:System.Decimal> 型を使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-144">When accuracy in numeric operations with fractional values is important, use the <xref:System.Decimal> type instead of the <xref:System.Single> type.</span></span> <span data-ttu-id="31b2e-145"><xref:System.Int64> 型または <xref:System.UInt64> 型の範囲を超える整数値を持つ数値演算の精度が重要な場合は、<xref:System.Numerics.BigInteger> 型を使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-145">When accuracy in numeric operations with integral values beyond the range of the <xref:System.Int64> or <xref:System.UInt64> types is important, use the <xref:System.Numerics.BigInteger> type.</span></span>  
  
-   <span data-ttu-id="31b2e-146">浮動小数点数が含まれている場合、値はラウンドトリップしない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-146">A value might not round-trip if a floating-point number is involved.</span></span> <span data-ttu-id="31b2e-147">値は、操作が元の浮動小数点数を別の形式に変換する場合はラウンドトリップと呼ばれ、逆の演算では変換されたフォームを浮動小数点数に変換し、最後の浮動小数点数は元の数値と等しくなります。浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-147">A value is said to round-trip if an operation converts an original floating-point number to another form, an inverse operation transforms the converted form back to a floating-point number, and the final floating-point number is equal to the original floating-point number.</span></span> <span data-ttu-id="31b2e-148">変換で1つ以上の有効桁が失われたり、変更されたりすると、ラウンドトリップが失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-148">The round trip might fail because one or more least significant digits are lost or changed in a conversion.</span></span> <span data-ttu-id="31b2e-149">次の例では、3つの <xref:System.Single> 値が文字列に変換され、ファイルに保存されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-149">In the following example, three <xref:System.Single> values are converted to strings and saved in a file.</span></span> <span data-ttu-id="31b2e-150">出力に示されているように、値は同じように見えますが、復元された値は元の値と同じではありません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-150">As the output shows, although the values appear to be identical, the restored values are not equal to the original values.</span></span>  
  
     [!code-csharp[System.Single.Structure#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist4a.cs#17)]
     [!code-vb[System.Single.Structure#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/PrecisionList4a.vb#17)]  
  
     <span data-ttu-id="31b2e-151">この場合、次の例に示すように、"G9"[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)を使用して、<xref:System.Single> 値の完全な有効桁数を保持することで、値を正常にラウンドトリップできます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-151">In this case, the values can be successfully round-tripped by using the "G9" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) to preserve the full precision of <xref:System.Single> values, as the following example shows.</span></span>  
  
     [!code-csharp[System.Single.Structure#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/PrecisionList5a.cs#18)]
     [!code-vb[System.Single.Structure#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/PrecisionList5a.vb#18)]  
  
-   <span data-ttu-id="31b2e-152"><xref:System.Single> 値は <xref:System.Double> 値よりも精度が低くなります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-152"><xref:System.Single> values have less precision than <xref:System.Double> values.</span></span> <span data-ttu-id="31b2e-153">一見同等の <xref:System.Double> に変換される <xref:System.Single> 値は、精度が異なるため <xref:System.Double> 値と等しくないことがよくあります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-153">A <xref:System.Single> value that is converted to a seemingly equivalent <xref:System.Double> often does not equal the <xref:System.Double> value because of differences in precision.</span></span> <span data-ttu-id="31b2e-154">次の例では、同じ除算演算の結果が <xref:System.Double> 値と <xref:System.Single> 値に割り当てられています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-154">In the following example, the result of identical division operations is assigned to a <xref:System.Double> value and a <xref:System.Single> value.</span></span> <span data-ttu-id="31b2e-155"><xref:System.Single> 値が <xref:System.Double>にキャストされた後、2つの値の比較によって等しくないことが示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-155">After the <xref:System.Single> value is cast to a <xref:System.Double>, a comparison of the two values shows that they are unequal.</span></span>  
  
     [!code-csharp[System.Double.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.double.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Double.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.double.structure/vb/precisionlist1.vb#5)]  
  
     <span data-ttu-id="31b2e-156">この問題を回避するには、<xref:System.Single> データ型の代わりに <xref:System.Double> データ型を使用するか、<xref:System.Math.Round%2A> メソッドを使用して両方の値の有効桁数を同じにします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-156">To avoid this problem, either use the <xref:System.Double> data type in place of the <xref:System.Single> data type, or use the <xref:System.Math.Round%2A> method so that both values have the same precision.</span></span>  
  
<a name="Equality"></a>   
## <a name="testing-for-equality"></a><span data-ttu-id="31b2e-157">等しいかどうかのテスト</span><span class="sxs-lookup"><span data-stu-id="31b2e-157">Testing for equality</span></span>  
 <span data-ttu-id="31b2e-158">等しいと見なされるためには、2つの <xref:System.Single> 値が同一の値を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-158">To be considered equal, two <xref:System.Single> values must represent identical values.</span></span> <span data-ttu-id="31b2e-159">ただし、値間の精度に違いがあるため、または1つまたは両方の値によって精度が低下しているため、同一であることが予想される浮動小数点値は、少なくとも有効桁数が異なるために等しくないと見なされることがよくあります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-159">However, because of differences in precision between values, or because of a loss of precision by one or both values, floating-point values that are expected to be identical often turn out to be unequal due to differences in their least significant digits.</span></span> <span data-ttu-id="31b2e-160">その結果、<xref:System.Single.Equals%2A> メソッドを呼び出して、2つの値が等しいかどうかを判断したり、2つの <xref:System.Single> 値間のリレーションシップを決定するために <xref:System.Single.CompareTo%2A> メソッドを呼び出したりすると、多くの場合、予期しない結果が発生します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-160">As a result, calls to the <xref:System.Single.Equals%2A> method to determine whether two values are equal, or calls to the <xref:System.Single.CompareTo%2A> method to determine the relationship between two <xref:System.Single> values, often yield unexpected results.</span></span> <span data-ttu-id="31b2e-161">次の例では、最初の値の有効桁数が7桁で、2番目の値が9であるため、2つの一見等しい <xref:System.Single> 値が等しくないことがわかります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-161">This is evident in the following example, where two apparently equal <xref:System.Single> values turn out to be unequal, because the first value has 7 digits of precision, whereas the second value has 9.</span></span>  
  
 [!code-csharp[System.Single.Structure#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison1.cs#9)]
 [!code-vb[System.Single.Structure#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison1.vb#9)]  
  
 <span data-ttu-id="31b2e-162">異なるコードパスに従い、異なる方法で操作される計算値は、多くの場合、等しくないことが証明されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-162">Calculated values that follow different code paths and that are manipulated in different ways often prove to be unequal.</span></span> <span data-ttu-id="31b2e-163">次の例では、1つの <xref:System.Single> 値が2乗され、平方根が計算されて元の値が復元されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-163">In the following example, one <xref:System.Single> value is squared, and then the square root is calculated to restore the original value.</span></span> <span data-ttu-id="31b2e-164">結果の平方根が3.51 で除算され、元の値が復元される前に、2番目の <xref:System.Single> に3.51 と二乗が乗算されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-164">A second <xref:System.Single> is multiplied by 3.51 and squared before the square root of the result is divided by 3.51 to restore the original value.</span></span> <span data-ttu-id="31b2e-165">2つの値は同一であるように見えますが、<xref:System.Single.Equals%28System.Single%29> メソッドを呼び出すと、それらの値が等しくないことが示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-165">Although the two values appear to be identical, a call to the <xref:System.Single.Equals%28System.Single%29> method indicates that they are not equal.</span></span> <span data-ttu-id="31b2e-166">"G9" 標準書式指定文字列を使用して、各 <xref:System.Single> 値のすべての有効桁数を表示する結果文字列を返すと、2番目の値が .0000000000001 未満であることが示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-166">Using the "G9" standard format string to return a result string that displays all the significant digits of each <xref:System.Single> value shows that the second value is .0000000000001 less than the first.</span></span>  
  
 [!code-csharp[System.Single.Structure#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison2.cs#10)]
 [!code-vb[System.Single.Structure#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison2.vb#10)]  
  
 <span data-ttu-id="31b2e-167">精度の低下が比較の結果に影響する可能性がある場合は、<xref:System.Single.Equals%2A> または <xref:System.Single.CompareTo%2A> メソッドを呼び出す代わりに、次の方法を使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-167">In cases where a loss of precision is likely to affect the result of a comparison, you can use the following techniques instead of calling the <xref:System.Single.Equals%2A> or <xref:System.Single.CompareTo%2A> method:</span></span>  
  
-   <span data-ttu-id="31b2e-168"><xref:System.Math.Round%2A?displayProperty=nameWithType> メソッドを呼び出して、両方の値の有効桁数が同じであることを確認します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-168">Call the <xref:System.Math.Round%2A?displayProperty=nameWithType> method to ensure that both values have the same precision.</span></span> <span data-ttu-id="31b2e-169">次の例では、この方法を使用するように前の例を変更し、2つの小数部の値が等価になるようにしています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-169">The following example modifies a previous example to use this approach so that two fractional values are equivalent.</span></span>  
  
     [!code-csharp[System.Single.Structure#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison3.cs#11)]
     [!code-vb[System.Single.Structure#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison3.vb#11)]  
  
     <span data-ttu-id="31b2e-170">精度の問題は、中間値の丸めにも適用されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-170">Note that the problem of precision still applies to rounding of midpoint values.</span></span> <span data-ttu-id="31b2e-171">詳細については、<xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-171">For more information, see the <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="31b2e-172">等しいかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-172">Test for approximate equality instead of equality.</span></span> <span data-ttu-id="31b2e-173">この手法では、2つの値が異なる一方でも同じであるか、またはより小さい値が大きな値から逸脱する相対金額を定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-173">This technique requires that you define either an absolute amount by which the two values can differ but still be equal, or that you define a relative amount by which the smaller value can diverge from the larger value.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="31b2e-174"><xref:System.Single.Epsilon?displayProperty=nameWithType> は、等しいかどうかをテストするときに2つの <xref:System.Single> 値の間の距離の絶対測定値として使用されることがあります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-174"><xref:System.Single.Epsilon?displayProperty=nameWithType> is sometimes used as an absolute measure of the distance between two <xref:System.Single> values when testing for equality.</span></span>  <span data-ttu-id="31b2e-175">ただし <xref:System.Single.Epsilon?displayProperty=nameWithType> は、値がゼロである <xref:System.Single> に加算または減算できる最小値を測定します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-175">However, <xref:System.Single.Epsilon?displayProperty=nameWithType> measures the smallest possible value that can be added to, or subtracted from, a <xref:System.Single> whose value is zero.</span></span> <span data-ttu-id="31b2e-176">正および負の <xref:System.Single> 値の場合、<xref:System.Single.Epsilon?displayProperty=nameWithType> の値が小さすぎて検出できません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-176">For most positive and negative <xref:System.Single> values, the value of <xref:System.Single.Epsilon?displayProperty=nameWithType> is too small to be detected.</span></span> <span data-ttu-id="31b2e-177">したがって、値がゼロの場合を除いて、等しいかどうかのテストでは使用しないことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-177">Therefore, except for values that are zero, we do not recommend its use in tests for equality.</span></span>  
  
     <span data-ttu-id="31b2e-178">次の例では、後者の方法を使用して、2つの値の相対的な差をテストする `IsApproximatelyEqual` メソッドを定義しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-178">The following example uses the latter approach to define an `IsApproximatelyEqual` method that tests the relative difference between two values.</span></span> <span data-ttu-id="31b2e-179">また、`IsApproximatelyEqual` メソッドと <xref:System.Single.Equals%28System.Single%29> メソッドの呼び出しの結果も比較します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-179">It also contrasts the result of calls to the `IsApproximatelyEqual` method and the <xref:System.Single.Equals%28System.Single%29> method.</span></span>  
  
     [!code-csharp[System.Single.Structure#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/comparison4.cs#12)]
     [!code-vb[System.Single.Structure#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/comparison4.vb#12)]  
  
<a name="Exceptions"></a>   
## <a name="floating-point-values-and-exceptions"></a><span data-ttu-id="31b2e-180">浮動小数点値と例外</span><span class="sxs-lookup"><span data-stu-id="31b2e-180">Floating-point values and exceptions</span></span>  
 <span data-ttu-id="31b2e-181">浮動小数点値を使用した操作は、整数型の演算とは異なり、例外をスローしません。これは、0除算やオーバーフローなどの無効な操作が発生した場合に例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-181">Operations with floating-point values do not throw exceptions, unlike operations with integral types, which throw exceptions in cases of illegal operations such as division by zero or overflow.</span></span>  <span data-ttu-id="31b2e-182">代わりに、このような状況では、浮動小数点演算の結果は0、正の無限大、負の無限大、または非数 (NaN) になります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-182">Instead, in these situations, the result of a floating-point operation is zero, positive infinity, negative infinity, or not a number (NaN):</span></span>  
  
-   <span data-ttu-id="31b2e-183">浮動小数点演算の結果が変換先の形式に対して小さすぎる場合、結果は0になります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-183">If the result of a floating-point operation is too small for the destination format, the result is zero.</span></span> <span data-ttu-id="31b2e-184">これは、次の例に示すように、非常に小さい2つの浮動小数点数を乗算した場合に発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-184">This can occur when two very small floating-point numbers are multiplied, as the following example shows.</span></span>  
  
     [!code-csharp[System.Single.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/exceptional1.cs#1)]
     [!code-vb[System.Single.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/exceptional1.vb#1)]  
  
-   <span data-ttu-id="31b2e-185">浮動小数点演算の結果の大きさが変換先の形式の範囲を超える場合、演算の結果は、結果の符号に応じて、<xref:System.Single.PositiveInfinity> または <xref:System.Single.NegativeInfinity>になります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-185">If the magnitude of the result of a floating-point operation exceeds the range of the destination format, the result of the operation is <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity>, as appropriate for the sign of the result.</span></span> <span data-ttu-id="31b2e-186"><xref:System.Single.MaxValue?displayProperty=nameWithType> オーバーフローする操作の結果は <xref:System.Single.PositiveInfinity>、次の例に示すように、<xref:System.Single.MinValue?displayProperty=nameWithType> オーバーフローする操作の結果は <xref:System.Single.NegativeInfinity>になります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-186">The result of an operation that overflows <xref:System.Single.MaxValue?displayProperty=nameWithType> is <xref:System.Single.PositiveInfinity>, and the result of an operation that overflows <xref:System.Single.MinValue?displayProperty=nameWithType> is <xref:System.Single.NegativeInfinity>, as the following example shows.</span></span>  
  
     [!code-csharp[System.Single.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/exceptional2.cs#2)]
     [!code-vb[System.Single.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/exceptional2.vb#2)]  
  
     <span data-ttu-id="31b2e-187"><xref:System.Single.PositiveInfinity> は、0で正の被除数を除算した結果も得られます。また、0による除算の結果は負の被除数で <xref:System.Single.NegativeInfinity> ます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-187"><xref:System.Single.PositiveInfinity> also results from a division by zero with a positive dividend, and <xref:System.Single.NegativeInfinity> results from a division by zero with a negative dividend.</span></span>  
  
-   <span data-ttu-id="31b2e-188">浮動小数点演算が無効な場合は、演算の結果が <xref:System.Single.NaN>されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-188">If a floating-point operation is invalid, the result of the operation is <xref:System.Single.NaN>.</span></span> <span data-ttu-id="31b2e-189">たとえば、次の操作の結果を <xref:System.Single.NaN> ます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-189">For example, <xref:System.Single.NaN> results from the following operations:</span></span>  
  
    -   <span data-ttu-id="31b2e-190">被除数が0の0による除算。</span><span class="sxs-lookup"><span data-stu-id="31b2e-190">Division by zero with a dividend of zero.</span></span> <span data-ttu-id="31b2e-191">0による除算の場合は、<xref:System.Single.PositiveInfinity> または <xref:System.Single.NegativeInfinity>のいずれかになります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-191">Note that other cases of division by zero result in either <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity>.</span></span>  
  
    -   <span data-ttu-id="31b2e-192">無効な入力を伴う浮動小数点演算。</span><span class="sxs-lookup"><span data-stu-id="31b2e-192">Any floating-point operation with invalid input.</span></span> <span data-ttu-id="31b2e-193">たとえば、負の値の平方根を検索しようとすると、<xref:System.Single.NaN>が返されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-193">For example, attempting to find the square root of a negative value returns <xref:System.Single.NaN>.</span></span>  
  
    -   <span data-ttu-id="31b2e-194">値が <xref:System.Single.NaN?displayProperty=nameWithType>である引数を持つ操作。</span><span class="sxs-lookup"><span data-stu-id="31b2e-194">Any operation with an argument whose value is <xref:System.Single.NaN?displayProperty=nameWithType>.</span></span>  
  
<a name="Conversion"></a>   
## <a name="type-conversions-and-the-single-structure"></a><span data-ttu-id="31b2e-195">型変換と単一の構造体</span><span class="sxs-lookup"><span data-stu-id="31b2e-195">Type conversions and the Single structure</span></span>  
 <span data-ttu-id="31b2e-196"><xref:System.Single> 構造体では、明示的または暗黙的な変換演算子は定義されません。代わりに、変換はコンパイラによって実装されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-196">The <xref:System.Single> structure does not define any explicit or implicit conversion operators; instead, conversions are implemented by the compiler.</span></span>  
  
 <span data-ttu-id="31b2e-197">次の表は、他のプリミティブ数値型の値を <xref:System.Single> 値に変換できるかどうか、およびその変換が拡大または縮小であるかどうか、および結果の <xref:System.Single> の精度が元のものよりも少ないかどうかを示しています。数値.</span><span class="sxs-lookup"><span data-stu-id="31b2e-197">The following table lists the possible conversions of a value of the other primitive numeric types to a <xref:System.Single> value, It also indicates whether the conversion is widening or narrowing and whether the resulting <xref:System.Single> may have less precision than the original value.</span></span>  
  
|<span data-ttu-id="31b2e-198">変換 (</span><span class="sxs-lookup"><span data-stu-id="31b2e-198">Conversion from</span></span>|<span data-ttu-id="31b2e-199">拡大/縮小</span><span class="sxs-lookup"><span data-stu-id="31b2e-199">Widening/narrowing</span></span>|<span data-ttu-id="31b2e-200">有効桁数が失われる可能性があります</span><span class="sxs-lookup"><span data-stu-id="31b2e-200">Possible loss of precision</span></span>|  
|---------------------|-------------------------|--------------------------------|  
|<xref:System.Byte>|<span data-ttu-id="31b2e-201">Widening</span><span class="sxs-lookup"><span data-stu-id="31b2e-201">Widening</span></span>|<span data-ttu-id="31b2e-202">いいえ</span><span class="sxs-lookup"><span data-stu-id="31b2e-202">No</span></span>|  
|<xref:System.Decimal>|<span data-ttu-id="31b2e-203">Widening</span><span class="sxs-lookup"><span data-stu-id="31b2e-203">Widening</span></span><br /><br /> <span data-ttu-id="31b2e-204">にはC# cast 演算子が必要であることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-204">Note that C# requires a cast operator.</span></span>|<span data-ttu-id="31b2e-205">はい。</span><span class="sxs-lookup"><span data-stu-id="31b2e-205">Yes.</span></span> <span data-ttu-id="31b2e-206"><xref:System.Decimal> は29桁の有効桁数をサポートします。<xref:System.Single> は9をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-206"><xref:System.Decimal> supports 29 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.Double>|<span data-ttu-id="31b2e-207">絞り範囲外の値は <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> または <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>に変換されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-207">Narrowing; out-of-range values are converted to <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> or <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>.</span></span>|<span data-ttu-id="31b2e-208">はい。</span><span class="sxs-lookup"><span data-stu-id="31b2e-208">Yes.</span></span> <span data-ttu-id="31b2e-209"><xref:System.Double> は、有効桁数が17桁の10進数をサポートしています。<xref:System.Single> は9をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-209"><xref:System.Double> supports 17 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.Int16>|<span data-ttu-id="31b2e-210">Widening</span><span class="sxs-lookup"><span data-stu-id="31b2e-210">Widening</span></span>|<span data-ttu-id="31b2e-211">いいえ</span><span class="sxs-lookup"><span data-stu-id="31b2e-211">No</span></span>|  
|<xref:System.Int32>|<span data-ttu-id="31b2e-212">Widening</span><span class="sxs-lookup"><span data-stu-id="31b2e-212">Widening</span></span>|<span data-ttu-id="31b2e-213">はい。</span><span class="sxs-lookup"><span data-stu-id="31b2e-213">Yes.</span></span> <span data-ttu-id="31b2e-214"><xref:System.Int32> は10桁の有効桁数をサポートします。<xref:System.Single> は9をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-214"><xref:System.Int32> supports 10 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.Int64>|<span data-ttu-id="31b2e-215">Widening</span><span class="sxs-lookup"><span data-stu-id="31b2e-215">Widening</span></span>|<span data-ttu-id="31b2e-216">はい。</span><span class="sxs-lookup"><span data-stu-id="31b2e-216">Yes.</span></span> <span data-ttu-id="31b2e-217"><xref:System.Int64> は、有効桁数が19桁の10進数をサポートしています。<xref:System.Single> は9をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-217"><xref:System.Int64> supports 19 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.SByte>|<span data-ttu-id="31b2e-218">Widening</span><span class="sxs-lookup"><span data-stu-id="31b2e-218">Widening</span></span>|<span data-ttu-id="31b2e-219">いいえ</span><span class="sxs-lookup"><span data-stu-id="31b2e-219">No</span></span>|  
|<xref:System.UInt16>|<span data-ttu-id="31b2e-220">Widening</span><span class="sxs-lookup"><span data-stu-id="31b2e-220">Widening</span></span>|<span data-ttu-id="31b2e-221">いいえ</span><span class="sxs-lookup"><span data-stu-id="31b2e-221">No</span></span>|  
|<xref:System.UInt32>|<span data-ttu-id="31b2e-222">Widening</span><span class="sxs-lookup"><span data-stu-id="31b2e-222">Widening</span></span>|<span data-ttu-id="31b2e-223">はい。</span><span class="sxs-lookup"><span data-stu-id="31b2e-223">Yes.</span></span> <span data-ttu-id="31b2e-224"><xref:System.UInt32> は10桁の有効桁数をサポートします。<xref:System.Single> は9をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-224"><xref:System.UInt32> supports 10 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
|<xref:System.UInt64>|<span data-ttu-id="31b2e-225">Widening</span><span class="sxs-lookup"><span data-stu-id="31b2e-225">Widening</span></span>|<span data-ttu-id="31b2e-226">はい。</span><span class="sxs-lookup"><span data-stu-id="31b2e-226">Yes.</span></span> <span data-ttu-id="31b2e-227"><xref:System.Int64> は、10桁の有効桁数をサポートします。<xref:System.Single> は9をサポートしています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-227"><xref:System.Int64> supports 20 decimal digits of precision; <xref:System.Single> supports 9.</span></span>|  
  
 <span data-ttu-id="31b2e-228">次の例では、その他のプリミティブ数値型の最小値または最大値を <xref:System.Single> の値に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-228">The following example converts the minimum or maximum value of other primitive numeric types to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[System.Single.Structure#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/convert1.cs#20)]
 [!code-vb[System.Single.Structure#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/convert1.vb#20)]  
  
 <span data-ttu-id="31b2e-229">また、<xref:System.Double> 値 <xref:System.Double.NaN?displayProperty=nameWithType>、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、および <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> は、それぞれ <xref:System.Single.NaN?displayProperty=nameWithType>、<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>、および <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>に変換されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-229">In addition, the <xref:System.Double> values <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Double.NegativeInfinity?displayProperty=nameWithType> covert to <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 <span data-ttu-id="31b2e-230">数値型の値を <xref:System.Single> 値に変換すると、精度が失われる可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-230">Note that the conversion of the value of some numeric types to a <xref:System.Single> value can involve a loss of precision.</span></span> <span data-ttu-id="31b2e-231">例に示すように、<xref:System.Decimal>、<xref:System.Double>、<xref:System.Int32>、<xref:System.Int64>、<xref:System.UInt32>、および <xref:System.UInt64> の値を <xref:System.Single> 値に変換する場合、精度が低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-231">As the example illustrates, a loss of precision is possible when converting <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt32>, and <xref:System.UInt64> values to <xref:System.Single> values.</span></span>  
  
 <span data-ttu-id="31b2e-232"><xref:System.Single> 値から <xref:System.Double> への変換は、拡大変換です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-232">The conversion of a <xref:System.Single> value to a <xref:System.Double> is a widening conversion.</span></span> <span data-ttu-id="31b2e-233"><xref:System.Double> 型の <xref:System.Single> 値が正確に表現されていない場合、変換によって精度が低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-233">The conversion may result in a loss of precision if the <xref:System.Double> type does not have a precise representation for the <xref:System.Single> value.</span></span>  
  
 <span data-ttu-id="31b2e-234"><xref:System.Single> 値から <xref:System.Double> 以外のプリミティブ数値データ型の値への変換は縮小変換であり、キャスト演算子 (でC#は) または変換メソッド (Visual Basic) が必要です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-234">The conversion of a <xref:System.Single> value to a value of any primitive numeric data type other than a <xref:System.Double> is a narrowing conversion and requires a cast operator (in C#) or a conversion method (in Visual Basic).</span></span> <span data-ttu-id="31b2e-235">対象のデータ型の範囲外の値 (対象の型の `MinValue` と `MaxValue` のプロパティで定義されている値) は、次の表に示すように動作します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-235">Values that are outside the range of the target data type, which are defined by the target type's `MinValue` and `MaxValue` properties, behave as shown in the following table.</span></span>  
  
|<span data-ttu-id="31b2e-236">変換後の型</span><span class="sxs-lookup"><span data-stu-id="31b2e-236">Target type</span></span>|<span data-ttu-id="31b2e-237">結果</span><span class="sxs-lookup"><span data-stu-id="31b2e-237">Result</span></span>|  
|-----------------|------------|  
|<span data-ttu-id="31b2e-238">任意の整数型</span><span class="sxs-lookup"><span data-stu-id="31b2e-238">Any integral type</span></span>|<span data-ttu-id="31b2e-239">Checked コンテキストで変換が発生した場合の <xref:System.OverflowException> 例外。</span><span class="sxs-lookup"><span data-stu-id="31b2e-239">An <xref:System.OverflowException> exception if the conversion occurs in a checked context.</span></span><br /><br /> <span data-ttu-id="31b2e-240">変換が unchecked コンテキスト (のC#既定値) で行われる場合、変換操作は成功しますが、値はオーバーフローします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-240">If the conversion occurs in an unchecked context (the default in C#), the conversion operation succeeds but the value overflows.</span></span>|  
|<xref:System.Decimal>|<span data-ttu-id="31b2e-241"><xref:System.OverflowException> の例外です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-241">An <xref:System.OverflowException> exception,</span></span>|  
  
 <span data-ttu-id="31b2e-242">さらに、<xref:System.Single.NaN?displayProperty=nameWithType>、<xref:System.Single.PositiveInfinity?displayProperty=nameWithType>、および <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> は checked コンテキストで整数への変換のための <xref:System.OverflowException> をスローしますが、これらの値は unchecked コンテキストで整数に変換されるとオーバーフローします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-242">In addition, <xref:System.Single.NaN?displayProperty=nameWithType>, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> throw an <xref:System.OverflowException> for conversions to integers in a checked context, but these values overflow when converted to integers in an unchecked context.</span></span> <span data-ttu-id="31b2e-243"><xref:System.Decimal>への変換では、常に <xref:System.OverflowException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-243">For conversions to <xref:System.Decimal>, they always throw an <xref:System.OverflowException>.</span></span> <span data-ttu-id="31b2e-244"><xref:System.Double>への変換では、<xref:System.Double.NaN?displayProperty=nameWithType>、<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、および <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>にそれぞれ変換されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-244">For conversions to <xref:System.Double>, they convert to <xref:System.Double.NaN?displayProperty=nameWithType>, <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, and <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
 <span data-ttu-id="31b2e-245">有効桁数が失われると、<xref:System.Single> 値が別の数値型に変換される可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-245">Note that a loss of precision may result from converting a <xref:System.Single> value to another numeric type.</span></span> <span data-ttu-id="31b2e-246">整数以外の <xref:System.Single> 値を変換する場合、例の出力が示すように、<xref:System.Single> の値が丸められるか (Visual Basic のように)、切り捨てられたとき (のC#ように)、小数部分は失われます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-246">In the case of converting non-integral <xref:System.Single> values, as the output from the example shows, the fractional component is lost when the <xref:System.Single> value is either rounded (as in Visual Basic) or truncated (as in C#).</span></span> <span data-ttu-id="31b2e-247"><xref:System.Decimal> 値への変換では、<xref:System.Single> 値は、対象のデータ型で正確な表現を持つことはできません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-247">For conversions to <xref:System.Decimal> values, the <xref:System.Single> value may not have a precise representation in the target data type.</span></span>  
  
 <span data-ttu-id="31b2e-248">次の例では、<xref:System.Single> の値の数を他のいくつかの数値型に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-248">The following example converts a number of <xref:System.Single> values to several other numeric types.</span></span> <span data-ttu-id="31b2e-249">変換は、Visual Basic (既定) のチェックされたコンテキストと、 C# ( [checked](~/docs/csharp/language-reference/keywords/checked.md)キーワードによって) で行われます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-249">The conversions occur in a checked context in Visual Basic (the default) and in C# (because of the [checked](~/docs/csharp/language-reference/keywords/checked.md) keyword).</span></span> <span data-ttu-id="31b2e-250">この例の出力は、チェックされていないコンテキストでの変換の結果を示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-250">The output from the example shows the result for conversions in both a checked an unchecked context.</span></span> <span data-ttu-id="31b2e-251">`/removeintchecks+` コンパイラスイッチを使用してコンパイルし、でC# `checked` ステートメントをコメントアウトすることで、Visual Basic の unchecked コンテキストで変換を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-251">You can perform conversions in an unchecked context in Visual Basic by compiling with the `/removeintchecks+` compiler switch and in C# by commenting out the `checked` statement.</span></span>  
  
 [!code-csharp[System.Single.Structure#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/convert2.cs#21)]
 [!code-vb[System.Single.Structure#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/convert2.vb#21)]  
  
 <span data-ttu-id="31b2e-252">数値型の変換の詳細については、「.NET Framework および[型変換テーブル](~/docs/standard/base-types/conversion-tables.md)の[型変換](~/docs/standard/base-types/type-conversion.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-252">For more information on the conversion of numeric types, see [Type Conversion in the .NET Framework](~/docs/standard/base-types/type-conversion.md) and [Type Conversion Tables](~/docs/standard/base-types/conversion-tables.md).</span></span>  
  
<a name="Functionality"></a>   
## <a name="floating-point-functionality"></a><span data-ttu-id="31b2e-253">浮動小数点機能</span><span class="sxs-lookup"><span data-stu-id="31b2e-253">Floating-point functionality</span></span>  
 <span data-ttu-id="31b2e-254"><xref:System.Single> 構造体と関連する型には、次のカテゴリの操作を実行するメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-254">The <xref:System.Single> structure and related types provide methods to perform the following categories of operations:</span></span>  
  
-   <span data-ttu-id="31b2e-255">**値の比較**。</span><span class="sxs-lookup"><span data-stu-id="31b2e-255">**Comparison of values**.</span></span> <span data-ttu-id="31b2e-256"><xref:System.Single.Equals%2A> メソッドを呼び出して、2つの <xref:System.Single> 値が等しいかどうかを判断したり、2つの値の間のリレーションシップを決定する <xref:System.Single.CompareTo%2A> メソッドを呼び出したりできます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-256">You can call the <xref:System.Single.Equals%2A> method to determine whether two <xref:System.Single> values are equal, or the <xref:System.Single.CompareTo%2A> method to determine the relationship between two values.</span></span>  
  
     <span data-ttu-id="31b2e-257"><xref:System.Single> 構造体は、比較演算子の完全なセットもサポートしています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-257">The <xref:System.Single> structure also supports a complete set of comparison operators.</span></span> <span data-ttu-id="31b2e-258">たとえば、等値または非等値をテストしたり、一方の値がもう一方の値以上かどうかを調べたりすることができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-258">For example, you can test for equality or inequality, or determine whether one value is greater than or equal to another value.</span></span> <span data-ttu-id="31b2e-259">オペランドのいずれかが <xref:System.Double>の場合、比較を実行する前に <xref:System.Single> の値が <xref:System.Double> に変換されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-259">If one of the operands is a <xref:System.Double>, the <xref:System.Single> value is converted to a <xref:System.Double> before performing the comparison.</span></span> <span data-ttu-id="31b2e-260">オペランドの1つが整数型の場合は、比較を実行する前に <xref:System.Single> に変換されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-260">If one of the operands is an integral type, it is converted to a <xref:System.Single> before performing the comparison.</span></span> <span data-ttu-id="31b2e-261">これらは拡大変換ですが、精度が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-261">Although these are widening conversions, they may involve a loss of precision.</span></span>  
  
    > [!WARNING]
    >  <span data-ttu-id="31b2e-262">精度が異なるため、2つの <xref:System.Single> 値が等しいと予想される場合は、等しくないと見なされ、比較の結果に影響します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-262">Because of differences in precision, two <xref:System.Single> values that you expect to be equal may turn out to be unequal, which affects the result of the comparison.</span></span> <span data-ttu-id="31b2e-263">2つの <xref:System.Single> 値の比較の詳細については、「[等値のテスト](#Equality)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-263">See the [Testing for equality](#Equality) section for more information about comparing two <xref:System.Single> values.</span></span>  
  
     <span data-ttu-id="31b2e-264"><xref:System.Single.IsNaN%2A>、<xref:System.Single.IsInfinity%2A>、<xref:System.Single.IsPositiveInfinity%2A>、および <xref:System.Single.IsNegativeInfinity%2A> の各メソッドを呼び出して、これらの特殊な値をテストすることもできます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-264">You can also call the <xref:System.Single.IsNaN%2A>, <xref:System.Single.IsInfinity%2A>, <xref:System.Single.IsPositiveInfinity%2A>, and <xref:System.Single.IsNegativeInfinity%2A> methods to test for these special values.</span></span>  
  
-   <span data-ttu-id="31b2e-265">**算術演算**。</span><span class="sxs-lookup"><span data-stu-id="31b2e-265">**Mathematical operations**.</span></span> <span data-ttu-id="31b2e-266">加算、減算、乗算、除算などの一般的な算術演算は、<xref:System.Single> メソッドではなく、言語コンパイラおよび共通中間言語 (CIL) 命令によって実装されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-266">Common arithmetic operations such as addition, subtraction, multiplication, and division are implemented by language compilers and Common Intermediate Language (CIL) instructions rather than by <xref:System.Single> methods.</span></span> <span data-ttu-id="31b2e-267">算術演算のもう一方のオペランドが <xref:System.Double>の場合、演算を実行する前に <xref:System.Single> が <xref:System.Double> に変換され、操作の結果も <xref:System.Double> 値になります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-267">If the other operand in a mathematical operation is a <xref:System.Double>, the <xref:System.Single> is converted to a <xref:System.Double> before performing the operation, and the result of the operation is also a <xref:System.Double> value.</span></span> <span data-ttu-id="31b2e-268">もう一方のオペランドが整数型の場合は、演算を実行する前に <xref:System.Single> に変換され、演算の結果も <xref:System.Single> 値になります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-268">If the other operand is an integral type, it is converted to a <xref:System.Single> before performing the operation, and the result of the operation is also a <xref:System.Single> value.</span></span>  
  
     <span data-ttu-id="31b2e-269"><xref:System.Math?displayProperty=nameWithType> クラスで `static` (Visual Basic で`Shared`) メソッドを呼び出すことによって、他の数値演算を実行できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-269">You can perform other mathematical operations by calling `static` (`Shared` in Visual Basic) methods in the <xref:System.Math?displayProperty=nameWithType> class.</span></span> <span data-ttu-id="31b2e-270">これには、算術演算 (<xref:System.Math.Abs%2A?displayProperty=nameWithType>、<xref:System.Math.Sign%2A?displayProperty=nameWithType>、<xref:System.Math.Sqrt%2A?displayProperty=nameWithType>など)、geometry (<xref:System.Math.Cos%2A?displayProperty=nameWithType> や <xref:System.Math.Sin%2A?displayProperty=nameWithType>など)、微積分 (<xref:System.Math.Log%2A?displayProperty=nameWithType>など) で一般的に使用される追加のメソッドが含まれます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-270">These include additional methods commonly used for arithmetic (such as <xref:System.Math.Abs%2A?displayProperty=nameWithType>, <xref:System.Math.Sign%2A?displayProperty=nameWithType>, and <xref:System.Math.Sqrt%2A?displayProperty=nameWithType>), geometry (such as <xref:System.Math.Cos%2A?displayProperty=nameWithType> and <xref:System.Math.Sin%2A?displayProperty=nameWithType>), and calculus (such as <xref:System.Math.Log%2A?displayProperty=nameWithType>).</span></span>  <span data-ttu-id="31b2e-271">いずれの場合も、<xref:System.Single> の値は <xref:System.Double>に変換されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-271">In all cases, the <xref:System.Single> value is converted to a <xref:System.Double>.</span></span>  
  
     <span data-ttu-id="31b2e-272"><xref:System.Single> 値の個々のビットを操作することもできます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-272">You can also manipulate the individual bits in a <xref:System.Single> value.</span></span> <span data-ttu-id="31b2e-273"><xref:System.BitConverter.GetBytes%28System.Single%29?displayProperty=nameWithType> メソッドは、バイト配列でそのビットパターンを返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-273">The <xref:System.BitConverter.GetBytes%28System.Single%29?displayProperty=nameWithType> method returns its bit pattern in a byte array.</span></span>  <span data-ttu-id="31b2e-274">そのバイト配列を <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> メソッドに渡すことによって、32ビット整数で <xref:System.Single> 値のビットパターンを保持することもできます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-274">By passing that byte array to the <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> method, you can also preserve the <xref:System.Single> value's bit pattern in a 32-bit integer.</span></span>  
  
-   <span data-ttu-id="31b2e-275">**丸め**。</span><span class="sxs-lookup"><span data-stu-id="31b2e-275">**Rounding**.</span></span> <span data-ttu-id="31b2e-276">丸めは、浮動小数点表現と精度の問題によって生じる値の違いを減らすための手法としてよく使用されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-276">Rounding is often used as a technique for reducing the impact of differences between values caused by problems of floating-point representation and precision.</span></span> <span data-ttu-id="31b2e-277"><xref:System.Math.Round%2A?displayProperty=nameWithType> メソッドを呼び出すことによって、<xref:System.Single> 値を丸めることができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-277">You can round a <xref:System.Single> value by calling the <xref:System.Math.Round%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="31b2e-278">ただし、メソッドが呼び出される前に <xref:System.Single> 値が <xref:System.Double> に変換され、変換に精度が失われる可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-278">However, note  that the <xref:System.Single> value is converted to a <xref:System.Double> before the method is called, and the conversion can involve a loss of precision.</span></span>  
  
-   <span data-ttu-id="31b2e-279">**書式設定**。</span><span class="sxs-lookup"><span data-stu-id="31b2e-279">**Formatting**.</span></span> <span data-ttu-id="31b2e-280"><xref:System.Single.ToString%2A> メソッドを呼び出すか、または[複合書式指定](~/docs/standard/base-types/composite-formatting.md)機能を使用して、<xref:System.Single> 値を文字列形式に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-280">You can convert a <xref:System.Single> value to its string representation by calling the <xref:System.Single.ToString%2A> method or by using the [composite formatting](~/docs/standard/base-types/composite-formatting.md) feature.</span></span> <span data-ttu-id="31b2e-281">書式指定文字列による浮動小数点値の文字列形式の制御方法の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-281">For information about how format strings control the string representation of floating-point values, see the [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md) topics.</span></span>  
  
-   <span data-ttu-id="31b2e-282">**文字列を解析**しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-282">**Parsing strings**.</span></span> <span data-ttu-id="31b2e-283"><xref:System.Single.Parse%2A> または <xref:System.Single.TryParse%2A> メソッドを呼び出すことによって、浮動小数点値の文字列形式を <xref:System.Single> 値に変換できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-283">You can convert the string representation of a floating-point value to a <xref:System.Single> value by calling the <xref:System.Single.Parse%2A> or <xref:System.Single.TryParse%2A> method.</span></span> <span data-ttu-id="31b2e-284">解析操作が失敗した場合、<xref:System.Single.Parse%2A> メソッドは例外をスローし、<xref:System.Single.TryParse%2A> メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-284">If the parse operation fails, the <xref:System.Single.Parse%2A> method throws an exception, whereas the <xref:System.Single.TryParse%2A> method returns `false`.</span></span>  
  
-   <span data-ttu-id="31b2e-285">**型変換**。</span><span class="sxs-lookup"><span data-stu-id="31b2e-285">**Type conversion**.</span></span> <span data-ttu-id="31b2e-286"><xref:System.Single> 構造体は、任意の2つの標準 .NET Framework データ型間の変換をサポートする <xref:System.IConvertible> インターフェイスの明示的なインターフェイスの実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-286">The <xref:System.Single> structure provides an explicit interface implementation for the <xref:System.IConvertible> interface, which supports conversion between any two standard .NET Framework data types.</span></span> <span data-ttu-id="31b2e-287">また、言語コンパイラでは、<xref:System.Double> から <xref:System.Single> 値への変換を除き、他のすべての標準数値型の値の暗黙的な変換もサポートされています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-287">Language compilers also support the implicit conversion of values for all other standard numeric types except for the conversion of <xref:System.Double> to <xref:System.Single> values.</span></span> <span data-ttu-id="31b2e-288"><xref:System.Double> 以外の標準数値型の値を <xref:System.Single> に変換することは、拡大変換であり、キャスト演算子または変換メソッドを使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-288">Conversion of a value of any standard numeric type other than a <xref:System.Double> to a <xref:System.Single> is a widening conversion and does not require the use of a casting operator or conversion method.</span></span>  
  
     <span data-ttu-id="31b2e-289">ただし、32ビットと64ビットの整数値を変換すると、精度が失われる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-289">However, conversion of 32-bit and 64-bit integer values can involve a loss of precision.</span></span> <span data-ttu-id="31b2e-290">次の表に、32ビット、64ビット、<xref:System.Double> の型の有効桁数の違いを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-290">The following table lists the differences in precision for 32-bit, 64-bit, and <xref:System.Double> types:</span></span>  
  
    |<span data-ttu-id="31b2e-291">型</span><span class="sxs-lookup"><span data-stu-id="31b2e-291">Type</span></span>|<span data-ttu-id="31b2e-292">最大有効桁数 (10 進数)</span><span class="sxs-lookup"><span data-stu-id="31b2e-292">Maximum precision (in decimal digits)</span></span>|<span data-ttu-id="31b2e-293">内部精度 (10 進数)</span><span class="sxs-lookup"><span data-stu-id="31b2e-293">Internal precision (in decimal digits)</span></span>|  
    |----------|---------------------------------------------|----------------------------------------------|  
    |<xref:System.Double>|<span data-ttu-id="31b2e-294">15</span><span class="sxs-lookup"><span data-stu-id="31b2e-294">15</span></span>|<span data-ttu-id="31b2e-295">17</span><span class="sxs-lookup"><span data-stu-id="31b2e-295">17</span></span>|  
    |<span data-ttu-id="31b2e-296"><xref:System.Int32> および <xref:System.UInt32></span><span class="sxs-lookup"><span data-stu-id="31b2e-296"><xref:System.Int32> and <xref:System.UInt32></span></span>|<span data-ttu-id="31b2e-297">10</span><span class="sxs-lookup"><span data-stu-id="31b2e-297">10</span></span>|<span data-ttu-id="31b2e-298">10</span><span class="sxs-lookup"><span data-stu-id="31b2e-298">10</span></span>|  
    |<span data-ttu-id="31b2e-299"><xref:System.Int64> および <xref:System.UInt64></span><span class="sxs-lookup"><span data-stu-id="31b2e-299"><xref:System.Int64> and <xref:System.UInt64></span></span>|<span data-ttu-id="31b2e-300">19</span><span class="sxs-lookup"><span data-stu-id="31b2e-300">19</span></span>|<span data-ttu-id="31b2e-301">19</span><span class="sxs-lookup"><span data-stu-id="31b2e-301">19</span></span>|  
    |<xref:System.Single>|<span data-ttu-id="31b2e-302">7</span><span class="sxs-lookup"><span data-stu-id="31b2e-302">7</span></span>|<span data-ttu-id="31b2e-303">9</span><span class="sxs-lookup"><span data-stu-id="31b2e-303">9</span></span>|  
  
     <span data-ttu-id="31b2e-304">精度の問題は、<xref:System.Double> 値に変換される <xref:System.Single> 値に最も頻繁に影響します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-304">The problem of precision most frequently affects <xref:System.Single> values that are converted to <xref:System.Double> values.</span></span> <span data-ttu-id="31b2e-305">次の例では、同じ除算演算によって生成される2つの値が等しくありません。値の1つが単精度浮動小数点値で、<xref:System.Double>に変換されるためです。</span><span class="sxs-lookup"><span data-stu-id="31b2e-305">In the following example, two values produced by identical division operations are unequal, because one of the values is a single-precision floating point value that is converted to a <xref:System.Double>.</span></span>  
  
     [!code-csharp[System.Single.Structure#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.structure/cs/precisionlist1.cs#5)]
     [!code-vb[System.Single.Structure#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.structure/vb/precisionlist1.vb#5)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="31b2e-306">この型のすべてのメンバーは、スレッドセーフです。</span><span class="sxs-lookup"><span data-stu-id="31b2e-306">All members of this type are thread safe.</span></span> <span data-ttu-id="31b2e-307">インスタンスの状態を変更するように見えるメンバーは、実際には新しい値で初期化された新しいインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-307">Members that appear to modify instance state actually return a new instance initialized with the new value.</span></span> <span data-ttu-id="31b2e-308">他の型と同様に、この型のインスタンスを含む共有変数の読み取りと書き込みは、スレッドセーフを保証するためにロックによって保護される必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-308">As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</span></span></threadsafe>
    <altmember cref="T:System.Decimal" />
    <altmember cref="T:System.Double" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31b2e-309">このインスタンスと指定したオブジェクトまたは別の <see cref="T:System.Single" /> インスタンスを比較し、このインスタンスの値が指定したオブジェクトの値またはもう一方の <see cref="T:System.Single" /> インスタンスの値よりも小さいか、同じか、それとも大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-309">Compares this instance to a specified object or to another <see cref="T:System.Single" /> instance and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object or the other <see cref="T:System.Single" /> instance.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="single.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="31b2e-310">比較対象のオブジェクト、または <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-310">An object to compare, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="31b2e-311">このインスタンスと指定したオブジェクトを比較し、このインスタンスの値が指定したオブジェクトの値よりも小さいか、同じか、または大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-311">Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.</span></span></summary>
        <returns><span data-ttu-id="31b2e-312">このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-312">A signed number indicating the relative values of this instance and <paramref name="value" />.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="31b2e-313">戻り値</span><span class="sxs-lookup"><span data-stu-id="31b2e-313">Return Value</span></span> 
 </term><description> <span data-ttu-id="31b2e-314">説明</span><span class="sxs-lookup"><span data-stu-id="31b2e-314">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="31b2e-315">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="31b2e-315">Less than zero</span></span> 
 </term><description> <span data-ttu-id="31b2e-316">このインスタンスは <paramref name="value" /> よりも小さくなっています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-316">This instance is less than <paramref name="value" />.</span></span>  
  
<span data-ttu-id="31b2e-317">- または -</span><span class="sxs-lookup"><span data-stu-id="31b2e-317">-or-</span></span> 
<span data-ttu-id="31b2e-318">このインスタンスは非数 (<see cref="F:System.Single.NaN" />) で、<paramref name="value" /> は数値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-318">This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="31b2e-319">0</span><span class="sxs-lookup"><span data-stu-id="31b2e-319">Zero</span></span> 
 </term><description> <span data-ttu-id="31b2e-320">このインスタンスは <paramref name="value" /> と等価です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-320">This instance is equal to <paramref name="value" />.</span></span>  
  
<span data-ttu-id="31b2e-321">- または -</span><span class="sxs-lookup"><span data-stu-id="31b2e-321">-or-</span></span> 
<span data-ttu-id="31b2e-322">このインスタンスと値は、どちらも非数 (<see cref="F:System.Single.NaN" />)、<see cref="F:System.Single.PositiveInfinity" />、または <see cref="F:System.Single.NegativeInfinity" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-322">This instance and value are both not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="31b2e-323">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="31b2e-323">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="31b2e-324">このインスタンスは <paramref name="value" /> よりも大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-324">This instance is greater than <paramref name="value" />.</span></span>  
  
<span data-ttu-id="31b2e-325">- または -</span><span class="sxs-lookup"><span data-stu-id="31b2e-325">-or-</span></span> 
<span data-ttu-id="31b2e-326">このインスタンスは数値で、<paramref name="value" /> は非数 (<see cref="F:System.Single.NaN" />) です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-326">This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).</span></span>  
  
<span data-ttu-id="31b2e-327">- または -</span><span class="sxs-lookup"><span data-stu-id="31b2e-327">-or-</span></span> 
 <span data-ttu-id="31b2e-328"><paramref name="value" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-328"><paramref name="value" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-329">`value` パラメーターは、`null` または <xref:System.Single>のインスタンスである必要があります。それ以外の場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-329">The `value` parameter must be `null` or an instance of <xref:System.Single>; otherwise, an exception is thrown.</span></span> <span data-ttu-id="31b2e-330"><xref:System.Single>のインスタンスは、その値に関係なく、`null`よりも大きいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-330">Any instance of <xref:System.Single>, regardless of its value, is considered greater than `null`.</span></span>  
  
 <span data-ttu-id="31b2e-331">等しいと見なされるためには、値が同一である必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-331">Values must be identical to be considered equal.</span></span> <span data-ttu-id="31b2e-332">特に浮動小数点値が複数の数値演算に依存している場合は、有効桁数が失われ、その値が最下位の数字を除いてほぼ同じであることが一般的です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-332">Particularly when floating-point values depend on multiple mathematical operations, it is common for them to lose precision and for their values to be nearly identical except for their least significant digits.</span></span> <span data-ttu-id="31b2e-333">このため、<xref:System.Single.CompareTo%2A> メソッドの戻り値は発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-333">Because of this, the return value of the <xref:System.Single.CompareTo%2A> method may seem surprising at times.</span></span> <span data-ttu-id="31b2e-334">たとえば、特定の値による乗算の後に同じ値で除算すると、元の値が生成されますが、次の例では、計算値が元の値よりも大きいことがわかります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-334">For example, multiplication by a particular value followed by division by the same value should produce the original value, but in the following example, the computed value turns out to be greater than the original value.</span></span> <span data-ttu-id="31b2e-335">"R"[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)を使用して、2つの値のすべての有効桁数を表示すると、計算された値が最下位桁の元の値と異なることを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-335">Showing all significant digits of the two values by using the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) indicates that the computed value differs from the original value in its least significant digits.</span></span> <span data-ttu-id="31b2e-336">このような比較の処理の詳細については、<xref:System.Single.Equals%28System.Single%29> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-336">For information about handling such comparisons, see the Remarks section of the <xref:System.Single.Equals%28System.Single%29> method.</span></span>  
  
 [!code-csharp[System.Single.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.compareto/cs/compareto3.cs#2)]
 [!code-vb[System.Single.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.compareto/vb/compareto3.vb#2)]  
  
 <span data-ttu-id="31b2e-337">このメソッドは、<xref:System.IComparable> インターフェイスをサポートするために実装されています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-337">This method is implemented to support the <xref:System.IComparable> interface.</span></span> <span data-ttu-id="31b2e-338"><xref:System.Single.NaN> は別の <xref:System.Single.NaN> (それ自体も含む) とは見なされませんが、<xref:System.IComparable> インターフェイスでは、`A.CompareTo(A)` が0を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-338">Note that, although a <xref:System.Single.NaN> is not considered to be equal to another <xref:System.Single.NaN> (even itself), the <xref:System.IComparable> interface requires that `A.CompareTo(A)` return zero.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="31b2e-339">比較における精度</span><span class="sxs-lookup"><span data-stu-id="31b2e-339">Precision in Comparisons</span></span>  
 <span data-ttu-id="31b2e-340">ドキュメント化された有効桁数を超える浮動小数点数の有効桁数は、.NET Framework の実装とバージョンに固有です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-340">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="31b2e-341">その結果、数値の内部表現の有効桁数が変更される可能性があるため、2つの特定の数値の比較が .NET Framework のバージョン間で変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-341">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-342">次のコード例は、<xref:System.Single.CompareTo%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-342">The following code example demonstrates the <xref:System.Single.CompareTo%2A> method.</span></span>  
  
 [!code-cpp[System.Single#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#16)]
 [!code-csharp[System.Single#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#16)]
 [!code-vb[System.Single#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31b2e-343"><paramref name="value" /> が <see cref="T:System.Single" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-343"><paramref name="value" /> is not a <see cref="T:System.Single" />.</span></span></exception>
        <altmember cref="M:System.Single.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.CompareTo(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(float value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : single -&gt; int&#xA;override this.CompareTo : single -&gt; int" Usage="single.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="31b2e-344">比較対象の単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-344">A single-precision floating-point number to compare.</span></span></param>
        <summary><span data-ttu-id="31b2e-345">このインスタンスと指定した単精度浮動小数点数を比較し、このインスタンスの値が指定した単精度浮動小数点数の値よりも小さいか、同じか、それとも大きいかを示す整数を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-345">Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="31b2e-346">このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-346">A signed number indicating the relative values of this instance and <paramref name="value" />.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="31b2e-347">戻り値</span><span class="sxs-lookup"><span data-stu-id="31b2e-347">Return Value</span></span> 
 </term><description> <span data-ttu-id="31b2e-348">説明</span><span class="sxs-lookup"><span data-stu-id="31b2e-348">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="31b2e-349">0 より小さい値</span><span class="sxs-lookup"><span data-stu-id="31b2e-349">Less than zero</span></span> 
 </term><description> <span data-ttu-id="31b2e-350">このインスタンスは <paramref name="value" /> よりも小さくなっています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-350">This instance is less than <paramref name="value" />.</span></span>  
  
<span data-ttu-id="31b2e-351">- または -</span><span class="sxs-lookup"><span data-stu-id="31b2e-351">-or-</span></span> 
<span data-ttu-id="31b2e-352">このインスタンスは非数 (<see cref="F:System.Single.NaN" />) で、<paramref name="value" /> は数値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-352">This instance is not a number (<see cref="F:System.Single.NaN" />) and <paramref name="value" /> is a number.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="31b2e-353">0</span><span class="sxs-lookup"><span data-stu-id="31b2e-353">Zero</span></span> 
 </term><description> <span data-ttu-id="31b2e-354">このインスタンスは <paramref name="value" /> と等価です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-354">This instance is equal to <paramref name="value" />.</span></span>  
  
<span data-ttu-id="31b2e-355">- または -</span><span class="sxs-lookup"><span data-stu-id="31b2e-355">-or-</span></span> 
<span data-ttu-id="31b2e-356">このインスタンスと <paramref name="value" /> は、どちらも非数 (<see cref="F:System.Single.NaN" />)、<see cref="F:System.Single.PositiveInfinity" />、または <see cref="F:System.Single.NegativeInfinity" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-356">Both this instance and <paramref name="value" /> are not a number (<see cref="F:System.Single.NaN" />), <see cref="F:System.Single.PositiveInfinity" />, or <see cref="F:System.Single.NegativeInfinity" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="31b2e-357">0 より大きい値</span><span class="sxs-lookup"><span data-stu-id="31b2e-357">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="31b2e-358">このインスタンスは <paramref name="value" /> よりも大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-358">This instance is greater than <paramref name="value" />.</span></span>  
  
<span data-ttu-id="31b2e-359">- または -</span><span class="sxs-lookup"><span data-stu-id="31b2e-359">-or-</span></span> 
<span data-ttu-id="31b2e-360">このインスタンスは数値で、<paramref name="value" /> は非数 (<see cref="F:System.Single.NaN" />) です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-360">This instance is a number and <paramref name="value" /> is not a number (<see cref="F:System.Single.NaN" />).</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-361">等しいと見なされるためには、値が同一である必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-361">Values must be identical to be considered equal.</span></span> <span data-ttu-id="31b2e-362">浮動小数点値が有効桁数を失い、最も重要度が低い場合は特に、値が複数の数値演算に依存している場合は、ほとんど同じになります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-362">It is common for floating-point values to lose precision and to become nearly identical except for their least significant digits, especially when the values depend on multiple mathematical operations.</span></span> <span data-ttu-id="31b2e-363">このため、<xref:System.Single.CompareTo%2A> メソッドの戻り値は、驚くように思えるかもしれません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-363">Because of this, the return value of the <xref:System.Single.CompareTo%2A> method at times may seem surprising.</span></span> <span data-ttu-id="31b2e-364">たとえば、任意の値による乗算の後に同じ値による除算を行うと、元の値が生成されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-364">For example, multiplication by any value followed by division by the same value should produce the original value.</span></span> <span data-ttu-id="31b2e-365">ただし、次の例では、計算値は元の値よりも大きい値になります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-365">However, in the following example, the computed value turns out to be greater than the original value.</span></span> <span data-ttu-id="31b2e-366">"R"[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)を使用して、2つの値のすべての有効桁数を表示すると、計算された値が最下位桁の元の値と異なることを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-366">Showing all significant digits of the two values by using the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) indicates that the computed value differs from the original value in its least significant digits.</span></span> <span data-ttu-id="31b2e-367">このような比較の処理の詳細については、<xref:System.Single.Equals%28System.Single%29> メソッドの「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-367">For information about handling such comparisons, see the Remarks section of the <xref:System.Single.Equals%28System.Single%29> method.</span></span>  
  
 [!code-csharp[System.Single.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.compareto/cs/compareto2.cs#1)]
 [!code-vb[System.Single.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.compareto/vb/compareto2.vb#1)]  
  
 <span data-ttu-id="31b2e-368">このメソッドは、<xref:System.IComparable%601?displayProperty=nameWithType> インターフェイスを実装し、`value` パラメーターをオブジェクトに変換する必要がないため、<xref:System.Single.CompareTo%2A?displayProperty=nameWithType> メソッドよりも若干優れています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-368">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.Single.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.</span></span>  
  
 <span data-ttu-id="31b2e-369">値が <xref:System.Single.NaN> されているオブジェクトは、その値が <xref:System.Single.NaN> である別のオブジェクト (自体も含む) と同じとは見なされませんが、<xref:System.IComparable%601> インターフェイスでは、`A.CompareTo(A)` が0を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-369">Note that, although an object whose value is <xref:System.Single.NaN> is not considered equal to another object whose value is <xref:System.Single.NaN> (even itself), the <xref:System.IComparable%601> interface requires that `A.CompareTo(A)` return zero.</span></span>  
  
## <a name="widening-conversions"></a><span data-ttu-id="31b2e-370">拡大変換</span><span class="sxs-lookup"><span data-stu-id="31b2e-370">Widening Conversions</span></span>  
 <span data-ttu-id="31b2e-371">プログラミング言語によっては、パラメーターの型がインスタンスの型よりも少ない (幅が狭い) <xref:System.Single.CompareTo%2A> メソッドをコーディングすることができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-371">Depending on your programming language, it might be possible to code a <xref:System.Single.CompareTo%2A> method where the parameter type has fewer bits (is narrower) than the instance type.</span></span> <span data-ttu-id="31b2e-372">これが可能なのは、一部のプログラミング言語では、インスタンスと同数のビットを持つ型として、パラメーターを表す暗黙的な拡大変換が実行されるためです。</span><span class="sxs-lookup"><span data-stu-id="31b2e-372">This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</span></span>  
  
 <span data-ttu-id="31b2e-373">たとえば、インスタンスの型が <xref:System.Single> で、パラメーターの型が <xref:System.Int32>であるとします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-373">For example, suppose the instance type is <xref:System.Single> and the parameter type is <xref:System.Int32>.</span></span> <span data-ttu-id="31b2e-374">Microsoft C#コンパイラは、パラメーターの値を <xref:System.Single> オブジェクトとして表す命令を生成し、インスタンスの値とパラメーターの拡張表現を比較する <xref:System.Single.CompareTo%28System.Single%29?displayProperty=nameWithType> メソッドを生成します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-374">The Microsoft C# compiler generates instructions to represent the value of the parameter as a <xref:System.Single> object, then generates a <xref:System.Single.CompareTo%28System.Single%29?displayProperty=nameWithType> method that compares the values of the instance and the widened representation of the parameter.</span></span>  
  
 <span data-ttu-id="31b2e-375">プログラミング言語のドキュメントを参照して、コンパイラが数値型の暗黙的な拡大変換を実行するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-375">Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types.</span></span> <span data-ttu-id="31b2e-376">詳細については、「[型変換の表](~/docs/standard/base-types/conversion-tables.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-376">For more information, see the [Type Conversion Tables](~/docs/standard/base-types/conversion-tables.md) topic.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="31b2e-377">比較における精度</span><span class="sxs-lookup"><span data-stu-id="31b2e-377">Precision in Comparisons</span></span>  
 <span data-ttu-id="31b2e-378">ドキュメント化された有効桁数を超える浮動小数点数の有効桁数は、.NET Framework の実装とバージョンに固有です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-378">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="31b2e-379">その結果、数値の内部表現の有効桁数が変更される可能性があるため、2つの特定の数値の比較が .NET Framework のバージョン間で変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-379">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-380">次のコード例は、いくつかの値および参照型について、<xref:System.Single.CompareTo%2A> メソッドのジェネリックおよび非ジェネリックバージョンを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-380">The following code example demonstrates generic and nongeneric versions of the <xref:System.Single.CompareTo%2A> method for several value and reference types.</span></span>  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Epsilon">
      <MemberSignature Language="C#" Value="public const float Epsilon = 1.401298E-45;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 Epsilon = float32(1.401298E-45)" />
      <MemberSignature Language="DocId" Value="F:System.Single.Epsilon" />
      <MemberSignature Language="VB.NET" Value="Public Const Epsilon As Single  = 1.401298E-45" />
      <MemberSignature Language="C++ CLI" Value="public: float Epsilon = 1.401298E-45;" />
      <MemberSignature Language="F#" Value="val mutable Epsilon : single" Usage="System.single.Epsilon" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>1.401298E-45</MemberValue>
      <Docs>
        <summary><span data-ttu-id="31b2e-381">ゼロより大きい最小の <see cref="T:System.Single" /> 値を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-381">Represents the smallest positive <see cref="T:System.Single" /> value that is greater than zero.</span></span> <span data-ttu-id="31b2e-382">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-382">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-383"><xref:System.Single.Epsilon> プロパティの値は、<xref:System.Single> インスタンスの値が0の場合に数値演算または比較に有意な最小の正 <xref:System.Single> 値を反映します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-383">The value of the <xref:System.Single.Epsilon> property reflects the smallest positive <xref:System.Single> value that is significant in numeric operations or comparisons when the value of the <xref:System.Single> instance is zero.</span></span> <span data-ttu-id="31b2e-384">たとえば、次のコードは、0と <xref:System.Single.Epsilon> が等しくない値であると見なされ、<xref:System.Single.Epsilon> の0と半分の値は等しいと見なされることを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-384">For example, the following code shows that zero and <xref:System.Single.Epsilon> are considered to be unequal values, whereas zero and half the value of <xref:System.Single.Epsilon> are considered to be equal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/epsilon.cs#5)]
 [!code-vb[System.Single.Epsilon#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/epsilon.vb#5)]  
  
 <span data-ttu-id="31b2e-385">より正確には、単精度浮動小数点形式は、符号、23ビットの仮数または有効桁、および8ビットの指数で構成されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-385">More precisely, the single-precision floating-point format consists of a sign, a 23-bit mantissa or significand, and an 8-bit exponent.</span></span> <span data-ttu-id="31b2e-386">次の例に示すように、0の指数は-126、仮数は0です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-386">As the following example shows, zero has an exponent of -126 and a mantissa of 0.</span></span> <span data-ttu-id="31b2e-387"><xref:System.Single.Epsilon> の指数は-126、仮数は1です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-387"><xref:System.Single.Epsilon> has an exponent of -126 and a mantissa of 1.</span></span> <span data-ttu-id="31b2e-388">つまり、<xref:System.Single.Epsilon?displayProperty=nameWithType> は、0より大きく、最小値 <xref:System.Single> 値、および指数が-126 の <xref:System.Single> に対して可能な最小値を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-388">This means that <xref:System.Single.Epsilon?displayProperty=nameWithType> is the smallest positive <xref:System.Single> value that is greater than zero and represents the smallest possible value and the smallest possible increment for a <xref:System.Single> whose exponent is -126.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/epsilon1.cs#6)]
 [!code-vb[System.Single.Epsilon#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/epsilon1.vb#6)]  
  
 <span data-ttu-id="31b2e-389">ただし、<xref:System.Single.Epsilon> プロパティは、<xref:System.Single> 型の有効桁数の一般的な尺度ではありません。値が0の <xref:System.Single> インスタンスにのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-389">However, the <xref:System.Single.Epsilon> property is not a general measure of precision of the <xref:System.Single> type; it applies only to <xref:System.Single> instances that have a value of zero.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31b2e-390"><xref:System.Single.Epsilon> プロパティの値は、浮動小数点演算における丸め処理による相対誤差の上限を表すコンピューターイプシロンと等価ではありません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-390">The value of the <xref:System.Single.Epsilon> property is not equivalent to machine epsilon, which represents the upper bound of the relative error due to rounding in floating-point arithmetic.</span></span>  
  
 <span data-ttu-id="31b2e-391">この定数の値は、1.4 e-45 です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-391">The value of this constant is 1.4e-45.</span></span>  
  
 <span data-ttu-id="31b2e-392">意味が低い2つの浮動小数点数は、少なくとも有効桁数が異なるため、等しいと比較できない場合があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-392">Two apparently equivalent floating-point numbers might not compare equal because of differences in their least significant digits.</span></span> <span data-ttu-id="31b2e-393">たとえば、 C#式の `(float)1/3 == (float)0.33333`は、左辺の除算演算には最大有効桁数があり、右側の定数は指定された桁数だけであるため、等しいかどうかを比較しません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-393">For example, the C# expression, `(float)1/3 == (float)0.33333`, does not compare equal because the division operation on the left side has maximum precision while the constant on the right side is precise only to the specified digits.</span></span> <span data-ttu-id="31b2e-394">2つの浮動小数点数を等しいと見なすことができるかどうかを決定するカスタムアルゴリズムを作成する場合は、<xref:System.Single.Epsilon> 定数よりも大きい値を使用して、考慮する2つの値の差の許容される絶対余白を設定する必要があります。つの.</span><span class="sxs-lookup"><span data-stu-id="31b2e-394">If you create a custom algorithm that determines whether two floating-point numbers can be considered equal, you must use a value that is greater than the <xref:System.Single.Epsilon> constant to establish the acceptable absolute margin of difference for the two values to be considered equal.</span></span> <span data-ttu-id="31b2e-395">(通常、この余白の差は <xref:System.Single.Epsilon>よりも多くの回数になります)。</span><span class="sxs-lookup"><span data-stu-id="31b2e-395">(Typically, that margin of difference is many times greater than <xref:System.Single.Epsilon>.)</span></span>  
  
## <a name="platform-notes"></a><span data-ttu-id="31b2e-396">プラットフォームに関する注意事項</span><span class="sxs-lookup"><span data-stu-id="31b2e-396">Platform Notes</span></span>  
 <span data-ttu-id="31b2e-397">ARM システムでは、<xref:System.Single.Epsilon> 定数の値が小さすぎて検出できないため、0になります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-397">On ARM systems, the value of the <xref:System.Single.Epsilon> constant is too small to be detected, so it equates to zero.</span></span> <span data-ttu-id="31b2e-398">代わりに、1.175494351 E-38 と等しい別のイプシロン値を定義できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-398">You can define an alternative epsilon value that equals 1.175494351E-38 instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31b2e-399"><see cref="T:System.Single" /> の 2 つのインスタンスが同じ値を表しているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-399">Returns a value indicating whether two instances of <see cref="T:System.Single" /> represent the same value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="single.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="31b2e-400">このインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-400">An object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="31b2e-401">このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-401">Returns a value indicating whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="31b2e-402"><paramref name="obj" /> が <see cref="T:System.Single" /> のインスタンスで、このインスタンスの値に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-402"><see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Single" /> and equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-403">2つの値の有効桁数が異なるため、2つの意味のある値は等しくない可能性があるため、<xref:System.Single.Equals%2A> メソッドは注意して使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-403">The <xref:System.Single.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values.</span></span> <span data-ttu-id="31b2e-404">次の例では、<xref:System.Single> 値3333と、1を3で除算して返された <xref:System.Single> が等しくないことを報告しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-404">The following example reports that the <xref:System.Single> value .3333 and the <xref:System.Single> returned by dividing 1 by 3 are unequal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#3)]
 [!code-vb[System.Single.Epsilon#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#3)]  
  
 <span data-ttu-id="31b2e-405">1つの推奨される手法は、等しいかどうかを比較するのではなく、2つの値の差に許容される余白 (1 つの値の0.01% など) を定義することです。</span><span class="sxs-lookup"><span data-stu-id="31b2e-405">Rather than comparing for equality, one recommended technique involves defining an acceptable margin of difference between two values (such as .01% of one of the values).</span></span> <span data-ttu-id="31b2e-406">2つの値の差の絶対値がその余白以下の場合は、精度の違いによって違いが生じる可能性が高いため、値が等しい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-406">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to differences in precision and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="31b2e-407">次の例では、この手法を使用して33333と1/3 を比較しています。これは、前のコード例の2つの <xref:System.Single> 値が等しくないことを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-407">The following example uses this technique to compare .33333 and 1/3, the two <xref:System.Single> values that the previous code example found to be unequal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#4)]
 [!code-vb[System.Single.Epsilon#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#4)]  
  
 <span data-ttu-id="31b2e-408">この場合、値は等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-408">In this case, the values are equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31b2e-409"><xref:System.Single.Epsilon> は、範囲がゼロ付近の正の値の最小式を定義するため、差の余白は <xref:System.Single.Epsilon>よりも大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-409">Because <xref:System.Single.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference must be greater than <xref:System.Single.Epsilon>.</span></span> <span data-ttu-id="31b2e-410">通常、<xref:System.Single.Epsilon>よりも多くの回数になります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-410">Typically, it is many times greater than <xref:System.Single.Epsilon>.</span></span>  
  
 <span data-ttu-id="31b2e-411">ドキュメント化された有効桁数を超える浮動小数点数の有効桁数は、.NET Framework の実装とバージョンに固有です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-411">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="31b2e-412">その結果、数値の内部表現の有効桁数が変更される可能性があるため、2つの特定の数値の比較が .NET Framework のバージョン間で変わる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-412">Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-413">次のコード例は、<xref:System.Single.Equals%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-413">The following code example demonstrates the <xref:System.Single.Equals%2A> method.</span></span>  
  
 [!code-cpp[System.Single#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#17)]
 [!code-csharp[System.Single#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#17)]
 [!code-vb[System.Single#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#17)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="31b2e-414">コンパイラのオーバーロードの解決では、2つの <see cref="M:System.Single.Equals(System.Object)" /> メソッドオーバーロードの動作の明らかな違いが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-414">Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Single.Equals(System.Object)" /> method overloads.</span></span> <span data-ttu-id="31b2e-415"><paramref name="obj" /> 引数と <see cref="T:System.Single" /> の間の暗黙的な変換が定義されていて、引数が <see cref="T:System.Object" />として型指定されていない場合、コンパイラは暗黙的な変換を実行して <see cref="M:System.Single.Equals(System.Single)" /> メソッドを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-415">If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.Single" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers may perform an implicit conversion and call the <see cref="M:System.Single.Equals(System.Single)" /> method.</span></span> <span data-ttu-id="31b2e-416">それ以外の場合は、<see cref="M:System.Single.Equals(System.Object)" /> メソッドを呼び出します。このメソッドは、<paramref name="obj" /> 引数が <see cref="T:System.Single" /> 値でない場合は常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-416">Otherwise, they call the <see cref="M:System.Single.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.Single" /> value.</span></span> <span data-ttu-id="31b2e-417">次の例は、2つのメソッドオーバーロード間の動作の違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-417">The following example illustrates the difference in behavior between the two method overloads.</span></span> <span data-ttu-id="31b2e-418">Visual Basic の <see cref="T:System.Double" /> を除くすべてのプリミティブ数値型の場合、およびの <see cref="T:System.Decimal" /> と <see cref="T:System.Double" /> を除きC#、最初の比較では、コンパイラが自動的に拡大変換を実行してを呼び出すため、<see langword="true" /> が返されます。メソッド。一方、2番目の比較では、コンパイラが <see cref="M:System.Single.Equals(System.Object)" /> メソッドを呼び出すため <see langword="false" /> が返されます。<see cref="M:System.Single.Equals(System.Single)" /></span><span class="sxs-lookup"><span data-stu-id="31b2e-418">In the case of all primitive numeric types except for <see cref="T:System.Double" /> in Visual Basic and except for <see cref="T:System.Decimal" /> and <see cref="T:System.Double" /> in C#, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Single.Equals(System.Single)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Single.Equals(System.Object)" /> method.</span></span>  
  
<span data-ttu-id="31b2e-419">[!code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)] [!code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="31b2e-419">[!code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)] [!code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</span></span></para></block>
        <altmember cref="M:System.Single.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (float obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(float32 obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Equals(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(float obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : single -&gt; bool" Usage="single.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Single" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="31b2e-420">このインスタンスと比較するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-420">An object to compare with this instance.</span></span></param>
        <summary><span data-ttu-id="31b2e-421">このインスタンスと指定した <see cref="T:System.Single" /> オブジェクトが同じ値を表しているかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-421">Returns a value indicating whether this instance and a specified <see cref="T:System.Single" /> object represent the same value.</span></span></summary>
        <returns><span data-ttu-id="31b2e-422"><see langword="true" /> がこのインスタンスと等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-422"><see langword="true" /> if <paramref name="obj" /> is equal to this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-423">このメソッドは <xref:System.IEquatable%601?displayProperty=nameWithType> インターフェイスを実装し、`obj` パラメーターをオブジェクトに変換する必要がないため、<xref:System.Single.Equals%2A> よりもわずかにパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-423">This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.Single.Equals%2A> because it does not have to convert the `obj` parameter to an object.</span></span>  
  
## <a name="widening-conversions"></a><span data-ttu-id="31b2e-424">拡大変換</span><span class="sxs-lookup"><span data-stu-id="31b2e-424">Widening Conversions</span></span>  
 <span data-ttu-id="31b2e-425">プログラミング言語によっては、パラメーターの型がインスタンスの型よりも少ない (幅が狭い) <xref:System.Single.Equals%2A> メソッドをコーディングできる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-425">Depending on your programming language, it might be possible to code an <xref:System.Single.Equals%2A> method where the parameter type has fewer bits (is narrower) than the instance type.</span></span> <span data-ttu-id="31b2e-426">これが可能なのは、一部のプログラミング言語では、インスタンスと同数のビットを持つ型として、パラメーターを表す暗黙的な拡大変換が実行されるためです。</span><span class="sxs-lookup"><span data-stu-id="31b2e-426">This is possible because some programming languages perform an implicit widening conversion that represents the parameter as a type with as many bits as the instance.</span></span>  
  
 <span data-ttu-id="31b2e-427">たとえば、インスタンスの型が <xref:System.Single> で、パラメーターの型が <xref:System.Int32>であるとします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-427">For example, suppose the instance type is <xref:System.Single> and the parameter type is <xref:System.Int32>.</span></span> <span data-ttu-id="31b2e-428">Microsoft C#コンパイラは、パラメーターの値を <xref:System.Single> オブジェクトとして表す命令を生成し、そのインスタンスの値とパラメーターの拡張された表現を比較する <xref:System.Single.Equals%28System.Single%29?displayProperty=nameWithType> メソッドを生成します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-428">The Microsoft C# compiler generates instructions to represent the value of the parameter as a <xref:System.Single> object, and then generates a <xref:System.Single.Equals%28System.Single%29?displayProperty=nameWithType> method that compares the values of the instance and the widened representation of the parameter.</span></span>  
  
 <span data-ttu-id="31b2e-429">プログラミング言語のドキュメントを参照して、コンパイラが数値型の暗黙的な拡大変換を実行するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-429">Consult your programming language's documentation to determine if its compiler performs implicit widening conversions of numeric types.</span></span> <span data-ttu-id="31b2e-430">詳細については、「[型変換の表](~/docs/standard/base-types/conversion-tables.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-430">For more information, see the [Type Conversion Tables](~/docs/standard/base-types/conversion-tables.md) topic.</span></span>  
  
## <a name="precision-in-comparisons"></a><span data-ttu-id="31b2e-431">比較における精度</span><span class="sxs-lookup"><span data-stu-id="31b2e-431">Precision in Comparisons</span></span>  
 <span data-ttu-id="31b2e-432">2つの値の有効桁数が異なるため、2つの意味のある値は等しくない可能性があるため、<xref:System.Single.Equals%2A> メソッドは注意して使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-432">The <xref:System.Single.Equals%2A> method should be used with caution, because two apparently equivalent values can be unequal because of the differing precision of the two values.</span></span> <span data-ttu-id="31b2e-433">次の例では、<xref:System.Single> 値3333と、1を3で除算して返された <xref:System.Single> が等しくないことを報告しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-433">The following example reports that the <xref:System.Single> value .3333 and the <xref:System.Single> returned by dividing 1 by 3 are unequal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#1)]
 [!code-vb[System.Single.Epsilon#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#1)]  
  
 <span data-ttu-id="31b2e-434">等しいかどうかの比較に関連する問題を回避する比較手法の1つは、2つの値の差に許容される余白を定義することです (1 つの値の0.01% など)。</span><span class="sxs-lookup"><span data-stu-id="31b2e-434">One comparison technique that avoids the problems associated with comparing for equality involves defining an acceptable margin of difference between two values (such as .01% of one of the values).</span></span> <span data-ttu-id="31b2e-435">2つの値の差の絶対値がその余白以下である場合、相違点は精度の差の結果である可能性が高いため、値が等しい可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-435">If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be an outcome of differences in precision and, therefore, the values are likely to be equal.</span></span> <span data-ttu-id="31b2e-436">次の例では、この手法を使用して33333と1/3 を比較しています。これは、前のコード例では等しくないと判明した2つの <xref:System.Single> 値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-436">The following example uses this technique to compare .33333 and 1/3, which are the two <xref:System.Single> values that the previous code example found to be unequal.</span></span>  
  
 [!code-csharp[System.Single.Epsilon#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Epsilon/cs/SingleEquals_25051.cs#2)]
 [!code-vb[System.Single.Epsilon#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Epsilon/vb/SingleEquals_25051.vb#2)]  
  
 <span data-ttu-id="31b2e-437">この場合、値は等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-437">In this case, the values are equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31b2e-438"><xref:System.Single.Epsilon> は、範囲がゼロ付近の正の値の最小式を定義するため、差の余白は <xref:System.Single.Epsilon>よりも大きくする必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-438">Because <xref:System.Single.Epsilon> defines the minimum expression of a positive value whose range is near zero, the margin of difference must be greater than <xref:System.Single.Epsilon>.</span></span> <span data-ttu-id="31b2e-439">通常、<xref:System.Single.Epsilon>よりも多くの回数になります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-439">Typically, it is many times greater than <xref:System.Single.Epsilon>.</span></span> <span data-ttu-id="31b2e-440">このため、<xref:System.Double> 値が等しいかどうかを比較する場合は、<xref:System.Double.Epsilon> を使用しないことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-440">Because of this, we recommend that you do not use <xref:System.Double.Epsilon> when comparing <xref:System.Double> values for equality.</span></span>  
  
 <span data-ttu-id="31b2e-441">等しいかどうかの比較に関連する問題を回避する2番目の手法では、2つの浮動小数点数の差を絶対値で比較します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-441">A second technique that avoids the problems associated with comparing for equality involves comparing the difference between two floating-point numbers with some absolute value.</span></span> <span data-ttu-id="31b2e-442">差分値がその絶対値以下の場合、数値は等しいと見なされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-442">If the difference is less than or equal to that absolute value, the numbers are equal.</span></span> <span data-ttu-id="31b2e-443">値が大きい場合、数値は等しくありません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-443">If it is greater, the numbers are not equal.</span></span> <span data-ttu-id="31b2e-444">これを行う1つの方法として、絶対値を任意に選択する方法があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-444">One way to do this is to arbitrarily select an absolute value.</span></span> <span data-ttu-id="31b2e-445">ただし、これは問題になります。これは、許容できる差の余白が <xref:System.Single> 値の大きさによって異なるためです。</span><span class="sxs-lookup"><span data-stu-id="31b2e-445">However, this is problematic, because an acceptable margin of difference depends on the magnitude of the <xref:System.Single> values.</span></span> <span data-ttu-id="31b2e-446">2番目の方法では、浮動小数点形式のデザイン機能を活用します。2つの浮動小数点値の整数表現に含まれる仮数部分の差は、2つの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-446">A second way takes advantage of a design feature of the floating-point format: The difference between the mantissa components in the integer representations of two floating-point values indicates the number of possible floating-point values that separates the two values.</span></span> <span data-ttu-id="31b2e-447">たとえば、0.0 と <xref:System.Single.Epsilon> の差は1です。これは、値がゼロである <xref:System.Single> を操作するときに、<xref:System.Single.Epsilon> が最も小さい表現可能な値であるためです。</span><span class="sxs-lookup"><span data-stu-id="31b2e-447">For example, the difference between 0.0 and <xref:System.Single.Epsilon> is 1, because <xref:System.Single.Epsilon> is the smallest representable value when working with a <xref:System.Single> whose value is zero.</span></span> <span data-ttu-id="31b2e-448">次の例では、この手法を使用して33333と1/3 を比較しています。これは、前のコード例で <xref:System.Single.Equals%28System.Single%29> メソッドを使用した場合と等しくないことが判明した2つの <xref:System.Double> 値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-448">The following example uses this technique to compare .33333 and 1/3, which are the two <xref:System.Double> values that the previous code example with the <xref:System.Single.Equals%28System.Single%29> method found to be unequal.</span></span> <span data-ttu-id="31b2e-449">この例では、<xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> および <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> メソッドを使用して、単精度浮動小数点値を整数表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-449">Note that the example uses the <xref:System.BitConverter.GetBytes%2A?displayProperty=nameWithType> and <xref:System.BitConverter.ToInt32%2A?displayProperty=nameWithType> methods to convert a single-precision floating-point value to its integer representation.</span></span>  
  
 [!code-csharp[System.Single.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsabs1.cs#1)]
 [!code-vb[System.Single.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsabs1.vb#1)]  
  
 <span data-ttu-id="31b2e-450">ドキュメント化された有効桁数を超える浮動小数点数の有効桁数は、.NET Framework の実装とバージョンに固有です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-450">The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework.</span></span> <span data-ttu-id="31b2e-451">このため、2つの数値を比較すると、.NET Framework のバージョンによって異なる結果が生成される可能性があります。これは、数値の内部表現の有効桁数が変更される可能性があるためです。</span><span class="sxs-lookup"><span data-stu-id="31b2e-451">Consequently, a comparison of two numbers might produce different results depending on the version of the .NET Framework, because the precision of the numbers' internal representation might change.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="31b2e-452">コンパイラのオーバーロードの解決では、2つの <see cref="M:System.Single.Equals(System.Object)" /> メソッドオーバーロードの動作の明らかな違いが考慮されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-452">Compiler overload resolution may account for an apparent difference in the behavior of the two <see cref="M:System.Single.Equals(System.Object)" /> method overloads.</span></span> <span data-ttu-id="31b2e-453"><paramref name="obj" /> 引数と <see cref="T:System.Single" /> の間の暗黙的な変換が定義されていて、引数が <see cref="T:System.Object" />として型指定されていない場合、コンパイラは暗黙的な変換を実行して <see cref="M:System.Single.Equals(System.Single)" /> メソッドを呼び出す可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-453">If an implicit conversion between the <paramref name="obj" /> argument and a <see cref="T:System.Single" /> is defined and the argument is not typed as an <see cref="T:System.Object" />, compilers may perform an implicit conversion and call the <see cref="M:System.Single.Equals(System.Single)" /> method.</span></span> <span data-ttu-id="31b2e-454">それ以外の場合は、<see cref="M:System.Single.Equals(System.Object)" /> メソッドを呼び出します。このメソッドは、<paramref name="obj" /> 引数が <see cref="T:System.Single" /> 値でない場合は常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-454">Otherwise, they call the <see cref="M:System.Single.Equals(System.Object)" /> method, which always returns <see langword="false" /> if its <paramref name="obj" /> argument is not a <see cref="T:System.Single" /> value.</span></span> <span data-ttu-id="31b2e-455">次の例は、2つのメソッドオーバーロード間の動作の違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-455">The following example illustrates the difference in behavior between the two method overloads.</span></span> <span data-ttu-id="31b2e-456">Visual Basic の <see cref="T:System.Double" /> を除くすべてのプリミティブ数値型の場合、およびの <see cref="T:System.Decimal" /> と <see cref="T:System.Double" /> を除きC#、最初の比較では、コンパイラが自動的に拡大変換を実行してを呼び出すため、<see langword="true" /> が返されます。メソッド。一方、2番目の比較では、コンパイラが <see cref="M:System.Single.Equals(System.Object)" /> メソッドを呼び出すため <see langword="false" /> が返されます。<see cref="M:System.Single.Equals(System.Single)" /></span><span class="sxs-lookup"><span data-stu-id="31b2e-456">In the case of all primitive numeric types except for <see cref="T:System.Double" /> in Visual Basic and except for <see cref="T:System.Decimal" /> and <see cref="T:System.Double" /> in C#, the first comparison returns <see langword="true" /> because the compiler automatically performs a widening conversion and calls the <see cref="M:System.Single.Equals(System.Single)" /> method, whereas the second comparison returns <see langword="false" /> because the compiler calls the <see cref="M:System.Single.Equals(System.Object)" /> method.</span></span>  
  
<span data-ttu-id="31b2e-457">[!code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)] [!code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="31b2e-457">[!code-csharp[System.Single.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.equals/cs/equalsoverl.cs#2)] [!code-vb[System.Single.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.equals/vb/equalsoverl.vb#2)]</span></span></para></block>
        <altmember cref="M:System.Single.Equals(System.Object)" />
        <altmember cref="Overload:System.Single.CompareTo" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="single.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31b2e-458">このインスタンスのハッシュ コードを返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-458">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="31b2e-459">32 ビット符号付き整数ハッシュ コード。</span><span class="sxs-lookup"><span data-stu-id="31b2e-459">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="single.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31b2e-460"><see cref="T:System.TypeCode" /> 値型の <see cref="T:System.Single" />を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-460">Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-461">列挙型定数 <see cref="F:System.TypeCode.Single" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-461">The enumerated constant, <see cref="F:System.TypeCode.Single" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.TypeCode" />
      </Docs>
    </Member>
    <Member MemberName="IsFinite">
      <MemberSignature Language="C#" Value="public static bool IsFinite (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFinite(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsFinite(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsFinite (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsFinite(float f);" />
      <MemberSignature Language="F#" Value="static member IsFinite : single -&gt; bool" Usage="System.single.IsFinite f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="f"><span data-ttu-id="31b2e-462">単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-462">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="31b2e-463">指定した値が有限 (ゼロ、非正規、または正規) かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-463">Determines whether the specified value is finite (zero, subnormal or normal).</span></span></summary>
        <returns><span data-ttu-id="31b2e-464">指定した値が有限 (ゼロ、非正規、または正規) の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-464"><see langword="true" /> if the specified value is finite (zero, subnormal or normal); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInfinity">
      <MemberSignature Language="C#" Value="public static bool IsInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsInfinity(float f);" />
      <MemberSignature Language="F#" Value="static member IsInfinity : single -&gt; bool" Usage="System.single.IsInfinity f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f"><span data-ttu-id="31b2e-465">単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-465">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="31b2e-466">指定した数値が負または正の無限大と評価されるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-466">Returns a value indicating whether the specified number evaluates to negative or positive infinity.</span></span></summary>
        <returns><span data-ttu-id="31b2e-467"><paramref name="f" /> が <see cref="F:System.Single.PositiveInfinity" /> または <see cref="F:System.Single.NegativeInfinity" /> と評価される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-467"><see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" /> or <see cref="F:System.Single.NegativeInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-468">浮動小数点演算は、オーバーフロー状態を通知するために <xref:System.Single.PositiveInfinity> または <xref:System.Single.NegativeInfinity> を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-468">Floating-point operations return <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-469">次のコード例は、<xref:System.Single.IsInfinity%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-469">The following code example demonstrates the <xref:System.Single.IsInfinity%2A> method.</span></span>  
  
 [!code-cpp[System.Single#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#11)]
 [!code-csharp[System.Single#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#11)]
 [!code-vb[System.Single#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNaN">
      <MemberSignature Language="C#" Value="public static bool IsNaN (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNaN(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNaN(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNaN (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNaN(float f);" />
      <MemberSignature Language="F#" Value="static member IsNaN : single -&gt; bool" Usage="System.single.IsNaN f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f"><span data-ttu-id="31b2e-470">単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-470">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="31b2e-471">指定した値が非数値 (<see cref="F:System.Single.NaN" />) かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-471">Returns a value that indicates whether the specified value is not a number (<see cref="F:System.Single.NaN" />).</span></span></summary>
        <returns><span data-ttu-id="31b2e-472"><paramref name="f" /> が非数 (<see cref="F:System.Single.NaN" />) と評価される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-472"><see langword="true" /> if <paramref name="f" /> evaluates to not a number (<see cref="F:System.Single.NaN" />); otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-473">浮動小数点演算は、演算の結果が未定義であることを通知するために <xref:System.Single.NaN> を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-473">Floating-point operations return <xref:System.Single.NaN> to signal that result of the operation is undefined.</span></span> <span data-ttu-id="31b2e-474">たとえば、0.0 を0.0 で割ると <xref:System.Single.NaN>になります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-474">For example, dividing 0.0 by 0.0 results in <xref:System.Single.NaN>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="31b2e-475"><xref:System.Single> 値が <xref:System.Single.PositiveInfinity> または <xref:System.Single.NegativeInfinity>の場合、<xref:System.Single.IsNaN%2A> は `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-475"><xref:System.Single.IsNaN%2A> returns `false` if a <xref:System.Single> value is either <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity>.</span></span> <span data-ttu-id="31b2e-476">これらの値をテストするには、<xref:System.Single.IsInfinity%2A>、<xref:System.Single.IsPositiveInfinity%2A>、および <xref:System.Single.IsNegativeInfinity%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-476">To test for these values, use the <xref:System.Single.IsInfinity%2A>, <xref:System.Single.IsPositiveInfinity%2A>, and <xref:System.Single.IsNegativeInfinity%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-477">次のコード例は、<xref:System.Single.IsNaN%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-477">The following code example demonstrates the <xref:System.Single.IsNaN%2A> method.</span></span>  
  
 [!code-cpp[System.Single#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#8)]
 [!code-csharp[System.Single#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#8)]
 [!code-vb[System.Single#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.NaN" />
      </Docs>
    </Member>
    <Member MemberName="IsNegative">
      <MemberSignature Language="C#" Value="public static bool IsNegative (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegative(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNegative(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegative (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegative(float f);" />
      <MemberSignature Language="F#" Value="static member IsNegative : single -&gt; bool" Usage="System.single.IsNegative f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="f"><span data-ttu-id="31b2e-478">単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-478">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="31b2e-479">指定した値が負かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-479">Determines whether the specified value is negative.</span></span></summary>
        <returns><span data-ttu-id="31b2e-480">負の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-480"><see langword="true" /> if negative, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNegativeInfinity">
      <MemberSignature Language="C#" Value="public static bool IsNegativeInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNegativeInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNegativeInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNegativeInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNegativeInfinity(float f);" />
      <MemberSignature Language="F#" Value="static member IsNegativeInfinity : single -&gt; bool" Usage="System.single.IsNegativeInfinity f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f"><span data-ttu-id="31b2e-481">単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-481">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="31b2e-482">指定した数値が負の無限大と評価されるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-482">Returns a value indicating whether the specified number evaluates to negative infinity.</span></span></summary>
        <returns><span data-ttu-id="31b2e-483"><paramref name="f" /> が <see cref="F:System.Single.NegativeInfinity" /> と評価される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-483"><see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.NegativeInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-484">浮動小数点演算は、オーバーフロー状態を通知するために <xref:System.Single.NegativeInfinity> を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-484">Floating-point operations return <xref:System.Single.NegativeInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-485">次のコード例は、<xref:System.Single.IsNegativeInfinity%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-485">The following code example demonstrates the <xref:System.Single.IsNegativeInfinity%2A> method.</span></span>  
  
 [!code-cpp[System.Single#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#13)]
 [!code-csharp[System.Single#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#13)]
 [!code-vb[System.Single#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#13)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsNormal">
      <MemberSignature Language="C#" Value="public static bool IsNormal (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNormal(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsNormal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNormal (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNormal(float f);" />
      <MemberSignature Language="F#" Value="static member IsNormal : single -&gt; bool" Usage="System.single.IsNormal f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="f"><span data-ttu-id="31b2e-486">単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-486">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="31b2e-487">指定した値が正規かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-487">Determines whether the specified value is normal.</span></span></summary>
        <returns><span data-ttu-id="31b2e-488"><paramref name="f" /> が正規の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-488"><see langword="true" /> if <paramref name="f" /> is normal; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPositiveInfinity">
      <MemberSignature Language="C#" Value="public static bool IsPositiveInfinity (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPositiveInfinity(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsPositiveInfinity(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPositiveInfinity (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPositiveInfinity(float f);" />
      <MemberSignature Language="F#" Value="static member IsPositiveInfinity : single -&gt; bool" Usage="System.single.IsPositiveInfinity f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="f"><span data-ttu-id="31b2e-489">単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-489">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="31b2e-490">指定した数値が正の無限大と評価されるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-490">Returns a value indicating whether the specified number evaluates to positive infinity.</span></span></summary>
        <returns><span data-ttu-id="31b2e-491"><paramref name="f" /> が <see cref="F:System.Single.PositiveInfinity" /> と評価される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-491"><see langword="true" /> if <paramref name="f" /> evaluates to <see cref="F:System.Single.PositiveInfinity" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-492">浮動小数点演算は、オーバーフロー状態を通知するために <xref:System.Single.PositiveInfinity> を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-492">Floating-point operations return <xref:System.Single.PositiveInfinity> to signal an overflow condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-493">次のコード例は、<xref:System.Single.IsPositiveInfinity%2A> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-493">The following code example demonstrates the <xref:System.Single.IsPositiveInfinity%2A> method.</span></span>  
  
 [!code-cpp[System.Single#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#12)]
 [!code-csharp[System.Single#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#12)]
 [!code-vb[System.Single#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="IsSubnormal">
      <MemberSignature Language="C#" Value="public static bool IsSubnormal (float f);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSubnormal(float32 f) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.IsSubnormal(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSubnormal (f As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSubnormal(float f);" />
      <MemberSignature Language="F#" Value="static member IsSubnormal : single -&gt; bool" Usage="System.single.IsSubnormal f" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f" Type="System.Single" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="f"><span data-ttu-id="31b2e-494">単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-494">A single-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="31b2e-495">指定した値が非正規かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-495">Determines whether the specified value is subnormal.</span></span></summary>
        <returns><span data-ttu-id="31b2e-496"><paramref name="f" /> が非正規の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-496"><see langword="true" /> if <paramref name="f" /> is subnormal; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const float MaxValue = 3.402823E+38;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MaxValue = float32(3.402823E+38)" />
      <MemberSignature Language="DocId" Value="F:System.Single.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Single  = 3.402823E+38" />
      <MemberSignature Language="C++ CLI" Value="public: float MaxValue = 3.402823E+38;" />
      <MemberSignature Language="F#" Value="val mutable MaxValue : single" Usage="System.single.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>3.402823E+38</MemberValue>
      <Docs>
        <summary><span data-ttu-id="31b2e-497"><see cref="T:System.Single" /> の最大有効値を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-497">Represents the largest possible value of <see cref="T:System.Single" />.</span></span> <span data-ttu-id="31b2e-498">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-498">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-499">この定数の値は、正の 3.40282347 E + 38 です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-499">The value of this constant is positive 3.40282347E+38.</span></span>  
  
 <span data-ttu-id="31b2e-500"><xref:System.Single.MaxValue?displayProperty=nameWithType> を超える演算の結果は <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>ます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-500">The result of an operation that exceeds <xref:System.Single.MaxValue?displayProperty=nameWithType> is <xref:System.Single.PositiveInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="31b2e-501">次の例では、結果が <xref:System.Single.MaxValue?displayProperty=nameWithType>を超えた場合に加算、乗算、および指数演算の結果を <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> ます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-501">In the following example, <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> results from addition, multiplication, and exponentiation operations when the result exceeds <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Single.MaxValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.maxvalue/cs/maxvalueex.cs#1)]
 [!code-vb[System.Single.MaxValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.maxvalue/vb/maxvalueex.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-502">次のコード例は、<xref:System.Single.MaxValue> 定数を示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-502">The following code example demonstrates the <xref:System.Single.MaxValue> constant.</span></span>  
  
 [!code-cpp[System.Single#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#4)]
 [!code-csharp[System.Single#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#4)]
 [!code-vb[System.Single#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const float MinValue = -3.402823E+38;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 MinValue = float32(-3.402823E+38)" />
      <MemberSignature Language="DocId" Value="F:System.Single.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Single  = -3.402823E+38" />
      <MemberSignature Language="C++ CLI" Value="public: float MinValue = -3.402823E+38;" />
      <MemberSignature Language="F#" Value="val mutable MinValue : single" Usage="System.single.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>-3.402823E+38</MemberValue>
      <Docs>
        <summary><span data-ttu-id="31b2e-503"><see cref="T:System.Single" /> の最小有効値を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-503">Represents the smallest possible value of <see cref="T:System.Single" />.</span></span> <span data-ttu-id="31b2e-504">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-504">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-505">この定数の値は、負の 3.402823 e38 です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-505">The value of this constant is negative 3.402823e38.</span></span>  
  
 <span data-ttu-id="31b2e-506"><xref:System.Single.MinValue?displayProperty=nameWithType> よりも小さい演算の結果は <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="31b2e-506">The result of an operation that is less than <xref:System.Single.MinValue?displayProperty=nameWithType> is <xref:System.Single.NegativeInfinity?displayProperty=nameWithType>.</span></span> <span data-ttu-id="31b2e-507">次の例では、結果が <xref:System.Single.MinValue?displayProperty=nameWithType>より小さい場合に、減算および乗算演算の結果を <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> ます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-507">In the following example, <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> results from subtraction and multiplication operations when the result is less than <xref:System.Single.MinValue?displayProperty=nameWithType>.</span></span>  
  
 [!code-csharp[System.Single.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.minvalue/cs/minvalueex.cs#1)]
 [!code-vb[System.Single.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.minvalue/vb/minvalueex.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-508">次のコード例は、<xref:System.Single.MinValue> 定数を示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-508">The following code example demonstrates the <xref:System.Single.MinValue> constant.</span></span>  
  
 [!code-cpp[System.Single#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#5)]
 [!code-csharp[System.Single#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#5)]
 [!code-vb[System.Single#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Single.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public const float NaN = NaN;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 NaN = float32(NaN)" />
      <MemberSignature Language="DocId" Value="F:System.Single.NaN" />
      <MemberSignature Language="VB.NET" Value="Public Const NaN As Single  = NaN" />
      <MemberSignature Language="C++ CLI" Value="public: float NaN = NaN;" />
      <MemberSignature Language="F#" Value="val mutable NaN : single" Usage="System.single.NaN" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>NaN</MemberValue>
      <Docs>
        <summary><span data-ttu-id="31b2e-509">非数 (<see langword="NaN" />) を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-509">Represents not a number (<see langword="NaN" />).</span></span> <span data-ttu-id="31b2e-510">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-510">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-511">メソッドまたは演算子は、演算の結果が未定義の場合に <xref:System.Single.NaN> を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-511">A method or operator returns <xref:System.Single.NaN> when the result of an operation is undefined.</span></span> <span data-ttu-id="31b2e-512">たとえば、次の例に示すように、0を0で除算した結果は <xref:System.Single.NaN>になります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-512">For example, the result of dividing zero by zero is <xref:System.Single.NaN>, as the following example shows.</span></span> <span data-ttu-id="31b2e-513">(ただし、0以外の数値を0で除算すると、除数の符号に応じて <xref:System.Single.PositiveInfinity> または <xref:System.Single.NegativeInfinity>のいずれかが返されます)。</span><span class="sxs-lookup"><span data-stu-id="31b2e-513">(But note that dividing a non-zero number by zero returns either <xref:System.Single.PositiveInfinity> or <xref:System.Single.NegativeInfinity>, depending on the sign of the divisor.)</span></span>  
  
 [!code-csharp[System.Single.NaN#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/nan1.cs#1)]
 [!code-vb[System.Single.NaN#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/nan1.vb#1)]  
  
 <span data-ttu-id="31b2e-514">また、次の例に示すように、<xref:System.Single.NaN> 値を持つメソッド呼び出しまたは <xref:System.Single.NaN> 値に対する操作は <xref:System.Single.NaN>を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-514">In addition, a method call with a <xref:System.Single.NaN> value or an operation on a <xref:System.Single.NaN> value returns <xref:System.Single.NaN>, as the following example shows.</span></span>  
  
 [!code-csharp[System.Single.NaN#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/nan1.cs#2)]
 [!code-vb[System.Single.NaN#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/nan1.vb#2)]  
  
 <span data-ttu-id="31b2e-515">値が数値でないかどうかを判断するには、<xref:System.Single.IsNaN%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-515">Use the <xref:System.Single.IsNaN%2A> method to determine whether a value is not a number.</span></span> <span data-ttu-id="31b2e-516">一般に、<xref:System.Single> 演算子を使用して <xref:System.Single.NaN?displayProperty=nameWithType> を他の <xref:System.Single> 値と比較することはできませんが、比較メソッド (<xref:System.Single.Equals%2A> や <xref:System.Single.CompareTo%2A>など) は使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-516">In general, <xref:System.Single> operators cannot be used to compare <xref:System.Single.NaN?displayProperty=nameWithType> with other <xref:System.Single> values, although comparison methods (such as <xref:System.Single.Equals%2A> and <xref:System.Single.CompareTo%2A>) can.</span></span> <span data-ttu-id="31b2e-517">次の例は、<xref:System.Single> の比較演算子とメソッド間の動作の違いを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-517">The following example illustrates the difference in behavior between <xref:System.Single> comparison operators and methods.</span></span>  
  
 [!code-csharp[System.Single.NaN#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.nan/cs/single.nan4.cs#4)]
 [!code-vb[System.Single.NaN#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.nan/vb/single.nan4.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-518">次の例は、<xref:System.Single.NaN> 定数を示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-518">The following example demonstrates the <xref:System.Single.NaN> constant.</span></span>  
  
 [!code-cpp[System.Single#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#7)]
 [!code-csharp[System.Single#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#7)]
 [!code-vb[System.Single#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsNaN(System.Single)" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinity">
      <MemberSignature Language="C#" Value="public const float NegativeInfinity = -Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 NegativeInfinity = float32(-Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Single.NegativeInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const NegativeInfinity As Single  = -Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: float NegativeInfinity = -Infinity;" />
      <MemberSignature Language="F#" Value="val mutable NegativeInfinity : single" Usage="System.single.NegativeInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>-Infinity</MemberValue>
      <Docs>
        <summary><span data-ttu-id="31b2e-519">負の無限大を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-519">Represents negative infinity.</span></span> <span data-ttu-id="31b2e-520">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-520">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-521">この定数の値は、負の数を0で除算した結果です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-521">The value of this constant is the result of dividing a negative number by zero.</span></span>  
  
 <span data-ttu-id="31b2e-522">この定数は、演算の結果が <xref:System.Single.MinValue>よりも小さい場合に返されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-522">This constant is returned when the result of an operation is less than <xref:System.Single.MinValue>.</span></span>  
  
 <span data-ttu-id="31b2e-523">値が負の無限大と評価されるかどうかを判断するには、<xref:System.Single.IsNegativeInfinity%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-523">Use <xref:System.Single.IsNegativeInfinity%2A> to determine whether a value evaluates to negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-524">次のコード例は、<xref:System.Single.NegativeInfinity> 定数を示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-524">The following code example demonstrates the <xref:System.Single.NegativeInfinity> constant.</span></span>  
  
 [!code-cpp[System.Single#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#9)]
 [!code-csharp[System.Single#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#9)]
 [!code-vb[System.Single#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsNegativeInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="F:System.Single.PositiveInfinity" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_Equality(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : single * single -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Single" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="31b2e-525">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-525">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="31b2e-526">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-526">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="31b2e-527">指定した 2 つの <see cref="T:System.Single" /> 値が等しいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-527">Returns a value that indicates whether two specified <see cref="T:System.Single" /> values are equal.</span></span></summary>
        <returns><span data-ttu-id="31b2e-528"><see langword="true" /> と <paramref name="left" /> が等しい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-528"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-529"><xref:System.Single.op_Equality%2A> メソッドは、<xref:System.Single> 値の等値演算子を定義します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-529">The <xref:System.Single.op_Equality%2A> method defines the equality operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_GreaterThan(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : single * single -&gt; bool" Usage="left &gt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Single" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="31b2e-530">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-530">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="31b2e-531">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-531">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="31b2e-532">指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値より大きいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-532">Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is greater than another specified <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="31b2e-533"><see langword="true" /> が <paramref name="left" /> より大きい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-533"><see langword="true" /> if <paramref name="left" /> is greater than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-534"><xref:System.Single.op_GreaterThan%2A> メソッドは、<xref:System.Single> 値の大なり演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-534">The <xref:System.Single.op_GreaterThan%2A> method defines the operation of the greater-than operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : single * single -&gt; bool" Usage="left &gt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Single" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="31b2e-535">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-535">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="31b2e-536">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-536">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="31b2e-537">指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値以上かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-537">Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is greater than or equal to another specified <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="31b2e-538"><paramref name="left" /> が <paramref name="right" /> 以上の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-538"><see langword="true" /> if <paramref name="left" /> is greater than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-539"><xref:System.Single.op_GreaterThanOrEqual%2A> メソッドは、<xref:System.Single> 値の大なり演算子または等号演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-539">The <xref:System.Single.op_GreaterThanOrEqual%2A> method defines the operation of the greater-than-or-equal operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_Inequality(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(float left, float right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : single * single -&gt; bool" Usage="System.single.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Single" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="31b2e-540">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-540">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="31b2e-541">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-541">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="31b2e-542">指定した 2 つの <see cref="T:System.Single" /> 値が等しくないかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-542">Returns a value that indicates whether two specified <see cref="T:System.Single" /> values are not equal.</span></span></summary>
        <returns><span data-ttu-id="31b2e-543"><paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-543"><see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-544"><xref:System.Single.op_Inequality%2A> メソッドは、<xref:System.Single> 値の非等値演算子を定義します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-544">The <xref:System.Single.op_Inequality%2A> method defines the inequality operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_LessThan(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : single * single -&gt; bool" Usage="left &lt; right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Single" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="31b2e-545">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-545">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="31b2e-546">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-546">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="31b2e-547">指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値より小さいかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-547">Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is less than another specified <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="31b2e-548"><paramref name="left" /> が <paramref name="right" /> より小さい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-548"><see langword="true" /> if <paramref name="left" /> is less than <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-549"><xref:System.Single.op_LessThan%2A> メソッドは、<xref:System.Single> 値の小なり演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-549">The <xref:System.Single.op_LessThan%2A> method defines the operation of the less-than operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (float left, float right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(float32 left, float32 right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (left As Single, right As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(float left, float right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : single * single -&gt; bool" Usage="left &lt;= right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Single" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="right" Type="System.Single" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="31b2e-550">比較する最初の値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-550">The first value to compare.</span></span></param>
        <param name="right"><span data-ttu-id="31b2e-551">比較する 2 番目の値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-551">The second value to compare.</span></span></param>
        <summary><span data-ttu-id="31b2e-552">指定した <see cref="T:System.Single" /> 値が、指定したもう 1 つの <see cref="T:System.Single" /> 値以下かどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-552">Returns a value that indicates whether a specified <see cref="T:System.Single" /> value is less than or equal to another specified <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="31b2e-553"><paramref name="left" /> が <paramref name="right" /> 以下の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-553"><see langword="true" /> if <paramref name="left" /> is less than or equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-554"><xref:System.Single.op_LessThanOrEqual%2A> メソッドは、<xref:System.Single> 値の小なり演算子または等号演算子の演算を定義します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-554">The <xref:System.Single.op_LessThanOrEqual%2A> method defines the operation of the less-than-or-equal operator for <xref:System.Single> values.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31b2e-555">数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-555">Converts the string representation of a number to its single-precision floating-point number equivalent.</span></span></summary>
        <altmember cref="Overload:System.Single.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; single" Usage="System.single.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="31b2e-556">変換する数値を含んだ文字列。</span><span class="sxs-lookup"><span data-stu-id="31b2e-556">A string that contains a number to convert.</span></span></param>
        <summary><span data-ttu-id="31b2e-557">数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-557">Converts the string representation of a number to its single-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="31b2e-558"><paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-558">A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-559">`s` パラメーターには、現在のカルチャの <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、または次の形式の文字列を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-559">The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="31b2e-560">[*ws*][*sign*] [*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][e[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="31b2e-560">[*ws*][*sign*] [*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][e[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="31b2e-561">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-561">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="31b2e-562">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-562">The following table describes each element.</span></span>  
  
|<span data-ttu-id="31b2e-563">要素</span><span class="sxs-lookup"><span data-stu-id="31b2e-563">Element</span></span>|<span data-ttu-id="31b2e-564">説明</span><span class="sxs-lookup"><span data-stu-id="31b2e-564">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="31b2e-565">*ws*</span><span class="sxs-lookup"><span data-stu-id="31b2e-565">*ws*</span></span>|<span data-ttu-id="31b2e-566">一連の空白文字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-566">A series of white space characters.</span></span>|  
|<span data-ttu-id="31b2e-567">*sign*</span><span class="sxs-lookup"><span data-stu-id="31b2e-567">*sign*</span></span>|<span data-ttu-id="31b2e-568">負の記号または正の記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-568">A negative sign symbol or a positive sign symbol.</span></span> <span data-ttu-id="31b2e-569">有効な符号文字は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> および <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> プロパティによって決定されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-569">Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="31b2e-570">先頭の符号のみを使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-570">Only a leading sign can be used.</span></span>|  
|<span data-ttu-id="31b2e-571">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-571">*integral-digits*</span></span>|<span data-ttu-id="31b2e-572">数値の整数部を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-572">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="31b2e-573">整数部の実行は、*桁*区切り記号で分割できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-573">Runs of *integral-digits* can be partitioned by a group-separator symbol.</span></span> <span data-ttu-id="31b2e-574">たとえば、一部のカルチャでは、コンマ (,) は、千のグループを分離します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-574">For example, in some cultures a comma (,) separates groups of thousands.</span></span> <span data-ttu-id="31b2e-575">文字列に*小数部*の要素が含まれている場合、*整数*部の要素は省略できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-575">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="31b2e-576">*、*</span><span class="sxs-lookup"><span data-stu-id="31b2e-576">*,*</span></span>|<span data-ttu-id="31b2e-577">カルチャ固有の桁区切り記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-577">A culture-specific thousands separator symbol.</span></span>|  
|<span data-ttu-id="31b2e-578">*.*</span><span class="sxs-lookup"><span data-stu-id="31b2e-578">*.*</span></span>|<span data-ttu-id="31b2e-579">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-579">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="31b2e-580">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-580">*fractional-digits*</span></span>|<span data-ttu-id="31b2e-581">数値の小数部を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-581">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="31b2e-582">E</span><span class="sxs-lookup"><span data-stu-id="31b2e-582">E</span></span>|<span data-ttu-id="31b2e-583">"E" または "E" 文字。値が指数 (科学的) 表記で表されることを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-583">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="31b2e-584">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-584">*exponential-digits*</span></span>|<span data-ttu-id="31b2e-585">指数を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-585">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="31b2e-586">`s` パラメーターは、<xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> と <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> フラグの組み合わせを使用して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-586">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="31b2e-587">つまり、空白と桁区切り記号は許可されますが、通貨記号は使用できません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-587">This means that white space and thousands separators are allowed but currency symbols are not.</span></span> <span data-ttu-id="31b2e-588">`s`に含まれる要素 (通貨記号、桁区切り記号、空白文字など) を明示的に定義するには、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> メソッドオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-588">To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in `s`, use the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method overload.</span></span>  
  
 <span data-ttu-id="31b2e-589">`s` パラメーターは、現在のシステムカルチャに対して初期化された <xref:System.Globalization.NumberFormatInfo> オブジェクトの書式情報を使用して解析されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-589">The `s` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="31b2e-590">詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-590">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>.</span></span> <span data-ttu-id="31b2e-591">特定のカルチャの書式情報を使用して文字列を解析するには、<xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-591">To parse a string by using the formatting information of a specific culture, use the <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> or <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method.</span></span>  
  
<span data-ttu-id="31b2e-592">通常、<xref:System.Single.ToString%2A> メソッドを呼び出すことによって作成された文字列を <xref:System.Single.Parse%2A> メソッドに渡すと、元の <xref:System.Single> 値が返されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-592">Ordinarily, if you pass the <xref:System.Single.Parse%2A> method a string that is created by calling the <xref:System.Single.ToString%2A> method, the original <xref:System.Single> value is returned.</span></span> <span data-ttu-id="31b2e-593">ただし、精度が低下しているため、値が等しくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-593">However, because of a loss of precision, the values may not be equal.</span></span>  

<span data-ttu-id="31b2e-594">`s` が <xref:System.Single> データ型の範囲外にある場合、メソッドは .NET Framework および .NET Core 2.2 以前のバージョンで <xref:System.OverflowException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-594">If `s` is out of range of the <xref:System.Single> data type, the method throws an <xref:System.OverflowException> on .NET Framework and .NET Core 2.2 and earlier versions.</span></span> <span data-ttu-id="31b2e-595">.NET Core 3.0 以降のバージョンでは、`s` が <xref:System.Single.MinValue?displayProperty=nameWithType> 未満の場合に <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> を返し、`s` が <xref:System.Single.MaxValue?displayProperty=nameWithType>より大きい場合は <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-595">On .NET Core 3.0 and later versions, it returns <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> if `s` is less than <xref:System.Single.MinValue?displayProperty=nameWithType> and <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> if `s` is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="31b2e-596">解析操作中に `s` パラメーターで区切り記号が検出され、該当する通貨または数値の10進数と桁区切り記号が同じ場合、解析操作では区切り記号が桁区切り記号ではなく小数点区切りであると見なされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-596">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="31b2e-597">区切り記号の詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-597">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
## Examples  
 <span data-ttu-id="31b2e-598">次の例では、<xref:System.Single.Parse%28System.String%29> メソッドを使用して、文字列の配列を等価の <xref:System.Single> 値に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-598">The following example uses the <xref:System.Single.Parse%28System.String%29> method to convert an array of strings to equivalent <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Single.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse1.cs#2)]
 [!code-vb[System.Single.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31b2e-599"><paramref name="s" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-599"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="31b2e-600"><paramref name="s" /> は有効な形式で数値を表していません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-600"><paramref name="s" /> does not represent a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="31b2e-601">.NET Framework と .NET Core 2.2 以前のバージョンのみ: <paramref name="s" /> は、<see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-601">.NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Single.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md"><span data-ttu-id="31b2e-602">.NET での数値文字列の解析</span><span class="sxs-lookup"><span data-stu-id="31b2e-602">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, System.Globalization.NumberStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, valuetype System.Globalization.NumberStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, System::Globalization::NumberStyles style);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles -&gt; single" Usage="System.single.Parse (s, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="31b2e-603">変換する数値を含んだ文字列。</span><span class="sxs-lookup"><span data-stu-id="31b2e-603">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="31b2e-604"><paramref name="s" /> で存在する可能性を持つスタイル要素を示す、列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="31b2e-604">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />.</span></span> <span data-ttu-id="31b2e-605">通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-605">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <summary><span data-ttu-id="31b2e-606">指定したスタイルでの数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-606">Converts the string representation of a number in a specified style to its single-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="31b2e-607"><paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-607">A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-608">`style` パラメーターは、解析操作を成功させるために、`s` パラメーターで使用できるスタイル要素 (空白、桁区切り記号、通貨記号など) を定義します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-608">The `style` parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="31b2e-609"><xref:System.Globalization.NumberStyles> 列挙体のビットフラグの組み合わせである必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-609">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="31b2e-610">次の <xref:System.Globalization.NumberStyles> メンバーはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-610">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 <span data-ttu-id="31b2e-611">`s` パラメーターには、現在のカルチャの <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-611">The `s` parameter can contain the current culture's <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>.</span></span> <span data-ttu-id="31b2e-612">`style`の値に応じて、次の形式を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-612">Depending on the value of `style`, it can also take the form:</span></span>  
  
 <span data-ttu-id="31b2e-613">[*ws*][*$*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="31b2e-613">[*ws*][*$*][*sign*][*integral-digits*[*,*]]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="31b2e-614">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-614">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="31b2e-615">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-615">The following table describes each element.</span></span>  
  
 <span data-ttu-id="31b2e-616">*ws*</span><span class="sxs-lookup"><span data-stu-id="31b2e-616">*ws*</span></span>  
 <span data-ttu-id="31b2e-617">一連の空白文字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-617">A series of white-space characters.</span></span> <span data-ttu-id="31b2e-618">`style` に <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> フラグが含まれている場合、`s` の先頭に空白が表示され、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> フラグが含まれている場合、`s` の最後に表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-618">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>  
  
 $  
 <span data-ttu-id="31b2e-619">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-619">A culture-specific currency symbol.</span></span> <span data-ttu-id="31b2e-620">文字列内での位置は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> および <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-620">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="31b2e-621">現在のカルチャの通貨記号は、`style` に <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> フラグが含まれている場合に `s` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-621">The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="31b2e-622">*sign*</span><span class="sxs-lookup"><span data-stu-id="31b2e-622">*sign*</span></span>  
 <span data-ttu-id="31b2e-623">負の符号記号 (-) または正の記号 (+)。</span><span class="sxs-lookup"><span data-stu-id="31b2e-623">A negative sign symbol (-) or a positive sign symbol (+).</span></span> <span data-ttu-id="31b2e-624"><xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> フラグが `style` に含まれている場合、`s` の先頭に符号が表示されます。また、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> フラグが含まれている場合は、`s` の最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-624">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="31b2e-625"><xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> フラグが `style` 含まれている場合は、`s` でかっこを使用して負の値を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-625">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="31b2e-626">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-626">*integral-digits*</span></span>  
 <span data-ttu-id="31b2e-627">数値の整数部を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-627">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="31b2e-628">文字列に*小数部*の要素が含まれている場合、*整数*部の要素は省略できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-628">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>  
  
 <span data-ttu-id="31b2e-629">,</span><span class="sxs-lookup"><span data-stu-id="31b2e-629">,</span></span>  
 <span data-ttu-id="31b2e-630">カルチャ固有のグループ区切り記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-630">A culture-specific group separator.</span></span> <span data-ttu-id="31b2e-631">現在のカルチャの桁区切り記号は、`style` に <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> フラグが含まれている場合に `s` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-631">The current culture's group separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag</span></span>  
  
 <span data-ttu-id="31b2e-632">.</span><span class="sxs-lookup"><span data-stu-id="31b2e-632">.</span></span>  
 <span data-ttu-id="31b2e-633">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-633">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="31b2e-634">現在のカルチャの小数点の記号は、`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合に `s` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-634">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="31b2e-635">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-635">*fractional-digits*</span></span>  
 <span data-ttu-id="31b2e-636">数値の小数部を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-636">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="31b2e-637">`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合、`s` に小数点以下の桁数が表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-637">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="31b2e-638">E</span><span class="sxs-lookup"><span data-stu-id="31b2e-638">E</span></span>  
 <span data-ttu-id="31b2e-639">"E" または "E" 文字。値が指数 (科学的) 表記で表されることを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-639">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="31b2e-640">`value` パラメーターは、`style` に <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> フラグが含まれている場合に指数表記で数値を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-640">The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>  
  
 <span data-ttu-id="31b2e-641">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-641">*exponential-digits*</span></span>  
 <span data-ttu-id="31b2e-642">指数を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-642">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="31b2e-643">`s` 内の終端の NUL (U + 0000) 文字は、`style` 引数の値に関係なく、解析操作によって無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-643">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="31b2e-644">数字のみを含む文字列 (<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> スタイルに対応) は、<xref:System.Single> 型の範囲内にある場合は、常に正常に解析されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-644">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully if it is in the range of the <xref:System.Single> type.</span></span> <span data-ttu-id="31b2e-645">残りの <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> メンバーは、入力文字列に存在する必要があるが必須ではない要素を制御します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-645">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="31b2e-646">次の表は、個々の <xref:System.Globalization.NumberStyles> フラグが `s`に存在する可能性のある要素にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-646">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="31b2e-647">NumberStyles 値</span><span class="sxs-lookup"><span data-stu-id="31b2e-647">NumberStyles value</span></span>|<span data-ttu-id="31b2e-648">数字に加えて `s` で許可される要素</span><span class="sxs-lookup"><span data-stu-id="31b2e-648">Elements permitted in `s` in addition to digits</span></span>|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="31b2e-649">*整数の数字*の要素のみ。</span><span class="sxs-lookup"><span data-stu-id="31b2e-649">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="31b2e-650">小数点 (*.*) と*小数部の桁*の要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-650">The decimal point (*.*) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="31b2e-651">指数表記を示す "e" または "E" 文字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-651">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="31b2e-652">このフラグ*では、\*\*数字*の形式で値がサポートされます。そのような要素を含む文字列を、正または負の記号や小数点の記号として正常に解析するには、追加のフラグが必要です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-652">This flag by itself supports values in the form *digits*E*digits*; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="31b2e-653">`s`の先頭にある*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-653">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="31b2e-654">`s`の末尾の*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-654">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="31b2e-655">`s`の先頭にある*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-655">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="31b2e-656">`s`の末尾の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-656">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="31b2e-657">数値を囲むかっこ形式の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-657">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="31b2e-658">桁区切り記号 (,) 要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-658">The thousands separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="31b2e-659">Currency ($) 要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-659">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="31b2e-660">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-660">All elements.</span></span> <span data-ttu-id="31b2e-661">ただし、`s` は、16進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-661">However, `s` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="31b2e-662">`s`の先頭または末尾にある*ws*要素、`s`の先頭に*符号*、小数点 (.) 記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-662">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="31b2e-663">`s` パラメーターでは、指数表記を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-663">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="31b2e-664">`ws`、`sign`、桁区切り記号 (、)、および小数点 (.) の要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-664">The `ws`, `sign`, thousands separator (,) and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="31b2e-665">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-665">All elements.</span></span> <span data-ttu-id="31b2e-666">ただし、`s` は16進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-666">However, `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="31b2e-667">`s` の例としては、"100"、"-123456789"、"123.45 e + 6"、"+ 500"、"5e2"、"3.1416"、"600."、"-123"、"-無限大" などがあります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-667">Some examples of `s` are "100", "-123,456,789", "123.45e+6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="31b2e-668">`s` パラメーターは、現在のシステムカルチャに対して初期化された <xref:System.Globalization.NumberFormatInfo> オブジェクトの書式情報を使用して解析されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-668">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="31b2e-669">解析操作に使用する書式設定情報を持つカルチャを指定するには、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> オーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-669">To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload.</span></span>  
  
 <span data-ttu-id="31b2e-670">通常、<xref:System.Single.ToString%2A> メソッドを呼び出すことによって作成された文字列を <xref:System.Single.Parse%2A> メソッドに渡すと、元の <xref:System.Single> 値が返されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-670">Ordinarily, if you pass the <xref:System.Single.Parse%2A> method a string that is created by calling the <xref:System.Single.ToString%2A> method, the original <xref:System.Single> value is returned.</span></span> <span data-ttu-id="31b2e-671">ただし、精度が低下しているため、値が等しくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-671">However, because of a loss of precision, the values may not be equal.</span></span>  

<span data-ttu-id="31b2e-672">`s` が <xref:System.Single> データ型の範囲外にある場合、メソッドは .NET Framework および .NET Core 2.2 以前のバージョンで <xref:System.OverflowException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-672">If `s` is out of range of the <xref:System.Single> data type, the method throws an <xref:System.OverflowException> on .NET Framework and .NET Core 2.2 and earlier versions.</span></span> <span data-ttu-id="31b2e-673">.NET Core 3.0 以降のバージョンでは、`s` が <xref:System.Single.MinValue?displayProperty=nameWithType> 未満の場合に <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> を返し、`s` が <xref:System.Single.MaxValue?displayProperty=nameWithType>より大きい場合は <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-673">On .NET Core 3.0 and later versions, it returns <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> if `s` is less than <xref:System.Single.MinValue?displayProperty=nameWithType> and <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> if `s` is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="31b2e-674">解析操作中に `s` パラメーターで区切り記号が検出され、該当する通貨または数値の10進数と桁区切り記号が同じ場合、解析操作では区切り記号が桁区切り記号ではなく小数点区切りであると見なされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-674">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="31b2e-675">区切り記号の詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-675">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  

## Examples  
 <span data-ttu-id="31b2e-676">次の例では、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> メソッドを使用して、<xref:System.Single> 値の文字列形式を解析します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-676">The following example uses the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method to parse the string representations of <xref:System.Single> values.</span></span> <span data-ttu-id="31b2e-677">この例では、en-us カルチャの書式設定情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-677">The example uses formatting information for the en-US culture.</span></span>  
  
 [!code-csharp[System.Single.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse2.cs#3)]
 [!code-vb[System.Single.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31b2e-678"><paramref name="s" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-678"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="31b2e-679"><paramref name="s" /> は有効な形式の数値ではありません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-679"><paramref name="s" /> is not a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="31b2e-680">.NET Framework および .NET Core 2.2 以前のバージョンのみ: <paramref name="s" /> は <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-680">.NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31b2e-681"><paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-681"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="31b2e-682">- または -</span><span class="sxs-lookup"><span data-stu-id="31b2e-682">-or-</span></span> 
 <span data-ttu-id="31b2e-683"><paramref name="style" /> には値 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> が含まれています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-683"><paramref name="style" /> includes the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
        <altmember cref="M:System.Single.ToString" />
        <altmember cref="Overload:System.Single.TryParse" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md"><span data-ttu-id="31b2e-684">.NET での数値文字列の解析</span><span class="sxs-lookup"><span data-stu-id="31b2e-684">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; single" Usage="System.single.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="31b2e-685">変換する数値を含んだ文字列。</span><span class="sxs-lookup"><span data-stu-id="31b2e-685">A string that contains a number to convert.</span></span></param>
        <param name="provider"><span data-ttu-id="31b2e-686"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-686">An object that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="31b2e-687">指定したカルチャに固有の書式による数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-687">Converts the string representation of a number in a specified culture-specific format to its single-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="31b2e-688"><paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-688">A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-689">このオーバーロードは通常、さまざまな方法で書式設定できるテキストを <xref:System.Single> 値に変換するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-689">This overload is typically used to convert text that can be formatted in a variety of ways to a <xref:System.Single> value.</span></span> <span data-ttu-id="31b2e-690">たとえば、ユーザーが入力したテキストを HTML テキストボックスに数値に変換するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-690">For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.</span></span>  
  
 <span data-ttu-id="31b2e-691">`s` パラメーターは、<xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> と <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> フラグの組み合わせを使用して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-691">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="31b2e-692">`s` パラメーターには、`provider`によって指定されたカルチャの <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>、<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>、または <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> を含めることができます。また、次の形式の文字列を含めることもできます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-692">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> for the culture specified by `provider`, or it can contain a string of the form:</span></span>  
  
 <span data-ttu-id="31b2e-693">[*ws*][*sign*]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="31b2e-693">[*ws*][*sign*]*integral-digits*[*.*[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="31b2e-694">省略可能な要素は、角かっこ ([および]) で囲まれています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-694">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="31b2e-695">"Digits" という用語を含む要素は、0から9までの一連の数字で構成されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-695">Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span>  
  
|<span data-ttu-id="31b2e-696">要素</span><span class="sxs-lookup"><span data-stu-id="31b2e-696">Element</span></span>|<span data-ttu-id="31b2e-697">説明</span><span class="sxs-lookup"><span data-stu-id="31b2e-697">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="31b2e-698">*ws*</span><span class="sxs-lookup"><span data-stu-id="31b2e-698">*ws*</span></span>|<span data-ttu-id="31b2e-699">一連の空白文字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-699">A series of white-space characters.</span></span>|  
|<span data-ttu-id="31b2e-700">*sign*</span><span class="sxs-lookup"><span data-stu-id="31b2e-700">*sign*</span></span>|<span data-ttu-id="31b2e-701">負の符号記号 (-) または正の記号 (+)。</span><span class="sxs-lookup"><span data-stu-id="31b2e-701">A negative sign symbol (-) or a positive sign symbol (+).</span></span>|  
|<span data-ttu-id="31b2e-702">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-702">*integral-digits*</span></span>|<span data-ttu-id="31b2e-703">数値の整数部を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-703">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="31b2e-704">整数部の実行は、*桁*区切り記号で分割できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-704">Runs of *integral-digits* can be partitioned by a group-separator symbol.</span></span> <span data-ttu-id="31b2e-705">たとえば、一部のカルチャでは、コンマ (,) は、千のグループを分離します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-705">For example, in some cultures a comma (,) separates groups of thousands.</span></span> <span data-ttu-id="31b2e-706">文字列に*小数部*の要素が含まれている場合、*整数*部の要素は省略できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-706">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="31b2e-707">.</span><span class="sxs-lookup"><span data-stu-id="31b2e-707">.</span></span>|<span data-ttu-id="31b2e-708">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-708">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="31b2e-709">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-709">*fractional-digits*</span></span>|<span data-ttu-id="31b2e-710">数値の小数部を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-710">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="31b2e-711">E</span><span class="sxs-lookup"><span data-stu-id="31b2e-711">E</span></span>|<span data-ttu-id="31b2e-712">"E" または "E" 文字。値が指数 (科学的) 表記で表されることを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-712">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="31b2e-713">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-713">*exponential-digits*</span></span>|<span data-ttu-id="31b2e-714">指数を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-714">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="31b2e-715">数値書式の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-715">For more information about numeric formats, see the [Formatting Types](~/docs/standard/base-types/formatting-types.md) topic.</span></span>  
  
 <span data-ttu-id="31b2e-716">`provider` パラメーターは、<xref:System.IFormatProvider.GetFormat%2A> メソッドがカルチャ固有の書式情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返す <xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-716">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information.</span></span> <span data-ttu-id="31b2e-717"><xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> メソッドが呼び出されると、`provider` パラメーターの <xref:System.IFormatProvider.GetFormat%2A> メソッドを呼び出し、<xref:System.Globalization.NumberFormatInfo> 型を表す <xref:System.Type> オブジェクトに渡します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-717">When the <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="31b2e-718"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、`s` パラメーターの形式に関する情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-718">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `s` parameter.</span></span> <span data-ttu-id="31b2e-719">`provider` パラメーターを使用して、解析操作にカスタム書式情報を提供するには、次の3つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-719">There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:</span></span>  
  
-   <span data-ttu-id="31b2e-720">書式設定情報を提供するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-720">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="31b2e-721"><xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドは、そのカルチャの数値書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-721">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="31b2e-722">数値の書式設定情報を提供する実際の <xref:System.Globalization.NumberFormatInfo> オブジェクトを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-722">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="31b2e-723">(<xref:System.Globalization.NumberFormatInfo.GetFormat%2A> の実装では、それ自体が返されます)。</span><span class="sxs-lookup"><span data-stu-id="31b2e-723">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="31b2e-724"><xref:System.IFormatProvider>を実装するカスタムオブジェクトを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-724">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="31b2e-725"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトをインスタンス化して返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-725">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="31b2e-726">`provider` が `null` または <xref:System.Globalization.NumberFormatInfo> を取得できない場合は、現在のシステムカルチャの書式情報が使用されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-726">If `provider` is `null` or a <xref:System.Globalization.NumberFormatInfo> cannot be obtained, the formatting information for the current system culture is used.</span></span>  

<span data-ttu-id="31b2e-727">`s` が <xref:System.Single> データ型の範囲外にある場合、メソッドは .NET Framework および .NET Core 2.2 以前のバージョンで <xref:System.OverflowException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-727">If `s` is out of range of the <xref:System.Single> data type, the method throws an <xref:System.OverflowException> on .NET Framework and .NET Core 2.2 and earlier versions.</span></span> <span data-ttu-id="31b2e-728">.NET Core 3.0 以降のバージョンでは、`s` が <xref:System.Single.MinValue?displayProperty=nameWithType> 未満の場合に <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> を返し、`s` が <xref:System.Single.MaxValue?displayProperty=nameWithType>より大きい場合は <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-728">On .NET Core 3.0 and later versions, it returns <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> if `s` is less than <xref:System.Single.MinValue?displayProperty=nameWithType> and <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> if `s` is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span> 

<span data-ttu-id="31b2e-729">解析操作中に `s` パラメーターで区切り記号が検出され、該当する通貨または数値の10進数と桁区切り記号が同じ場合、解析操作では区切り記号が桁区切り記号ではなく小数点区切りであると見なされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-729">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="31b2e-730">区切り記号の詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-730">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
<span data-ttu-id="31b2e-731">`s` の例としては、"100"、"-123456789"、"123.45 e + 6"、"+ 500"、"5e2"、"3.1416"、"600."、"-123"、"-無限大" などがあります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-731">Some examples of `s` are "100", "-123,456,789", "123.45e+6", "+500", "5e2", "3.1416", "600.", "-.123", and "-Infinity".</span></span>  

## Examples  
 <span data-ttu-id="31b2e-732">次の例は、Web フォームのボタンクリックイベントハンドラーです。</span><span class="sxs-lookup"><span data-stu-id="31b2e-732">The following example is the button click event handler of a Web form.</span></span> <span data-ttu-id="31b2e-733"><xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> プロパティによって返される配列を使用して、ユーザーのロケールを決定します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-733">It uses the array returned by the <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> property to determine the user's locale.</span></span> <span data-ttu-id="31b2e-734">次に、そのロケールに対応する <xref:System.Globalization.CultureInfo> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-734">It then instantiates a <xref:System.Globalization.CultureInfo> object that corresponds to that locale.</span></span> <span data-ttu-id="31b2e-735">その <xref:System.Globalization.CultureInfo> オブジェクトに属する <xref:System.Globalization.NumberFormatInfo> オブジェクトを <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> メソッドに渡して、ユーザーの入力を <xref:System.Single> 値に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-735">The <xref:System.Globalization.NumberFormatInfo> object that belongs to that <xref:System.Globalization.CultureInfo> object is then passed to the <xref:System.Single.Parse%28System.String%2CSystem.IFormatProvider%29> method to convert the user's input to a <xref:System.Single> value.</span></span>  
  
 [!code-csharp[ParseMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR/ParseMethod/cs/Default.aspx.cs#1)]
 [!code-vb[ParseMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ParseMethod/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31b2e-736"><paramref name="s" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-736"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="31b2e-737"><paramref name="s" /> は有効な形式で数値を表していません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-737"><paramref name="s" /> does not represent a number in a valid format.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="31b2e-738">.NET Framework と .NET Core 2.2 以前のバージョンのみ: <paramref name="s" /> は、<see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-738">.NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Single.ToString" />
        <altmember cref="Overload:System.Single.TryParse" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md"><span data-ttu-id="31b2e-739">.NET での数値文字列の解析</span><span class="sxs-lookup"><span data-stu-id="31b2e-739">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional style As NumberStyles = System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer, Optional provider As IFormatProvider = null) As Single" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider -&gt; single" Usage="System.single.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="31b2e-740">変換する数値を含む文字スパン。</span><span class="sxs-lookup"><span data-stu-id="31b2e-740">A character span that contains the number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="31b2e-741"><paramref name="s" /> で使用可能なスタイル要素を示す、列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="31b2e-741">A bitwise combination of enumeration values that indicate the style elements that can be present in <paramref name="s" />.</span></span>  <span data-ttu-id="31b2e-742">通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-742">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <param name="provider"><span data-ttu-id="31b2e-743"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-743">An object that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="31b2e-744">指定したスタイルおよびカルチャに固有の書式による数値の文字列表現を含む文字スパンを、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-744">Converts a character span that contains the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="31b2e-745"><paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-745">A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>  
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="31b2e-746">`s` が <xref:System.Single> データ型の範囲外の場合、メソッドは `s` が <xref:System.Single.MinValue?displayProperty=nameWithType> 未満の場合は <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> を返し、<xref:System.Single.PositiveInfinity?displayProperty=nameWithType> が `s` よりも大きい場合は <xref:System.Single.MaxValue?displayProperty=nameWithType>を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-746">If `s` is out of range of the <xref:System.Single> data type, the method returns <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> if `s` is less than <xref:System.Single.MinValue?displayProperty=nameWithType> and <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> if `s` is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="31b2e-747"><paramref name="s" /> が数値を表していません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-747"><paramref name="s" /> does not represent a numeric value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31b2e-748"><paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-748"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="31b2e-749">- または -</span><span class="sxs-lookup"><span data-stu-id="31b2e-749">-or-</span></span> 
<span data-ttu-id="31b2e-750"><paramref name="style" /> は <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-750"><paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static float Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Parse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, style As NumberStyles, provider As IFormatProvider) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Parse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Globalization.NumberStyles * IFormatProvider -&gt; single" Usage="System.single.Parse (s, style, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="31b2e-751">変換する数値を含んだ文字列。</span><span class="sxs-lookup"><span data-stu-id="31b2e-751">A string that contains a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="31b2e-752"><paramref name="s" /> で存在する可能性を持つスタイル要素を示す、列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="31b2e-752">A bitwise combination of enumeration values that indicates the style elements that can be present in <paramref name="s" />.</span></span> <span data-ttu-id="31b2e-753">通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-753">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <param name="provider"><span data-ttu-id="31b2e-754"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-754">An object that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="31b2e-755">指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-755">Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</span></span></summary>
        <returns><span data-ttu-id="31b2e-756"><paramref name="s" /> で指定した数値または記号に等しい単精度浮動小数点数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-756">A single-precision floating-point number equivalent to the numeric value or symbol specified in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-757">`style` パラメーターは、解析操作を成功させるために、`s` パラメーターで使用できるスタイル要素 (空白、桁区切り記号、通貨記号など) を定義します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-757">The `style` parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="31b2e-758"><xref:System.Globalization.NumberStyles> 列挙体のビットフラグの組み合わせである必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-758">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="31b2e-759">次の <xref:System.Globalization.NumberStyles> メンバーはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-759">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber>  
  
 <span data-ttu-id="31b2e-760">`s` パラメーターには、`provider`によって指定されたカルチャの <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>、<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>、または <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-760">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A?displayProperty=nameWithType>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A?displayProperty=nameWithType>, or <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A?displayProperty=nameWithType> for the culture specified by `provider`.</span></span> <span data-ttu-id="31b2e-761">`style`の値に応じて、次の形式を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-761">Depending on the value of `style`, it can also take the form:</span></span>  
  
 <span data-ttu-id="31b2e-762">[*ws*][*$*][*sign*][*整数値*,]*整数の数字*[. [*小数点以下の桁数*]][E [*sign*]*指数数字*][*ws*]</span><span class="sxs-lookup"><span data-stu-id="31b2e-762">[*ws*] [*$*] [*sign*][*integral-digits*,]*integral-digits*[.[*fractional-digits*]][E[*sign*]*exponential-digits*][*ws*]</span></span>  
  
 <span data-ttu-id="31b2e-763">角かっこ ([および]) で囲まれた要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-763">Elements framed in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="31b2e-764">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-764">The following table describes each element.</span></span>  
  
|<span data-ttu-id="31b2e-765">要素</span><span class="sxs-lookup"><span data-stu-id="31b2e-765">Element</span></span>|<span data-ttu-id="31b2e-766">説明</span><span class="sxs-lookup"><span data-stu-id="31b2e-766">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="31b2e-767">*ws*</span><span class="sxs-lookup"><span data-stu-id="31b2e-767">*ws*</span></span>|<span data-ttu-id="31b2e-768">一連の空白文字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-768">A series of white-space characters.</span></span> <span data-ttu-id="31b2e-769">`style` に <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> フラグが含まれている場合、`s` の先頭に空白が表示され、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> フラグが含まれている場合、`s` の最後に表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-769">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|$|<span data-ttu-id="31b2e-770">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-770">A culture-specific currency symbol.</span></span> <span data-ttu-id="31b2e-771">文字列内での位置は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> および <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-771">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the current culture.</span></span> <span data-ttu-id="31b2e-772">現在のカルチャの通貨記号は、`style` に <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> フラグが含まれている場合に `s` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-772">The current culture's currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="31b2e-773">*sign*</span><span class="sxs-lookup"><span data-stu-id="31b2e-773">*sign*</span></span>|<span data-ttu-id="31b2e-774">負の符号記号 (-) または正の記号 (+)。</span><span class="sxs-lookup"><span data-stu-id="31b2e-774">A negative sign symbol (-) or a positive sign symbol (+).</span></span> <span data-ttu-id="31b2e-775"><xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> フラグが `style` に含まれている場合、`s` の先頭に符号が表示されます。また、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> フラグが含まれている場合は、`s` の最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-775">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="31b2e-776"><xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> フラグが `style` 含まれている場合は、`s` でかっこを使用して負の値を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-776">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="31b2e-777">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-777">*integral-digits*</span></span>|<span data-ttu-id="31b2e-778">数値の整数部を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-778">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="31b2e-779">文字列に*小数部*の要素が含まれている場合、*整数*部の要素は省略できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-779">The *integral-digits* element can be absent if the string contains the *fractional-digits* element.</span></span>|  
|<span data-ttu-id="31b2e-780">,</span><span class="sxs-lookup"><span data-stu-id="31b2e-780">,</span></span>|<span data-ttu-id="31b2e-781">カルチャ固有のグループ区切り記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-781">A culture-specific group separator.</span></span> <span data-ttu-id="31b2e-782">現在のカルチャの桁区切り記号は、`style` に <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> フラグが含まれている場合に `s` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-782">The current culture's group separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag</span></span>|  
|<span data-ttu-id="31b2e-783">.</span><span class="sxs-lookup"><span data-stu-id="31b2e-783">.</span></span>|<span data-ttu-id="31b2e-784">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-784">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="31b2e-785">現在のカルチャの小数点の記号は、`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合に `s` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-785">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="31b2e-786">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-786">*fractional-digits*</span></span>|<span data-ttu-id="31b2e-787">数値の小数部を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-787">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="31b2e-788">`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合、`s` に小数点以下の桁数が表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-788">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="31b2e-789">E</span><span class="sxs-lookup"><span data-stu-id="31b2e-789">E</span></span>|<span data-ttu-id="31b2e-790">"E" または "E" 文字。値が指数 (科学的) 表記で表されることを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-790">The "e" or "E" character, which indicates that the value is represented in exponential (scientific) notation.</span></span> <span data-ttu-id="31b2e-791">`s` パラメーターは、`style` に <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> フラグが含まれている場合に指数表記で数値を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-791">The `s` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="31b2e-792">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-792">*exponential-digits*</span></span>|<span data-ttu-id="31b2e-793">指数を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-793">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="31b2e-794">`s` 内の終端の NUL (U + 0000) 文字は、`style` 引数の値に関係なく、解析操作によって無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-794">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="31b2e-795">数字のみを含む文字列 (<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> スタイルに対応) は、<xref:System.Single> 型の範囲内にある場合は、常に正常に解析されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-795">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully if it is in the range of the <xref:System.Single> type.</span></span> <span data-ttu-id="31b2e-796">残りの <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> メンバーは、入力文字列に存在する必要があるが必須ではない要素を制御します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-796">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be present, but are not required to be present, in the input string.</span></span> <span data-ttu-id="31b2e-797">次の表は、個々の <xref:System.Globalization.NumberStyles> フラグが `s`に存在する可能性のある要素にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-797">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="31b2e-798">NumberStyles 値</span><span class="sxs-lookup"><span data-stu-id="31b2e-798">NumberStyles value</span></span>|<span data-ttu-id="31b2e-799">数字に加えて `s` で許可される要素</span><span class="sxs-lookup"><span data-stu-id="31b2e-799">Elements permitted in `s` in addition to digits</span></span>|  
|------------------------|-----------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="31b2e-800">*整数の数字*の要素のみ。</span><span class="sxs-lookup"><span data-stu-id="31b2e-800">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="31b2e-801">小数点 (*.*) と*小数部の桁*の要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-801">The decimal point (*.*) and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="31b2e-802">指数表記を示す "e" または "E" 文字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-802">The "e" or "E" character, which indicates exponential notation.</span></span> <span data-ttu-id="31b2e-803">このフラグ*では、\*\*数字*の形式で値がサポートされます。そのような要素を含む文字列を、正または負の記号や小数点の記号として正常に解析するには、追加のフラグが必要です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-803">This flag by itself supports values in the form *digits*E*digits*; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="31b2e-804">`s`の先頭にある*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-804">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="31b2e-805">`s`の末尾の*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-805">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="31b2e-806">`s`の先頭にある*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-806">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="31b2e-807">`s`の末尾の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-807">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="31b2e-808">数値を囲むかっこ形式の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-808">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="31b2e-809">桁区切り記号 (,) 要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-809">The thousands separator (,) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="31b2e-810">Currency ($) 要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-810">The currency ($) element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="31b2e-811">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-811">All elements.</span></span> <span data-ttu-id="31b2e-812">ただし、`s` は、16進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-812">However, `s` cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="31b2e-813">`s`の先頭または末尾にある*ws*要素、`s`の先頭に*符号*、小数点 (.) 記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-813">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the decimal point (.) symbol.</span></span> <span data-ttu-id="31b2e-814">`s` パラメーターでは、指数表記を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-814">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="31b2e-815">`ws`、`sign`、桁区切り記号 (、)、および小数点 (.) の要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-815">The `ws`, `sign`, thousands separator (,) and decimal point (.) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="31b2e-816">すべての要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-816">All elements.</span></span> <span data-ttu-id="31b2e-817">ただし、`s` は16進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-817">However, `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="31b2e-818">`provider` パラメーターは、<xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-818">The `provider` parameter is an <xref:System.IFormatProvider> implementation.</span></span> <span data-ttu-id="31b2e-819"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、`value`の書式に関するカルチャ固有の情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-819">Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`.</span></span> <span data-ttu-id="31b2e-820">通常、`provider` は次のいずれかになります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-820">Typically, `provider` can be any one of the following:</span></span>  
  
-   <span data-ttu-id="31b2e-821">数値の書式設定情報を提供するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-821">A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information.</span></span> <span data-ttu-id="31b2e-822"><xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドは、数値の書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-822">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span>  
  
-   <span data-ttu-id="31b2e-823">書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-823">A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span> <span data-ttu-id="31b2e-824">(<xref:System.Globalization.NumberFormatInfo.GetFormat%2A> の実装では、それ自体が返されます)。</span><span class="sxs-lookup"><span data-stu-id="31b2e-824">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="31b2e-825"><xref:System.IFormatProvider> を実装し、<xref:System.Globalization.NumberFormatInfo.GetFormat%2A> メソッドを使用して、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトをインスタンス化して返すカスタムオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-825">A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
<span data-ttu-id="31b2e-826">`provider` が `null`場合は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトが使用されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-826">If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.</span></span>  

<span data-ttu-id="31b2e-827">`s` が <xref:System.Single> データ型の範囲外にある場合、メソッドは .NET Framework および .NET Core 2.2 以前のバージョンで <xref:System.OverflowException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-827">If `s` is out of range of the <xref:System.Single> data type, the method throws an <xref:System.OverflowException> on .NET Framework and .NET Core 2.2 and earlier versions.</span></span> <span data-ttu-id="31b2e-828">.NET Core 3.0 以降のバージョンでは、`s` が <xref:System.Single.MinValue?displayProperty=nameWithType> 未満の場合に <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> を返し、`s` が <xref:System.Single.MaxValue?displayProperty=nameWithType>より大きい場合は <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-828">On .NET Core 3.0 and later versions, it returns <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> if `s` is less than <xref:System.Single.MinValue?displayProperty=nameWithType> and <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> if `s` is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="31b2e-829">解析操作中に `s` パラメーターで区切り記号が検出され、該当する通貨または数値の10進数と桁区切り記号が同じ場合、解析操作では区切り記号が桁区切り記号ではなく小数点区切りであると見なされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-829">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="31b2e-830">区切り記号の詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-830">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  

## Examples  
 <span data-ttu-id="31b2e-831">次のコード例では、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> メソッドを使用して、<xref:System.Single> 値の文字列形式を解析します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-831">The following code example uses the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method to parse the string representations of <xref:System.Single> values.</span></span> <span data-ttu-id="31b2e-832">配列内の各文字列は、en-us、nl、およびカスタムカルチャの書式指定規則を使用して解析されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-832">Each string in an array is parsed using the formatting conventions of the en-US, nl-NL, and a custom culture.</span></span> <span data-ttu-id="31b2e-833">カスタムカルチャは、その桁区切り記号をアンダースコア ("_") として定義し、そのグループサイズを2として定義します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-833">The custom culture defines its group separator symbol as the underscore ("_") and its group size as two.</span></span>  
  
 [!code-csharp[System.Single.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.Parse/CS/parse3.cs#4)]
 [!code-vb[System.Single.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.Parse/VB/parse3.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="31b2e-834"><paramref name="s" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-834"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="31b2e-835"><paramref name="s" /> が数値を表していません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-835"><paramref name="s" /> does not represent a numeric value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31b2e-836"><paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-836"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="31b2e-837">- または -</span><span class="sxs-lookup"><span data-stu-id="31b2e-837">-or-</span></span> 
 <span data-ttu-id="31b2e-838"><paramref name="style" /> は <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-838"><paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="31b2e-839">.NET Framework および .NET Core 2.2 以前のバージョンのみ: <paramref name="s" /> は <see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-839">.NET Framework and .NET Core 2.2 and earlier versions only: <paramref name="s" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <altmember cref="M:System.Single.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md"><span data-ttu-id="31b2e-840">.NET での数値文字列の解析</span><span class="sxs-lookup"><span data-stu-id="31b2e-840">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinity">
      <MemberSignature Language="C#" Value="public const float PositiveInfinity = Infinity;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float32 PositiveInfinity = float32(Infinity)" />
      <MemberSignature Language="DocId" Value="F:System.Single.PositiveInfinity" />
      <MemberSignature Language="VB.NET" Value="Public Const PositiveInfinity As Single  = Infinity" />
      <MemberSignature Language="C++ CLI" Value="public: float PositiveInfinity = Infinity;" />
      <MemberSignature Language="F#" Value="val mutable PositiveInfinity : single" Usage="System.single.PositiveInfinity" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <MemberValue>Infinity</MemberValue>
      <Docs>
        <summary><span data-ttu-id="31b2e-841">正の無限大を表します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-841">Represents positive infinity.</span></span> <span data-ttu-id="31b2e-842">このフィールドは定数です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-842">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-843">この定数の値は、正の数値を0で除算した結果です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-843">The value of this constant is the result of dividing a positive number by zero.</span></span>  
  
 <span data-ttu-id="31b2e-844">この定数は、演算の結果が <xref:System.Single.MaxValue>よりも大きい場合に返されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-844">This constant is returned when the result of an operation is greater than <xref:System.Single.MaxValue>.</span></span>  
  
 <span data-ttu-id="31b2e-845">値が正の無限大と評価されるかどうかを判断するには、<xref:System.Single.IsPositiveInfinity%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-845">Use <xref:System.Single.IsPositiveInfinity%2A> to determine whether a value evaluates to positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-846">次のコード例は、<xref:System.Single.PositiveInfinity> 定数を示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-846">The following code example demonstrates the <xref:System.Single.PositiveInfinity> constant.</span></span>  
  
 [!code-cpp[System.Single#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#10)]
 [!code-csharp[System.Single#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#10)]
 [!code-vb[System.Single#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.IsPositiveInfinity(System.Single)" />
        <altmember cref="M:System.Single.IsInfinity(System.Single)" />
        <altmember cref="F:System.Single.NegativeInfinity" />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-847">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-847">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-848">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-848">For a description of this member, see <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-849">現在のインスタンスの値が 0 でない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-849"><see langword="true" /> if the value of the current instance is not zero; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-850">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-850">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-851">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-851">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="31b2e-852">別の方法として、<xref:System.Convert.ToBoolean%28System.Single%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-852">The recommended alternative is to call the <xref:System.Convert.ToBoolean%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-853">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-853">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-854">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-854">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-855"><see cref="T:System.Byte" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-855">The value of the current instance, converted to a <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-856">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-856">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-857">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-857">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="31b2e-858">別の方法として、<xref:System.Convert.ToByte%28System.Single%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-858">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-859">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-859">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-860">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-860">This conversion is not supported.</span></span> <span data-ttu-id="31b2e-861">このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-861">Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-862">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-862">This conversion is not supported.</span></span> <span data-ttu-id="31b2e-863">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-863">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="31b2e-864">すべての場合。</span><span class="sxs-lookup"><span data-stu-id="31b2e-864">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-865">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-865">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-866">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-866">This conversion is not supported.</span></span> <span data-ttu-id="31b2e-867">このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-867">Attempting to use this method throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-868">この変換はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-868">This conversion is not supported.</span></span> <span data-ttu-id="31b2e-869">値は返されません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-869">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="31b2e-870">すべての場合。</span><span class="sxs-lookup"><span data-stu-id="31b2e-870">In all cases.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-871">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-871">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-872">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-872">For a description of this member, see <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-873"><see cref="T:System.Decimal" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-873">The value of the current instance, converted to a <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-874">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-874">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-875">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-875">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="31b2e-876">別の方法として、<xref:System.Convert.ToDecimal%28System.Single%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-876">The recommended alternative is to call the <xref:System.Convert.ToDecimal%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-877">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-877">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-878">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-878">For a description of this member, see <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-879"><see cref="T:System.Double" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-879">The value of the current instance, converted to a <see cref="T:System.Double" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-880">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-880">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-881">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-881">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="31b2e-882">別の方法として、<xref:System.Convert.ToDouble%28System.Single%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-882">The recommended alternative is to call the <xref:System.Convert.ToDouble%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-883">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-883">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-884">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-884">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-885"><see cref="T:System.Int16" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-885">The value of the current instance, converted to an <see cref="T:System.Int16" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-886">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-886">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-887">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-887">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="31b2e-888">別の方法として、<xref:System.Convert.ToInt16%28System.Single%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-888">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-889">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-889">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-890">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-890">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-891"><see cref="T:System.Int32" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-891">The value of the current instance, converted to an <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-892">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-892">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-893">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-893">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="31b2e-894">別の方法として、<xref:System.Convert.ToInt32%28System.Single%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-894">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-895">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-895">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-896">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-896">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-897"><see cref="T:System.Int64" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-897">The value of the current instance, converted to an <see cref="T:System.Int64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-898">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-898">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-899">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-899">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="31b2e-900">別の方法として、<xref:System.Convert.ToInt64%28System.Single%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-900">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-901">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-901">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-902">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-902">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-903"><see cref="T:System.SByte" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-903">The value of the current instance, converted to an <see cref="T:System.SByte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-904">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-904">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-905">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-905">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="31b2e-906">別の方法として、<xref:System.Convert.ToSByte%28System.Single%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-906">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-907">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-907">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-908">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-908">For a description of this member, see <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-909">変更されていない、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-909">The value of the current instance, unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-910">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-910">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-911">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-911">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="31b2e-912">この <see cref="T:System.Single" /> 値の変換後の型。</span><span class="sxs-lookup"><span data-stu-id="31b2e-912">The type to which to convert this <see cref="T:System.Single" /> value.</span></span></param>
        <param name="provider"><span data-ttu-id="31b2e-913">戻り値の書式に関する情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-913">An object that supplies information about the format of the returned value.</span></span></param>
        <summary><span data-ttu-id="31b2e-914">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-914">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-915"><paramref name="type" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-915">The value of the current instance, converted to <paramref name="type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-916">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-916">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-917">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-917">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="31b2e-918">別の方法として、`static` (Visual Basic で`Shared`) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-918">The recommended alternative is to call the `static` (`Shared` in Visual Basic) <xref:System.Convert.ChangeType%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-919">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-919">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-920">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-920">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-921"><see cref="T:System.UInt16" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-921">The value of the current instance, converted to a <see cref="T:System.UInt16" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-922">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-922">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-923">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-923">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="31b2e-924">別の方法として、<xref:System.Convert.ToUInt16%28System.Single%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-924">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-925">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-925">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-926">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-926">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-927"><see cref="T:System.UInt32" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-927">The value of the current instance, converted to a <see cref="T:System.UInt32" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-928">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-928">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-929">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-929">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="31b2e-930">別の方法として、<xref:System.Convert.ToUInt32%28System.Single%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-930">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-931">このパラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-931">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="31b2e-932">このメンバーの詳細については、「<see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />」をご覧ください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-932">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="31b2e-933"><see cref="T:System.UInt64" /> に変換後の、現在のインスタンスの値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-933">The value of the current instance, converted to a <see cref="T:System.UInt64" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-934">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-934">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="31b2e-935">これは、<xref:System.Single> のインスタンスが <xref:System.IConvertible> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-935">It can be used only when the <xref:System.Single> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="31b2e-936">別の方法として、<xref:System.Convert.ToUInt64%28System.Single%29?displayProperty=nameWithType> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-936">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Single%29?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31b2e-937">このインスタンスの数値を、それと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-937">Converts the numeric value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="single.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="31b2e-938">このインスタンスの数値を、それと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-938">Converts the numeric value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="31b2e-939">このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="31b2e-939">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-940"><xref:System.Single.ToString> メソッドは、現在のカルチャの既定 ("G" または一般) 形式で <xref:System.Single> 値の書式を設定します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-940">The <xref:System.Single.ToString> method formats a <xref:System.Single> value in the default ("G", or general) format of the current culture.</span></span> <span data-ttu-id="31b2e-941">別の形式またはカルチャを指定する場合は、次のように、<xref:System.Single.ToString%2A> メソッドの他のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-941">If you want to specify a different format or culture, use the other overloads of the <xref:System.Single.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="31b2e-942">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="31b2e-942">To use format</span></span>|<span data-ttu-id="31b2e-943">カルチャの場合</span><span class="sxs-lookup"><span data-stu-id="31b2e-943">For culture</span></span>|<span data-ttu-id="31b2e-944">オーバーロードを使用する</span><span class="sxs-lookup"><span data-stu-id="31b2e-944">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="31b2e-945">既定 ("G") 形式</span><span class="sxs-lookup"><span data-stu-id="31b2e-945">Default ("G") format</span></span>|<span data-ttu-id="31b2e-946">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="31b2e-946">A specific culture</span></span>|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="31b2e-947">特定の形式</span><span class="sxs-lookup"><span data-stu-id="31b2e-947">A specific format</span></span>|<span data-ttu-id="31b2e-948">既定の (現在の) カルチャ</span><span class="sxs-lookup"><span data-stu-id="31b2e-948">Default (current) culture</span></span>|<xref:System.Single.ToString%28System.String%29>|  
|<span data-ttu-id="31b2e-949">特定の形式</span><span class="sxs-lookup"><span data-stu-id="31b2e-949">A specific format</span></span>|<span data-ttu-id="31b2e-950">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="31b2e-950">A specific culture</span></span>|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="31b2e-951">戻り値には、<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、または形式の文字列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-951">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="31b2e-952">[sign] 整数桁 [. [小数点以下の桁数]] [e [sign] 指数数字]</span><span class="sxs-lookup"><span data-stu-id="31b2e-952">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span></span>  
  
 <span data-ttu-id="31b2e-953">省略可能な要素は、角かっこ ([および]) で囲まれています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-953">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="31b2e-954">"Digits" という用語を含む要素は、0から9までの一連の数字で構成されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-954">Elements that contain the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span> <span data-ttu-id="31b2e-955">次の表に、各要素の一覧を示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-955">The following table lists each element:</span></span>  
  
|<span data-ttu-id="31b2e-956">要素</span><span class="sxs-lookup"><span data-stu-id="31b2e-956">Element</span></span>|<span data-ttu-id="31b2e-957">説明</span><span class="sxs-lookup"><span data-stu-id="31b2e-957">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="31b2e-958">*sign*</span><span class="sxs-lookup"><span data-stu-id="31b2e-958">*sign*</span></span>|<span data-ttu-id="31b2e-959">負の符号または正の記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-959">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="31b2e-960">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-960">*integral-digits*</span></span>|<span data-ttu-id="31b2e-961">数値の整数部を指定する一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-961">A series of digits specifying the integral part of the number.</span></span> <span data-ttu-id="31b2e-962">小数部がある場合は、整数の数字を省略できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-962">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="31b2e-963">'.'</span><span class="sxs-lookup"><span data-stu-id="31b2e-963">'.'</span></span>|<span data-ttu-id="31b2e-964">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-964">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="31b2e-965">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-965">*fractional-digits*</span></span>|<span data-ttu-id="31b2e-966">数値の小数部を指定する一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-966">A series of digits specifying the fractional part of the number.</span></span>|  
|<span data-ttu-id="31b2e-967">e</span><span class="sxs-lookup"><span data-stu-id="31b2e-967">'e'</span></span>|<span data-ttu-id="31b2e-968">指数 (科学的) 表記を示す小文字の "e"。</span><span class="sxs-lookup"><span data-stu-id="31b2e-968">A lowercase character 'e', indicating exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="31b2e-969">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-969">*exponential-digits*</span></span>|<span data-ttu-id="31b2e-970">指数を指定する一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-970">A series of digits specifying an exponent.</span></span>|  
  
 <span data-ttu-id="31b2e-971">戻り値の例としては、"100"、"-123456789"、"123.45 e + 6"、"500"、"3.1416"、"600"、"-0.123"、"-無限大" などがあります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-971">Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="31b2e-972">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-972">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="31b2e-973">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-973">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="31b2e-974">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-974">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-975">次の例では、既定の <xref:System.Single.ToString%2A?displayProperty=nameWithType> メソッドを使用して、複数の <xref:System.Single> 値の文字列形式を表示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-975">The following example uses the default <xref:System.Single.ToString%2A?displayProperty=nameWithType> method to display the string representations of a number of <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Single.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#1)]
 [!code-vb[System.Single.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#1)]  
  
 <span data-ttu-id="31b2e-976">次のコード例は、<xref:System.Single.Parse%28System.String%29> メソッドを <xref:System.Single.ToString> メソッドと共に使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-976">The following code example illustrates the use of the <xref:System.Single.Parse%28System.String%29> method along with the <xref:System.Single.ToString> method.</span></span>  
  
 [!code-cpp[System.Single#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Single/CPP/singlesample.cpp#3)]
 [!code-csharp[System.Single#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single/CS/singlesample.cs#3)]
 [!code-vb[System.Single#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single/VB/singlesample.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="31b2e-977">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="31b2e-977">Formatting Types in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="single.ToString provider" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="31b2e-978">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-978">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="31b2e-979">このインスタンスの数値を、指定したカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-979">Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="31b2e-980"><paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="31b2e-980">The string representation of the value of this instance as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-981"><xref:System.Single.ToString%28System.IFormatProvider%29> メソッドは、指定されたカルチャの既定 ("G" または一般) 形式で <xref:System.Single> 値の書式を設定します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-981">The <xref:System.Single.ToString%28System.IFormatProvider%29> method formats a <xref:System.Single> value in the default ("G", or general) format of a specified culture.</span></span> <span data-ttu-id="31b2e-982">別の形式または現在のカルチャを指定する場合は、次のように <xref:System.Single.ToString%2A> メソッドの他のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-982">If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Single.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="31b2e-983">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="31b2e-983">To use format</span></span>|<span data-ttu-id="31b2e-984">カルチャの場合</span><span class="sxs-lookup"><span data-stu-id="31b2e-984">For culture</span></span>|<span data-ttu-id="31b2e-985">オーバーロードを使用する</span><span class="sxs-lookup"><span data-stu-id="31b2e-985">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="31b2e-986">既定 ("G") 形式</span><span class="sxs-lookup"><span data-stu-id="31b2e-986">Default ("G") format</span></span>|<span data-ttu-id="31b2e-987">既定の (現在の) カルチャ</span><span class="sxs-lookup"><span data-stu-id="31b2e-987">Default (current) culture</span></span>|<xref:System.Single.ToString>|  
|<span data-ttu-id="31b2e-988">特定の形式</span><span class="sxs-lookup"><span data-stu-id="31b2e-988">A specific format</span></span>|<span data-ttu-id="31b2e-989">既定の (現在の) カルチャ</span><span class="sxs-lookup"><span data-stu-id="31b2e-989">Default (current) culture</span></span>|<xref:System.Single.ToString%28System.String%29>|  
|<span data-ttu-id="31b2e-990">特定の形式</span><span class="sxs-lookup"><span data-stu-id="31b2e-990">A specific format</span></span>|<span data-ttu-id="31b2e-991">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="31b2e-991">A specific culture</span></span>|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="31b2e-992">戻り値には、<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、または形式の文字列を指定できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-992">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or a string of the form:</span></span>  
  
 <span data-ttu-id="31b2e-993">[sign] 整数桁 [. [小数点以下の桁数]] [e [sign] 指数数字]</span><span class="sxs-lookup"><span data-stu-id="31b2e-993">[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits]</span></span>  
  
 <span data-ttu-id="31b2e-994">省略可能な要素は、角かっこ ([および]) で囲まれています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-994">Optional elements are framed in square brackets ([ and ]).</span></span> <span data-ttu-id="31b2e-995">"Digits" という用語を含む要素は、0から9までの一連の数字で構成されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-995">Elements containing the term "digits" consist of a series of numeric characters ranging from 0 to 9.</span></span> <span data-ttu-id="31b2e-996">次の表に、各要素の一覧を示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-996">The following table lists each element.</span></span>  
  
|<span data-ttu-id="31b2e-997">要素</span><span class="sxs-lookup"><span data-stu-id="31b2e-997">Element</span></span>|<span data-ttu-id="31b2e-998">説明</span><span class="sxs-lookup"><span data-stu-id="31b2e-998">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="31b2e-999">sign</span><span class="sxs-lookup"><span data-stu-id="31b2e-999">sign</span></span>|<span data-ttu-id="31b2e-1000">負の符号または正の記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1000">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="31b2e-1001">integral-digits</span><span class="sxs-lookup"><span data-stu-id="31b2e-1001">integral-digits</span></span>|<span data-ttu-id="31b2e-1002">数値の整数部を指定する一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1002">A series of digits specifying the integral part of the number.</span></span> <span data-ttu-id="31b2e-1003">小数部がある場合は、整数の数字を省略できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1003">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="31b2e-1004">'.'</span><span class="sxs-lookup"><span data-stu-id="31b2e-1004">'.'</span></span>|<span data-ttu-id="31b2e-1005">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1005">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="31b2e-1006">小数点以下桁数</span><span class="sxs-lookup"><span data-stu-id="31b2e-1006">fractional-digits</span></span>|<span data-ttu-id="31b2e-1007">数値の小数部を指定する一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1007">A series of digits specifying the fractional part of the number.</span></span>|  
|<span data-ttu-id="31b2e-1008">e</span><span class="sxs-lookup"><span data-stu-id="31b2e-1008">'e'</span></span>|<span data-ttu-id="31b2e-1009">指数 (科学的) 表記を示す小文字の "e"。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1009">A lowercase character 'e', indicating exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="31b2e-1010">exponential-digits</span><span class="sxs-lookup"><span data-stu-id="31b2e-1010">exponential-digits</span></span>|<span data-ttu-id="31b2e-1011">指数を指定する一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1011">A series of digits specifying an exponent.</span></span>|  
  
 <span data-ttu-id="31b2e-1012">戻り値の例としては、"100"、"-123456789"、"123.45 e + 6"、"500"、"3.1416"、"600"、"-0.123"、"-無限大" などがあります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1012">Some examples of the return value are "100", "-123,456,789", "123.45e+6", "500", "3.1416", "600", "-0.123", and "-Infinity".</span></span>  
  
 <span data-ttu-id="31b2e-1013">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1013">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="31b2e-1014">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1014">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="31b2e-1015">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1015">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="31b2e-1016">`provider` パラメーターは、<xref:System.IFormatProvider.GetFormat%2A> メソッドが <xref:System.Globalization.NumberFormatInfo> オブジェクトを返す <xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1016">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="31b2e-1017">通常、`provider` は <xref:System.Globalization.CultureInfo> オブジェクトまたは <xref:System.Globalization.NumberFormatInfo> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1017">Typically, `provider` is a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="31b2e-1018">`provider` パラメーターは、書式設定で使用されるカルチャ固有の情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1018">The `provider` parameter supplies culture-specific information used in formatting.</span></span> <span data-ttu-id="31b2e-1019">`provider` が `null`場合、戻り値は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> データを使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1019">If `provider` is `null`, the return value is formatted using the <xref:System.Globalization.NumberFormatInfo> data for the current culture.</span></span>  
  
 <span data-ttu-id="31b2e-1020">指定したカルチャと特定の書式指定文字列を使用して <xref:System.Single> 値を文字列形式に変換するには、<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1020">To convert a <xref:System.Single> value to its string representation using a specified culture and a specific format string, call the <xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-1021">次の例では、複数の異なるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを使用して、2つの <xref:System.Single> 値の文字列形式を表示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1021">The following example displays the string representation of two <xref:System.Single> values using <xref:System.Globalization.CultureInfo> objects that represent several different cultures.</span></span>  
  
 [!code-csharp[System.Single.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#2)]
 [!code-vb[System.Single.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="31b2e-1022">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="31b2e-1022">Formatting Types in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="single.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="31b2e-1023">数値書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1023">A numeric format string.</span></span></param>
        <summary><span data-ttu-id="31b2e-1024">指定した書式を使用して、このインスタンスの数値を、それと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1024">Converts the numeric value of this instance to its equivalent string representation, using the specified format.</span></span></summary>
        <returns><span data-ttu-id="31b2e-1025"><paramref name="format" /> で指定された、このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1025">The string representation of the value of this instance as specified by <paramref name="format" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-1026"><xref:System.Single.ToString%28System.String%29> メソッドは、現在のカルチャの規則を使用して、指定した書式で <xref:System.Single> 値を書式設定します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1026">The <xref:System.Single.ToString%28System.String%29> method formats a <xref:System.Single> value in a specified format by using the conventions of the current culture.</span></span> <span data-ttu-id="31b2e-1027">既定の形式 ("G" または一般) を使用する場合、または別のカルチャを指定する場合は、次のように、<xref:System.Single.ToString%2A> メソッドの他のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1027">If you want to use the default ("G", or general) format or specify a different culture, use the other overloads of the <xref:System.Single.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="31b2e-1028">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="31b2e-1028">To use format</span></span>|<span data-ttu-id="31b2e-1029">カルチャの場合</span><span class="sxs-lookup"><span data-stu-id="31b2e-1029">For culture</span></span>|<span data-ttu-id="31b2e-1030">オーバーロードを使用する</span><span class="sxs-lookup"><span data-stu-id="31b2e-1030">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="31b2e-1031">既定 ("G") 形式</span><span class="sxs-lookup"><span data-stu-id="31b2e-1031">Default ("G") format</span></span>|<span data-ttu-id="31b2e-1032">既定の (現在の) カルチャ</span><span class="sxs-lookup"><span data-stu-id="31b2e-1032">Default (current) culture</span></span>|<xref:System.Single.ToString>|  
|<span data-ttu-id="31b2e-1033">既定 ("G") 形式</span><span class="sxs-lookup"><span data-stu-id="31b2e-1033">Default ("G") format</span></span>|<span data-ttu-id="31b2e-1034">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="31b2e-1034">A specific culture</span></span>|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="31b2e-1035">特定の形式</span><span class="sxs-lookup"><span data-stu-id="31b2e-1035">A specific format</span></span>|<span data-ttu-id="31b2e-1036">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="31b2e-1036">A specific culture</span></span>|<xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29>|  
  
 <span data-ttu-id="31b2e-1037">戻り値には、`format`で指定されているように、<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、または現在のインスタンスの値の文字列形式を指定できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1037">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or the string representation of the value of the current instance, as specified by `format`.</span></span>  
  
 <span data-ttu-id="31b2e-1038">`format` パラメーターには、任意の有効な標準数値書式指定子を指定できます。ただし、D と X を除き、カスタム数値書式指定子の任意の組み合わせを使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1038">The `format` parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="31b2e-1039">Format が `null` または空の文字列の場合、戻り値は一般的な数値書式指定子 ("G") で書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1039">If format is `null` or an empty string, the return value is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="31b2e-1040">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1040">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="31b2e-1041">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1041">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="31b2e-1042">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1042">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="31b2e-1043">既定では、戻り値の精度は7桁のみですが、内部的には最大9桁が保持されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1043">By default, the return value only contains 7 digits of precision although a maximum of 9 digits is maintained internally.</span></span> <span data-ttu-id="31b2e-1044">このインスタンスの値が7桁を超える場合、<xref:System.Single.ToString%28System.String%29> は、予期された数ではなく <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> または <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1044">If the value of this instance has greater than 7 digits, <xref:System.Single.ToString%28System.String%29> returns <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> instead of the expected number.</span></span> <span data-ttu-id="31b2e-1045">精度をさらに高める必要がある場合は、"G9" 書式指定を使用して `format` を指定します。これは常に9桁の有効桁数を返します。 "R" は、数字を有効桁数で表すことができる場合は7桁、数字を表すことができる場合は9桁を返します。最大有効桁数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1045">If you require more precision, specify `format` with the "G9" format specification, which always returns 9 digits of precision, or "R", which returns 7 digits if the number can be represented with that precision or 9 digits if the number can only be represented with maximum precision.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-1046">次の例では、数値を定義し、"C" 標準の数値書式指定文字列を使用して通貨値として書式設定し、"N" 標準の数値書式指定文字列を使用して小数点以下3桁の数値として書式指定します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1046">The following example defines a numeric value and formats it as a currency value by using the "C" standard numeric format string and as a numeric value to three decimal places by using the "N" standard numeric format string.</span></span> <span data-ttu-id="31b2e-1047">結果の文字列は、en-us カルチャの規則を使用して書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1047">The result strings are formatted by using the conventions of the en-US culture.</span></span> <span data-ttu-id="31b2e-1048">数値書式指定文字列の詳細については、「[標準の数値書式](~/docs/standard/base-types/standard-numeric-format-strings.md)指定文字列」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1048">For more information on numeric format strings, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
 [!code-csharp[System.Single.ToString#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString7.cs#7)]
 [!code-vb[System.Single.ToString#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString7.vb#7)]  
  
 <span data-ttu-id="31b2e-1049">次の例では、サポートされている各標準数値書式指定子と、2つのカスタム数値書式指定文字列を使用して、いくつかの <xref:System.Single> 値を表示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1049">The following example displays several <xref:System.Single> values using each of the supported standard numeric format specifiers together with two custom numeric format strings.</span></span> <span data-ttu-id="31b2e-1050">これらのカスタム書式指定文字列の1つは、<xref:System.Single> 値に先行ゼロを埋め込む方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1050">One of those custom format strings illustrates how to pad a <xref:System.Single> value with leading zeros.</span></span> <span data-ttu-id="31b2e-1051">数値を文字列に変換する場合、この例では en-us カルチャの書式指定規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1051">In converting the numeric values to strings, the example uses the formatting conventions of the en-US culture.</span></span>  
  
 [!code-csharp[System.Single.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#3)]
 [!code-vb[System.Single.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="31b2e-1052"><paramref name="format" /> が無効です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1052"><paramref name="format" /> is invalid.</span></span></exception>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="31b2e-1053">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="31b2e-1053">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/how-to-pad-a-number-with-leading-zeros.md"><span data-ttu-id="31b2e-1054">方法: 数値に先行するゼロを埋め込む</span><span class="sxs-lookup"><span data-stu-id="31b2e-1054">How to: Pad a Number with Leading Zeros</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="single.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="31b2e-1055">数値書式指定文字列。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1055">A numeric format string.</span></span></param>
        <param name="provider"><span data-ttu-id="31b2e-1056">カルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1056">An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="31b2e-1057">このインスタンスの数値を、指定した書式およびカルチャ固有の書式情報を使用して、それと等価な文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1057">Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="31b2e-1058"><paramref name="format" /> および <paramref name="provider" /> で指定された、このインスタンスの値の文字列形式。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1058">The string representation of the value of this instance as specified by <paramref name="format" /> and <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-1059"><xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29> メソッドは、指定されたカルチャの指定された書式で <xref:System.Single> 値の書式を設定します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1059">The <xref:System.Single.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Single> value in a specified format of a specified culture.</span></span> <span data-ttu-id="31b2e-1060">既定の書式設定またはカルチャ設定を使用する場合は、次のように、<xref:System.Single.ToString%2A> メソッドの他のオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1060">If you want to use default format or culture settings, use the other overloads of the <xref:System.Single.ToString%2A> method, as follows:</span></span>  
  
|<span data-ttu-id="31b2e-1061">形式を使用するには</span><span class="sxs-lookup"><span data-stu-id="31b2e-1061">To use format</span></span>|<span data-ttu-id="31b2e-1062">カルチャの場合</span><span class="sxs-lookup"><span data-stu-id="31b2e-1062">For culture</span></span>|<span data-ttu-id="31b2e-1063">オーバーロードを使用する</span><span class="sxs-lookup"><span data-stu-id="31b2e-1063">Use the overload</span></span>|  
|-------------------|-----------------|----------------------|  
|<span data-ttu-id="31b2e-1064">既定 ("G") 形式</span><span class="sxs-lookup"><span data-stu-id="31b2e-1064">Default ("G") format</span></span>|<span data-ttu-id="31b2e-1065">既定の (現在の) カルチャ</span><span class="sxs-lookup"><span data-stu-id="31b2e-1065">Default (current) culture</span></span>|<xref:System.Single.ToString>|  
|<span data-ttu-id="31b2e-1066">既定 ("G") 形式</span><span class="sxs-lookup"><span data-stu-id="31b2e-1066">Default ("G") format</span></span>|<span data-ttu-id="31b2e-1067">特定のカルチャ</span><span class="sxs-lookup"><span data-stu-id="31b2e-1067">A specific culture</span></span>|<xref:System.Single.ToString%28System.IFormatProvider%29>|  
|<span data-ttu-id="31b2e-1068">特定の形式</span><span class="sxs-lookup"><span data-stu-id="31b2e-1068">A specific format</span></span>|<span data-ttu-id="31b2e-1069">既定の (現在の) カルチャ</span><span class="sxs-lookup"><span data-stu-id="31b2e-1069">Default (current) culture</span></span>|<xref:System.Single.ToString%28System.String%29>|  
  
 <span data-ttu-id="31b2e-1070">戻り値には、`format`で指定されているように、<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>、または現在のインスタンスの値の文字列形式を指定できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1070">The return value can be <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, or the string representation of the value of the current instance, as specified by `format`.</span></span>  
  
 <span data-ttu-id="31b2e-1071">`format` パラメーターには、任意の有効な標準数値書式指定子を指定できます。ただし、D と X を除き、カスタム数値書式指定子の任意の組み合わせを使用できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1071">The `format` parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers.</span></span> <span data-ttu-id="31b2e-1072">`format` が `null` または空の文字列の場合、このインスタンスの戻り値は、一般的な数値書式指定子 ("G") で書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1072">If `format` is `null` or an empty string, the return value for this instance is formatted with the general numeric format specifier ("G").</span></span>  
  
 <span data-ttu-id="31b2e-1073">.NET Framework では、さまざまな書式設定がサポートされています。詳細については、次の書式設定に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1073">The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</span></span>  
  
-   <span data-ttu-id="31b2e-1074">数値書式指定子の詳細については、「[標準の数値書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)」および「[カスタム数値書式指定文字列](~/docs/standard/base-types/custom-numeric-format-strings.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1074">For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span>  
  
-   <span data-ttu-id="31b2e-1075">書式設定の詳細については、「[型の書式設定](~/docs/standard/base-types/formatting-types.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1075">For more information about formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span>  
  
 <span data-ttu-id="31b2e-1076">`provider` パラメーターは、<xref:System.IFormatProvider.GetFormat%2A> メソッドが <xref:System.Globalization.NumberFormatInfo> オブジェクトを返す <xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1076">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="31b2e-1077">通常、`provider` は <xref:System.Globalization.CultureInfo> オブジェクトまたは <xref:System.Globalization.NumberFormatInfo> オブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1077">Typically, `provider` is a <xref:System.Globalization.CultureInfo> object or a <xref:System.Globalization.NumberFormatInfo> object.</span></span> <span data-ttu-id="31b2e-1078">`provider` パラメーターは、書式設定で使用されるカルチャ固有の情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1078">The `provider` parameter supplies culture-specific information used in formatting.</span></span> <span data-ttu-id="31b2e-1079">`provider` が `null`場合、戻り値は現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトで書式設定されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1079">If `provider` is `null`, the return value is formatted with the <xref:System.Globalization.NumberFormatInfo> object for the current culture.</span></span>  
  
 <span data-ttu-id="31b2e-1080">既定では、戻り値の精度は7桁のみですが、内部的には最大9桁が保持されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1080">By default, the return value only contains 7 digits of precision although a maximum of 9 digits is maintained internally.</span></span> <span data-ttu-id="31b2e-1081">このインスタンスの値が7桁を超える場合、<xref:System.Single.ToString%2A> は、予期された数ではなく <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> または <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1081">If the value of this instance has greater than 7 digits, <xref:System.Single.ToString%2A> returns <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> instead of the expected number.</span></span> <span data-ttu-id="31b2e-1082">精度をさらに高める必要がある場合は、"G9" 書式指定を使用して `format` を指定します。これは常に9桁の有効桁数を返します。 "R" は、数字を有効桁数で表すことができる場合は7桁、数字を表すことができる場合は9桁を返します。最大有効桁数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1082">If you require more precision, specify `format` with the "G9" format specification, which always returns 9 digits of precision, or "R", which returns 7 digits if the number can be represented with that precision or 9 digits if the number can only be represented with maximum precision.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-1083">次の例では、複数の異なるカルチャに対してサポートされている各標準数値書式指定子を使用して、<xref:System.Single> 値を表示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1083">The following example displays a <xref:System.Single> value using each of the supported standard numeric format specifiers for several different cultures.</span></span>  
  
 [!code-csharp[System.Single.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Single.ToString/CS/ToString1.cs#4)]
 [!code-vb[System.Single.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Single.ToString/VB/ToString1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="T:System.String" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md"><span data-ttu-id="31b2e-1084">.NET での型の書式設定</span><span class="sxs-lookup"><span data-stu-id="31b2e-1084">Formatting Types in .NET</span></span></related>
        <related type="Article" href="~/docs/standard/base-types/how-to-pad-a-number-with-leading-zeros.md"><span data-ttu-id="31b2e-1085">方法: 数値に先行するゼロを埋め込む</span><span class="sxs-lookup"><span data-stu-id="31b2e-1085">How to: Pad a Number with Leading Zeros</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = null, IFormatProvider provider = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="single.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="destination"><span data-ttu-id="31b2e-1086">このメソッドから制御が戻るときに、このインスタンスの文字スパンとして書式が設定された値。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1086">When this method returns, this instance's value formatted as a span of characters.</span></span></param>
        <param name="charsWritten"><span data-ttu-id="31b2e-1087">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた文字数。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1087">When this method returns, the number of characters that were written in <paramref name="destination" />.</span></span></param>
        <param name="format"><span data-ttu-id="31b2e-1088"><paramref name="destination" /> に許容される書式を定義する、標準またはカスタム書式の文字列を表す文字を含むスパン。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1088">A span containing the charactes that represent a standard or custom format string that defines the acceptable format for <paramref name="destination" />.</span></span></param>
        <param name="provider"><span data-ttu-id="31b2e-1089"><paramref name="destination" /> のカルチャ固有の書式情報を指定するオプションのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1089">An optional object that supplies culture-specific formatting information for <paramref name="destination" />.</span></span></param>
        <summary><span data-ttu-id="31b2e-1090">現在の浮動小数点数インスタンスの値の、指定した文字スパンへの書式設定を試みます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1090">Tries to format the value of the current float number instance into the provided span of characters.</span></span></summary>
        <returns><span data-ttu-id="31b2e-1091">書式設定が正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1091"><see langword="true" /> if the formatting was successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="31b2e-1092">数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1092">Converts the string representation of a number to its single-precision floating-point number equivalent.</span></span> <span data-ttu-id="31b2e-1093">戻り値は変換が成功したか失敗したかを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1093">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <altmember cref="Overload:System.Single.Parse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] float % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * single -&gt; bool" Usage="System.single.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.Single" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="31b2e-1094">変換する数値の文字列表現を含む文字スパン。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1094">&gt;A character span that contains the string representation of the number to convert.</span></span></param>
        <param name="result"><span data-ttu-id="31b2e-1095">変換が成功した場合、このメソッドから制御が戻るときに、<paramref name="s" /> パラメーターの値と等価の単精度浮動小数点数を格納します。変換に失敗した場合は 0 を格納します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1095">&gt;When this method returns, contains the single-precision floating-point number equivalent of the <paramref name="s" /> parameter, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="31b2e-1096"><paramref name="s" /> パラメーターが <see langword="null" /> か空の場合、または有効な形式の数値でない場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1096">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or empty or is not a number in a valid format.</span></span> <span data-ttu-id="31b2e-1097"><parmref name="s" /> が <see cref="F:System.Single.MinValue" /> 未満の有効な数値である場合、<paramref name="result" /> は <see cref="F:System.Single.NegativeInfinity" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1097">If <parmref name="s" /> is a valid number less than <see cref="F:System.Single.MinValue" />, <paramref name="result" /> is <see cref="F:System.Single.NegativeInfinity" />.</span></span> <span data-ttu-id="31b2e-1098"><parmref name="s" /> が <see cref="F:System.Single.MaxValue" /> より大きい有効な数値である場合、<paramref name="result" /> は <see cref="F:System.Single.PositiveInfinity" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1098">If <parmref name="s" /> is a valid number greater than <see cref="F:System.Single.MaxValue" />, <paramref name="result" /> is <see cref="F:System.Single.PositiveInfinity" />.</span></span> <span data-ttu-id="31b2e-1099">このパラメーターは初期化されていない状態で渡されています。<paramref name="result" /> で最初に指定された任意の値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1099">This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="31b2e-1100">文字スパン内の数値の文字列表現を、それと等価の単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1100">Converts the string representation of a number in a character span to its single-precision floating-point number equivalent.</span></span> <span data-ttu-id="31b2e-1101">戻り値は変換が成功したか失敗したかを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1101">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="31b2e-1102"><see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1102"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.String,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] float % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * single -&gt; bool" Usage="System.single.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Single" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="31b2e-1103">変換する数値を表す文字列。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1103">A string representing a number to convert.</span></span></param>
        <param name="result"><span data-ttu-id="31b2e-1104">変換が成功した場合、このメソッドから制御が戻った時点で、<paramref name="s" /> に格納された数値または記号に等しい単精度浮動小数点数を格納します。変換に失敗した場合は 0 を格納します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1104">When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="31b2e-1105"><paramref name="s" /> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> の場合、または有効な形式の数値でない場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1105">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" /> or is not a number in a valid format.</span></span> <span data-ttu-id="31b2e-1106"><paramref name="s" /> が <see cref="F:System.Single.MinValue" /> 未満または <see cref="F:System.Single.MaxValue" /> を超える数値を表す場合、.NET Framework および .NET Core 2.2 以前のバージョンでも失敗します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1106">It also fails on .NET Framework and .NET Core 2.2 and earlier versions if <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span> <span data-ttu-id="31b2e-1107">このパラメーターは初期化されていない状態で渡されています。<paramref name="result" /> で最初に指定された任意の値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1107">This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="31b2e-1108">数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1108">Converts the string representation of a number to its single-precision floating-point number equivalent.</span></span> <span data-ttu-id="31b2e-1109">戻り値は変換が成功したか失敗したかを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1109">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="31b2e-1110"><see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1110"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-1111">このオーバーロードは、解析された数値を返すのではなく、解析操作が成功したかどうかを示すブール値を返すことによって、<xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType> メソッドとは異なります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1111">This overload differs from the <xref:System.Single.Parse%28System.String%29?displayProperty=nameWithType> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value.</span></span> <span data-ttu-id="31b2e-1112">これにより、`s` が無効で、正常に解析できない場合に、例外処理を使用して <xref:System.FormatException> をテストする必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1112">It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="31b2e-1113">`s` パラメーターには、<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> (文字列比較では大文字と小文字が区別されます)、または次の形式の文字列を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1113">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> (the string comparison is case-sensitive), or a string of the form:</span></span>  
  
 <span data-ttu-id="31b2e-1114">jax-wsシャープ[整数数字,] 整数桁 [. [小数点以下の桁数]] [e [sign] 指数数字] [ws]</span><span class="sxs-lookup"><span data-stu-id="31b2e-1114">[ws][sign][integral-digits,]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</span></span>  
  
 <span data-ttu-id="31b2e-1115">角かっこ内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1115">Elements in square brackets are optional.</span></span> <span data-ttu-id="31b2e-1116">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1116">The following table describes each element.</span></span>  
  
|<span data-ttu-id="31b2e-1117">要素</span><span class="sxs-lookup"><span data-stu-id="31b2e-1117">Element</span></span>|<span data-ttu-id="31b2e-1118">説明</span><span class="sxs-lookup"><span data-stu-id="31b2e-1118">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="31b2e-1119">*ws*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1119">*ws*</span></span>|<span data-ttu-id="31b2e-1120">一連の空白文字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1120">A series of white-space characters.</span></span>|  
|<span data-ttu-id="31b2e-1121">*sign*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1121">*sign*</span></span>|<span data-ttu-id="31b2e-1122">負の符号または正の記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1122">A negative sign or positive sign symbol.</span></span>|  
|<span data-ttu-id="31b2e-1123">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1123">*integral-digits*</span></span>|<span data-ttu-id="31b2e-1124">数値の整数部を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1124">A series of numeric characters ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="31b2e-1125">小数部がある場合は、整数の数字を省略できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1125">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="31b2e-1126">*、*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1126">*,*</span></span>|<span data-ttu-id="31b2e-1127">カルチャ固有のグループ区切り記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1127">A culture-specific group separator symbol.</span></span>|  
|<span data-ttu-id="31b2e-1128">*.*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1128">*.*</span></span>|<span data-ttu-id="31b2e-1129">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1129">A culture-specific decimal point symbol.</span></span>|  
|<span data-ttu-id="31b2e-1130">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1130">*fractional-digits*</span></span>|<span data-ttu-id="31b2e-1131">数値の小数部を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1131">A series of numeric characters ranging from 0 to 9 that specify the fractional part of the number.</span></span>|  
|<span data-ttu-id="31b2e-1132">*E*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1132">*E*</span></span>|<span data-ttu-id="31b2e-1133">指数 (科学的) 表記を示す大文字または小文字の "e"。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1133">An uppercase or lowercase character 'e', that indicates exponential (scientific) notation.</span></span>|  
|<span data-ttu-id="31b2e-1134">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1134">*exponential-digits*</span></span>|<span data-ttu-id="31b2e-1135">指数を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1135">A series of numeric characters ranging from 0 to 9 that specify an exponent.</span></span>|  
  
 <span data-ttu-id="31b2e-1136">`s` パラメーターは、<xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> と <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> フラグの組み合わせを使用して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1136">The `s` parameter is interpreted using a combination of the <xref:System.Globalization.NumberStyles.Float?displayProperty=nameWithType> and <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flags.</span></span> <span data-ttu-id="31b2e-1137">つまり、空白と桁区切り記号は許可されますが、通貨記号は使用できません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1137">This means that white space and thousands separators are allowed but currency symbols are not.</span></span> <span data-ttu-id="31b2e-1138">`s`に含まれる要素 (通貨記号、桁区切り記号、空白文字など) を明示的に定義するには、<xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> メソッドオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1138">To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in `s`, use the <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> method overload.</span></span>  
  
 <span data-ttu-id="31b2e-1139">`s` パラメーターは、現在のシステムカルチャに対して初期化された <xref:System.Globalization.NumberFormatInfo> オブジェクトの書式情報を使用して解析されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1139">The `s` parameter is parsed using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture.</span></span> <span data-ttu-id="31b2e-1140">詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1140">For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="31b2e-1141">他の指定したカルチャの書式情報を使用して文字列を解析するには、<xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> メソッドのオーバーロードを使用します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1141">To parse a string using the formatting information of some other specified culture, use the <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> method overload.</span></span>  
  
 <span data-ttu-id="31b2e-1142">通常、<xref:System.Single.ToString%2A?displayProperty=nameWithType> メソッドを呼び出すことによって作成された文字列を <xref:System.Single.TryParse%2A?displayProperty=nameWithType> メソッドに渡すと、元の <xref:System.Single> 値が返されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1142">Ordinarily, if you pass the <xref:System.Single.TryParse%2A?displayProperty=nameWithType> method a string that is created by calling the <xref:System.Single.ToString%2A?displayProperty=nameWithType> method, the original <xref:System.Single> value is returned.</span></span> <span data-ttu-id="31b2e-1143">ただし、精度が低下しているため、値が等しくない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1143">However, because of a loss of precision, the values may not be equal.</span></span>  

<span data-ttu-id="31b2e-1144">`s` が <xref:System.Single> データ型の範囲外の場合、メソッドは .NET Framework および .NET Core 2.2 以前のバージョンで `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1144">If `s` is out of range of the <xref:System.Single> data type, the method returns `false` on .NET Framework and .NET Core 2.2 and earlier versions.</span></span> <span data-ttu-id="31b2e-1145">.NET Core 3.0 以降のバージョンでは、`s` が <xref:System.Single.MinValue?displayProperty=nameWithType> 未満の場合に <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> を返し、`s` が <xref:System.Single.MaxValue?displayProperty=nameWithType>より大きい場合は <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1145">On .NET Core 3.0 and later versions, it returns <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> if `s` is less than <xref:System.Single.MinValue?displayProperty=nameWithType> and <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> if `s` is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>

<span data-ttu-id="31b2e-1146">解析操作中に `s` パラメーターで区切り記号が検出され、該当する通貨または数値の10進数と桁区切り記号が同じ場合、解析操作では区切り記号が桁区切り記号ではなく小数点区切りであると見なされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1146">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="31b2e-1147">区切り記号の詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1147">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="31b2e-1148">次の例では、<xref:System.Single.TryParse%28System.String%2CSystem.Single%40%29> メソッドを使用して、数値の文字列形式を <xref:System.Single> の値に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1148">The following example uses the <xref:System.Single.TryParse%28System.String%2CSystem.Single%40%29> method to convert the string representations of numeric values to <xref:System.Single> values.</span></span> <span data-ttu-id="31b2e-1149">En-us が現在のカルチャであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1149">It assumes that en-US is the current culture.</span></span>  
  
 [!code-csharp[System.Single.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.tryparse/cs/tryparse1.cs#1)]
 [!code-vb[System.Single.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.tryparse/vb/tryparse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="M:System.Single.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md"><span data-ttu-id="31b2e-1150">.NET での数値文字列の解析</span><span class="sxs-lookup"><span data-stu-id="31b2e-1150">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), style As NumberStyles, provider As IFormatProvider, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] float % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * System.Globalization.NumberStyles * IFormatProvider * single -&gt; bool" Usage="System.single.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="result" Type="System.Single" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="31b2e-1151">変換する数値を含む読み取り専用の文字スパン。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1151">A read-only character span that contains the number to convert.</span></span> <span data-ttu-id="31b2e-1152">このスパンは、<paramref name="style" /> で指定されたスタイルを使用して解釈されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1152">The span is interpreted using the style specified by <paramref name="style" /></span></span></param>
        <param name="style"><span data-ttu-id="31b2e-1153"><paramref name="s" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1153">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />.</span></span> <span data-ttu-id="31b2e-1154">通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1154">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <param name="provider"><span data-ttu-id="31b2e-1155"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1155">An object that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <param name="result"><span data-ttu-id="31b2e-1156">変換が成功した場合、このメソッドから制御が戻った時点で、<paramref name="s" /> に格納された数値または記号に等しい単精度浮動小数点数を格納します。変換に失敗した場合は 0 を格納します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1156">When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="31b2e-1157"><paramref name="s" /> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> である、<paramref name="style" /> に準拠した形式ではない、<see cref="F:System.Single.MinValue" /> より小さいか <see cref="F:System.Single.MaxValue" /> より大きい数値を表す、または <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 列挙定数の有効な組み合わせではない場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1157">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumerated constants.</span></span> <span data-ttu-id="31b2e-1158">このパラメーターは初期化されていない状態で渡されています。<paramref name="result" /> で最初に指定された任意の値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1158">This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="31b2e-1159">指定したスタイルおよびカルチャに固有の書式による数値のスパン表現を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1159">Converts the span representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</span></span> <span data-ttu-id="31b2e-1160">戻り値は変換が成功したか失敗したかを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1160">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="31b2e-1161"><see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1161"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.Globalization.NumberStyles style, class System.IFormatProvider provider, [out] float32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, System::Globalization::NumberStyles style, IFormatProvider ^ provider, [Runtime::InteropServices::Out] float % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * System.Globalization.NumberStyles * IFormatProvider * single -&gt; bool" Usage="System.single.TryParse (s, style, provider, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.NumberStyles" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.Single" RefType="out" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="31b2e-1162">変換する数値を表す文字列。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1162">A string representing a number to convert.</span></span></param>
        <param name="style"><span data-ttu-id="31b2e-1163"><paramref name="s" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1163">A bitwise combination of enumeration values that indicates the permitted format of <paramref name="s" />.</span></span> <span data-ttu-id="31b2e-1164">通常指定する値は、<see cref="F:System.Globalization.NumberStyles.AllowThousands" /> と組み合わせた <see cref="F:System.Globalization.NumberStyles.Float" /> です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1164">A typical value to specify is <see cref="F:System.Globalization.NumberStyles.Float" /> combined with <see cref="F:System.Globalization.NumberStyles.AllowThousands" />.</span></span></param>
        <param name="provider"><span data-ttu-id="31b2e-1165"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1165">An object that supplies culture-specific formatting information about <paramref name="s" />.</span></span></param>
        <param name="result"><span data-ttu-id="31b2e-1166">変換が成功した場合、このメソッドから制御が戻った時点で、<paramref name="s" /> に格納された数値または記号に等しい単精度浮動小数点数を格納します。変換に失敗した場合は 0 を格納します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1166">When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <paramref name="s" />, if the conversion succeeded, or zero if the conversion failed.</span></span> <span data-ttu-id="31b2e-1167"><paramref name="s" /> パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> の場合、<paramref name="style" /> に準拠する形式ではない場合、または <paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 列挙定数の有効な組み合わせでない場合、変換は失敗します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1167">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, is not in a format compliant with <paramref name="style" />, or if <paramref name="style" /> is not a valid combination of <see cref="T:System.Globalization.NumberStyles" /> enumeration constants.</span></span> <span data-ttu-id="31b2e-1168"><paramref name="s" /> が <see cref="F:System.Single.MinValue" /> 未満または <see cref="F:System.Single.MaxValue" /> を超える数値を表す場合、.NET Framework または .NET Core 2.2 以前のバージョンでも失敗します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1168">It also fails on .NET Framework or .NET Core 2.2 and earlier versions if <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span> <span data-ttu-id="31b2e-1169">このパラメーターは初期化されていない状態で渡されています。<paramref name="result" /> で最初に指定された任意の値が上書きされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1169">This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="31b2e-1170">指定したスタイルおよびカルチャに固有の書式による数値の文字列形式を、それと等価な単精度浮動小数点数に変換します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1170">Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</span></span> <span data-ttu-id="31b2e-1171">戻り値は変換が成功したか失敗したかを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1171">A return value indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="31b2e-1172"><see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1172"><see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="31b2e-1173">このオーバーロードは、解析された数値を返すのではなく、解析操作が成功したかどうかを示すブール値を返すことによって、<xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> メソッドとは異なります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1173">This overload differs from the <xref:System.Single.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value.</span></span> <span data-ttu-id="31b2e-1174">これにより、`s` が無効で、正常に解析できない場合に、例外処理を使用して <xref:System.FormatException> をテストする必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1174">It eliminates the need to use exception handling to test for a <xref:System.FormatException> in the event that `s` is invalid and cannot be successfully parsed.</span></span>  
  
 <span data-ttu-id="31b2e-1175">`style` パラメーターは、解析操作を成功させるために使用できる `s` パラメーターの形式を定義します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1175">The `style` parameter defines the allowable format of the `s` parameter for the parse operation to succeed.</span></span> <span data-ttu-id="31b2e-1176"><xref:System.Globalization.NumberStyles> 列挙体のビットフラグの組み合わせである必要があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1176">It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration.</span></span> <span data-ttu-id="31b2e-1177">次の <xref:System.Globalization.NumberStyles> メンバーはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1177">The following <xref:System.Globalization.NumberStyles> members are not supported:</span></span>  
  
-   <xref:System.Globalization.NumberStyles.AllowHexSpecifier?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.NumberStyles.HexNumber?displayProperty=nameWithType>  
  
 <span data-ttu-id="31b2e-1178">`s` パラメーターには、`provider`によって示されるカルチャの <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>、<xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1178">The `s` parameter can contain <xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A>, <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A> for the culture indicated by `provider`.</span></span> <span data-ttu-id="31b2e-1179">さらに、`style`の値に応じて、`s` パラメーターには次の要素を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1179">In addition, depending on the value of `style`, the `s` parameter may include the following elements:</span></span>  
  
 <span data-ttu-id="31b2e-1180">jax-ws[$]シャープ[整数、] 整数の数字 [. 小数部の桁] [e [sign] 指数数字] [ws]</span><span class="sxs-lookup"><span data-stu-id="31b2e-1180">[ws] [$] [sign][integral-digits,]integral-digits[.fractional-digits][e[sign]exponential-digits][ws]</span></span>  
  
 <span data-ttu-id="31b2e-1181">角かっこ ([ および ]) 内の要素は省略可能です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1181">Elements in square brackets ([ and ]) are optional.</span></span> <span data-ttu-id="31b2e-1182">次の表は、それぞれの要素の説明です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1182">The following table describes each element.</span></span>  
  
|<span data-ttu-id="31b2e-1183">要素</span><span class="sxs-lookup"><span data-stu-id="31b2e-1183">Element</span></span>|<span data-ttu-id="31b2e-1184">説明</span><span class="sxs-lookup"><span data-stu-id="31b2e-1184">Description</span></span>|  
|-------------|-----------------|  
|<span data-ttu-id="31b2e-1185">*ws*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1185">*ws*</span></span>|<span data-ttu-id="31b2e-1186">省略可能な空白。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1186">Optional white space.</span></span> <span data-ttu-id="31b2e-1187"><xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> フラグが `style` に含まれている場合、`s` の先頭に空白が表示されることがあります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1187">White space can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingWhite?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="31b2e-1188">`style` に <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> フラグが含まれている場合は、`s` の最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1188">It can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingWhite?displayProperty=nameWithType> flag.</span></span>|  
|*$*|<span data-ttu-id="31b2e-1189">カルチャ固有の通貨記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1189">A culture-specific currency symbol.</span></span> <span data-ttu-id="31b2e-1190">文字列内の位置は、`provider` パラメーターの <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> メソッドによって返される <xref:System.Globalization.NumberFormatInfo> オブジェクトの <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> または <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> プロパティによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1190">Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=nameWithType> or <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=nameWithType> properties of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> method of the `provider` parameter.</span></span> <span data-ttu-id="31b2e-1191">通貨記号は、`style` に <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> フラグが含まれている場合に `s` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1191">The currency symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowCurrencySymbol?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="31b2e-1192">*sign*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1192">*sign*</span></span>|<span data-ttu-id="31b2e-1193">省略可能な符号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1193">An optional sign.</span></span> <span data-ttu-id="31b2e-1194"><xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> フラグが `style` に含まれている場合、`s` の先頭に符号が表示されます。また、`style` に <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> フラグが含まれている場合は、`s` の最後に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1194">The sign can appear at the beginning of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowLeadingSign?displayProperty=nameWithType> flag, and it can appear at the end of `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowTrailingSign?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="31b2e-1195"><xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> フラグが `style` 含まれている場合は、`s` でかっこを使用して負の値を示すことができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1195">Parentheses can be used in `s` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles.AllowParentheses?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="31b2e-1196">*integral-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1196">*integral-digits*</span></span>|<span data-ttu-id="31b2e-1197">数値の整数部を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1197">A series of digits ranging from 0 to 9 that specify the integral part of the number.</span></span> <span data-ttu-id="31b2e-1198">小数部がある場合は、整数の数字を省略できます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1198">Integral-digits can be absent if there are fractional-digits.</span></span>|  
|<span data-ttu-id="31b2e-1199">*、*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1199">*,*</span></span>|<span data-ttu-id="31b2e-1200">カルチャ固有の桁区切り記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1200">A culture-specific thousands separator symbol.</span></span> <span data-ttu-id="31b2e-1201">現在のカルチャの桁区切り記号は、`style` に <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> フラグが含まれている場合に `s` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1201">The current culture's thousands separator symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowThousands?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="31b2e-1202">*.*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1202">*.*</span></span>|<span data-ttu-id="31b2e-1203">カルチャ固有の小数点の記号。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1203">A culture-specific decimal point symbol.</span></span> <span data-ttu-id="31b2e-1204">現在のカルチャの小数点の記号は、`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合に `s` に表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1204">The current culture's decimal point symbol can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="31b2e-1205">*fractional-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1205">*fractional-digits*</span></span>|<span data-ttu-id="31b2e-1206">数値の小数部を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1206">A series of digits ranging from 0 to 9 that specify the fractional part of the number.</span></span> <span data-ttu-id="31b2e-1207">`style` に <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> フラグが含まれている場合、`s` に小数点以下の桁数が表示されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1207">Fractional digits can appear in `s` if `style` includes the <xref:System.Globalization.NumberStyles.AllowDecimalPoint?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="31b2e-1208">*e*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1208">*e*</span></span>|<span data-ttu-id="31b2e-1209">E または E 文字。 `s` が指数表記を使用して数値を表すことができることを示します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1209">The e or E character, which indicates that `s` can represent a number using exponential notation.</span></span> <span data-ttu-id="31b2e-1210">`s` パラメーターは、style に <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> フラグが含まれている場合に指数表記で数値を表すことができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1210">The `s` parameter can represent a number in exponential notation if style includes the <xref:System.Globalization.NumberStyles.AllowExponent?displayProperty=nameWithType> flag.</span></span>|  
|<span data-ttu-id="31b2e-1211">*exponential-digits*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1211">*exponential-digits*</span></span>|<span data-ttu-id="31b2e-1212">指数を指定する0から9までの一連の数字。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1212">A series of digits ranging from 0 to 9 that specify an exponent.</span></span>|  
  
> [!NOTE]
> <span data-ttu-id="31b2e-1213">`s` 内の終端の NUL (U + 0000) 文字は、`style` 引数の値に関係なく、解析操作によって無視されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1213">Any terminating NUL (U+0000) characters in `s` are ignored by the parsing operation, regardless of the value of the `style` argument.</span></span>

 <span data-ttu-id="31b2e-1214">数字のみを含む文字列 (<xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> スタイルに対応) は、<xref:System.Single> 型の範囲内にある場合は、常に正常に解析されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1214">A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles.None?displayProperty=nameWithType> style) always parses successfully if it is in the range of the <xref:System.Single> type.</span></span> <span data-ttu-id="31b2e-1215">残りの <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> メンバーは、入力文字列に存在する必要があるが必須ではない要素を制御します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1215">The remaining <xref:System.Globalization.NumberStyles?displayProperty=nameWithType> members control elements that may be but are not required to be present in the input string.</span></span> <span data-ttu-id="31b2e-1216">次の表は、個々の <xref:System.Globalization.NumberStyles> フラグが `s`に存在する可能性のある要素にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1216">The following table indicates how individual <xref:System.Globalization.NumberStyles> flags affect the elements that may be present in `s`.</span></span>  
  
|<span data-ttu-id="31b2e-1217">NumberStyles 値</span><span class="sxs-lookup"><span data-stu-id="31b2e-1217">NumberStyles value</span></span>|<span data-ttu-id="31b2e-1218">数字に加えてで許可される要素</span><span class="sxs-lookup"><span data-stu-id="31b2e-1218">Elements permitted in s in addition to digits</span></span>|  
|------------------------|---------------------------------------------------|  
|<xref:System.Globalization.NumberStyles.None>|<span data-ttu-id="31b2e-1219">*整数の数字*の要素のみ。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1219">The *integral-digits* element only.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|<span data-ttu-id="31b2e-1220">*.*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1220">The *.*</span></span> <span data-ttu-id="31b2e-1221">と*小数部の桁*の要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1221">and *fractional-digits* elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowExponent>|<span data-ttu-id="31b2e-1222">`s` パラメーターでは、指数表記を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1222">The `s` parameter can also use exponential notation.</span></span> <span data-ttu-id="31b2e-1223">このフラグによって、*整数*の*指数*部からなる数値がサポートされます。正または負の記号や小数点の記号などの要素を使用して、指数表記で文字列を正常に解析するには、追加のフラグが必要です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1223">This flag by itself supports values in the form *integral-digits*E*exponential-digits*; additional flags are needed to successfully parse strings in exponential notation with such elements as positive or negative signs and decimal point symbols.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|<span data-ttu-id="31b2e-1224">`s`の先頭にある*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1224">The *ws* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|<span data-ttu-id="31b2e-1225">`s`の末尾の*ws*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1225">The *ws* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|<span data-ttu-id="31b2e-1226">`s`の先頭にある*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1226">The *sign* element at the beginning of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|<span data-ttu-id="31b2e-1227">`s`の末尾の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1227">The *sign* element at the end of `s`.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowParentheses>|<span data-ttu-id="31b2e-1228">数値を囲むかっこ形式の*sign*要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1228">The *sign* element in the form of parentheses enclosing the numeric value.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowThousands>|<span data-ttu-id="31b2e-1229">要素 *、* 要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1229">The *,* element.</span></span>|  
|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|<span data-ttu-id="31b2e-1230">*$* 要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1230">The *$* element.</span></span>|  
|<xref:System.Globalization.NumberStyles.Currency>|<span data-ttu-id="31b2e-1231">すべて。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1231">All.</span></span> <span data-ttu-id="31b2e-1232">`s` パラメーターは、16進数または指数表記の数値を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1232">The `s` parameter cannot represent a hexadecimal number or a number in exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Float>|<span data-ttu-id="31b2e-1233">`s`の先頭または末尾にある*ws* *要素、`s`の先頭にある*、および *。*</span><span class="sxs-lookup"><span data-stu-id="31b2e-1233">The *ws* element at the beginning or end of `s`, *sign* at the beginning of `s`, and the *.*</span></span> <span data-ttu-id="31b2e-1234">表す.</span><span class="sxs-lookup"><span data-stu-id="31b2e-1234">symbol.</span></span> <span data-ttu-id="31b2e-1235">`s` パラメーターでは、指数表記を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1235">The `s` parameter can also use exponential notation.</span></span>|  
|<xref:System.Globalization.NumberStyles.Number>|<span data-ttu-id="31b2e-1236">`ws`、`sign`、桁区切り記号 (*、)、* および小数点 (*.*) の要素。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1236">The `ws`, `sign`, thousands separator (*,),* and decimal point (*.*) elements.</span></span>|  
|<xref:System.Globalization.NumberStyles.Any>|<span data-ttu-id="31b2e-1237">`s` を除くすべてのスタイルは、16進数を表すことはできません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1237">All styles, except `s` cannot represent a hexadecimal number.</span></span>|  
  
 <span data-ttu-id="31b2e-1238">`provider` パラメーターは、<xref:System.IFormatProvider.GetFormat%2A> メソッドがカルチャ固有の書式情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返す <xref:System.IFormatProvider> の実装です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1238">The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information.</span></span> <span data-ttu-id="31b2e-1239"><xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> メソッドが呼び出されると、`provider` パラメーターの <xref:System.IFormatProvider.GetFormat%2A> メソッドを呼び出し、<xref:System.Globalization.NumberFormatInfo> 型を表す <xref:System.Type> オブジェクトに渡します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1239">When the <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type.</span></span> <span data-ttu-id="31b2e-1240"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、`s` パラメーターの形式に関する情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1240">The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `s` parameter.</span></span> <span data-ttu-id="31b2e-1241">`provider` パラメーターを使用して、解析操作にカスタム書式情報を提供するには、次の3つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1241">There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:</span></span>  
  
-   <span data-ttu-id="31b2e-1242">書式設定情報を提供するカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1242">You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.</span></span> <span data-ttu-id="31b2e-1243"><xref:System.Globalization.CultureInfo.GetFormat%2A> メソッドは、そのカルチャの数値書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1243">Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.</span></span>  
  
-   <span data-ttu-id="31b2e-1244">数値の書式設定情報を提供する実際の <xref:System.Globalization.NumberFormatInfo> オブジェクトを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1244">You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.</span></span> <span data-ttu-id="31b2e-1245">(<xref:System.Globalization.NumberFormatInfo.GetFormat%2A> の実装では、それ自体が返されます)。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1245">(Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)</span></span>  
  
-   <span data-ttu-id="31b2e-1246"><xref:System.IFormatProvider>を実装するカスタムオブジェクトを渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1246">You can pass a custom object that implements <xref:System.IFormatProvider>.</span></span> <span data-ttu-id="31b2e-1247"><xref:System.IFormatProvider.GetFormat%2A> メソッドは、書式設定情報を提供する <xref:System.Globalization.NumberFormatInfo> オブジェクトをインスタンス化して返します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1247">Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.</span></span>  
  
 <span data-ttu-id="31b2e-1248">`provider` が `null`場合、`s` の書式設定は、現在のカルチャの <xref:System.Globalization.NumberFormatInfo> オブジェクトに基づいて解釈されます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1248">If `provider` is `null`, the formatting of `s` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture.</span></span>  

<span data-ttu-id="31b2e-1249">`s` が <xref:System.Single> データ型の範囲外にある場合、メソッドは .NET Framework および .NET Core 2.2 以前のバージョンで <xref:System.OverflowException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1249">If `s` is out of range of the <xref:System.Single> data type, the method throws an <xref:System.OverflowException> on .NET Framework and .NET Core 2.2 and earlier versions.</span></span> <span data-ttu-id="31b2e-1250">.NET Core 3.0 以降のバージョンでは、`s` が <xref:System.Single.MinValue?displayProperty=nameWithType> 未満の場合に <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> を返し、`s` が <xref:System.Single.MaxValue?displayProperty=nameWithType>より大きい場合は <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> します。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1250">On .NET Core 3.0 and later versions, it returns <xref:System.Single.NegativeInfinity?displayProperty=nameWithType> if `s` is less than <xref:System.Single.MinValue?displayProperty=nameWithType> and <xref:System.Single.PositiveInfinity?displayProperty=nameWithType> if `s` is greater than <xref:System.Single.MaxValue?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="31b2e-1251">解析操作中に `s` パラメーターで区切り記号が検出され、該当する通貨または数値の10進数と桁区切り記号が同じ場合、解析操作では区切り記号が桁区切り記号ではなく小数点区切りであると見なされます。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1251">If a separator is encountered in the `s` parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator.</span></span> <span data-ttu-id="31b2e-1252">区切り記号の詳細については、「<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>、および <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1252">For more information about separators, see <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>, <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, and <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>.</span></span>  
 
## Examples  
 <span data-ttu-id="31b2e-1253">次の例は、<xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29?displayProperty=nameWithType> メソッドを使用して、特定のスタイルを持つ数値の文字列形式を解析し、特定のカルチャの規則を使用して書式設定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1253">The following example demonstrates the use of the <xref:System.Single.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Single%40%29?displayProperty=nameWithType> method to parse the string representation of numbers that have a particular style and are formatted using the conventions of a particular culture.</span></span>  
  
 [!code-csharp[System.Single.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.single.tryparse/cs/tryparse1.cs#2)]
 [!code-vb[System.Single.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.single.tryparse/vb/tryparse1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="31b2e-1254"><paramref name="style" /> が <see cref="T:System.Globalization.NumberStyles" /> 値ではありません。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1254"><paramref name="style" /> is not a <see cref="T:System.Globalization.NumberStyles" /> value.</span></span>  
  
<span data-ttu-id="31b2e-1255">- または -</span><span class="sxs-lookup"><span data-stu-id="31b2e-1255">-or-</span></span> 
 <span data-ttu-id="31b2e-1256"><paramref name="style" /> は <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 値です。</span><span class="sxs-lookup"><span data-stu-id="31b2e-1256"><paramref name="style" /> is the <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> value.</span></span></exception>
        <altmember cref="M:System.Single.Parse(System.String)" />
        <altmember cref="M:System.Single.ToString" />
        <related type="Article" href="~/docs/standard/base-types/parsing-numeric.md"><span data-ttu-id="31b2e-1257">.NET での数値文字列の解析</span><span class="sxs-lookup"><span data-stu-id="31b2e-1257">Parsing Numeric Strings in .NET</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
