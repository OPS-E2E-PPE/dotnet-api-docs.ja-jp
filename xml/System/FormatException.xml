<Type Name="FormatException" FullName="System.FormatException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="07b6383d64284fcc3b4b1f5e1337e6777bd384aa" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75173078" /></Metadata><TypeSignature Language="C#" Value="public class FormatException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FormatException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.FormatException" />
  <TypeSignature Language="VB.NET" Value="Public Class FormatException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormatException : SystemException" />
  <TypeSignature Language="F#" Value="type FormatException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>引数の形式が無効である場合、または<see href="https://docs.microsoft.com/dotnet/standard/base-types/composite-formatting">複合書式指定文字列</see>が整形式でない場合にスローされる例外。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.FormatException> 例外は、次のいずれかの理由でスローされる可能性があります。  
  
-   文字列を他のデータ型に変換するメソッドの呼び出しでは、文字列が必要なパターンに準拠していません。 これは通常、<xref:System.Convert> クラスの一部のメソッドと、一部の型の `Parse` および `ParseExact` メソッドを呼び出すときに発生します。  
  
     特に、変換する文字列がユーザーによって入力された場合、またはファイルから読み取る場合、変換に失敗した場合は、`try/catch` ブロックを使用して <xref:System.FormatException> 例外を処理する必要があります。 また、変換メソッドの呼び出しを、`TryParse` または `TryParseExact` メソッドの呼び出し (存在する場合) に置き換えることもできます。 ただし、定義済みまたはハードコードされた文字列を解析しようとしたときにスローされる <xref:System.FormatException> 例外は、プログラムエラーを示します。 この場合は、例外を処理するのではなく、エラーを修正する必要があります。  
  
     文字列を <xref:System> 名前空間の次の型に変換すると、<xref:System.FormatException> 例外がスローされる可能性があります。  
  
    -   <xref:System.Boolean> で初期化します。 <xref:System.Boolean.Parse%28System.String%29?displayProperty=nameWithType> メソッドと <xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType> メソッドでは、文字列を "True"、"true"、"False"、または "false" に変換する必要があります。 それ以外の値は、<xref:System.FormatException> 例外をスローします。  
  
    -   <xref:System.DateTime> および <xref:System.DateTimeOffset>。 すべての日付と時刻のデータは、特定のカルチャの書式指定規則 (現在のスレッドカルチャ (場合によっては、現在のアプリケーションドメインカルチャ)、インバリアントカルチャ、または指定されたカルチャ) に基づいて解釈されます。 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドと <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドを呼び出す場合、日付と時刻のデータも、メソッドの呼び出しで引数として指定された1つ以上の[標準書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)または[カスタム書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)で指定されたパターンに*正確*に準拠している必要があります。 想定されるカルチャ固有のパターンに準拠していない場合は、<xref:System.FormatException> 例外がスローされます。 これは、あるシステムでカルチャ固有の形式で保存された日付と時刻のデータが、別のシステムでは正常に解析されない可能性があることを意味します。  
  
         日付と時刻の解析の詳細については、「[日付と時刻の文字列の解析](~/docs/standard/base-types/parsing-datetime.md)」と、例外をスローしたメソッドのドキュメントを参照してください。  
  
    -   **Guid.** GUID の文字列形式は、32の16進数 (0 ~ F) で構成する必要があり、<xref:System.Guid.ToString%2A?displayProperty=nameWithType> メソッドによって出力される5つの形式のいずれかである必要があります。 詳細については、<xref:System.Guid.Parse%2A?displayProperty=nameWithType> メソッドを参照してください。  
  
    -   **数値型。すべての符号付き整数、符号なし整数、および浮動小数点型が含まれます。** 解析する文字列は、ラテン数字0-9 で構成されている必要があります。 正または負の符号、桁区切り記号、桁区切り記号、および通貨記号を使用することもできます。 他の文字を含む文字列を解析しようとすると、常に <xref:System.FormatException> 例外がスローされます。  
  
         すべての数値文字列は、現在のスレッドカルチャ (場合によっては、現在のアプリケーションドメインカルチャ)、インバリアントカルチャ、または指定されたカルチャの書式指定規則に基づいて解釈されます。 その結果、あるカルチャの規則を使用して解析された数値文字列は、別のカルチャの規則を使用すると失敗する可能性があります。  
  
         数値文字列の解析の詳細については、「[数値文字列の解析](~/docs/standard/base-types/parsing-numeric.md)」と、例外をスローした特定のメソッドのドキュメントを参照してください。  
  
    -   **時間間隔。** 解析する文字列は、カルチャに依存しない固定形式、または現在のスレッドカルチャ (場合によっては、現在のアプリケーションドメインカルチャ)、インバリアントカルチャ、または指定されたカルチャによって定義されるカルチャに依存する形式である必要があります。 文字列が適切な形式ではない場合、または、時間間隔の日、時間、および分の部分が存在しない場合、解析メソッドは <xref:System.FormatException> 例外をスローします。 詳細については、例外をスローした <xref:System.TimeSpan> 解析メソッドのドキュメントを参照してください。  
  
-   型は <xref:System.IFormattable> インターフェイスを実装します。このインターフェイスは、オブジェクトを文字列形式に変換する方法を定義する書式指定文字列をサポートします。また、無効な書式指定文字列が使用されます。 これは、書式設定操作で最も一般的です。 次の例では、数値を書式設定するために、複合書式指定文字列で "Q" 標準書式指定文字列が使用されています。 ただし、"Q" は有効な[標準書式指定文字列](~/docs/standard/base-types/standard-numeric-format-strings.md)ではありません。  
  
     [!code-csharp[System.FormatException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable1.cs#7)]
     [!code-vb[System.FormatException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable1.vb#7)]  
  
     この例外は、コーディングエラーが発生した場合に発生します。 エラーを修正するには、書式指定文字列を削除するか、有効な文字列を置き換えます。 次の例では、無効な書式指定文字列を "C" (通貨) 書式指定文字列に置き換えることで、エラーを修正します。  
  
     [!code-csharp[System.FormatException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable2.cs#8)]
     [!code-vb[System.FormatException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable2.vb#8)]  
  
     <xref:System.FormatException> 例外は、書式指定文字列で指定されたパターンに厳密に準拠するように文字列を解析する必要がある <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> や <xref:System.Guid.ParseExact%2A?displayProperty=nameWithType>などの解析メソッドによってスローされることもあります。 次の例では、GUID の文字列表現が "G" 標準書式指定文字列によって指定されたパターンに準拠していると想定されています。 ただし、<xref:System.Guid> 構造体の <xref:System.IFormattable> の実装では、"G" 書式指定文字列はサポートされていません。  
  
     [!code-csharp[System.FormatException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable3.cs#9)]
     [!code-vb[System.FormatException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable3.vb#9)]  
  
     この例外は、コードエラーによっても発生します。 これを修正するには、<xref:System.DateTime.Parse%2A?displayProperty=nameWithType> や <xref:System.Guid.Parse%2A?displayProperty=nameWithType>などの正確な形式を必要としない解析メソッドを呼び出すか、または有効な書式指定文字列に置き換えます。 次の例では、<xref:System.Guid.Parse%2A?displayProperty=nameWithType> メソッドを呼び出してエラーを修正します。  
  
     [!code-csharp[System.FormatException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable4.cs#10)]
     [!code-vb[System.FormatException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable4.vb#10)]  
  
-   [複合書式指定文字列](~/docs/standard/base-types/composite-formatting.md)の書式項目の1つ以上のインデックスが、オブジェクトリストまたはパラメーター配列内の項目のインデックスより大きくなっています。 次の例では、書式指定文字列の書式項目の最大インデックスは3です。 オブジェクトリスト内の項目のインデックスは0から始まるため、この書式指定文字列では、オブジェクトリストに4つの項目を含める必要があります。 代わりに、3つの、`dat`、`temp`、および `scale`のみがあるため、コードは実行時に <xref:System.FormatException> 例外になります。  
  
     [!code-csharp[System.FormatException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example1.cs#1)]
     [!code-vb[System.FormatException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example1.vb#1)]  
  
     この場合、<xref:System.FormatException> 例外は、開発者エラーの結果です。 オブジェクトリスト内の各項目が書式指定項目のインデックスに対応することを確認することで、`try/catch` ブロックで処理するのではなく、修正する必要があります。 この例を修正するには、2番目の書式指定項目のインデックスを変更して `dat` 変数を参照し、後続の各書式項目のインデックスを1つずつデクリメントします。  
  
     [!code-csharp[System.FormatException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example2.cs#2)]
     [!code-vb[System.FormatException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example2.vb#2)]  
  
-   複合書式指定文字列が整形式ではありません。 これが発生すると、<xref:System.FormatException> 例外は常に開発者エラーの結果になります。 これは、`try/catch` ブロックで処理されるのではなく、修正する必要があります。  
  
     次の例に示すように、リテラル中かっこを文字列に含めようとすると、例外がスローされます。  
  
     [!code-csharp[System.String.Format#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#23)]
     [!code-vb[System.String.Format#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#23)]  
  
     複合書式指定文字列の中にリテラルかっこを含める場合の推奨される方法は、それらをオブジェクトリストに含め、書式項目を使用して結果文字列に挿入することです。 たとえば、次に示すように、前の複合書式指定文字列を変更できます。  
  
     [!code-csharp[System.String.Format#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#24)]
     [!code-vb[System.String.Format#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#24)]  
  
     この例外は、書式指定文字列にタイプミスが含まれている場合にもスローされます。 次の <xref:System.String.Format%2A?displayProperty=nameWithType> メソッドの呼び出しでは、右中かっこを省略し、左中かっこと右角かっこを組み合わせています。  
  
     [!code-csharp[System.FormatException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example3.cs#3)]
     [!code-vb[System.FormatException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example3.vb#3)]  
  
     エラーを修正するには、左中かっこと終わりかっこがすべて対応していることを確認します。  
  
     [!code-csharp[System.FormatException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example3.cs#4)]
     [!code-vb[System.FormatException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example3.vb#4)]  
  
-   厳密に型指定されたパラメーター配列として複合書式指定メソッドにオブジェクトリストを指定したが、<xref:System.FormatException> 例外は、1つ以上の書式項目のインデックスがオブジェクトリストの引数の数を超えていることを示しています。 これは、配列型の間の明示的な変換が存在しないために、コンパイラが配列をパラメーター配列ではなく単一の引数として処理するためです。 たとえば、次の <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> メソッドの呼び出しでは、<xref:System.FormatException> 例外がスローされます。ただし、書式項目の最大インデックスは3であり、<xref:System.Int32> 型のパラメーター配列には4つの要素があります。  
  
     [!code-csharp[System.FormatException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/qa1.cs#5)]
     [!code-vb[System.FormatException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/qa1.vb#5)]  
  
     この例外を処理するのではなく、その原因を排除する必要があります。 Visual Basic もC#整数配列もオブジェクト配列に変換できないので、複合書式指定メソッドを呼び出す前に、変換を自分で実行する必要があります。 次の例では、1つの実装を示します。  
  
     [!code-csharp[System.FormatException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/qa2.cs#6)]
     [!code-vb[System.FormatException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/qa2.vb#6)]  
  
 <xref:System.FormatException> では、値0x80131537 を持つ HRESULT COR_E_FORMAT を使用します。  
  
 <xref:System.FormatException> クラスは <xref:System.Exception> から派生し、一意のメンバーを追加しません。 <xref:System.FormatException>インスタンスの初期プロパティ値の一覧については、<xref:System.FormatException.%23ctor%2A>コンストラクターを参照してください。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">例外の処理とスロー</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.FormatException" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.FormatException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、新しいインスタンスの <xref:System.Exception.Message%2A> プロパティを、"無効な形式" など、エラーを説明するシステム提供のメッセージに初期化します。 このメッセージは、システムの現在のカルチャを考慮して指定します。  
  
 <xref:System.FormatException> インスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 参照 (Visual Basic の場合は `Nothing`)。|  
|<xref:System.Exception.Message%2A>|ローカライズされたエラー メッセージの文字列です。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new FormatException : string -&gt; FormatException" Usage="new System.FormatException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">エラーについて説明するメッセージ。</param>
        <summary>指定したエラー メッセージを使用して、<see cref="T:System.FormatException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、<xref:System.Exception.Message%2A?displayProperty=nameWithType>パラメーターを使用して、新しい例外の`message`プロパティを初期化します。 `message` の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステム環境向けにローカライズされていることを確認する必要があります。  
  
 <xref:System.FormatException> インスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|null 参照 (Visual Basic の場合は `Nothing`)。|  
|<xref:System.Exception.Message%2A>|エラー メッセージ文字列です。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FormatException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; FormatException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new FormatException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; FormatException" Usage="new System.FormatException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info">シリアル化されたオブジェクトのデータを保持するオブジェクト。</param>
        <param name="context">転送元または転送先に関するコンテキスト情報です。</param>
        <summary>シリアル化されたデータを使用して <see cref="T:System.FormatException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、シリアル化解除の際に呼び出されて、ストリームで送信された例外オブジェクトを再構成します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new FormatException : string * Exception -&gt; FormatException" Usage="new System.FormatException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">例外の原因を説明するエラー メッセージ。</param>
        <param name="innerException">現在の例外の原因になった例外。 <paramref name="innerException" /> パラメーターが null 参照 (Visual Basic の場合は <see langword="Nothing" />) でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
        <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.FormatException" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前の例外の直接の結果としてスローされる例外については、<xref:System.Exception.InnerException%2A> プロパティに、前の例外への参照を含める必要があります。 <xref:System.Exception.InnerException%2A> プロパティは、コンストラクターに渡されたものと同じ値を返します。内部例外値がコンストラクターに渡されなかった場合、`Nothing` プロパティはnull 参照 (Visual Basic の場合は <xref:System.Exception.InnerException%2A>) を返します。  
  
 <xref:System.FormatException> インスタンスの初期プロパティ値を次の表に示します。  
  
|プロパティ|値|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|内部例外の参照です。|  
|<xref:System.Exception.Message%2A>|エラー メッセージ文字列です。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">例外の処理とスロー</related>
      </Docs>
    </Member>
  </Members>
</Type>
