<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4d49cf32248451109bfd83a0da3e2244c7634b58" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75172831" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>オブジェクトの値のカスタム書式設定をサポートするメソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter> インターフェイスには、<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>の1つのメソッドが含まれています。 このインターフェイスが参照型または値型によって実装されている場合、<xref:System.ICustomFormatter.Format%2A> メソッドは、オブジェクトの値のカスタム書式の文字列形式を返します。  
  
 通常、<xref:System.ICustomFormatter> インターフェイスは、<xref:System.IFormatProvider> パラメーターを含む 2 .NET Framework つの複合文字列書式指定メソッドの動作をカスタマイズするために、<xref:System.IFormatProvider> インターフェイスと共に実装されます。 具体的には、<xref:System.ICustomFormatter> インターフェイスは、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> メソッドおよび <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> メソッドに渡されるオブジェクトの値のカスタム書式設定を提供できます。  
  
 オブジェクトの値のカスタム表現を指定するには、次の操作を行う必要があります。  
  
1.  <xref:System.ICustomFormatter> インターフェイスと、その1つのメンバーである <xref:System.ICustomFormatter.Format%2A> メソッドを実装するクラスを定義します。  
  
2.  <xref:System.IFormatProvider> インターフェイスと、その1つのメンバーである <xref:System.IFormatProvider.GetFormat%2A> メソッドを実装するクラスを定義します。 <xref:System.IFormatProvider.GetFormat%2A> メソッドは、<xref:System.ICustomFormatter> の実装のインスタンスを返します。 多くの場合、1つのクラスは <xref:System.ICustomFormatter> と <xref:System.IFormatProvider>の両方を実装します。 その場合、クラスの `GetFormat` 実装は、それ自体のインスタンスだけを返します。  
  
3.  <xref:System.IFormatProvider> の実装を、<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> メソッドまたは比較可能なメソッドの `provider` 引数として渡します。  
  
 .NET Framework メソッドは、独自の書式設定ではなく、カスタム書式設定を使用します。  
  
   
  
## Examples  
 次の例では <xref:System.ICustomFormatter> を実装して、整数値のバイナリ、8進数、および16進数の書式設定を許可しています。 この例では、1つのクラス `IBinaryFormatter`が <xref:System.ICustomFormatter> と <xref:System.IFormatProvider>の両方を実装しています。 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> メソッドは、`formatType` パラメーターが <xref:System.ICustomFormatter> の型を表すかどうかを判断します。 存在する場合、`BinaryFormatter` はそれ自体のインスタンスを返します。それ以外の場合は `null`を返します。 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 実装では、format パラメーターが、サポートされている3つの書式指定文字列 (バイナリの場合は "B"、8進数の場合は "H"、16進数の場合は "H") のいずれかであるかどうかを判断し、`arg` パラメーターを適切に書式設定します。 それ以外の場合、`arg` が `null`ない場合は、`arg` パラメーターの <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 実装 (存在する場合)、またはパラメーターなしの `ToString` メソッド (存在しない場合) を呼び出します。 `arg` が `null` の場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithType> を返します。  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 次の例に示すように、`BinaryFormatter` を使用すると、`BinaryFormatter` オブジェクトを <xref:System.String.Format%2A> メソッドの `provider` パラメーターとして渡すことによって、カスタム書式設定を提供できます。  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>共通言語ランタイムは、複合書式指定文字列のすべての書式項目に対して、<see cref="T:System.ICustomFormatter" /> の実装を使用しようとします。 そのため、<see cref="T:System.ICustomFormatter" /> の実装は、処理するように設計されていないオブジェクトまたは値に書式設定サービスを提供するために呼び出されることを想定してください。 このような場合は、<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> メソッドで、そのオブジェクトまたは値の適切な書式設定メソッドを呼び出す必要があります。  
  
<see cref="T:System.ICustomFormatter" /> 実装には、組み込みと拡張の2種類があります。  
  
組み込みの実装は、アプリケーション定義のオブジェクトのカスタム書式設定を提供する実装です。 この場合、実装には次のものが含まれている必要があります。 
-オブジェクトの書式を定義する書式指定文字列の定義。 書式指定文字列は省略可能です。 通常、"G" または "g" 書式指定文字列は、一般 (または最も一般的に使用される) 形式を定義します。 ただし、任意の書式指定文字列を自由に定義できます。 また、大文字小文字を区別するか、大文字と小文字を区別しないかを自由に決定できます。  
  
-<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> メソッドに渡されるオブジェクトの型がアプリケーション定義型であることを確認するためのテスト。 そうでない場合は、オブジェクトの <see cref="T:System.IFormattable" /> 実装 (存在する場合) を呼び出す必要があります。実装されていない場合は、その <see cref="M:System.Object.ToString" /> メソッドを呼び出す必要があります。 これらのメソッド呼び出しがスローする可能性のある例外を処理するための準備を行う必要があります。  
  
-実装で書式指定文字列がサポートされている場合は、null 書式指定文字列を処理するコード。 最も一般的な方法は、null 書式指定文字列を汎用書式指定子に置き換えることです。  
  
-実装でサポートされている任意の書式指定文字列を処理するコード。  
  
-サポートしていない書式指定文字列を処理するコード。 最も一般的な方法は <see cref="T:System.FormatException" />をスローすることですが、既定の書式を指定することもできます。  
  
拡張機能の実装は、既に書式設定をサポートしている型のカスタム書式設定を提供する実装です。 たとえば、特定の数字の間にハイフンを使用して整数型を書式設定する、<c>顧客番号のフォーマッタ</c>を定義できます。 この場合、実装には次のものが含まれている必要があります。 
-オブジェクトの書式設定を拡張する書式指定文字列の定義。 これらの書式指定文字列は必須ですが、型の既存の書式指定文字列と競合しないようにする必要があります。 たとえば、<see cref="T:System.Int32" /> 型の書式を拡張する場合は、"C"、"D"、"E"、"F"、"G" の各書式指定子を実装しないようにする必要があります。  
  
-<see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> メソッドに渡されるオブジェクトの型が、拡張機能でサポートされている書式設定を持つ型であることをテストします。 そうでない場合は、オブジェクトの <see cref="T:System.IFormattable" /> 実装 (存在する場合)、またはオブジェクトのパラメーターなしの <see cref="M:System.Object.ToString" /> メソッド (存在しない場合) を呼び出します。 これらのメソッド呼び出しがスローする可能性のある例外を処理するための準備を行う必要があります。  
  
-拡張機能でサポートされている任意の書式指定文字列を処理するコード。  
  
-拡張機能でサポートされていない任意の書式指定文字列を処理するコード。 これらは、型の <see cref="T:System.IFormattable" /> 実装に渡す必要があります。 これらのメソッド呼び出しがスローする可能性のある例外を処理するための準備を行う必要があります。</para></block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">書式設定の仕様を含む書式文字列。</param>
        <param name="arg">書式指定するオブジェクト。</param>
        <param name="formatProvider">現在のインスタンスに関する書式情報を提供するオブジェクト。</param>
        <summary>指定した形式およびカルチャ固有の書式設定情報を使用して、指定したオブジェクトの値をそれと等価の文字列形式に変換します。</summary>
        <returns><paramref name="arg" /> と <paramref name="format" /> の指定のとおりに書式設定された、<paramref name="formatProvider" /> の値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> はコールバック メソッドです。 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> や <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>などのカスタム書式設定をサポートするメソッドによって呼び出されます。 実装は、[複合書式指定文字列](~/docs/standard/base-types/composite-formatting.md)の書式指定項目ごとに1回呼び出されます。 たとえば、次のステートメントでは、<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> メソッドが3回呼び出されます。  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg` パラメーターは、オブジェクトリスト内のオブジェクトのうち、0から始まる位置が特定の書式指定項目のインデックスに対応するオブジェクトです。  
  
 `format` パラメーターには、書式設定項目の `formatString` コンポーネントである書式指定文字列が含まれています。 書式指定項目に `formatString` コンポーネントがない場合、`format` の値は `null`ます。 `format` が `null`場合、`arg`の種類によっては、選択した既定の書式設定を使用できる場合があります。  
  
 `formatProvider` パラメーターは `arg`の書式を提供する <xref:System.IFormatProvider> の実装です。 通常は、<xref:System.ICustomFormatter> 実装のインスタンスです。 `formatProvider` が `null`場合は、そのパラメーターを無視します。  
  
 <xref:System.ICustomFormatter.Format%2A> メソッドの実装には、サポートしていない書式設定を提供できるよう .NET Framework に、次の機能を含める必要があります。 書式指定メソッドで形式がサポートされていない場合は、書式設定されているオブジェクトが <xref:System.IFormattable> インターフェイスを実装しているかどうかを確認します。 存在する場合は、そのインターフェイスの <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> メソッドを呼び出します。 それ以外の場合は、基になるオブジェクトの既定の <xref:System.Object.ToString%2A?displayProperty=nameWithType> メソッドを呼び出します。 次のコードは、このパターンを示しています。  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 次の例では <xref:System.ICustomFormatter> を実装して、整数値のバイナリ、8進数、および16進数の書式設定を許可しています。 <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> 実装では、format パラメーターが、サポートされている3つの書式指定文字列 (バイナリの場合は "B"、8進数の場合は "H"、16進数の場合は "H") のいずれかであるかどうかを判断し、`arg` パラメーターを適切に書式設定します。 それ以外の場合、`arg` が `null`ない場合は、`arg` パラメーターの <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> 実装 (存在する場合)、またはパラメーターなしの `ToString` メソッド (存在しない場合) を呼び出します。 `arg` が `null` の場合、メソッドは <xref:System.String.Empty?displayProperty=nameWithType> を返します。  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 次の例に示すように、`BinaryFormatter` を使用すると、`BinaryFormatter` オブジェクトを <xref:System.String.Format%2A> メソッドの `provider` パラメーターとして渡すことによって、カスタム書式設定を提供できます。  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">複合書式設定</related>
      </Docs>
    </Member>
  </Members>
</Type>
