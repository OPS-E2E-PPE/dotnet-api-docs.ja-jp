<Type Name="Func&lt;T,TResult&gt;" FullName="System.Func&lt;T,TResult&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fafe1d626b4447cd0efc2a32b6d36c712a12b87e" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82441512" /></Metadata><TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T,out TResult&gt;(T arg);" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;- T, + TResult&gt; extends System.MulticastDelegate" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Func`2" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T, Out TResult)(arg As T) As TResult " FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T, typename TResult&gt;&#xA;public delegate TResult Func(T arg);" />
  <TypeSignature Language="F#" Value="type Func&lt;'T, 'Result&gt; = delegate of 'T -&gt; 'Result" />
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;T,TResult&gt;(T arg);" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`2&lt;T, TResult&gt; extends System.MulticastDelegate" FrameworkAlternate="netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of T, TResult)(arg As T) As TResult " FrameworkAlternate="netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Core" FromVersion="4.0.0.0" To="mscorlib" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
    <TypeForwarding From="System.Core" FromVersion="2.0.5.0" To="mscorlib" ToVersion="2.0.5.0" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T"><span data-ttu-id="2ea66-101">このデリゲートによってカプセル化されるメソッドのパラメーターの型。</span><span class="sxs-lookup"><span data-stu-id="2ea66-101">The type of the parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="TResult"><span data-ttu-id="2ea66-102">このデリゲートによってカプセル化されるメソッドの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="2ea66-102">The type of the return value of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg"><span data-ttu-id="2ea66-103">このデリゲートによってカプセル化されるメソッドのパラメーター。</span><span class="sxs-lookup"><span data-stu-id="2ea66-103">The parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="2ea66-104">1 つのパラメーターを受け取って <typeparamref name="TResult" /> パラメーターに指定された型の値を返すメソッドをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="2ea66-104">Encapsulates a method that has one parameter and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span></span></summary>
    <returns><span data-ttu-id="2ea66-105">このデリゲートによってカプセル化されるメソッドの戻り値。</span><span class="sxs-lookup"><span data-stu-id="2ea66-105">The return value of the method that this delegate encapsulates.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2ea66-106">このデリゲートを使用すると、カスタムデリゲートを明示的に宣言しなくてもパラメーターとして渡すことができるメソッドを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="2ea66-106">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="2ea66-107">カプセル化されたメソッドは、このデリゲートで定義されているメソッドシグネチャに対応している必要があります。</span><span class="sxs-lookup"><span data-stu-id="2ea66-107">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="2ea66-108">つまり、カプセル化されたメソッドは、値によって渡される1つのパラメーターを持つ必要があり、値を返す必要があることを意味します。</span><span class="sxs-lookup"><span data-stu-id="2ea66-108">This means that the encapsulated method must have one parameter that is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2ea66-109">1つのパラメーターを持つメソッドを参照して `void` (または `Function`ではなく `Sub` として宣言された Visual Basic で) を返すには、代わりに汎用 <xref:System.Action%601> デリゲートを使用します。</span><span class="sxs-lookup"><span data-stu-id="2ea66-109">To reference a method that has one parameter and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%601> delegate instead.</span></span>  
  
 <span data-ttu-id="2ea66-110"><xref:System.Func%602> デリゲートを使用する場合、1つのパラメーターを持つメソッドをカプセル化するデリゲートを明示的に定義する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2ea66-110">When you use the <xref:System.Func%602> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="2ea66-111">たとえば、次のコードでは、`ConvertMethod` という名前のデリゲートを明示的に宣言し、そのデリゲートインスタンスに `UppercaseString` メソッドへの参照を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="2ea66-111">For example, the following code explicitly declares a delegate named `ConvertMethod` and assigns a reference to the `UppercaseString` method to its delegate instance.</span></span>  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Delegate.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Delegate.vb" id="Snippet1":::
  
 <span data-ttu-id="2ea66-112">次の例では、新しいデリゲートを明示的に定義し、名前付きメソッドを割り当てるのではなく、<xref:System.Func%602> デリゲートをインスタンス化することによって、このコードを簡略化します。</span><span class="sxs-lookup"><span data-stu-id="2ea66-112">The following example simplifies this code by instantiating the <xref:System.Func%602> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Func2_1.cs" interactive="try-dotnet-method" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Func2_1.vb" id="Snippet2":::
  
 <span data-ttu-id="2ea66-113">次の例に示すように、のC#匿名メソッドで <xref:System.Func%602> デリゲートを使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="2ea66-113">You can also use the <xref:System.Func%602> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="2ea66-114">(匿名メソッドの概要については、「[匿名メソッド](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="2ea66-114">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Anon.cs" interactive="try-dotnet-method" id="Snippet3":::
  
 <span data-ttu-id="2ea66-115">次の例に示すように、ラムダ式を <xref:System.Func%602> デリゲートに割り当てることもできます。</span><span class="sxs-lookup"><span data-stu-id="2ea66-115">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="2ea66-116">(ラムダ式の概要については、「[ラムダ式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)」と「[ラムダ式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="2ea66-116">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Lambda.cs" interactive="try-dotnet-method" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Lambda.vb" id="Snippet4":::
 
 <span data-ttu-id="2ea66-117">ラムダ式の基になる型は、ジェネリック `Func` デリゲートの1つです。</span><span class="sxs-lookup"><span data-stu-id="2ea66-117">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="2ea66-118">これにより、ラムダ式をデリゲートに明示的に代入せずに、パラメーターとして渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="2ea66-118">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="2ea66-119">特に、<xref:System.Linq> 名前空間の型の多くのメソッドには <xref:System.Func%602> パラメーターがあるため、<xref:System.Func%602> デリゲートを明示的にインスタンス化せずに、これらのメソッドにラムダ式を渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="2ea66-119">In particular, because many methods of types in the <xref:System.Linq> namespace have <xref:System.Func%602> parameters, you can pass these methods a lambda expression without explicitly instantiating a <xref:System.Func%602> delegate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2ea66-120">次の例は、<xref:System.Func%602> デリゲートを宣言して使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2ea66-120">The following example demonstrates how to declare and use a <xref:System.Func%602> delegate.</span></span> <span data-ttu-id="2ea66-121">この例では、<xref:System.Func%602> 変数を宣言し、文字列内の文字を大文字に変換するラムダ式を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="2ea66-121">This example declares a <xref:System.Func%602> variable and assigns it a lambda expression that converts the characters in a string to uppercase.</span></span> <span data-ttu-id="2ea66-122">その後、このメソッドをカプセル化するデリゲートは、文字列の配列の文字列を大文字に変更するために <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="2ea66-122">The delegate that encapsulates this method is subsequently passed to the <xref:System.Linq.Enumerable.Select%2A?displayProperty=nameWithType> method to change the strings in an array of strings to uppercase.</span></span>  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~2/cs/Example.cs" interactive="try-dotnet-method" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~2/vb/Example.vb" id="Snippet5":::
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md"><span data-ttu-id="2ea66-123">ラムダ式 (C# プログラミング ガイド)</span><span class="sxs-lookup"><span data-stu-id="2ea66-123">Lambda Expressions (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md"><span data-ttu-id="2ea66-124">ラムダ式 (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2ea66-124">Lambda Expressions (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/delegates/index.md"><span data-ttu-id="2ea66-125">デリゲート (C# プログラミング ガイド)</span><span class="sxs-lookup"><span data-stu-id="2ea66-125">Delegates (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/delegates/index.md"><span data-ttu-id="2ea66-126">デリゲート (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="2ea66-126">Delegates (Visual Basic)</span></span></related>
  </Docs>
</Type>
