<Type Name="DateTime" FullName="System.DateTime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ffa73269fc4ec31a4a1168dea0317d9f054aa065" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78828306" /></Metadata><TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IConvertible&#xA;    interface IFormattable" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IConvertible, IEquatable(Of DateTime), IFormattable, ISerializable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System::Runtime::Serialization::ISerializable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IConvertible&#xA;    interface IFormattable&#xA;    interface ISerializable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IConvertible, IFormattable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IConvertible, class System.IFormattable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IConvertible, IFormattable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IConvertible, IFormattable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable&#xA;    interface IConvertible&#xA;    interface ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IEquatable&lt;DateTime&gt;, IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="VB.NET" Value="Public Structure DateTime&#xA;Implements IComparable, IComparable(Of DateTime), IEquatable(Of DateTime), IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="C++ CLI" Value="public value class DateTime : IComparable, IComparable&lt;DateTime&gt;, IEquatable&lt;DateTime&gt;, IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <TypeSignature Language="F#" Value="type DateTime = struct&#xA;    interface IFormattable" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>特定の時点を表します。通常、日時形式で表されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

## <a name="quick-links-to-example-code"></a>コード例へのクイックリンク

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

この記事には、`DateTime` の種類を使用する例がいくつか含まれています。

**初期化の例**      
- [コンストラクターを呼び出す](#initialization-01)
- [暗黙のパラメーターなしのコンストラクターを呼び出す](#initialization-02)
- [戻り値からの割り当て](#initialization-03)
- [日付と時刻を表す文字列を解析する](#initialization-04)
- [日付と時刻を初期化する Visual Basic 構文](#initialization-05)

**文字列としての `DateTime` オブジェクトの書式設定**  
- [既定の日付と時刻の形式を使用する](#formatting-01)
- [特定のカルチャを使用して日付と時刻を書式設定する](#formatting-02)
- [標準またはカスタムの書式指定文字列を使用して日付時刻を書式設定する](#formatting-03)
- [書式指定文字列と特定のカルチャの両方を指定する](#formatting-04)
- [Web サービスの ISO 8601 標準を使用して日付時刻を書式設定する](#formatting-05)

**`DateTime` オブジェクトとしての文字列の解析**  
- [`Parse` または `TryParse` を使用して文字列を日付と時刻に変換する](#parsing-01)
- [`ParseExact` または `TryParseExact` を使用して、既知の形式で文字列を変換する](#parsing-02)
- [ISO 8601 文字列形式から日付と時刻に変換します。](#parsing-03)

**`DateTime` の解決方法**  
- [日付と時刻の値の解決方法を調べる](#resolution-01)
- [許容範囲内での等しいかどうかの比較](#comparison-01)

**カルチャとカレンダー**  
- [カルチャ固有の暦を使用して日付と時刻の値を表示する](#calendars-01)
- [カルチャ固有の暦に従って文字列を解析する](#calendars-02)
- [特定のカルチャの暦から日付と時刻を初期化する](#calendars-03)
- [特定のカルチャのカレンダーを使用した日付と時刻のプロパティへのアクセス](#calendars-04)
- [カルチャ固有の暦を使用して年の通算週を取得する](#calendars-05)

**永続化**  
- [日付と時刻の値を文字列としてローカルタイムゾーンに保持する](#persistence-01)
- [カルチャおよび時刻の不変の形式で文字列として日付と時刻の値を保持する](#persistence-02)
- [日付と時刻の値を整数として保持する](#persistence-03)
- [`XmlSerializer` を使用した日付と時刻の値の保持](#persistence-04)
- [`BinaryFormatter` を使用した日付と時刻の値の保持](#persistence-05)
- [日付と時刻の値をタイムゾーンデータで保持する](#persistence-06)

## <a name="quick-links-to-remarks-topics"></a>「解説」トピックへのクイックリンク。

このセクションには、`DateTime` 構造体の一般的な使用方法に関するトピックが含まれています。
  
- [`DateTime` オブジェクトの初期化](#initializing-a-datetime-object)
- [DateTime 値とその文字列形式](#datetime-values-and-their-string-representations)
- [文字列からの DateTime 値の解析](#parsing-datetime-values-from-strings)
- [DateTime 値](#datetime-values)
- [DateTime 操作](#datetime-operations)
- [DateTime の解決](#datetime-resolution)
- [DateTime 値とカレンダー](#datetime-values-and-calendars)
- [DateTime 値の保持](#persisting-datetime-values)
- [DateTime と TimeSpan](#datetime-vs-timespan)
- [許容範囲内での等しいかどうかの比較](#comparing-for-equality-within-tolerance)
- [COM 相互運用の考慮事項](#com-interop-considerations)
   
<xref:System.DateTime> 値の型は、00:00:00 (午前0時) から0001キリスト Domini (共通時代 (年号) までの範囲の値を含む日付と時刻を表します 9999 11:59:59。 西暦グレゴリオ暦。  
  
時刻値は、ティックと呼ばれる100ナノ秒単位で測定されます。 特定の日付は、0001年1月1日午前12:00 時からのタイマー刻みの数です。 西暦<xref:System.Globalization.GregorianCalendar> カレンダーに含まれています。 この数値には、閏月によって追加されるティックは含まれません。 たとえば、31241376000000000L のティック値は、12:00:00 0100 年1月01日金曜日の午前0時を表します。 <xref:System.DateTime> 値は常に、明示的または既定の暦のコンテキストで表されます。  
  
> [!NOTE]
>  分数や秒などの他の時間間隔に変換するティック値を使用している場合は、変換を実行するために、<xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>、<xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>、<xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>、<xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>、または <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType> 定数を使用する必要があります。 たとえば、指定されたタイマー刻みの数で表される秒数を <xref:System.DateTime> 値の <xref:System.DateTime.Second%2A> コンポーネントに追加するには、`dateValue.Second + nTicks/Timespan.TicksPerSecond`式を使用します。  

この記事では、 [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/)または[C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) GitHub の docs リポジトリから、例のセット全体のソースを表示できます。

> [!NOTE]
>  特定のタイムゾーンで日付と時刻の値を操作するための <xref:System.DateTime> 構造の代替手段は、<xref:System.DateTimeOffset> 構造です。 <xref:System.DateTimeOffset> 構造体は、日付と時刻の情報をプライベート <xref:System.DateTime> フィールドに格納し、その日付と時刻がプライベート <xref:System.Int16> フィールドの UTC と異なる時間を分単位で格納します。 これにより、<xref:System.DateTimeOffset> の値に特定のタイムゾーンの時刻を反映させることができます。一方、<xref:System.DateTime> の値には、UTC とローカルタイムゾーンの時刻のみを明確に反映させることができます。 日付と時刻の値を操作するときに <xref:System.DateTime> 構造または <xref:System.DateTimeOffset> 構造を使用する場合の説明については、「 [DateTime、DateTimeOffset、TimeSpan、および TimeZoneInfo の使い分け](~/docs/standard/datetime/choosing-between-datetime.md)」を参照してください。  
  
### <a name="initializing-a-datetime-object"></a>DateTime オブジェクトの初期化  

新しい `DateTime` 値に初期値を割り当てるには、さまざまな方法があります。

- コンストラクターを呼び出すと (値の引数を指定する場合)、暗黙のパラメーターなしのコンストラクターを使用することもできます。
- プロパティまたはメソッドの戻り値に `DateTime` を割り当てる。
- 文字列形式からの `DateTime` 値の解析。
- Visual Basic 固有の言語機能を使用して、`DateTime`をインスタンス化します。 

次のコードスニペットは、それぞれの例を示しています。

#### <a name="invoke-constructors"></a>コンストラクターの呼び出し

日付と時刻の値 (年、月、日、タイマー刻みの数など) の要素を指定する <xref:System.DateTime> コンストラクターの任意のオーバーロードを呼び出します。 次のコードでは、年、月、日、時、分、および秒を指定する <xref:System.DateTime> コンストラクターを使用して、特定の日付を作成します。  

<a name="initialization-01"></a> [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#1)]  
[!code-csharp[System.DateTime.Instantiation#1](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#1)]

`DateTime` を既定値に初期化する場合は、`DateTime` 構造体の暗黙のパラメーターなしのコンストラクターを呼び出します。 (値型の暗黙的なパラメーターなしのコンストラクターの詳細については、「[値型](~/docs/csharp/language-reference/keywords/value-types.md)」を参照してください)。一部のコンパイラでは、値を明示的に代入せずに <xref:System.DateTime> 値を宣言することもできます。 明示的な初期化を行わずに値を作成した場合も、既定値になります。 次の例は、と Visual Basic のC# <xref:System.DateTime> の暗黙的なパラメーターなしのコンストラクターと、Visual Basic に割り当てられていない <xref:System.DateTime> 宣言を示しています。  

<a name="initialization-02"></a>
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb" id="Snippet5":::
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/Instantiation.cs" interactive="try-dotnet-method" id="Snippet5":::
    
#### <a name="assigning-a-computed-value"></a>計算値の割り当て

<xref:System.DateTime> オブジェクトには、プロパティまたはメソッドによって返された日付と時刻の値を割り当てることができます。 次の例では、現在の日付と時刻、現在の世界協定時刻 (UTC) の日付と時刻、および現在の日付を3つの新しい <xref:System.DateTime> 変数に割り当てます。  

<a name="initialization-03"></a> [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#3)]  
[!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#3)]

#### <a name="parsing-a-string-that-represents-a-datetime"></a>DateTime を表す文字列を解析する

<xref:System.DateTime.Parse%2A>、<xref:System.DateTime.ParseExact%2A>、<xref:System.DateTime.TryParse%2A>、および <xref:System.DateTime.TryParseExact%2A> の各メソッドはすべて、文字列をそれと等価な日付と時刻の値に変換します。 次の例では、<xref:System.DateTime.Parse%2A> メソッドと <xref:System.DateTime.ParseExact%2A> メソッドを使用して文字列を解析し、それを <xref:System.DateTime> 値に変換します。 2番目の形式では、文字列形式の日付と時刻を表すの[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)標準でサポートされている形式を使用します。 この標準表現は、多くの場合、web サービスで日付情報を転送するために使用されます。

<a name="initialization-04"></a> [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#4)]  
[!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/System.DateTime/Instantiation.cs#4)]

<xref:System.DateTime.TryParse%2A> メソッドと <xref:System.DateTime.TryParseExact%2A> メソッドは、文字列が <xref:System.DateTime> 値の有効な表現であるかどうかを示します。文字列がの場合は、変換を実行します。  

#### <a name="language-specific-syntax-for-visual-basic"></a>Visual Basic の言語固有の構文

次の Visual Basic ステートメントは、新しい <xref:System.DateTime> 値を初期化します。  

<a name="initialization-05"></a> [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/System.DateTime/Instantiation.vb#2)]  

### <a name="datetime-values-and-their-string-representations"></a>DateTime 値とその文字列形式  

内部的には、すべての <xref:System.DateTime> 値は、0001年1月1日午前0時12:00:00 から経過したタイマー刻みの数 (100 ナノ秒間隔の数) として表されます。 実際の <xref:System.DateTime> 値は、表示されたときの値の表示方法とは関係ありません。 <xref:System.DateTime> 値の外観は、値を文字列形式に変換する書式設定操作の結果です。  
  
日付と時刻の値の外観は、カルチャ、国際基準、アプリケーションの要件、および個人設定によって異なります。 <xref:System.DateTime> 構造では、<xref:System.DateTime.ToString%2A>のオーバーロードを使用して日付と時刻の値の書式を柔軟に設定できます。 既定の <xref:System.DateTime.ToString?displayProperty=nameWithType> メソッドは、現在のカルチャの短い日付と長い形式の時刻パターンを使用して、日付と時刻の値の文字列形式を返します。 次の例では、既定の <xref:System.DateTime.ToString?displayProperty=nameWithType> メソッドを使用します。 現在のカルチャの短い日付パターンと長い時刻パターンを使用して、日付と時刻が表示されます。 En-us カルチャは、この例が実行されたコンピューター上の現在のカルチャです。  
  
<a name="formatting-01"></a> [!code-csharp[System.DateTime.Formatting#1](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#1)]
[!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#1)]  

場合によっては、特定のカルチャで日付の書式を設定して、サーバーがクライアントとは異なるカルチャに存在する可能性がある web シナリオをサポートする必要があります。 <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> メソッドを使用してカルチャを指定し、特定のカルチャで短い日付形式と長い時刻形式を作成します。 次の例では、<xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> メソッドを使用して、fr-fr カルチャの短い日付パターンと長い時刻パターンを使用して日付と時刻を表示します。  
  
<a name="formatting-02"></a>
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/StringFormat.cs" interactive="try-dotnet-method" id="Snippet2":::
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb" id="Snippet2":::

 他のアプリケーションでは、日付の異なる文字列形式が必要になる場合があります。 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> メソッドは、現在のカルチャの書式指定規則を使用して、標準またはカスタムの書式指定子によって定義された文字列形式を返します。 次の例では、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> メソッドを使用して、en-us カルチャ (例が実行されたコンピューター上の現在のカルチャ) の完全な日付と時刻のパターンを表示します。  
  
<a name="formatting-03"></a> [!code-csharp[System.DateTime.Formatting#3](~/samples/snippets/csharp/System.DateTime/StringFormat.cs#3)]
[!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb#3)]  

 最後に、<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを使用して、カルチャと形式の両方を指定できます。 次の例では、<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを使用して、fr-fr カルチャの完全な日付と時刻のパターンを表示します。  

<a name="formatting-04"></a>
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/StringFormat.cs" interactive="try-dotnet-method" id="Snippet4":::
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb" id="Snippet4":::

また、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> のオーバーロードをカスタム書式指定文字列と共に使用して、他の形式を指定することもできます。 次の例では、web サービスでよく使用される[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)標準形式を使用して文字列の書式を設定する方法を示します。 Iso 8601 形式には、対応する標準書式指定文字列がありません。

<a name="formatting-05"></a>
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/StringFormat.cs" interactive="try-dotnet-method" id="Snippet5":::
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/StringFormat.vb" id="Snippet5":::

<xref:System.DateTime> 値の書式設定の詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」および「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  

### <a name="parsing-datetime-values-from-strings"></a>文字列からの DateTime 値の解析

解析は、日付と時刻の文字列形式を <xref:System.DateTime> 値に変換します。 通常、日付と時刻の文字列には、アプリケーションで2つの異なる使用方法があります。  
  
-   日付と時刻は、さまざまな形式を取り、現在のカルチャまたは特定のカルチャの規則を反映しています。 たとえば、アプリケーションでは、現在のカルチャが en-us であるユーザーが "12/15/2013" または "December 15, 2013" という日付値を入力することを許可しています。 これにより、現在のカルチャが en gb であるユーザーが、日付値を "15/12/2013" または "15 December 2013" として入力できるようになります。  
  
-   日付と時刻は定義済みの形式で表されます。 たとえば、アプリケーションは、アプリが実行されているカルチャとは無関係に、日付を "20130103" としてシリアル化します。 アプリケーションでは、現在のカルチャの短い日付形式で日付を入力する必要がある場合があります。
  
<xref:System.DateTime.Parse%2A> または <xref:System.DateTime.TryParse%2A> メソッドを使用して、カルチャで使用される一般的な日時形式の1つから <xref:System.DateTime> 値に文字列を変換します。 次の例では、<xref:System.DateTime.TryParse%2A> を使用して、カルチャ固有のさまざまな形式の日付文字列を <xref:System.DateTime> の値に変換する方法を示します。 現在のカルチャを英語 (英国) に変更し、<xref:System.DateTime.GetDateTimeFormats> メソッドを呼び出して、日付と時刻の文字列の配列を生成します。 次に、配列内の各要素を <xref:System.DateTime.TryParse%2A> メソッドに渡します。 この例の出力は、解析メソッドがカルチャ固有の各日付と時刻の文字列を正常に変換できることを示しています。  
  
<a name="parsing-01"></a>
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/Parsing.cs" interactive="try-dotnet-method" id="Snippet1":::
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/Parsing.vb" id="Snippet1":::

<xref:System.DateTime.ParseExact%2A> および <xref:System.DateTime.TryParseExact%2A> メソッドを使用して、特定の形式または形式に一致する必要がある文字列を <xref:System.DateTime> 値に変換します。 1つまたは複数の日付と時刻の書式指定文字列を、解析メソッドのパラメーターとして指定します。 次の例では、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> メソッドを使用して、文字列を "yyyyMMdd" 形式または "HHmmss" 形式にする必要がある文字列を <xref:System.DateTime> の値に変換します。  
  
<a name="parsing-02"></a> [!code-csharp[System.DateTime.Parsing#2](~/samples/snippets/csharp/System.DateTime/Parsing.cs#2)]
[!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/System.DateTime/Parsing.vb#2)]  

<xref:System.DateTime.ParseExact%2A> の一般的な用途の1つは、web サービスから文字列形式を変換することです (通常は[ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html)標準形式)。 次のコードは、使用する正しい書式設定文字列を示しています。

<a name="parsing-03"></a>
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/Parsing.cs" interactive="try-dotnet-method" id="Snippet3":::
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/Parsing.vb" id="Snippet3":::

文字列を解析できない場合、<xref:System.DateTime.Parse%2A> メソッドと <xref:System.DateTime.ParseExact%2A> メソッドは例外をスローします。 <xref:System.DateTime.TryParse%2A> メソッドと <xref:System.DateTime.TryParseExact%2A> メソッドは、変換が成功したか失敗したかを示す <xref:System.Boolean> 値を返します。 パフォーマンスが重要なシナリオでは、<xref:System.DateTime.TryParse%2A> または <xref:System.DateTime.TryParseExact%2A> の方法を使用する必要があります。 日付と時刻の文字列の解析操作は、高いエラー率を持つ傾向があり、例外処理はコストが高くなります。 これらのメソッドは、文字列がユーザーによって入力された場合、または不明なソースからのものである場合に使用します。 
  
日付と時刻の値の解析の詳細については、「[日付と時刻の文字列の解析](~/docs/standard/base-types/parsing-datetime.md)」を参照してください。  

### <a name="datetime-values"></a>DateTime 値

<xref:System.DateTime> 型の時刻値の説明は、一般に協定世界時 (UTC) 標準を使用して表現されます。 世界協定時刻は、グリニッジ標準時 (GMT) の国際的に認識されている名前です。 世界協定時刻とは、0度の経度 (UTC の始点) で計測された時間です。 夏時間は UTC には適用されません。  
  
現地時刻は、特定のタイムゾーンに対する相対値です。 タイムゾーンは、タイムゾーンオフセットに関連付けられています。 タイムゾーンオフセットは、UTC 送信元ポイントから時間単位で計測されたタイムゾーンの変位です。 また、現地時刻は、時間間隔調整を追加または減算する夏時間の影響を受けることもあります。 現地時刻は、タイムゾーンオフセットを UTC に追加し、必要に応じて夏時間を調整することによって計算されます。 UTC の配信元ポイントのタイムゾーンオフセットが0です。  
  
UTC 時刻は、ファイルにおける計算、比較、および日付と時刻の格納に適しています。 ローカル時刻は、デスクトップアプリケーションのユーザーインターフェイスに表示する場合に適しています。 タイムゾーンに対応したアプリケーション (多くの Web アプリケーションなど) でも、他の多くのタイムゾーンを使用する必要があります。  
  
<xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>場合、時間が現地時刻、UTC 時刻、またはその他のタイムゾーンの時刻であるかどうかは指定されていません。  

### <a name="datetime-resolution"></a>DateTime の解決
  
> [!NOTE]
>  経過時間を計測するために <xref:System.DateTime> の値に対して日付と時刻の演算を実行する代わりに、<xref:System.Diagnostics.Stopwatch> クラスを使用することもできます。  
  
<xref:System.DateTime.Ticks%2A> プロパティは、1 10-万の単位で日付と時刻の値を表します。 <xref:System.DateTime.Millisecond%2A> プロパティは、日付と時刻の値の秒部分の1/1000 を返します。 <xref:System.DateTime.Now%2A?displayProperty=nameWithType> プロパティへの繰り返し呼び出しを使用して経過時間を計測することは、システムクロックに依存します。 Windows 7 および Windows 8 システムのシステムクロックには、約15ミリ秒の解決策があります。 この解像度は、100ミリ秒未満の短い時間間隔に影響します。 
  
次の例は、システムクロックの解決における現在の日付と時刻の値の依存関係を示しています。 この例では、外側のループは20回繰り返され、内側のループは外側のループを遅らせます。 外側のループカウンターの値が10の場合、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> メソッドを呼び出すと5ミリ秒の遅延が発生します。 次の例では、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>への呼び出しの後にのみ、`DateTime.Now.Milliseconds` プロパティの変更によって返されたミリ秒数を示しています。  

<a name="resolution-01"></a>
:::code language="csharp" source="~/samples/snippets/csharp/System.DateTime/Resolution.cs" interactive="try-dotnet-method" id="Snippet1":::
:::code language="vb" source="~/samples/snippets/visualbasic/System.DateTime/Resolution.vb" id="Snippet1":::

### <a name="datetime-operations"></a>DateTime 操作  

<xref:System.DateTime.Add%2A> や <xref:System.DateTime.Subtract%2A>などの <xref:System.DateTime> 構造を使用した計算では、構造体の値は変更されません。 代わりに、計算結果が値である新しい <xref:System.DateTime> 構造体が返されます。  
  
タイムゾーン間での変換操作 (UTC と現地時刻の間、または1つのタイムゾーンと別のタイムゾーン間の変換操作) では、夏時間が考慮されますが、算術演算と比較操作は行われません。  
  
<xref:System.DateTime> 構造体自体は、あるタイムゾーンから別のタイムゾーンへの変換に対して限定的なサポートを提供します。 <xref:System.DateTime.ToLocalTime%2A> メソッドを使用して UTC を現地時刻に変換したり、<xref:System.DateTime.ToUniversalTime%2A> メソッドを使用して現地時刻から UTC に変換したりすることができます。 ただし、<xref:System.TimeZoneInfo> クラスでは、タイムゾーンの変換メソッドの完全なセットを使用できます。 これらの方法を使用して、世界のタイムゾーンの時刻を他のタイムゾーンの時刻に変換します。  
  
<xref:System.DateTime> オブジェクトの計算と比較は、オブジェクトが同じタイムゾーンの時刻を表している場合にのみ意味があります。 <xref:System.TimeZoneInfo> オブジェクトを使用して、<xref:System.DateTime> 値のタイムゾーンを表すことができます。ただし、これら2つは疎結合です。 <xref:System.DateTime> オブジェクトには、その日付と時刻の値のタイムゾーンを表すオブジェクトを返すプロパティがありません。 <xref:System.DateTime.Kind%2A> プロパティは、`DateTime` が UTC、現地時刻、または指定されていないかどうかを示します。 タイムゾーンに対応したアプリケーションでは、一部の外部メカニズムを使用して、<xref:System.DateTime> オブジェクトが作成されたタイムゾーンを特定する必要があります。 <xref:System.DateTime> 値と <xref:System.DateTime> 値のタイムゾーンを表す <xref:System.TimeZoneInfo> オブジェクトの両方をラップする構造体を使用できます。 <xref:System.DateTime> 値を使用した計算と比較での UTC の使用の詳細については、「[日付と時刻を使用した算術](~/docs/standard/datetime/performing-arithmetic-operations.md)演算の実行」を参照してください。  
  
各 <xref:System.DateTime> メンバーは、グレゴリオ暦を暗黙的に使用してその操作を実行します。 例外は、カレンダーを暗黙的に指定するメソッドです。 これには、カレンダーを指定するコンストラクターと、<xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>などの <xref:System.IFormatProvider>から派生したパラメーターを持つメソッドが含まれます。  
  
<xref:System.DateTime> の種類のメンバーによる操作では、閏月や月の日数などの詳細が考慮されます。  

## <a name="datetime-values-and-calendars"></a>DateTime 値とカレンダー  

.NET Framework クラスライブラリには、多数の calendar クラスが含まれています。これらはすべて <xref:System.Globalization.Calendar> クラスから派生します。  これらは次のとおりです。  
  
-   <xref:System.Globalization.ChineseLunisolarCalendar> クラスです。  
-   <xref:System.Globalization.EastAsianLunisolarCalendar> クラスです。  
-   <xref:System.Globalization.GregorianCalendar> クラスです。  
-   <xref:System.Globalization.HebrewCalendar> クラスです。  
-   <xref:System.Globalization.HijriCalendar> クラスです。  
-   <xref:System.Globalization.JapaneseCalendar> クラスです。  
-   <xref:System.Globalization.JapaneseLunisolarCalendar> クラスです。  
-   <xref:System.Globalization.JulianCalendar> クラスです。  
-   <xref:System.Globalization.KoreanCalendar> クラスです。  
-   <xref:System.Globalization.KoreanLunisolarCalendar> クラスです。  
-   <xref:System.Globalization.PersianCalendar> クラスです。  
-   <xref:System.Globalization.TaiwanCalendar> クラスです。  
-   <xref:System.Globalization.TaiwanLunisolarCalendar> クラスです。  
-   <xref:System.Globalization.ThaiBuddhistCalendar> クラスです。  
-   <xref:System.Globalization.UmAlQuraCalendar> クラスです。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

各カルチャは、読み取り専用の <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> プロパティによって定義された既定の暦を使用します。 各カルチャでは、読み取り専用の <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> プロパティによって定義された1つ以上の暦をサポートできます。 特定の <xref:System.Globalization.CultureInfo> オブジェクトによって現在使用されているカレンダーは、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> プロパティによって定義されます。 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> 配列で見つかったいずれかのカレンダーである必要があります。  
  
カルチャの現在の暦は、そのカルチャのすべての書式設定操作で使用されます。 たとえば、タイ仏文化の既定の暦は、<xref:System.Globalization.ThaiBuddhistCalendar> クラスによって表されるタイ仏年代暦です。  タイ仏文化を表す <xref:System.Globalization.CultureInfo> オブジェクトを日付と時刻の書式設定操作で使用すると、既定でタイ仏時代 (年号) の暦が使用されます。 グレゴリオ暦は、次の例に示すように、カルチャの <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> プロパティが変更された場合にのみ使用されます。  

<a name="calendars-01"></a> [!code-csharp[System.DateTime.Calendar#1](~/samples/snippets/csharp/System.DateTime/Calendar.cs#1)]
[!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#1)]  

カルチャの現在の暦は、次の例に示すように、そのカルチャのすべての解析操作でも使用されます。  
  
<a name="calendars-02"></a> [!code-csharp[System.DateTime.Calendar#2](~/samples/snippets/csharp/System.DateTime/Calendar.cs#2)]
[!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#2)]  

特定の暦の日付と時刻の要素 (年、月、日) を使用して <xref:System.DateTime> 値をインスタンス化するには、`calendar` パラメーターを含む[DateTime コンストラクター](xref:System.DateTime.%23ctor%2A)を呼び出し、その暦を表す <xref:System.Globalization.CultureInfo.Calendar%2A> オブジェクトを渡します。 次の例では、<xref:System.Globalization.ThaiBuddhistCalendar> カレンダーの日付と時刻の要素を使用します。  
  
<a name="calendars-03"></a> [!code-csharp[System.DateTime.Calendar#3](~/samples/snippets/csharp/System.DateTime/Calendar.cs#3)]
[!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#3)]  

`calendar` パラメーターを含まない <xref:System.DateTime> コンストラクターでは、日付と時刻の要素がグレゴリオ暦の単位として表されることを想定しています。  
  
その他のすべての <xref:System.DateTime> プロパティとメソッドは、グレゴリオ暦を使用します。 たとえば、<xref:System.DateTime.Year%2A?displayProperty=nameWithType> プロパティはグレゴリオ暦の年を返し、<xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType> メソッドは、`year` パラメーターがグレゴリオ暦の年であると想定しています。  グレゴリオ暦を使用する各 <xref:System.DateTime> メンバーには、特定の暦を使用する <xref:System.Globalization.CultureInfo.Calendar%2A> クラスの対応するメンバーがあります。 たとえば、<xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType> メソッドは特定の暦の年を返し、<xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType> メソッドは `year` パラメーターを特定の暦の年の数値として解釈します。 次の例では、<xref:System.Globalization.ThaiBuddhistCalendar> クラスの <xref:System.DateTime> とそれに対応するメンバーの両方を使用します。  
  
<a name="calendars-04"></a> [!code-csharp[System.DateTime.Calendar#4](~/samples/snippets/csharp/System.DateTime/Calendar.cs#4)]
[!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#4)]  

<xref:System.DateTime> 構造体には、グレゴリオ暦の曜日を返す <xref:System.DateTime.DayOfWeek%2A> プロパティが含まれています。 年の週番号を取得できるメンバーは含まれていません。 年の週を取得するには、個々のカレンダーの <xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType> メソッドを呼び出します。 次に例を示します。  
  
<a name="calendars-05"></a> [!code-csharp[System.DateTime.Calendar#5](~/samples/snippets/csharp/System.DateTime/Calendar.cs#5)]
[!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/System.DateTime/Calendar.vb#5)]  

日付とカレンダーの詳細については、「[カレンダーの操作](~/docs/standard/datetime/working-with-calendars.md)」を参照してください。  
  
### <a name="persisting-datetime-values"></a>DateTime 値の保持  

<xref:System.DateTime> の値は、次の4つの方法で保持できます。  
  
-   [これらを文字列に変換](#persisting-values-as-strings)し、文字列を保持します。  
-   [これらを64ビットの整数値](#persisting-values-as-integers)(<xref:System.DateTime.Ticks%2A> プロパティの値) に変換し、整数を保持します。  
-   [DateTime 値をシリアル化](#serializing-datetime-values)します。  
-   [DateTime 値とタイムゾーン情報をシリアル化](#serializing-datetime-and-time-zone-data)します。  
  
<xref:System.DateTime> 値を復元するルーチンがデータを失うことがないようにするか、選択する技法に関係なく例外をスローする必要があります。 <xref:System.DateTime> 値はラウンドトリップする必要があります。 つまり、元の値と復元された値は同じである必要があります。 また、元の <xref:System.DateTime> 値が1つの瞬間を表している場合は、復元時の同じ時間を識別する必要があります。  
  
#### <a name="persisting-values-as-strings"></a>保持 (値を文字列として)  

文字列として保存されている <xref:System.DateTime> 値を正常に復元するには、次の規則に従います。  
  
-   文字列を永続化したときと同じように復元する場合は、カルチャ固有の書式設定についても同じ仮定を行います。 現在のカルチャが保存されているシステムのカルチャと異なるシステムで文字列を復元できるようにするには、<xref:System.DateTime.ToString%2A> オーバーロードを呼び出して、インバリアントカルチャの規則を使用して文字列を保存します。 インバリアントカルチャの規則を使用して文字列を復元するには、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> または <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> のオーバーロードを呼び出します。 現在のスレッドカルチャの規則を使用する <xref:System.DateTime.ToString>、<xref:System.DateTime.Parse%28System.String%29>、または <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> オーバーロードは使用しないでください。  
  
-   日付が1つの時間を表す場合は、別のタイムゾーンでも復元された時点を表していることを確認してください。 <xref:System.DateTime> 値を保存する前に世界協定時刻 (UTC) に変換します。 値をタイムゾーン情報と共にシリアル化することもできます。 この方法の詳細については、「[日付時刻とタイムゾーンデータのシリアル](#serializing-datetime-and-time-zone-data)化」を参照してください。  
  
 <xref:System.DateTime> 値を文字列として永続化するときに発生する最も一般的なエラーは、既定のカルチャまたは現在のカルチャの書式指定規則に依存することです。 文字列を保存および復元するときに現在のカルチャが異なると、問題が発生します。 これらの問題を次の例に示します。 現在のカルチャの書式指定規則 (この場合は英語 (米国)) を使用して、5つの日付を保存します。 この例では、別のカルチャの書式指定規則 (この場合は英語 (英国)) を使用して日付を復元します。 2つのカルチャの書式指定規則が異なるため、2つの日付は復元できず、残りの3つの日付は正しく解釈されません。 また、元の日付と時刻の値が単精度を表している場合は、タイムゾーン情報が失われるため、復元された時刻は正しくありません。  
  
<a name="persistence-01"></a> [!code-csharp[System.DateTime.Persistence#1](~/samples/snippets/csharp/System.DateTime/Persistence.cs#1)]
[!code-vb[System.DateTime.Persistence#1](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#1)]  

<xref:System.DateTime> 値を正常にラウンドトリップさせるには、次の手順を実行します。  
  
1.  値が単一の時間を表している場合は、<xref:System.DateTime.ToUniversalTime%2A> メソッドを呼び出して、現地時刻から UTC に変換します。  
1.  <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> または <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> のオーバーロードを呼び出して、日付を文字列形式に変換します。 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> を `provider` 引数として指定することにより、インバリアントカルチャの書式指定規則を使用します。 "O" または "R" 標準書式指定文字列を使用して、値がラウンドトリップするように指定します。  
  
データを失うことなく永続化された <xref:System.DateTime> 値を復元するには、次の手順を実行します。  
  
1.  <xref:System.DateTime.ParseExact%2A> または <xref:System.DateTime.TryParseExact%2A> のオーバーロードを呼び出して、データを解析します。 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> を `provider` 引数として指定し、変換時に `format` 引数に使用したのと同じ標準書式指定文字列を使用します。 `styles` 引数に <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> の値を含めます。  
1.  <xref:System.DateTime> 値が1つの時刻を表している場合は、<xref:System.DateTime.ToLocalTime%2A> メソッドを呼び出して、解析された日付を UTC から現地時刻に変換します。  
  
次の例では、インバリアントカルチャと "O" 標準書式指定文字列を使用して、ソースシステムとターゲットシステムのシステム、カルチャ、またはタイムゾーンに関係なく、保存および復元された <xref:System.DateTime> 値が同じ時点を表していることを確認します。  
  
<a name="persistence-02"></a> [!code-csharp[System.DateTime.Persistence#2](~/samples/snippets/csharp/System.DateTime/Persistence.cs#2)]
[!code-vb[System.DateTime.Persistence#2](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#2)]  

#### <a name="persisting-values-as-integers"></a>値を整数として保持する  

日付と時刻は、タイマー刻みの数を表す <xref:System.Int64> 値として保持できます。 この場合、<xref:System.DateTime> 値が永続化および復元されるシステムのカルチャを考慮する必要はありません。  
  
<xref:System.DateTime> 値を整数として保持するには、次のようにします。  
  
-   <xref:System.DateTime> 値が単精度を表す場合は、<xref:System.DateTime.ToUniversalTime%2A> メソッドを呼び出して UTC に変換します。  
-   <xref:System.DateTime.Ticks%2A> プロパティの <xref:System.DateTime> 値で表されるタイマー刻みの数を取得します。  
  
整数として保存されている <xref:System.DateTime> 値を復元するには、次のようにします。  
  
1.  <xref:System.Int64> 値を <xref:System.DateTime.%23ctor%28System.Int64%29> コンストラクターに渡すことによって、新しい <xref:System.DateTime> オブジェクトをインスタンス化します。  
1.  <xref:System.DateTime> 値が1つの時点を表している場合は、<xref:System.DateTime.ToLocalTime%2A> メソッドを呼び出して UTC からローカル時刻に変換します。  
  
次の例では、米国太平洋標準時タイムゾーンのシステムで <xref:System.DateTime> 値の配列を整数として保持します。 UTC ゾーンのシステムで復元されます。 整数を含むファイルには、その直後にある <xref:System.Int64> 値の合計数を示す <xref:System.Int32> 値が含まれます。  
  
<a name="persistence-03"></a> [!code-csharp[System.DateTime.Persistence#3](~/samples/snippets/csharp/System.DateTime/Persistence.cs#3)]
[!code-vb[System.DateTime.Persistence#3](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#3)]  

<a name="serializing-datetime-values"></a>
#### <a name="serializing-datetime-values"></a>DateTime 値のシリアル化  

シリアル化によって <xref:System.DateTime> 値をストリームまたはファイルに保持し、逆シリアル化によってそれらを復元できます。 <xref:System.DateTime> データは、指定されたオブジェクト形式でシリアル化されます。 オブジェクトは逆シリアル化されるときに復元されます。 <xref:System.Xml.Serialization.XmlSerializer> や <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>などのフォーマッタまたはシリアライザーは、シリアル化と逆シリアル化のプロセスを処理します。 .NET Framework によってサポートされるシリアル化とシリアル化の種類の詳細については、「[シリアル化](~/docs/standard/serialization/index.md)」を参照してください。
  
次の例では、<xref:System.Xml.Serialization.XmlSerializer> クラスを使用して <xref:System.DateTime> 値をシリアル化および逆シリアル化します。 値は、20番目の世紀の閏年のすべての日を表します。 出力は、現在のカルチャが英語 (英国) であるシステム上でこの例を実行した場合の結果を表します。 <xref:System.DateTime> オブジェクト自体を逆シリアル化したため、コードでは日付と時刻の形式のカルチャの違いを処理する必要がありません。  
  
<a name="persistence-04"></a> [!code-csharp[System.DateTime.Persistence#4](~/samples/snippets/csharp/System.DateTime/Persistence.cs#4)]
[!code-vb[System.DateTime.Persistence#4](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#4)]  

前の例には、時刻情報は含まれていません。 <xref:System.DateTime> 値が時刻を表し、現地時刻として表現されている場合は、<xref:System.DateTime.ToUniversalTime%2A> メソッドを呼び出すことによってシリアル化する前に、現地時刻から UTC に変換します。 逆シリアル化した後、<xref:System.DateTime.ToLocalTime%2A> メソッドを呼び出して UTC からローカル時刻に変換します。 次の例では、<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> クラスを使用して、米国太平洋標準時ゾーンのシステムで <xref:System.DateTime> データをシリアル化し、米国中部標準ゾーンのシステムでデータを逆シリアル化します。  
  
<a name="persistence-05"></a> [!code-csharp[System.DateTime.Persistence#5](~/samples/snippets/csharp/System.DateTime/Persistence.cs#5)]
[!code-vb[System.DateTime.Persistence#5](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#5)]  

<a name="serializing-datetime-and-time-zone-data"></a>
#### <a name="serializing-datetime-and-time-zone-data"></a>日付時刻とタイムゾーンデータのシリアル化  

前の例では、<xref:System.DateTime> 値が現地時刻として表現されていることを前提としています。 コードは UTC と現地時刻の間で値を変換し、ソースシステムとターゲットシステムで同じ時間を反映しています。 <xref:System.DateTime> 値には、ローカルおよび UTC 以外のタイムゾーンの時刻を反映することもできます。 <xref:System.DateTime> 構造体はタイムゾーンに対応していないため、<xref:System.DateTime> 値とそのタイムゾーンを表す <xref:System.TimeZoneInfo> オブジェクトの両方をシリアル化する必要があります。 <xref:System.DateTime> 値とそのタイムゾーンの両方を含むフィールドを持つ型を作成します。 次の例では、`DateWithTimeZone` 構造体を定義します。  
  
<a name="persistence-06"></a> [!code-csharp[System.DateTime.Persistence#6](~/samples/snippets/csharp/System.DateTime/DateWithTimeZone.cs#6)]
[!code-vb[System.DateTime.Persistence#6](~/samples/snippets/visualbasic/System.DateTime/DateWithTimeZone.vb#6)]  

> [!IMPORTANT]
>  `DateWithTimeZone` 構造体は、次の2つの例で使用されます。これらの例では、`DateWithTimeZone` オブジェクトの配列をシリアル化および逆シリアル化します。 この記事では、 [Visual Basic](https://github.com/dotnet/samples/tree/master/snippets/visualbasic/System.DateTime/)または[C#](https://github.com/dotnet/samples/tree/master/snippets/csharp/System.DateTime/) GitHub の docs リポジトリから、例のセット全体のソースを表示できます。
  
`DateWithTimeZone` 構造を使用すると、日付と時刻をタイムゾーン情報と共に保持できます。 次の例では、<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> クラスを使用して、`DateWithTimeZone` オブジェクトの配列をシリアル化します。  
  
[!code-csharp[System.DateTime.Persistence#7](~/samples/snippets/csharp/System.DateTime/Persistence.cs#7)]
[!code-vb[System.DateTime.Persistence#7](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#7)]  

次の例では、<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> メソッドを呼び出して逆シリアル化します。  
  
[!code-csharp[System.DateTime.Persistence#8](~/samples/snippets/csharp/System.DateTime/Persistence.cs#8)]
[!code-vb[System.DateTime.Persistence#8](~/samples/snippets/visualbasic/System.DateTime/Persistence.vb#8)]  

### <a name="datetime-vs-timespan"></a>DateTime と TimeSpan  

<xref:System.DateTime> 値型と <xref:System.TimeSpan> 値型の違いは、<xref:System.DateTime> が時間間隔を表すのに <xref:System.TimeSpan> 対し、は瞬時を表します。 <xref:System.DateTime> の1つのインスタンスを別のインスタンスから減算して、それらの間の時間間隔を表す <xref:System.TimeSpan> オブジェクトを取得できます。 または、現在の <xref:System.DateTime> に正の <xref:System.TimeSpan> を追加して、将来の日付を表す <xref:System.DateTime> 値を取得することもできます。  
  
<xref:System.DateTime> オブジェクトから時間間隔を加算または減算することができます。 時間間隔は、負または正の値にすることができます。また、タイマー刻み、秒、<xref:System.TimeSpan> オブジェクトなどの単位で表すことができます。  

### <a name="comparing-for-equality-within-tolerance"></a>許容範囲内での等しいかどうかの比較

<xref:System.DateTime> 値の等価比較は正確です。 つまり、2つの値は等しいと見なされるように、同じタイマー刻みの数として表す必要があります。 多くの場合、この有効桁数は不要であるか、または多くのアプリケーションで間違っています。 多くの場合、<xref:System.DateTime> オブジェクトが**ほぼ等しい**かどうかをテストする必要があります。 

次の例は、ほぼ同等の <xref:System.DateTime> 値を比較する方法を示しています。 等しいかどうかを宣言する場合、小さい余白が許容されます。  
  
<a name="comparison-01"></a> [!code-csharp[System.DateTime.Comparisons#1](~/samples/snippets/csharp/System.DateTime/DateTimeComparisons.cs#1)]
[!code-vb[System.DateTime.Comparisons#1](~/samples/snippets/visualbasic/System.DateTime/DateTimeComparisons.vb#1)]  

### <a name="com-interop-considerations"></a>COM 相互運用の考慮事項  

COM アプリケーションに転送され、マネージアプリケーションに転送される <xref:System.DateTime> 値は、ラウンドトリップと呼ばれます。 ただし、時刻だけを指定する <xref:System.DateTime> 値は、期待どおりにラウンドトリップしません。  
  
3 pm などの時刻のみをラウンドトリップする場合、最終的な日付と時刻は紀元1899年12月30日になります。 午後3:00、午後1時から0001年1月1日ではなく、 午後3:00 .NET Framework と COM は、時刻のみが指定されている場合、既定の日付を想定します。 ただし、COM システムでは、西暦1899年12月30日という基本日付が想定されていますが、.NET Framework では、西暦1月、1日、0001年1月の基本日付を前提としています。  
  
.NET Framework から COM に渡されるのが時間だけの場合は、その時刻を COM によって使用される形式に変換する特別な処理が実行されます。 COM から .NET Framework に1つの時刻だけが渡された場合は、1899年12月30日以前の正しい日付と時刻が破損するため、特別な処理は実行されません。 日付が COM からのラウンドトリップを開始した場合、.NET Framework と COM は日付を保持します。  
  
.NET Framework と COM の動作では、アプリケーションが時間を指定するだけの <xref:System.DateTime> をラウンドトリップさせる場合、最終的な <xref:System.DateTime> オブジェクトからの誤った日付を変更または無視するようにアプリケーションが記憶する必要があります。  
     
 ]]></format>
    </remarks>
    <threadsafe>この型のすべてのメンバーは、スレッドセーフです。 インスタンスの状態を変更するように見えるメンバーは、実際には新しい値で初期化された新しいインスタンスを返します。 他の型と同様に、この型のインスタンスを含む共有変数の読み取りと書き込みは、スレッドセーフを保証するためにロックによって保護される必要があります。</threadsafe>
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeSpan" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
    <altmember cref="T:System.TimeZoneInfo" />
    <related type="Article" href="~/docs/standard/datetime/choosing-between-datetime.md">DateTime、DateTimeOffset、TimeSpan、および TimeZoneInfo の使い分け</related>
    <related type="Article" href="~/docs/standard/datetime/working-with-calendars.md">カレンダーの使用</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">サンプル: .NET Core WinForms 書式指定ユーティリティC#()</related>
    <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">サンプル: .NET Core WinForms の書式設定ユーティリティ (Visual Basic)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 -&gt; DateTime" Usage="new System.DateTime ticks" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">日時をグレゴリオ暦の 0001 年 1 月 1 日の 00:00:00.000 以降の経過時間 (100 ナノ秒単位) で表した値。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定したタイマー刻み数に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 日付と時刻のデータの移植性、または制限されたタイムゾーンの認識が重要なアプリケーションの場合は、対応する <xref:System.DateTimeOffset> コンストラクターを使用できます。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTime> コンストラクターの1つを示しています。  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks" /> が <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ticks As Long, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(long ticks, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int64 * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (ticks, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="ticks">日時をグレゴリオ暦の 0001 年 1 月 1 日の 00:00:00.000 以降の経過時間 (100 ナノ秒単位) で表した値。</param>
        <param name="kind"><paramref name="ticks" /> が、現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない時刻のうち、どれを指定するかを示す列挙値の 1 つ。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定したタイマー刻み数と世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 日付と時刻のデータの移植性、または制限されたタイムゾーンの認識が重要なアプリケーションの場合は、対応する <xref:System.DateTimeOffset> コンストラクターを使用できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="ticks" /> が <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> は <see cref="T:System.DateTimeKind" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、グレゴリオ暦の年、月、および日として、`year`、`month`、および `day` を解釈します。 別の暦の年、月、日を使用して <xref:System.DateTime> 値をインスタンス化するには、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> コンストラクターを呼び出します。  
  
 結果 <xref:System.DateTime> の時刻が午前0時 (00:00:00) になります。 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> に初期化されます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29> コンストラクターを使用して、<xref:System.DateTime> 値をインスタンス化します。 この例では、このオーバーロードが、時刻部分が午前0時 (または 0:00) と等しい <xref:System.DateTime> 値を作成することも示しています。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
または 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
または 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" />の日数を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, calendar As Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から <paramref name="calendar" /> の年数)。</param>
        <param name="month">月 (1 から <paramref name="calendar" /> の月数)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="calendar"><paramref name="year" />、<paramref name="month" />、および <paramref name="day" /> を解釈するために使用される暦。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した暦の指定した年、月、および日に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 結果 <xref:System.DateTime> の時刻が午前0時 (00:00:00) になります。 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 `year`、`month`、および `day` で許容される値は `calendar`によって異なります。 `calendar`を使用して指定した日付と時刻を表現できない場合は、例外がスローされます。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 <xref:System.Globalization> 名前空間には、<xref:System.Globalization.GregorianCalendar> や <xref:System.Globalization.JulianCalendar>を含む複数のカレンダーが用意されています。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> コンストラクターを2回呼び出して、2つの <xref:System.DateTime> 値をインスタンス化します。 最初の呼び出しでは、<xref:System.Globalization.PersianCalendar> オブジェクトを使用して <xref:System.DateTime> 値をインスタンス化します。 ペルシャ暦はカルチャの既定の暦として指定できないため、ペルシャ暦で日付を表示するには、<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>、<xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>、および <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> メソッドを個別に呼び出す必要があります。 コンストラクターへの2回目の呼び出しでは、<xref:System.Globalization.HijriCalendar> オブジェクトを使用して <xref:System.DateTime> 値をインスタンス化します。 この例では、現在のカルチャをアラビア語 (シリア) に変更し、現在のカルチャの既定の暦をイスラム暦に変更します。 イスラム暦は現在のカルチャの既定の暦であるため、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドはそれを使用して日付の書式を設定します。 以前の現在のカルチャ (この場合は英語 (米国)) が復元されると、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドは、現在のカルチャの既定のグレゴリオ暦を使用して日付の書式を設定します。  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> は <paramref name="calendar" />でサポートされる範囲にありません。  
  
または 
 <paramref name="month" /> は 1 未満か、<paramref name="calendar" /> の月数を超えています。  
  
または 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" />の日数を超えています。</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、および秒に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 このコンストラクターは、グレゴリオ暦の年、月、および日として、`year`、`month`、および `day` を解釈します。 別の暦の年、月、日を使用して <xref:System.DateTime> 値をインスタンス化するには、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> コンストラクターを呼び出します。  
  
 日付と時刻のデータの移植性、または制限されたタイムゾーンの認識が重要なアプリケーションの場合は、対応する <xref:System.DateTimeOffset> コンストラクターを使用できます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%2A> コンストラクターを使用して、<xref:System.DateTime> 値をインスタンス化します。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs" interactive="try-dotnet-method" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb" id="Snippet3":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
または 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
または 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" />の日数を超えています。  
  
または 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
または 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
または 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="6" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="kind"><paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、および <paramref name="second" /> が、現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない時刻のうち、どれを指定するかを示す列挙値の 1 つ。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、秒、および世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、グレゴリオ暦の年、月、および日として、`year`、`month`、および `day` を解釈します。 別の暦の年、月、日を使用して <xref:System.DateTime> 値をインスタンス化するには、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> コンストラクターを呼び出します。  
  
 日付と時刻のデータの移植性、または制限されたタイムゾーンの認識が重要なアプリケーションの場合は、対応する <xref:System.DateTimeOffset> コンストラクターを使用できます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> コンストラクターを使用して、<xref:System.DateTime> 値をインスタンス化します。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs" interactive="try-dotnet-method" id="Snippet7":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb" id="Snippet7":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
または 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
または 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" />の日数を超えています。  
  
または 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
または 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
または 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> は <see cref="T:System.DateTimeKind" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, calendar As Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から <paramref name="calendar" /> の年数)。</param>
        <param name="month">月 (1 から <paramref name="calendar" /> の月数)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="calendar"><paramref name="year" />、<paramref name="month" />、および <paramref name="day" /> を解釈するために使用される暦。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した暦の指定した年、月、日、時、分、および秒に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 `year`、`month`、および `day` で許容される値は `calendar`によって異なります。 `calendar`を使用して指定した日付と時刻を表現できない場合は、例外がスローされます。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 <xref:System.Globalization> 名前空間には、<xref:System.Globalization.GregorianCalendar> や <xref:System.Globalization.JulianCalendar>を含む複数のカレンダーが用意されています。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> コンストラクターを2回呼び出して、2つの <xref:System.DateTime> 値をインスタンス化します。 最初の呼び出しでは、<xref:System.Globalization.PersianCalendar> オブジェクトを使用して <xref:System.DateTime> 値をインスタンス化します。 ペルシャ暦はカルチャの既定の暦として指定できないため、ペルシャ暦で日付を表示するには、<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>、<xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>、および <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> メソッドを個別に呼び出す必要があります。 コンストラクターへの2回目の呼び出しでは、<xref:System.Globalization.HijriCalendar> オブジェクトを使用して <xref:System.DateTime> 値をインスタンス化します。 この例では、現在のカルチャをアラビア語 (シリア) に変更し、現在のカルチャの既定の暦をイスラム暦に変更します。 イスラム暦は現在のカルチャの既定の暦であるため、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドはそれを使用して日付の書式を設定します。 以前の現在のカルチャ (この場合は英語 (米国)) が復元されると、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドは、現在のカルチャの既定のグレゴリオ暦を使用して日付の書式を設定します。  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> は <paramref name="calendar" />でサポートされる範囲にありません。  
  
または 
 <paramref name="month" /> は 1 未満か、<paramref name="calendar" /> の月数を超えています。  
  
または 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" />の日数を超えています。  
  
または 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。 
または 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
または 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、秒、およびミリ秒に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、グレゴリオ暦の年、月、および日として、`year`、`month`、および `day` を解釈します。 別の暦の年、月、日を使用して <xref:System.DateTime> 値をインスタンス化するには、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> コンストラクターを呼び出します。  
  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 日付と時刻のデータの移植性、または制限されたタイムゾーンの認識が重要なアプリケーションの場合は、対応する <xref:System.DateTimeOffset> コンストラクターを使用できます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29> コンストラクターを使用して、<xref:System.DateTime> 値をインスタンス化します。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs" interactive="try-dotnet-method" id="Snippet5":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb" id="Snippet5":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
または 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
または 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" />の日数を超えています。  
  
または 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
または 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
または 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
または 
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。</exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="7" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="kind"><paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" />、および <paramref name="millisecond" /> が、現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない時刻のうち、どれを指定するかを示す列挙値の 1 つ。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、秒、ミリ秒、および世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターは、グレゴリオ暦の年、月、および日として、`year`、`month`、および `day` を解釈します。 別の暦の年、月、日を使用して <xref:System.DateTime> 値をインスタンス化するには、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> コンストラクターを呼び出します。  
  
 日付と時刻のデータの移植性、または制限されたタイムゾーンの認識が重要なアプリケーションの場合は、対応する <xref:System.DateTimeOffset> コンストラクターを使用できます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29> コンストラクターを使用して、<xref:System.DateTime> 値をインスタンス化します。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs" interactive="try-dotnet-method" id="Snippet8":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb" id="Snippet8":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
または 
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
または 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" />の日数を超えています。  
  
または 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
または 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
または 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
または 
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> は <see cref="T:System.DateTimeKind" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, calendar As Calendar)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から <paramref name="calendar" /> の年数)。</param>
        <param name="month">月 (1 から <paramref name="calendar" /> の月数)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="calendar"><paramref name="year" />、<paramref name="month" />、および <paramref name="day" /> を解釈するために使用される暦。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した暦の指定した年、月、日、時、分、秒、およびミリ秒に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 `year`、`month`、および `day` で許容される値は `calendar`によって異なります。 `calendar`を使用して指定した日付と時刻を表現できない場合は、例外がスローされます。  
  
 日付と時刻のデータの移植性、または制限されたタイムゾーンの認識が重要なアプリケーションの場合は、対応する <xref:System.DateTimeOffset> コンストラクターを使用できます。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 <xref:System.Globalization> 名前空間には、<xref:System.Globalization.GregorianCalendar> や <xref:System.Globalization.JulianCalendar>を含む複数のカレンダーが用意されています。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> コンストラクターを2回呼び出して、2つの <xref:System.DateTime> 値をインスタンス化します。 最初の呼び出しでは、<xref:System.Globalization.PersianCalendar> オブジェクトを使用して <xref:System.DateTime> 値をインスタンス化します。 ペルシャ暦はカルチャの既定の暦として指定できないため、ペルシャ暦で日付を表示するには、<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>、<xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>、および <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> メソッドを個別に呼び出す必要があります。 コンストラクターへの2回目の呼び出しでは、<xref:System.Globalization.HijriCalendar> オブジェクトを使用して <xref:System.DateTime> 値をインスタンス化します。 この例では、現在のカルチャをアラビア語 (シリア) に変更し、現在のカルチャの既定の暦をイスラム暦に変更します。 イスラム暦は現在のカルチャの既定の暦であるため、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドはそれを使用して日付の書式を設定します。 以前の現在のカルチャ (この場合は英語 (米国)) が復元されると、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドは、現在のカルチャの既定のグレゴリオ暦を使用して日付の書式を設定します。  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> は <paramref name="calendar" />でサポートされる範囲にありません。  
  
または 
 <paramref name="month" /> は 1 未満か、<paramref name="calendar" /> の月数を超えています。  
  
または 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" />の日数を超えています。  
  
または 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
または 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
または 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
または 
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。</exception>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, calendar As Calendar, kind As DateTimeKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, System::Globalization::Calendar ^ calendar, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="new DateTime : int * int * int * int * int * int * int * System.Globalization.Calendar * DateTimeKind -&gt; DateTime" Usage="new System.DateTime (year, month, day, hour, minute, second, millisecond, calendar, kind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="month" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="day" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="hour" Type="System.Int32" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="minute" Type="System.Int32" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="second" Type="System.Int32" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="millisecond" Type="System.Int32" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" Index="7" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="8" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 から <paramref name="calendar" /> の年数)。</param>
        <param name="month">月 (1 から <paramref name="calendar" /> の月数)。</param>
        <param name="day">日付 (1 ～ <paramref name="month" /> の日数)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="calendar"><paramref name="year" />、<paramref name="month" />、および <paramref name="day" /> を解釈するために使用される暦。</param>
        <param name="kind"><paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" />、および <paramref name="millisecond" /> が、現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない時刻のうち、どれを指定するかを示す列挙値の 1 つ。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した暦の指定した年、月、日、時、分、秒、ミリ秒、および世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`、`month`、および `day` パラメーターに使用できる値は、`calendar` パラメーターによって異なります。 `calendar`を使用して指定した日付と時刻を表現できない場合は、例外がスローされます。  
  
 日付と時刻のデータの移植性、または制限されたタイムゾーンの認識が重要なアプリケーションの場合は、対応する <xref:System.DateTimeOffset> コンストラクターを使用できます。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

 <xref:System.Globalization> 名前空間には、<xref:System.Globalization.GregorianCalendar> や <xref:System.Globalization.JulianCalendar>を含む複数のカレンダーが用意されています。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> コンストラクターを2回呼び出して、2つの <xref:System.DateTime> 値をインスタンス化します。 最初の呼び出しでは、<xref:System.Globalization.PersianCalendar> オブジェクトを使用して <xref:System.DateTime> 値をインスタンス化します。 ペルシャ暦はカルチャの既定の暦として指定できないため、ペルシャ暦で日付を表示するには、<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>、<xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>、および <xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType> メソッドを個別に呼び出す必要があります。 コンストラクターへの2回目の呼び出しでは、<xref:System.Globalization.HijriCalendar> オブジェクトを使用して <xref:System.DateTime> 値をインスタンス化します。 この例では、現在のカルチャをアラビア語 (シリア) に変更し、現在のカルチャの既定の暦をイスラム暦に変更します。 イスラム暦は現在のカルチャの既定の暦であるため、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドはそれを使用して日付の書式を設定します。 以前の現在のカルチャ (この場合は英語 (米国)) が復元されると、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドは、現在のカルチャの既定のグレゴリオ暦を使用して日付の書式を設定します。  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="calendar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> は <paramref name="calendar" />でサポートされる範囲にありません。  
  
または 
 <paramref name="month" /> は 1 未満か、<paramref name="calendar" /> の月数を超えています。  
  
または 
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" />の日数を超えています。  
  
または 
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
または 
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
または 
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
または 
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="kind" /> は <see cref="T:System.DateTimeKind" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Add(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Add : TimeSpan -&gt; DateTime" Usage="dateTime.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">正または負の時間間隔。</param>
        <summary>このインスタンスの値に、指定された <see cref="T:System.DateTime" /> の値を加算した新しい <see cref="T:System.TimeSpan" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された時間間隔を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Add%2A> メソッドを使用すると、1回の操作で複数の種類の時間間隔 (日、時間、分、秒、またはミリ秒) を追加できます。 このメソッドの動作は、加算演算子と同じです。 <xref:System.DateTime> 構造体は、各時間間隔に対して特殊な追加メソッド (<xref:System.DateTime.AddDays%2A>、<xref:System.DateTime.AddHours%2A>、<xref:System.DateTime.AddMinutes%2A>など) もサポートします。  
  
 <xref:System.DateTime.Add%2A> メソッドは、日付の算術演算を実行するときに、うるう年と月の日数を考慮します。  
  
 このメソッドは、この <xref:System.DateTime>の値を変更しません。 代わりに、この操作の結果を値として持つ新しい <xref:System.DateTime> が返されます。 新しい <xref:System.DateTime> インスタンスの <xref:System.DateTime.Kind%2A> プロパティは、現在のインスタンスのプロパティと同じです。  
  
   
  
## Examples  
 <xref:System.DateTime.Add%2A>メソッドの例を次に示します。 この時点から36日 (864 時間) の曜日を計算します。  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> は <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="M:System.TimeSpan.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddDays (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddDays(double value);" />
      <MemberSignature Language="F#" Value="member this.AddDays : double -&gt; DateTime" Usage="dateTime.AddDays value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成る日数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定された日数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された日数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、この <xref:System.DateTime>の値を変更しません。 代わりに、この操作の結果を値として持つ新しい <xref:System.DateTime> が返されます。  
  
 `value` の小数部は、1日の小数部です。 たとえば、4.5 は、4日、12時間、0分、0秒、0ミリ秒、および0ティックに相当します。  
  
 `value` パラメーターは、ミリ秒単位で丸められます。  
  
 <xref:System.DateTime.AddDays%2A> メソッドは、日付の算術演算を実行するときに、うるう年と月の日数を考慮します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddDays%2A> メソッドを使用して、現在の日付から36日後の曜日を特定します。  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> は <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
        <altmember cref="T:System.Double" />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddHours (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddHours(double value);" />
      <MemberSignature Language="F#" Value="member this.AddHours : double -&gt; DateTime" Usage="dateTime.AddHours value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成る時間数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定された時間数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された時間数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、この <xref:System.DateTime>の値を変更しません。 代わりに、この操作の結果を値として持つ新しい <xref:System.DateTime> が返されます。 返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは `value`のプロパティと同じです。  
  
 `value` の小数部は、1時間の小数部です。 たとえば、4.5 は、4時間、30分、0秒、0ミリ秒、および0ティックに相当します。  
  
 `value` パラメーターは、ミリ秒単位で丸められます。  
  
 1時間未満の時間間隔を分数に変換すると、結果が終了しない反復10進数の場合、精度が失われる可能性があります。 (たとえば、1分は0.016667 時間です)。この問題が発生した場合は、<xref:System.DateTime.Add%2A> メソッドを使用できます。これにより、1回のメソッド呼び出しで複数の種類の時間間隔を指定できるようになり、時間間隔を1時間の小数部分に変換する必要がなくなります。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddHours%2A> メソッドを使用して、整数部と小数部の値を日付と時刻に加算しています。 また、小数部分を含む値をメソッドに渡すことによって生じる精度の低下についても示します。  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> は <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMilliseconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMilliseconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMilliseconds : double -&gt; DateTime" Usage="dateTime.AddMilliseconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成るミリ秒数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。 この値は、近似値の整数に丸められます。</param>
        <summary>このインスタンスの値に、指定されたミリ秒数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表されたミリ秒数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、この <xref:System.DateTime>の値を変更しません。 代わりに、この操作の結果を値として持つ新しい <xref:System.DateTime> が返されます。  
  
 `value` の小数部は、ミリ秒の小数部です。 たとえば、4.5 は、4ミリ秒と5000ティックに相当します。ここで、1ミリ秒 = 1万ティックです。  
  
 `value` パラメーターは、最も近い整数に丸められます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddMilliseconds%2A> メソッドを使用して、<xref:System.DateTime> 値に1ミリ秒と1.5 ミリ秒を加算します。 その後、それぞれの新しい値が表示され、その値と元の値の差が表示されます。 差は、時間間隔とタイマー刻みの数の両方として表示されます。 この例では、1ミリ秒が1万ティックに等しいことが明確になります。 また、加算を実行する前に小数部のミリ秒が丸められることも示しています。元の日付に1.5 ミリ秒を加算した結果として得られる <xref:System.DateTime> 値は、元の日付より2ミリ秒を超える値です。  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> は <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMinutes (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMinutes(double value);" />
      <MemberSignature Language="F#" Value="member this.AddMinutes : double -&gt; DateTime" Usage="dateTime.AddMinutes value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成る分数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定された分数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された分数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、この <xref:System.DateTime>の値を変更しません。 代わりに、この操作の結果を値として持つ新しい <xref:System.DateTime> が返されます。  
  
 `value` の小数部は、1分の小数部です。 たとえば、4.5 は、4分、30秒、0ミリ秒、および0ティックに相当します。  
  
 `value` パラメーターは、ミリ秒単位で丸められます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddMinutes%2A> メソッドを使用して、整数部と小数部の値を日付と時刻に加算しています。  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> は <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddMonths (months As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddMonths(int months);" />
      <MemberSignature Language="F#" Value="member this.AddMonths : int -&gt; DateTime" Usage="dateTime.AddMonths months" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">月数。 <paramref name="months" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定された月数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻と <paramref name="months" /> の合計を値とするオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、この <xref:System.DateTime> オブジェクトの値を変更しません。 代わりに、この操作の結果を値として持つ新しい <xref:System.DateTime> オブジェクトを返します。  
  
 <xref:System.DateTime.AddMonths%2A> メソッドは、うるう年と月の日数を考慮して、結果として得られる月と年を計算し、結果の <xref:System.DateTime> オブジェクトの日の部分を調整します。 結果として得られる月の日付が有効な日付でない場合は、その月の最後の有効日が使用されます。 たとえば、3月31日 + 1 か月 = 4 月30日、3月31日-1 か月 = 28 年以外の場合は2月28日、閏年の場合は2月29日となります。  
  
 結果の <xref:System.DateTime> オブジェクトの時刻部分は、このインスタンスと同じままです。  
  
   
  
## Examples  
 次の例では、0 ~ 15 か月の期間を、2015年12月の最後の日に加算します。 この場合、AddMonths メソッドは、毎月の最終日の日付を返し、うるう年を正常に処理します。  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> は <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。  
  
または 
 <paramref name="months" /> が -120,000 未満であるか、120,000 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddSeconds (value As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddSeconds(double value);" />
      <MemberSignature Language="F#" Value="member this.AddSeconds : double -&gt; DateTime" Usage="dateTime.AddSeconds value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成る秒数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定された秒数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された秒数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、この <xref:System.DateTime>の値を変更しません。 代わりに、この操作の結果を値として持つ新しい <xref:System.DateTime> が返されます。  
  
 `value` の小数部は、秒の小数部になります。 たとえば、4.5 は、4秒、500ミリ秒、および0ティックに相当します。  
  
 `value` パラメーターは、ミリ秒単位で丸められます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddSeconds%2A> メソッドを使用して、1日の <xref:System.DateTime> の値に30秒と秒数を加算します。 その後、それぞれの新しい値が表示され、その値と元の値の差が表示されます。 差は、時間間隔とタイマー刻みの数の両方として表示されます。  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> は <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
        <altmember cref="T:System.Double" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddTicks (value As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddTicks(long value);" />
      <MemberSignature Language="F#" Value="member this.AddTicks : int64 -&gt; DateTime" Usage="dateTime.AddTicks value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">100 ナノ秒タイマー刻み数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定されたタイマー刻みの数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された時間数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、この <xref:System.DateTime>の値を変更しません。 代わりに、この操作の結果を値として持つ新しい <xref:System.DateTime> が返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> は <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
        <altmember cref="T:System.Int64" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddYears (value As Integer) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime AddYears(int value);" />
      <MemberSignature Language="F#" Value="member this.AddYears : int -&gt; DateTime" Usage="dateTime.AddYears value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">年数。 <paramref name="value" /> パラメーターは、正または負のどちらの場合もあります。</param>
        <summary>このインスタンスの値に、指定された年数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された年数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、この <xref:System.DateTime> オブジェクトの値を変更しません。 代わりに、この操作の結果を値として持つ新しい <xref:System.DateTime> オブジェクトを返します。  
  
 <xref:System.DateTime.AddYears%2A> メソッドは、うるう年を考慮して、結果として得られる年を計算します。 結果の <xref:System.DateTime> オブジェクトの月と時刻の部分は、このインスタンスと同じままです。  
  
 現在のインスタンスが閏年の閏年を表している場合、戻り値はターゲットの日付によって異なります。  
  
-   `value` + <xref:System.DateTime.Year%2A?displayProperty=nameWithType> も閏年である場合、戻り値はその年の閏年を表します。 たとえば、2012年2月29日に4年を加算した場合、返された日付は2016年2月29日になります。  
  
-   `value` + <xref:System.DateTime.Year%2A?displayProperty=nameWithType> が閏年でない場合、戻り値はその年の閏年より前の日を表します。 たとえば、1年が2012年2月29日に追加された場合、返される日付は2013年2月28日になります。  
  
 次の例では、<xref:System.DateTime.AddYears%2A> メソッドを使用して、閏月を表す <xref:System.DateTime> 値を使用する方法を示します。 15年前の日付と、2000年2月29日以降の15年が表示されます。  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> または結果として返された <see cref="T:System.DateTime" /> は <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Compare (t1 As DateTime, t2 As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Compare(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Compare : DateTime * DateTime -&gt; int" Usage="System.DateTime.Compare (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" /> の 2 つのインスタンスを比較し、第 1 のインスタンスが第 2 のインスタンスよりも前か、同じか、それとも後かを示す整数を返します。</summary>
        <returns><paramref name="t1" /> と <paramref name="t2" /> の相対値を示す符号付き数値。  
  
 <list type="table"><listheader><term> 値の型 
 </term><description> 条件 
 </description></listheader><item><term> ゼロより小さい 
 </term><description><paramref name="t1" /> より早い場合は <paramref name="t2" />。  
  
 </description></item><item><term> ゼロ 
 </term><description><paramref name="t1" /> は <paramref name="t2" /> と同じです。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description><paramref name="t1" /> より遅い場合は <paramref name="t2" />。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t2`する `t1` の関係を判断するために、<xref:System.DateTime.Compare%2A> メソッドは `t1` および `t2` の <xref:System.DateTime.Ticks%2A> プロパティを比較しますが、<xref:System.DateTime.Kind%2A> のプロパティを無視します。 <xref:System.DateTime> オブジェクトを比較する前に、オブジェクトが同じタイムゾーンの時刻を表していることを確認してください。  
  
   
  
## Examples 

 <xref:System.DateTime.Compare%2A>メソッドの例を次に示します。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの値と指定した <see cref="T:System.DateTime" /> の値を比較し、このインスタンスの値が指定した <see cref="T:System.DateTime" /> の値よりも前か、同じか、または後かを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.CompareTo%2A> メソッドの2つのオーバーロードは、次の表に示すように、このインスタンスと `value` 引数の相対値を示す符号付き数値を返します。  
  
|値|Description|  
|-----------|-----------------|  
|ゼロより小さい|このインスタンスは、`value` よりも前の日時です。|  
|ゼロ|このインスタンスは `value` と同じです。|  
|0 より大きい値|このインスタンスは、`value` よりも後の日時です。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(DateTime value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : DateTime -&gt; int&#xA;override this.CompareTo : DateTime -&gt; int" Usage="dateTime.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">現在のインスタンスと比較する対象のオブジェクト。</param>
        <summary>このインスタンスの値と指定した <see cref="T:System.DateTime" /> の値を比較し、このインスタンスの値が指定した <see cref="T:System.DateTime" /> の値よりも前か、同じか、または後かを示す整数を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> パラメーターの相対値を示す符号付き数値。  
  
 <list type="table"><listheader><term> 値 
 </term><description> Description 
 </description></listheader><item><term> ゼロより小さい 
 </term><description> このインスタンスは、<paramref name="value" /> よりも前の日時です。  
  
 </description></item><item><term> ゼロ 
 </term><description> このインスタンスは <paramref name="value" /> と同じです。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description> このインスタンスは、<paramref name="value" /> よりも後の日時です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスと `value`の関係を判断するために、<xref:System.DateTime.CompareTo%2A> メソッドは、現在のインスタンスと `value` の <xref:System.DateTime.Ticks%2A> プロパティを比較しますが、<xref:System.DateTime.Kind%2A> のプロパティは無視します。  <xref:System.DateTime> オブジェクトを比較する前に、オブジェクトが同じタイムゾーンの時刻を表していることを確認してください。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 このメソッドは、<xref:System.IComparable%601?displayProperty=nameWithType> インターフェイスを実装し、`value` パラメーターをオブジェクトに変換する必要がないため、<xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType> メソッドのオーバーロードより少しのパフォーマンスを発揮します。  
  
   
  
## Examples  
 次の例では、現在の日付を表す3つの <xref:System.DateTime> オブジェクト、1年前の日付を表す別のオブジェクト、および将来の日付を表す3つのオブジェクトをインスタンス化します。 次に、<xref:System.DateTime.CompareTo%28System.DateTime%29> メソッドを呼び出し、比較の結果を表示します。  
 
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(object value) cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Object ^ value);" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="F#" Value="member this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="dateTime.CompareTo value" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="value">比較対象のボックス化されたオブジェクト、または <see langword="null" />。</param>
        <summary>このインスタンスの値と指定した <see cref="T:System.DateTime" /> の値を含む指定したオブジェクトを比較し、このインスタンスの値が指定した <see cref="T:System.DateTime" /> の値よりも前か、同じか、または後かを示す整数を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table"><listheader><term> 値 
 </term><description> Description 
 </description></listheader><item><term> ゼロより小さい 
 </term><description> このインスタンスは、<paramref name="value" /> よりも前の日時です。  
  
 </description></item><item><term> ゼロ 
 </term><description> このインスタンスは <paramref name="value" /> と同じです。  
  
 </description></item><item><term> 0 より大きい値 
 </term><description> このインスタンスは <paramref name="value" /> より後の時刻を表しているか、または <paramref name="value" /> が <see langword="null" /> です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスと `value`の関係を判断するために、<xref:System.DateTime.CompareTo%2A> メソッドは、現在のインスタンスと `value` の <xref:System.DateTime.Ticks%2A> プロパティを比較しますが、<xref:System.DateTime.Kind%2A> のプロパティは無視します。 <xref:System.DateTime> オブジェクトを比較する前に、オブジェクトが同じタイムゾーンの時刻を表していることを確認してください。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 <xref:System.DateTime>のインスタンスは、その値に関係なく、`null`よりも大きいと見なされます。  
  
   
  
## Examples  
 <xref:System.DateTime.CompareTo%2A>メソッドの例を次に示します。  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> が <see cref="T:System.DateTime" />ではありません。</exception>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Date As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime Date { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Date : DateTime" Usage="System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスの日付の部分を取得します。</summary>
        <value>このインスタンスと日付が同じで、時刻値が深夜の 12 時 (00:00:00) に設定された新しいオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返された <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティの値は、現在のインスタンスの値と同じです。  
  
 <xref:System.DateTime> 型は1つの型の日付と時刻の両方を表しているため、<xref:System.DateTime.Date%2A> プロパティによって返された日付を日付と時刻として誤って解釈しないようにすることが重要です。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.Date%2A> プロパティを使用して <xref:System.DateTime> 値の日付部分を抽出し、その時刻部分を 0 (または0:00:00 または午前0時) に設定しています。 また、<xref:System.DateTime> 値を表示するときに使用される書式指定文字列によっては、書式設定された出力に時間部分が引き続き表示されることがわかります。  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Day As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Day { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Day : int" Usage="System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される月の日付を取得します。</summary>
        <value>DateTime の日付部分 (1 ～ 31)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.DateTime> 値が他の暦を使用してインスタンス化されている場合や、現在のスレッドカルチャの既定の暦がグレゴリオ暦でない場合でも、<xref:System.DateTime.Day%2A> プロパティは常に、グレゴリオ暦の月の日付を返します。 他の暦を使用して特定の日付の月の日付を取得するには、そのカレンダーの <xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType> メソッドを呼び出します。 次の例では、<xref:System.DateTime.Day%2A> プロパティと <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> メソッドの両方を使用して、イスラム暦を使用してインスタンス化された <xref:System.DateTime> 値の月の日付を取得します。  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 同様に、次の例では、<xref:System.DateTime.Day%2A> プロパティと <xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType> メソッドの両方を使用して、現在のスレッドカルチャが、既定の暦としてイスラム暦を使用している場合に、その月の日付を取得します。  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 <xref:System.DateTime.Day%2A>プロパティの例を次に示します。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek DayOfWeek { DayOfWeek get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfWeek : DayOfWeek" Usage="System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される曜日を取得します。</summary>
        <value>この <see cref="T:System.DateTime" /> 値の曜日を示す列挙型定数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DayOfWeek> 列挙型の定数の値は、<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType> から <xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>までの範囲です。 整数にキャストする場合、値は 0 (<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>を示す) から 6 (<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>を示す) までの範囲内で指定します。  
  
 <xref:System.DateTime.DayOfWeek%2A> プロパティは、列挙定数を返します。システムの地域と言語の設定は反映されません。 特定の日付のローカライズされた曜日名を表す文字列を取得するには、`format` パラメーターを含む <xref:System.DateTime.ToString%2A> メソッドのオーバーロードの1つを呼び出し、`ddd` または `dddd` カスタム書式指定文字列のいずれかを渡します。 詳細については、「[方法: 特定の日付から曜日を抽出する](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md)」を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTime.DayOfWeek%2A> プロパティと <xref:System.DayOfWeek?displayProperty=nameWithType> 列挙を示しています。  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DayOfYear As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DayOfYear { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DayOfYear : int" Usage="System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される年間積算日を取得します。</summary>
        <value>1 から 366 までの間の積算日。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DayOfYear%2A> プロパティは、年の日付を計算するときに、うるう年を考慮します。 プロパティ値は、現在のスレッドカルチャの現在の暦に関係なく、グレゴリオ暦の年の日付を常に反映します。 別の暦で年の日付を取得するには、その暦の <xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType> メソッドを呼び出します。  
  
   
  
## Examples  
 次の例では、グレゴリオ暦の2010-2020 年の年12月31日を表示します。 この例では、12月31日がうるう年の年の36番目の日であることが示されています。  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DaysInMonth (year As Integer, month As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DaysInMonth(int year, int month);" />
      <MemberSignature Language="F#" Value="static member DaysInMonth : int * int -&gt; int" Usage="System.DateTime.DaysInMonth (year, month)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年。</param>
        <param name="month">月 (1 から 12 までの範囲の数)。</param>
        <summary>指定した月および年の日数を返します。</summary>
        <returns>指定した <paramref name="month" /> の <paramref name="year" /> の日数。  
  
たとえば、<paramref name="month" /> が 2 月を表す 2 に等しい場合、戻り値には、<paramref name="year" /> が閏年かどうかによって 28 または 29 を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DaysInMonth%2A> メソッドは、グレゴリオ暦が現在のカルチャの現在の暦でない場合でも、常に、グレゴリオ暦の月と年として `month` と `year` を解釈します。 特定の暦の指定した月の日数を取得するには、そのカレンダーの <xref:System.Globalization.Calendar.GetDaysInMonth%2A> メソッドを呼び出します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.DaysInMonth%2A> メソッドを使用して、2001年7月日、1998年2月 (うるう年以外)、および 1996 (うるう年) の日数を確認する方法を示します。  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 次の例では、整数の配列で指定された年の各月の日数を表示します。  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
または 
 <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの <see cref="T:System.DateTime" /> オブジェクトの値が等しいかどうか、または、特定の <see cref="T:System.DateTime" /> インスタンスと別のオブジェクト (<see cref="T:System.DateTime" />) の値が等しいかどうかを表す値を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(DateTime value);" />
      <MemberSignature Language="F#" Value="override this.Equals : DateTime -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスの値が、指定した <see cref="T:System.DateTime" /> インスタンスの値と等しいかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> パラメーターがこのインスタンスの値と等しい場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスと `value` は、<xref:System.DateTime.Ticks%2A> プロパティ値が等しい場合に等しいと見なされます。 <xref:System.DateTime.Kind%2A> のプロパティ値は、等しいかどうかのテストでは考慮されません。  
  
 このメソッドは、<xref:System.IEquatable%601?displayProperty=nameWithType> インターフェイスを実装し、`value` パラメーターをオブジェクトに変換する必要がないため、<xref:System.DateTime.Equals%2A> メソッドよりも若干優れています。  
  
   
  
## Examples  
 <xref:System.DateTime.Equals%2A>メソッドの例を次に示します。  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.Object)" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dateTime.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスが指定したオブジェクトと同一であるかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> が <paramref name="value" /> のインスタンスで、このインスタンスの値に等しい場合は <see cref="T:System.DateTime" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスと `value` は、<xref:System.DateTime.Ticks%2A> プロパティ値が等しい場合に等しいと見なされます。 <xref:System.DateTime.Kind%2A> のプロパティ値は、等しいかどうかのテストでは考慮されません。  
  
   
  
## Examples  
 <xref:System.DateTime.Equals%2A>メソッドの例を次に示します。  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member Equals : DateTime * DateTime -&gt; bool" Usage="System.DateTime.Equals (t1, t2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" /> の 2 つのインスタンスが同じ日付/時刻値を持っているかどうかを示す値を返します。</summary>
        <returns>2 つの値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1` と `t2` は、<xref:System.DateTime.Ticks%2A> プロパティ値が等しい場合に等しいと見なされます。 <xref:System.DateTime.Kind%2A> のプロパティ値は、等しいかどうかのテストでは考慮されません。  
  
   
  
## Examples  
 <xref:System.DateTime.Equals%2A>メソッドの例を次に示します。  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
        <altmember cref="M:System.DateTime.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromBinary (dateData As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromBinary(long dateData);" />
      <MemberSignature Language="F#" Value="static member FromBinary : int64 -&gt; DateTime" Usage="System.DateTime.FromBinary dateData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateData">2 ビット フィールドの <see cref="P:System.DateTime.Kind" /> プロパティおよび 62 ビット フィールドの <see cref="P:System.DateTime.Ticks" /> プロパティをエンコードする 64 ビット符号付き整数。</param>
        <summary>64 ビットのバイナリ値を逆シリアル化し、元のシリアル化 <see cref="T:System.DateTime" /> オブジェクトを再構築します。</summary>
        <returns><see cref="T:System.DateTime" /> メソッドによってシリアル化された <see cref="M:System.DateTime.ToBinary" /> オブジェクトと等価なオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.DateTime> オブジェクトの値をバイナリ値に変換するには、<xref:System.DateTime.ToBinary%2A> メソッドを使用します。 その後、バイナリ値と <xref:System.DateTime.FromBinary%2A> メソッドを使用して、元の <xref:System.DateTime> オブジェクトを再作成します。  
  
> [!IMPORTANT]
>  場合によっては、<xref:System.DateTime.FromBinary%2A> メソッドによって返される <xref:System.DateTime> 値は、<xref:System.DateTime.ToBinary%2A> メソッドに指定された元の <xref:System.DateTime> 値と同一ではありません。 詳細については、次のセクション「ローカル時間の調整」を参照してください。  
  
## <a name="local-time-adjustment"></a>ローカル時間の調整  
 ローカルタイムゾーンに調整された世界協定時刻である現地時刻は、<xref:System.DateTime.Kind%2A> プロパティに <xref:System.DateTimeKind.Local>値が設定された <xref:System.DateTime> 構造体によって表されます。 <xref:System.DateTime.ToBinary%2A> メソッドによって生成されたバイナリ表現からローカルの <xref:System.DateTime> 値を復元する場合、<xref:System.DateTime.FromBinary%2A> メソッドによって、元の値と等しくないように再作成された値が調整されることがあります。 これは、次のような条件で発生します。  
  
-   ローカル <xref:System.DateTime> オブジェクトが <xref:System.DateTime.ToBinary%2A> メソッドによって1つのタイムゾーンでシリアル化され、その後 <xref:System.DateTime.FromBinary%2A> メソッドによって別のタイムゾーンで逆シリアル化された場合、結果の <xref:System.DateTime> オブジェクトによって表されるローカル時間は、2番目のタイムゾーンに自動的に調整されます。  
  
     たとえば、午後3時の現地時刻を表す <xref:System.DateTime> オブジェクトを考えてみます。 米国太平洋標準時ゾーンで実行されているアプリケーションでは、<xref:System.DateTime.ToBinary%2A> メソッドを使用して、その <xref:System.DateTime> オブジェクトをバイナリ値に変換します。 米国東部のタイムゾーンで実行されている別のアプリケーションは、<xref:System.DateTime.FromBinary%2A> メソッドを使用して、バイナリ値を新しい <xref:System.DateTime> オブジェクトに変換します。 新しい <xref:System.DateTime> オブジェクトの値は午後6時です。これは、元の午後3時と同じ時点を表します。 値は、東部標準時のタイムゾーンで現地時刻に調整されます。  
  
-   ローカルの <xref:System.DateTime> 値のバイナリ表現が、<xref:System.DateTime.FromBinary%2A> が呼び出されたシステムのローカルタイムゾーン内の無効な時刻を表している場合、その時刻が有効になるように調整されます。  
  
     たとえば、標準時から夏時間への移行は、2:00 2010 年3月14日の米国の太平洋標準時のタイムゾーンで行われます。これは、時間が1時間経過したときに、午前3時3:00 になります。 この時間間隔は、無効な時刻、つまり、このタイムゾーンに存在しない時間間隔です。 次の例は、この範囲内にある時間が <xref:System.DateTime.ToBinary%2A> メソッドによってバイナリ値に変換され、<xref:System.DateTime.FromBinary%2A> メソッドによって復元されると、元の値が有効な時刻になるように調整されることを示しています。 特定の日付と時刻の値が変更される可能性があるかどうかを判断するには、例に示すように、<xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> メソッドに渡します。  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>バージョンに関する考慮事項  
 .NET Framework バージョン2.0 以降では、<xref:System.DateTime> 構造は、指定された時刻が現地時刻、世界協定時刻 (UTC)、またはそのどちらでもない、プライベートティックフィールドに連結されているかどうかを示すプライベートの種類のフィールドで構成されます。このフィールドには、日付と時刻を指定する100ナノ秒のタイマー刻みの数が タイマー刻みの数には、<xref:System.DateTime.Ticks%2A> プロパティを使用してアクセスできます。また、<xref:System.DateTime.Kind%2A> プロパティを使用して、[種類] フィールドにアクセスできます。  
  
 .NET Framework 2.0 より前では、<xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>などのシリアル化インターフェイスを使用せずに <xref:System.DateTime> オブジェクトを手動でシリアル化した場合、<xref:System.DateTime>内のティックデータのみをシリアル化する必要があります。 .NET Framework 2.0 以降では、種類のデータもシリアル化する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateData" /> が <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
        <altmember cref="M:System.DateTime.ToBinary" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTime (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTime(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTime : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTime fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">タイマー刻み単位で表した Windows ファイルの時刻。</param>
        <summary>指定された Windows ファイル時刻を同等の現地時刻に変換します。</summary>
        <returns><paramref name="fileTime" /> パラメーターによって表された日時に相当する現地時刻を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻は、64年1月 1601 1 日の午前0時から12:00 に経過した100ナノ秒間隔の数を表すビット値です。 西暦協定世界時 (UTC)。 Windows では、ファイルの作成、アクセス、またはファイルへの書き込みを行うときに、ファイルの時刻が記録されます。  
  
 `fileTime` パラメーターは、100ナノ秒単位で表されるファイル時刻を指定します。  
  
 .NET Framework バージョン2.0 以降、戻り値は <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType>である <xref:System.DateTime> です。  
  
   
  
## Examples  
 <xref:System.DateTime.FromFileTime%2A>メソッドの例を次に示します。  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" /> が 0 未満か、<see cref="F:System.DateTime.MaxValue" /> を超える時刻を表しています。</exception>
        <block subset="none" type="usage"><para>通常、<see cref="M:System.DateTime.FromFileTime(System.Int64)" /> メソッドは <see cref="M:System.DateTime.ToFileTime" /> メソッドによって保存された <see cref="T:System.DateTime" /> 値を復元します。 ただし、次のような状況では、2つの値が異なる場合があります。 
-<see cref="T:System.DateTime" /> 値のシリアル化と逆シリアル化が異なるタイムゾーンで発生する場合。 たとえば、時刻が12:30 である <see cref="T:System.DateTime" /> 値の場合、 米国東部標準時のタイムゾーンはシリアル化され、米国太平洋標準時ゾーンで逆シリアル化されます。元の値は午後12:30 です。 は午前9:30 に調整されます。 2つのタイムゾーンの違いを反映する場合は。  
  
-シリアル化された <see cref="T:System.DateTime" /> 値がローカルタイムゾーンの無効な時刻を表している場合。 この場合、<see cref="M:System.DateTime.ToFileTime" /> メソッドは、復元された <see cref="T:System.DateTime" /> 値をローカルタイムゾーンの有効な時刻を表すように調整します。  
  
たとえば、標準時から夏時間への移行は、2:00 2010 年3月14日の米国太平洋標準時ゾーンで行われます。これは、時間が 1 3:00 時間経過したとき、午前15時になります。 この時間間隔は、無効な時刻、つまり、このタイムゾーンに存在しない時間間隔です。 次の例は、この範囲内にある時間が <see cref="M:System.DateTime.ToFileTime" /> メソッドによって長整数値に変換され、<see cref="M:System.DateTime.FromFileTime(System.Int64)" /> メソッドによって復元されると、元の値が有効な時刻になるように調整されることを示しています。 特定の日付と時刻の値が変更される可能性があるかどうかを判断するには、例に示すように、<see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> メソッドに渡します。  
  
[! code-csharp[. FromFileTime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)][! コード-vb[システム. DateTime. FromFileTime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromFileTimeUtc (fileTime As Long) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromFileTimeUtc(long fileTime);" />
      <MemberSignature Language="F#" Value="static member FromFileTimeUtc : int64 -&gt; DateTime" Usage="System.DateTime.FromFileTimeUtc fileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">タイマー刻み単位で表した Windows ファイルの時刻。</param>
        <summary>指定された Windows ファイル時刻を同等の UTC 時刻に変換します。</summary>
        <returns><paramref name="fileTime" /> パラメーターによって表された日時に相当する UTC 時刻を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻は、64年1月 1601 1 日の午前0時から12:00 に経過した100ナノ秒間隔の数を表すビット値です。 西暦協定世界時 (UTC)。 Windows では、ファイルの作成、アクセス、またはファイルへの書き込みを行うときに、ファイルの時刻が記録されます。  
  
 `fileTime` パラメーターは、100ナノ秒単位で表されるファイル時刻を指定します。  
  
 .NET Framework バージョン2.0 以降、戻り値は <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Utc>である <xref:System.DateTime> です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fileTime" /> が 0 未満か、<see cref="F:System.DateTime.MaxValue" /> を超える時刻を表しています。</exception>
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.DateTime.FromFileTime(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromOADate (d As Double) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FromOADate(double d);" />
      <MemberSignature Language="F#" Value="static member FromOADate : double -&gt; DateTime" Usage="System.DateTime.FromOADate d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="d">OLE オートメーション日付値。</param>
        <summary>指定した OLE オートメーション日付と等しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns><paramref name="d" /> と同じ日付と時刻を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `d` パラメーターは、日付を底の日付の前または後の日数として表す倍精度浮動小数点数で、1899年12月30日の午前0時を表します。 `d` の符号と整数部分は、1899年12月からの正または負の日の移動として日付をエンコードし、`d` の小数部分の絶対値によって、1日の午前0時からの時間を1日の端数としてエンコードします。 `d` は、負の 657435.0 ~ 正の2958465.99999999 の間の値である必要があります。  
  
 日付のエンコード方法によっては、1899年12月30日の時刻を表す2つの方法があります。 たとえば、-0.5 と0.5 はどちらも、12 1899 月30日の正午を意味します。これは、底の日付から0日を加算するか、負の値を引いた値がまだ基本データであり、午前0時からの半期が正午であるためです。  
  
 OLE オートメーションの詳細については、「<xref:System.DateTime.ToOADate%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">日付が有効な OLE オートメーション日付の値ではありません。</exception>
        <altmember cref="M:System.DateTime.ToOADate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの値を、標準の日時形式指定子によってサポートされるすべての文字列形式に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.DateTime.GetDateTimeFormats%2A> のオーバーロードに対する複数の呼び出しでは、同一のデータが返されると想定しないでください。 特定のオーバーロードに応じて、このメソッドによって返されるデータは、現在のカルチャが変更された場合、ユーザーが個々のカルチャ設定をオーバーライドした場合、または更新がシステムのカルチャデータに対して行われた場合に変更される可能性があります。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : unit -&gt; string[]" Usage="dateTime.GetDateTimeFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの値を、標準の日時形式指定子によってサポートされるすべての文字列形式に変換します。</summary>
        <returns>要素を格納した文字列配列。要素は、標準日時形式指定子のいずれかで書式指定されたこのインスタンスの値を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType> メソッドによって返される文字列配列は、<xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> メソッドへの個別の呼び出しによって返される文字列配列を "d"、"D"、"f"、"F"、"g"、"G"、"m"、"o"、"r"、"s"、"t"、"T"、"u"、"U"、および "y" の標準書式指定文字列。 標準書式指定子の詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」を参照してください。  
  
 戻り値の各要素は、現在のカルチャの情報を使用して書式設定されます。 現在のカルチャのカルチャ固有の書式設定情報の詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>」を参照してください。  
  
> [!IMPORTANT]
>  このメソッドはカルチャに依存するデータを使用するため、メソッドを複数回呼び出すと、同一のデータが返されると想定しないでください。 このメソッドによって返されるデータは、現在のカルチャが変更された場合、ユーザーが個々のカルチャ設定をオーバーライドした場合、または更新がシステムのカルチャデータに対して行われた場合に変更される可能性があります。  
  
   
  
## Examples  
 <xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType>メソッドの例を次に示します。 この例では、コンピューターの現在のカルチャで使用可能なすべての標準の日付/時刻書式を使用して、日付の文字列形式を表示します (この場合は en-us)。  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 この例では、次の出力が表示されます。  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char -&gt; string[]" Usage="dateTime.GetDateTimeFormats format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">標準の日時書式指定文字列。</param>
        <summary>このインスタンスの値を、指定した標準の日時形式指定子によってサポートされるすべての文字列表記に変換します。</summary>
        <returns>各要素が <paramref name="format" /> 標準日時形式指定子で書式指定されたこのインスタンスの値を表す文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format` パラメーターには、標準の日時書式指定子を指定できます。 これには、d、D、f、F、g、G、M (または m)、O (または o)、R (または r)、s、t、T、u、U、Y (または y) が含まれます。 詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」を参照してください。  
  
 戻り値の各要素は、現在のカルチャの情報を使用して書式設定されます。 現在のカルチャのカルチャ固有の書式設定情報の詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>」を参照してください。  
  
> [!IMPORTANT]
>  このメソッドはカルチャに依存するデータを使用するため、メソッドを複数回呼び出すと、同一のデータが返されると想定しないでください。 このメソッドによって返されるデータは、現在のカルチャが変更された場合、ユーザーが個々のカルチャ設定をオーバーライドした場合、または更新がシステムのカルチャデータに対して行われた場合に変更される可能性があります。  
  
   
  
## Examples  
 <xref:System.DateTime.GetDateTimeFormats%28System.Char%29>メソッドの例を次に示します。 現在のカルチャの長い日付形式指定子 ("D") を使用して、日付の文字列形式を表示します。  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> は有効な標準日時形式指定子の文字ではありません。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの値を、標準日時形式指定子および指定したカルチャ固有の書式情報によってサポートされる、すべての文字列形式に変換します。</summary>
        <returns>要素を格納した文字列配列。要素は、標準日時形式指定子のいずれかで書式指定されたこのインスタンスの値を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType> メソッドによって返される文字列配列は、<xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドへの個別の呼び出しによって返される文字列配列を "d"、"D"、"f"、"F"、"g"、"G"、"m"、"o"、"r"、"s"、"t"、"T"、"u"、"U"、および "y" の標準書式指定文字列。 標準書式指定子の詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」を参照してください。  
  
 戻り値の各要素は、`provider`によって提供されるカルチャ固有の情報を使用して書式設定されます。  
  
> [!IMPORTANT]
>  このメソッドはカルチャに依存するデータを使用するため、`provider` がインバリアントカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトでない限り、メソッドの複数の呼び出しで同一のデータが返されると想定しないでください。 このメソッドによって返されるデータは、ユーザーが `provider` の個々のカルチャ設定をオーバーライドした場合、または `provider`のシステムのカルチャデータに更新が発生した場合に変更される可能性があります。  
  
   
  
## Examples  
 <xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドの例を次に示します。 このメソッドは、fr-fr カルチャに対して可能なすべての標準日時形式を使用して、日付の文字列形式を表示します。  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 この例では、次の出力が表示されます。  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeFormats (format As Char, provider As IFormatProvider) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetDateTimeFormats(char format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeFormats : char * IFormatProvider -&gt; string[]" Usage="dateTime.GetDateTimeFormats (format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">日時書式指定文字列。</param>
        <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの値を、指定した標準日時形式指定子およびカルチャ固有の書式情報によってサポートされる、すべての文字列表記に変換します。</summary>
        <returns>要素を格納した文字列配列。要素は、標準日時形式指定子のいずれかで書式指定されたこのインスタンスの値を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Format パラメーターには、標準の日時書式指定子を指定できます。 これには、d、D、f、F、g、G、M (または m)、O (または o)、R (または r)、s、t、T、u、U、Y (または y) が含まれます。 詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」を参照してください。  
  
 戻り値の各要素は、`provider`によって提供されるカルチャ固有の情報を使用して書式設定されます。  
  
> [!IMPORTANT]
>  このメソッドはカルチャに依存するデータを使用するため、`provider` がインバリアントカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトでない限り、メソッドの複数の呼び出しで同一のデータが返されると想定しないでください。 このメソッドによって返されるデータは、ユーザーが `provider` の個々のカルチャ設定をオーバーライドした場合、または `provider`のシステムのカルチャデータに更新が発生した場合に変更される可能性があります。  
  
   
  
## Examples  
 <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29>メソッドの例を次に示します。 このメソッドは、fr-fr カルチャの短い日付書式指定子 ("d") を使用して、日付の文字列形式を表示します。  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> は有効な標準日時形式指定子の文字ではありません。</exception>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dateTime.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビットの符号付き整数のハッシュ コードです。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TypeCode GetTypeCode() cil managed" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCode GetTypeCode();" FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="F#" Value="member this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " FrameworkAlternate="netcore-2.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.GetTypeCode " FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.TypeCode" /> 値型の <see cref="T:System.DateTime" />を返します。</summary>
        <returns>列挙型定数 <see cref="F:System.TypeCode.DateTime" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hour As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Hour { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Hour : int" Usage="System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の時間の部分を取得します。</summary>
        <value>DateTime の時間部分 (0 ～ 23)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Hour%2A> プロパティの値は、常に24時間制を使用して表されます。 12時間制を使用して日時の時刻を表す文字列を取得するには、"h" カスタム書式指定子を使用して、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> または <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドを呼び出します。 次に例を示します。  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 <xref:System.DateTime.Hour%2A>プロパティの例を次に示します。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDaylightSavingTime () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime();" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : unit -&gt; bool" Usage="dateTime.IsDaylightSavingTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.DateTime" /> のインスタンスが、現在のタイム ゾーンの夏時間の期間内であるかどうかを示します。</summary>
        <returns><see langword="true" /> プロパティの値が <see cref="P:System.DateTime.Kind" /> または <see cref="F:System.DateTimeKind.Local" /> で、この <see cref="F:System.DateTimeKind.Unspecified" /> インスタンスの値がローカル タイム ゾーンの夏時間の期間内にある場合は <see cref="T:System.DateTime" /> 。 <see langword="false" /> が <see cref="P:System.DateTime.Kind" /> の場合は <see cref="F:System.DateTimeKind.Utc" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、現在の <xref:System.DateTime> 値が、<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> プロパティによって返されるローカルタイムゾーンの夏時間の範囲内に収まるかどうかを判断します。 <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType> プロパティの値を取得することによって、タイムゾーンが夏時間をサポートしているかどうかを確認できます。 夏時間を観察するタイムゾーンの場合は、タイムゾーンの <xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> 配列を取得することによって、夏時間との間の切り替えが発生するタイミングを判断できます。  
  
 現在の <xref:System.DateTime> 値がローカルタイムゾーンのあいまいな時刻または無効な時刻を表している場合、メソッドは `false`を返します。  
  
 [!INCLUDE[winxp](~/includes/winxp-md.md)] システムでは、<xref:System.DateTime.IsDaylightSavingTime%2A> メソッドは、現在のインスタンスが夏時間であるかどうかを判断するときに、現在の調整規則のみを認識します。 その結果、現在のインスタンスが、現在の調整規則が有効になるまでの期間の夏時間であるかどうかが、メソッドによって正確に報告されない可能性があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLeapYear (year As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLeapYear(int year);" />
      <MemberSignature Language="F#" Value="static member IsLeapYear : int -&gt; bool" Usage="System.DateTime.IsLeapYear year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">4 桁の年。</param>
        <summary>指定された年が閏年かどうかを示す値を返します。</summary>
        <returns><see langword="true" /> が閏年である場合は <paramref name="year" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year` は4桁の10進数として指定します。たとえば、1996のようになります。  
  
 `year` は、常にグレゴリオ暦で年として解釈されます。 特定の年が他の暦で閏年であるかどうかを確認するには、その calendar オブジェクトの `IsLeapYear` メソッドを呼び出します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.IsLeapYear%2A> メソッドを使用して、1994と2014の間の年数が閏年かどうかを判断します。 また、この例では、<xref:System.DateTime.AddYears%2A> メソッドを使用して年を閏年に追加した場合の結果も示しています。  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="year" /> が 1 未満であるか、または 9999 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DateTimeKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTimeKind Kind { DateTimeKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Kind : DateTimeKind" Usage="System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスが表す時刻の種類 (現地時刻、世界協定時刻 (UTC)、または、そのどちらでもない) を示す値を取得します。</summary>
        <value>現在の時刻が表すものを示す列挙値の 1 つ。 既定では、 <see cref="F:System.DateTimeKind.Unspecified" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.SpecifyKind%2A> メソッドを呼び出すことによって、新しい <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティを特定の <xref:System.DateTimeKind> 値に明示的に設定できます。  
  
 <xref:System.DateTime.Kind%2A> プロパティを使用すると、<xref:System.DateTime> の値に世界協定時刻 (UTC) または現地時刻を明確に反映させることができます。 これに対して、<xref:System.DateTimeOffset> 構造体は、任意のタイムゾーンの任意の時刻を特定の時点として明確に反映できます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.SpecifyKind%2A> メソッドを使用して、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTime.ToLocalTime%2A> および <xref:System.DateTime.ToUniversalTime%2A> の変換メソッドにどのように影響するかを示します。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MaxValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxValue : DateTime" Usage="System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTime" />の最大有効値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数の値は、グレゴリオ暦の 23:59: 59.9999999 UTC、9999年12月31日に相当します。これは、00:00:00 UTC (1 月 1万1日) の前に正確に 1 100 ナノ秒ティックを示します。  
  
 <xref:System.Globalization.ThaiBuddhistCalendar>などの一部のカレンダーでは、<xref:System.DateTime.MaxValue>よりも前の日付範囲がサポートされています。 このような場合は、変数の割り当てまたは書式設定および解析操作で <xref:System.DateTime.MaxValue> にアクセスしようとすると、<xref:System.ArgumentOutOfRangeException>がスローされる可能性があります。 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>の値を取得するのではなく、<xref:System.Globalization.Calendar.MaxSupportedDateTime?displayProperty=nameWithType> プロパティから、指定したカルチャの最新の有効な日付の値を取得できます。  
  
   
  
## Examples  
 次の例では、コンストラクターにタイマー刻みの数を表す <xref:System.Int64> 値を渡すことによって、<xref:System.DateTime> オブジェクトをインスタンス化します。 この例では、コンストラクターを呼び出す前に、この値が `DateTime.MinValue.Ticks` 以上で `DateTime.MaxValue.Ticks`以下であることを確認します。 そうでない場合は、<xref:System.ArgumentOutOfRangeException>をスローします。  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.DateTime.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Millisecond As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Millisecond { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Millisecond : int" Usage="System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付のミリ秒の部分を取得します。</summary>
        <value>DateTime のミリ秒部分 (0 ～ 999)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "Fff" 書式指定子を使用して、<xref:System.DateTime.Millisecond%2A> プロパティの文字列形式を表示できます。 たとえば、次のコードでは、コンソールへの日時のミリ秒数を含む文字列が表示されます。  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 また、"o" 標準書式指定子を使用して、日付と時刻の値の他のコンポーネントと共にミリ秒部分を表示することもできます。 次に例を示します。  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 ただし、"o" 書式指定子は、ラウンドトリップの場合や <xref:System.DateTime> 値を格納する場合よりも表示されません。 次の例に示すように、カスタム書式指定文字列を使用して、ミリ秒を他の日付/時刻コンポーネントと共に表示することもできます。  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 <xref:System.DateTime.Millisecond%2A>プロパティの例を次に示します。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Minute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Minute : int" Usage="System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の分の部分を取得します。</summary>
        <value>DateTime の分の部分 (0 ～ 59)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <xref:System.DateTime.Minute%2A>プロパティの例を次に示します。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinValue As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime MinValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinValue : DateTime" Usage="System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTime" />の最小有効値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数の値は、グレゴリオ暦での 00:00: 00.0000000 UTC (0001 年1月1日) に相当します。  
  
 <xref:System.DateTime.MinValue> は、初期化されていない <xref:System.DateTime> 変数に割り当てられた日付と時刻を定義します。 次の例を使って説明します。  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 <xref:System.DateTime.MinValue> プロパティと <xref:System.DateTime.MaxValue> プロパティを使用して、値がサポートされている範囲内にあることを確認してから、<xref:System.DateTime> コンストラクターに渡すことができます。 この例のコードは、この使用方法を示しています。  
  
   
  
## Examples  
 次の例では、コンストラクターにタイマー刻みの数を表す <xref:System.Int64> 値を渡すことによって、<xref:System.DateTime> オブジェクトをインスタンス化します。 この例では、コンストラクターを呼び出す前に、この値が `DateTime.MinValue.Ticks` 以上で `DateTime.MaxValue.Ticks`以下であることを確認します。 そうでない場合は、<xref:System.ArgumentOutOfRangeException>をスローします。  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Month As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Month { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Month : int" Usage="System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の月の部分を取得します。</summary>
        <value>DateTime の月部分 (1 ～ 12)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <xref:System.DateTime.Month%2A>プロパティの例を次に示します。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Now As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Now { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Now : DateTime" Usage="System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンピューター上の現在の日時を現地時刻で表した <see cref="T:System.DateTime" /> オブジェクトを取得します。</summary>
        <value>現在の現地日時を値として保持するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Now%2A> プロパティは、ローカルコンピューター上の現在の日付と時刻を表す <xref:System.DateTime> 値を返します。 <xref:System.DateTime> 値には、0001年1月1日の午前0時から経過したタイマー刻みの数と、カルチャ固有の形式で日付と時刻の値を表す <xref:System.DateTime> 値の文字列形式を表している点に注意してください。 日付と時刻の値の書式設定の詳細については、<xref:System.DateTime.ToString%2A> メソッドを参照してください。 次の例では、短い日付と時刻の文字列を、カルチャ固有のさまざまな形式で表示します。  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 このプロパティの解決策は、基になるオペレーティングシステムに依存するシステムタイマーによって異なります。 0.5 ~ 15 ミリ秒の範囲で指定します。 その結果、ループ内などの短い時間間隔で <xref:System.DateTime.Now%2A> プロパティを繰り返し呼び出すと、同じ値が返される可能性があります。  
  
 <xref:System.DateTime.Now%2A> プロパティは、パフォーマンスを測定するためによく使用されます。 ただし、解像度が低いため、ベンチマークツールとしての使用には適していません。 代わりに、<xref:System.Diagnostics.Stopwatch> クラスを使用することをお勧めします。  
  
 .NET Framework バージョン2.0 以降、戻り値は <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType>を返す <xref:System.DateTime> です。  
  
> [!NOTE]
>  また、<xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType> プロパティを使用して、現在のローカルの日付と時刻を取得することもできます。 ローカル時刻を1つの時点として明確に表現できるため、その時刻値はコンピューター間で移植可能になります。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.Now%2A> と <xref:System.DateTime.UtcNow%2A> のプロパティを使用して、現在の現地日時と現在の世界協定 (UTC) 日付と時刻を取得します。 次に、さまざまなカルチャの書式指定規則を使用して、<xref:System.DateTime.Kind%2A> のプロパティの値と共に文字列を表示します。  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.Now" />
        <altmember cref="P:System.DateTime.UtcNow" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator +(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( + ) : DateTime * TimeSpan -&gt; DateTime" Usage="d + t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">追加する日付と時刻の値。</param>
        <param name="t">加算する時間間隔。</param>
        <summary>指定した日付と時刻に指定した時間間隔を加算して、新しい日付と時刻を作成します。</summary>
        <returns><paramref name="d" /> に <paramref name="t" /> を加算した値であるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[この演算子の同等のメソッドは <xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 加算演算子の例を次に示します。  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> は <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
        <altmember cref="M:System.DateTime.Add(System.TimeSpan)" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : DateTime * DateTime -&gt; bool" Usage="d1 = d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">比較する最初のオブジェクト。</param>
        <param name="d2">比較する 2 番目のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" /> の 2 つの指定されたインスタンスが等しいかどうかを判断します。</summary>
        <returns><see langword="true" /> と <paramref name="d1" /> が同じ日付と時刻を表す場合は <paramref name="d2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Equality%2A> 演算子は、タイマー刻みの数を比較することによって、2つの <xref:System.DateTime> 値が等しいかどうかを判断します。 <xref:System.DateTime> オブジェクトを比較する前に、オブジェクトが同じタイムゾーンの時刻を表していることを確認してください。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子の同等のメソッドは <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 等値演算子の例を次に示します。  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Equals(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary>指定した <see cref="T:System.DateTime" /> が、指定したもう 1 つの <see cref="T:System.DateTime" />より後の時刻かどうかを判断します。</summary>
        <returns><see langword="true" /> が <paramref name="t1" /> より遅い場合は <paramref name="t2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_GreaterThan%2A> 演算子は、タイマー刻みの数を比較することによって、2つの <xref:System.DateTime> 値の間のリレーションシップを決定します。 <xref:System.DateTime> オブジェクトを比較する前に、オブジェクトが同じタイムゾーンの時刻を表していることを確認してください。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子の同等のメソッドは <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &gt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &gt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary>指定した 1 つの <see cref="T:System.DateTime" /> が、指定した別の <see cref="T:System.DateTime" />と同じ日時またはそれより後の日時を表しているかどうかを判断します。</summary>
        <returns><see langword="true" /> が <paramref name="t1" /> と同じかそれより遅い場合は <paramref name="t2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_GreaterThanOrEqual%2A> 演算子は、タイマー刻みの数を比較することによって、2つの <xref:System.DateTime> 値の間のリレーションシップを決定します。 <xref:System.DateTime> オブジェクトを比較する前に、オブジェクトが同じタイムゾーンの時刻を表していることを確認してください。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子の同等のメソッドは <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (d1 As DateTime, d2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : DateTime * DateTime -&gt; bool" Usage="System.DateTime.op_Inequality (d1, d2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">比較する最初のオブジェクト。</param>
        <param name="d2">比較する 2 番目のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" /> の指定された 2 つのインスタンスが等しくないかどうかを判断します。</summary>
        <returns><see langword="true" /> と <paramref name="d1" /> が同じ日付と時刻を表していない場合は <paramref name="d2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Inequality%2A> 演算子は、タイマー刻みの数を比較することによって、2つの <xref:System.DateTime> 値が等しくないかどうかを判断します。 <xref:System.DateTime> オブジェクトを比較する前に、オブジェクトが同じタイムゾーンの時刻を表していることを確認してください。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子の同等のメソッドは <xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt; (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt; ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt; t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary>指定した <see cref="T:System.DateTime" /> が、指定したもう 1 つの <see cref="T:System.DateTime" />より前の時刻かどうかを判断します。</summary>
        <returns><see langword="true" /> が <paramref name="t1" /> より早い場合は <paramref name="t2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_LessThan%2A> 演算子は、タイマー刻みの数を比較することによって、2つの <xref:System.DateTime> 値の間のリレーションシップを決定します。 <xref:System.DateTime> オブジェクトを比較する前に、オブジェクトが同じタイムゾーンの時刻を表していることを確認してください。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子の同等のメソッドは <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (t1 As DateTime, t2 As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(DateTime t1, DateTime t2);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : DateTime * DateTime -&gt; bool" Usage="t1 &lt;= t2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary>指定した 1 つの <see cref="T:System.DateTime" /> が、指定した別の <see cref="T:System.DateTime" />と同じ日時またはそれより前の日時を表しているかどうかを判断します。</summary>
        <returns><see langword="true" /> が <paramref name="t1" /> と同じかそれより早い場合は <paramref name="t2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_LessThanOrEqual%2A> 演算子は、タイマー刻みの数を比較することによって、2つの <xref:System.DateTime> 値の間のリレーションシップを決定します。 <xref:System.DateTime> オブジェクトを比較する前に、オブジェクトが同じタイムゾーンの時刻を表していることを確認してください。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子の同等のメソッドは <xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.CompareTo(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した <see cref="T:System.DateTime" /> から指定した <see cref="T:System.TimeSpan" /> または <see cref="T:System.DateTime" /> を減算します。</summary>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d1 As DateTime, d2 As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeSpan operator -(DateTime d1, DateTime d2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * DateTime -&gt; TimeSpan" Usage="d1 - d2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">減算対象の日付および時刻の値 (被減数)。</param>
        <param name="d2">減算する日付および時刻の値 (減数)。</param>
        <summary>指定した日付と時刻から指定したもう 1 つの日付と時刻を減算して、時間間隔を返します。</summary>
        <returns><paramref name="d1" /> と <paramref name="d2" /> の間の時間間隔、つまり <paramref name="d1" /> から <paramref name="d2" /> を引いた値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29> メソッドは、減算を実行するときに、2つの <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティの値を考慮しません。 <xref:System.DateTime> オブジェクトを差し引く前に、オブジェクトが同じタイムゾーンの時刻を表していることを確認します。 それ以外の場合、結果にはタイムゾーン間の違いが含まれます。  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType> メソッドは、減算を実行するときのタイムゾーン間の違いを考慮します。  
  
 この演算子の同等のメソッドは <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 次の例は、<xref:System.DateTime.Subtract%2A> メソッドと減算演算子を示しています。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.Subtract(System.DateTime)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (d As DateTime, t As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime operator -(DateTime d, TimeSpan t);" />
      <MemberSignature Language="F#" Value="static member ( - ) : DateTime * TimeSpan -&gt; DateTime" Usage="d - t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">減算される日時の値。</param>
        <param name="t">減算する時間間隔。</param>
        <summary>指定した日付と時刻から指定した時間間隔を減算して、新しい日付と時刻を返します。</summary>
        <returns><paramref name="d" /> の値から <paramref name="t" /> の値を減算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`d`のティック値から `t` のティック値を減算します。  
  
 この演算子の同等のメソッドは <xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 次の例は、<xref:System.DateTime.Subtract%2A> メソッドと減算演算子を示しています。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> は <see cref="F:System.DateTime.MinValue" /> 未満であるか、 <see cref="F:System.DateTime.MaxValue" />を超えています。</exception>
        <altmember cref="M:System.DateTime.Subtract(System.TimeSpan)" />
        <altmember cref="P:System.DateTime.Ticks" />
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

## Remarks  
 このセクションの内容は次のとおりです。  
  
- [どの方法を呼び出すか。](#Tasks)
- [解析する文字列。](#StringToParse)
- [解析とカルチャ規則](#Culture)
- [解析とスタイル要素](#Styles)
- [戻り値と DateTime. Kind](#kind)
 
<a name="Tasks"></a>   
### <a name="which-method-do-i-call"></a>どの方法を呼び出すか。  
  
|ターゲット|Call (英語の可能性あり)|  
|--------|----------|  
|現在のカルチャの規則を使用して、日付と時刻の文字列を解析します。|<xref:System.DateTime.Parse%28System.String%29> オーバーロード|  
|特定のカルチャの規則を使用して、日付と時刻の文字列を解析します。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> のオーバーロード (「[解析とカルチャ規則」を](#Culture)参照)|  
|特殊なスタイル要素 (空白文字、空白文字など) を使用して、日付と時刻の文字列を解析します。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> オーバーロード|  
|特定の形式にする必要がある日付と時刻の文字列を解析します。|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> または <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>|
|日付と時刻の文字列を解析し、UTC または現地時刻への変換を実行します。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> オーバーロード|  
|例外を処理せずに、日付と時刻の文字列を解析します。|<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> メソッド|  
|書式設定操作によって作成された日付と時刻の値を復元 (ラウンドトリップ) します。|"O" または "r" の標準書式指定文字列を <xref:System.DateTime.ToString%28System.String%29> メソッドに渡し、で <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> のオーバーロードを呼び出し <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>|  
|コンピューター (および場合によってはカルチャ) の境界を越えて、固定形式の日付と時刻の文字列を解析します。|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> または <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> メソッド|  
  
<a name="StringToParse"></a>   
### <a name="the-string-to-parse"></a>解析する文字列。  
 <xref:System.DateTime.Parse%2A> メソッドは、日付と時刻の値の文字列形式を、それと等価な <xref:System.DateTime> に変換しようとします。 <xref:System.FormatException> 例外をスローせずに入力文字列を完全に解析しようとします。  
  
> [!IMPORTANT]
>  認識されない文字列形式のために解析操作が失敗した場合、<xref:System.DateTime.Parse%2A> メソッドは <xref:System.FormatException>をスローしますが、<xref:System.DateTime.TryParse%2A> メソッドは `false`を返します。 例外処理はコストがかかる場合があるため、入力ソースが信頼されているために解析操作が成功すると予想される場合は <xref:System.DateTime.Parse%2A> を使用する必要があります。 <xref:System.DateTime.TryParse%2A> は、解析エラーが発生する可能性がある場合 (特に入力ソースが信頼されていない場合) や、正しく解析されない文字列の代わりに適切な既定値を使用する場合に適しています。   

 解析する文字列は、次のいずれかの形式になります。  
  
-   日付と時刻のコンポーネントを含む文字列。  
  
-   日付と時刻のコンポーネントを含まない文字列。 時刻部分が存在しない場合、メソッドは午前0時12:00 を想定します。 日付部分に2桁の年がある場合は、現在のカルチャの現在の暦の <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> または指定したカルチャの現在の暦に基づいて、年に変換されます (null 以外の `provider` 引数を持つオーバーロードを使用する場合)。  
  
- 月と年だけを含み、日の部分を含まない日付部分を含む文字列。 このメソッドは、月の最初の日を想定しています。

- 月と日だけを含み、年を含まない、日付部分を含む文字列。 このメソッドは、現在の年を想定しています。

-   時刻を指定し、日付部分を含まない文字列。 メソッドは、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> のオーバーロードを呼び出し、`styles` 引数に <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> を含めるのでない限り、現在の日付を想定しています。この場合、メソッドは0001年1月1日の日付を想定しています。  

- 時刻部分と AM/PM 指定子のみを含み、日付部分を含まない、時刻部分を含む文字列。 このメソッドは、現在の日付と時刻を指定します。時間はありません。秒は使用できません。 この動作を変更するには、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> のオーバーロードを呼び出し、`styles` 引数に <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> を含めます。この場合、メソッドは0001年1月1日の日付を想定します。

-   タイムゾーン情報を含み、ISO 8601 に準拠している文字列。 次の例では、最初の文字列は世界協定時刻 (UTC) を指定し、2番目の文字列は UTC より7時間前のタイムゾーンの時刻を指定します。  
  
    "2008-11-01T19:35:00.0000000Z"   
    "2008-11-01T19:35:00.0000000-07:00"  
  
-   GMT 指定子を含み、RFC 1123 時刻形式に準拠している文字列。例えば：  
  
     "Sat, 01 11 月 2008 19:35:00 GMT"  
  
-   タイムゾーンオフセット情報と共に日付と時刻を含む文字列。例えば：  
  
     "03/01/2009 05:42:00 -5:00"  

次の例では、現在のカルチャの書式指定規則 (この例では en-us カルチャ) を使用して、これらの各形式の文字列を解析します。

[!code-csharp[Default parsing](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse6.cs)]
[!code-vb[Default parsing](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse6.vb)]  
  
 入力文字列が、解析メソッドによって使用される暦における閏年の閏年を表している場合 (「[解析とカルチャの規則](#Culture)」を参照)、<xref:System.DateTime.Parse%2A> メソッドは文字列を正常に解析します。 入力文字列がうるう年以外の閏日を表している場合、メソッドは <xref:System.FormatException>をスローします。  
  
 <xref:System.DateTime.Parse%2A> メソッドは、現在のカルチャまたは指定されたカルチャの書式設定規則を使用して、日付と時刻の文字列形式を解析しようとするため、異なるカルチャで文字列を解析しようとすると失敗することがあります。 異なるロケールで特定の日付と時刻の書式を解析するには、<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> メソッドのオーバーロードのいずれかを使用して、書式指定子を指定します。  
  
<a name="Culture"></a>   
### <a name="parsing-and-cultural-conventions"></a>解析とカルチャ規則  
 <xref:System.DateTime.Parse%2A> メソッドのすべてのオーバーロードは、解析対象の文字列 (次の表の `s` で表されます) が ISO 8601 パターンに準拠している場合を除き、カルチャに依存します。 解析操作では、次のように派生した <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの書式情報を使用します。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

|を呼び出す場合|`provider`|書式設定情報の派生元|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|現在のスレッドカルチャ (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> プロパティ)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|<xref:System.Globalization.DateTimeFormatInfo> オブジェクト|指定された <xref:System.Globalization.DateTimeFormatInfo> オブジェクト|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|現在のスレッドカルチャ (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> プロパティ)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|<xref:System.Globalization.CultureInfo> オブジェクト|<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティ|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|カスタム <xref:System.IFormatProvider> の実装|<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> メソッド|  
  
 書式設定情報が <xref:System.Globalization.DateTimeFormatInfo> オブジェクトから派生した場合、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> プロパティは、解析操作で使用されるカレンダーを定義します。  
  
 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを使用して、標準カルチャとは異なる設定を使用して日付と時刻の文字列を解析する場合は、<xref:System.DateTime.Parse%2A> メソッドの代わりに <xref:System.DateTime.ParseExact%2A> メソッドを使用して、正常に変換できる可能性を高めることができます。 非標準の日付と時刻の文字列は複雑で解析が困難な場合があります。 <xref:System.DateTime.Parse%2A> メソッドは、いくつかの暗黙的な解析パターンを使用して文字列を解析しようとしますが、これらはすべて失敗する可能性があります。 これに対し、<xref:System.DateTime.ParseExact%2A> メソッドでは、成功する可能性がある1つ以上の正確な解析パターンを明示的に指定する必要があります。 詳細については、「<xref:System.Globalization.DateTimeFormatInfo>」トピックの「DateTimeFormatInfo and 動的データ」セクションを参照してください。  
  
> [!IMPORTANT]
>  特定のカルチャの書式指定規則は動的であり、変更される可能性があることに注意してください。 これは、次のいずれかが発生した場合に、既定の (現在の) カルチャの書式指定規則に依存しているか、インバリアントカルチャ以外のカルチャを表す <xref:System.IFormatProvider> オブジェクトを指定する解析操作が予期せず失敗することを意味します。  
>   
> -   カルチャ固有のデータは、.NET Framework のメジャーバージョンまたはマイナーバージョン間で変更されるか、.NET Framework の既存のバージョンに対する更新の結果として変更されます。  
> -   カルチャ固有のデータにはユーザー設定が反映されますが、これはマシン間またはセッション間で異なる場合があります。  
> -   カルチャ固有のデータは、標準カルチャまたはカスタムカルチャの設定をオーバーライドする置換カルチャを表します。  
>   
>  カルチャデータの変更に関連付けられているデータと時刻文字列の解析に問題が発生しないようにするには、インバリアントカルチャを使用して日付と時刻の文字列を解析します。または、<xref:System.DateTime.ParseExact%2A> または <xref:System.DateTime.TryParseExact%2A> メソッドを呼び出し、解析する文字列の正確な形式を指定することもできます。 日付と時刻のデータをシリアル化および逆シリアル化する場合は、インバリアントカルチャの書式指定規則を使用するか、バイナリ形式で <xref:System.DateTime> 値をシリアル化および逆シリアル化することができます。  
>   
>  詳細については、<xref:System.Globalization.CultureInfo> のトピックの「動的なカルチャデータ」と「<xref:System.DateTime>」トピックの「DateTime 値の永続化」セクションを参照してください。  
  
<a name="Styles"></a>   
### <a name="parsing-and-style-elements"></a>解析とスタイル要素  
 すべての <xref:System.DateTime.Parse%2A> オーバーロードは、入力文字列 (次の表の `s` で表される) の先頭、内部、または末尾の空白文字を無視します。 日付と時刻は、先頭と末尾の番号記号 ("#"、U + 0023) のペアで囲むことができ、1つ以上の NULL 文字 (U + 0000) で trailed できます。  
  
 さらに、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> のオーバーロードには、<xref:System.Globalization.DateTimeStyles> 列挙体の1つ以上のメンバーで構成される `styles` パラメーターがあります。 このパラメーターは `s` をどのように解釈するか、および解析操作で `s` を日付と時刻に変換する方法を定義します。 次の表では、解析操作における各 <xref:System.Globalization.DateTimeStyles> メンバーの効果について説明します。  
  
|DateTimeStyles メンバー|変換に対する影響|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|次のように `s` を解析し、必要に応じて UTC に変換します。<br /><br /> -`s` にタイムゾーンオフセットが含まれている場合、または `s` にタイムゾーン情報が含まれておらず、`styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal> フラグが含まれている場合、メソッドは文字列を解析し、<xref:System.DateTime.ToUniversalTime%2A> を呼び出して返された <xref:System.DateTime> 値を UTC に変換し、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。<br />-`s` が UTC を表すことを示している場合、または `s` にタイムゾーン `styles` 情報が含まれておらず、<xref:System.Globalization.DateTimeStyles.AssumeUniversal> フラグが含まれている場合、メソッドは文字列を解析し、返された <xref:System.DateTime> 値に対してタイムゾーン変換を実行せず、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。<br />-その他のすべての場合、フラグは無効です。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|この値は無視されます。 `s`の日付と時刻の要素では、内側の空白文字が常に許可されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|この値は無視されます。 先頭の空白文字は、常に `s`の日付と時刻の要素で許可されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|この値は無視されます。 `s`の日付と時刻の要素では、末尾の空白文字が常に許可されます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`s` に、先頭、内部、および末尾の空白を含めることができることを指定します。 これは既定の動作です。 <xref:System.Globalization.DateTimeStyles.None>など、より制限の厳しい <xref:System.Globalization.DateTimeStyles> 列挙値を指定することによってオーバーライドすることはできません。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|タイムゾーン情報が `s` ない場合は、ローカル時刻と見なされることを指定します。 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> フラグが存在しない場合、返される <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|タイムゾーン情報が `s` ない場合、UTC が想定されることを指定します。 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> フラグが存在しない場合、メソッドは、返された <xref:System.DateTime> 値を UTC から現地時刻に変換し、その <xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定します。|  
|<xref:System.Globalization.DateTimeStyles.None>|有効ですが、この値は無視されます。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイムゾーン情報を含む文字列の場合、は、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定して、日付と時刻の文字列を、現地時刻を表す <xref:System.DateTime> 値に変換しないようにします。 通常、このような文字列は、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> メソッドを呼び出し、"o"、"r"、または "u" 標準書式指定子を使用することによって作成されます。|  

<a name="kind"></a>   
### <a name="the-return-value-and-datetimekind"></a>戻り値と DateTime. Kind

`DateTime.Parse` のオーバーロードは、<xref:System.DateTime.Kind> プロパティにタイムゾーン情報が含まれている <xref:System.DateTime> 値を返します。 時刻が次のように指定されている可能性があります。

- 協定世界時 (<xref:System.DateTimeKind.Utc?displayProperty=fullName>)。
- ローカルタイムゾーンの時刻 (<xref:System.DateTimeKind.Local?displayProperty=fullName>)。
- 不明なタイムゾーンの時刻 (xref: Datetimekind.utc? displayProperty = fullName >)。
 
 一般に、<xref:System.DateTime.Parse%2A> メソッドは、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>である <xref:System.DateTime> オブジェクトを返します。 ただし、<xref:System.DateTime.Parse%2A> 方法では、`s` と `styles` のパラメーターの値に応じて、タイムゾーン変換を実行し、<xref:System.DateTime.Kind%2A> プロパティの値を異なる方法で設定することもできます。  
  
|状況|タイムゾーンの変換|Kind プロパティ|  
|--------|--------------------------|-------------------|  
|`s` タイムゾーン情報が含まれています。|日付と時刻は、ローカルタイムゾーンの時刻に変換されます。|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|`s` にはタイムゾーン情報が含まれ、`styles` には <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> フラグが含まれています。|日付と時刻は世界協定時刻 (UTC) に変換されます。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|`s` には、Z または GMT のタイムゾーン指定子が含まれ、`styles` には <xref:System.Globalization.DateTimeStyles.RoundtripKind> フラグが含まれています。|日付と時刻は UTC として解釈されます。|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
  
 次の例では、タイムゾーン情報を含む日付文字列をローカルタイムゾーンの時刻に変換します。  
  
 [!code-csharp[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  

  また、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> フラグを使用して、書式設定および解析操作中に、日付と時刻の <xref:System.DateTime.Kind%2A> プロパティの値を保持することもできます。 次の例は、"o"、"r"、または "u" 書式指定子を使用して文字列に変換される <xref:System.DateTime> 値に対する解析操作に、<xref:System.Globalization.DateTimeStyles.RoundtripKind> フラグが与える影響を示しています。  
  
 [!code-csharp[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
## Examples

`DateTime.Parse` メソッドを呼び出す多くの例は、この記事の「[解説](#remarks)」のセクションと、個々の `DateTime.Parse` のオーバーロードに関するドキュメントに含まれています。

[!INCLUDE[interactive-note](~/includes/csharp-interactive-with-utc-note.md)]

また、 [dotnet/samples GitHub リポジトリ](https://github.com/dotnet/samples)から、[のC# .net core 2.0 プロジェクト](https://github.com/dotnet/samples/raw/master/snippets/csharp/downloads/api/System/DateTime.Parse.zip)および[Visual Basic 用の .net core 2.0 プロジェクト](https://github.com/dotnet/samples/raw/master/snippets/visualbasic/downloads/api/System/DateTime.Parse.zip)に含まれている `DateTime.Parse` の例の完全なセットをダウンロードすることもできます。

 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
        <altmember cref="Overload:System.DateTime.TryParse" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; DateTime" Usage="System.DateTime.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。 詳細については、「[解析する文字列](#StringToParse)」をご覧ください。</param>
        <summary>現在のスレッド カルチャの書式規則を使用して、日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <returns><paramref name="s" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
`s` タイムゾーン情報が含まれている場合、このメソッドは <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType> である <xref:System.DateTime> 値を返し、`s` の日付と時刻を現地時刻に変換します。 それ以外の場合、タイムゾーンの変換は実行されず、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType><xref:System.DateTime> 値が返されます。

このオーバーロードは、現在のカルチャの書式指定規則を使用して `s` を解析しようとします。 現在のカルチャは、<xref:System.Globalization.CultureInfo.CurrentCulture> プロパティによって示されます。 特定のカルチャの書式指定規則を使用して文字列を解析するには、<xref:System.DateTime.Parse(System.String,System.IFormatProvider)> または <xref:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)> のオーバーロードを呼び出します。

このオーバーロードは、<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> スタイルを使用して `s` の解析を試みます。

## <a name="example"></a>例

次の例では、複数の日付と時刻の値の文字列形式を解析します。

- 既定の書式プロバイダーを使用します。これは、サンプル出力の生成に使用されるコンピューターの現在のスレッドカルチャの書式指定規則を提供します。 この例の出力には、en-us カルチャの書式指定規則が反映されています。

- 既定のスタイル値を使用します。これは <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWIthType>です。 

このメソッドは、メソッドが他のカルチャの書式指定規則を使用して日付と時刻の文字列形式を解析しようとしたときにスローされる <xref:System.FormatException> 例外を処理します。 また、現在のスレッドカルチャの書式指定規則を使用しない日付と時刻の値を正常に解析する方法も示します。  
  
 [!code-csharp[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> に日付と時刻の有効な文字列形式が含まれていません。</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.Parse (s, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。 詳細については、「[解析する文字列](#StringToParse)」をご覧ください。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。  「[解析およびカルチャの規則](#Culture)」をご覧ください。</param>
        <summary>カルチャ固有の書式情報を使用して、日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <returns><paramref name="s" /> で指定された書式に従って表記された、<paramref name="provider" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
`s` タイムゾーン情報が含まれている場合、このメソッドは <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType> である <xref:System.DateTime> 値を返し、`s` の日付と時刻を現地時刻に変換します。 それ以外の場合、タイムゾーンの変換は実行されず、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType><xref:System.DateTime> 値が返されます。

このオーバーロードは、<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> スタイルを使用して `s` の解析を試みます。

## <a name="example"></a>例

次の例では、en-us、fr-fr、および de の各カルチャの規則を使用して、日付文字列の配列を解析します。 この例では、1つの日付の文字列形式が、カルチャによって異なる方法で解釈されることを示しています。  
  
[!code-csharp[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
[!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> に日付と時刻の有効な文字列形式が含まれていません。</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider = default, System.Globalization.DateTimeStyles styles = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As ReadOnlySpan(Of Char), Optional provider As IFormatProvider = null, Optional styles As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="s">解析する文字列を含むメモリ範囲。 詳細については、「[解析する文字列](#StringToParse)」をご覧ください。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。  「[解析およびカルチャの規則](#Culture)」をご覧ください。</param>
        <param name="styles">解析操作を成功させるために <paramref name="s" /> で使用できるスタイル要素を示し、現在のタイム ゾーンまたは現在の日付に関連して解析した日付を解釈する方法を定義する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>カルチャ固有の書式情報と書式スタイルを使用して、日付と時刻の文字列形式を含むメモリ範囲を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <returns><paramref name="s" /> および <paramref name="provider" /> で指定された書式に従って表記された <paramref name="styles" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException"><paramref name="s" /> に日付と時刻の有効な文字列形式が含まれていません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています。 たとえば、 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />の両方です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String, provider As IFormatProvider, styles As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime Parse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles);" />
      <MemberSignature Language="F#" Value="static member Parse : string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.Parse (s, provider, styles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。 詳細については、「[解析する文字列](#StringToParse)」をご覧ください。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。  「[解析およびカルチャの規則](#Culture)」をご覧ください。</param>
        <param name="styles">解析操作を成功させるために <paramref name="s" /> で使用できるスタイル要素を示し、現在のタイム ゾーンまたは現在の日付に関連して解析した日付を解釈する方法を定義する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>カルチャ固有の書式情報と書式スタイルを使用して、日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <returns><paramref name="s" /> および <paramref name="provider" /> で指定された書式に従って表記された <paramref name="styles" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

このメソッドオーバーロードは `s` の日付と時刻を変換し、返された <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティを次のように設定します。

| 状況 | タイムゾーンの変換 | Kind プロパティ |
|----|----------------------|---------------|
| `s` には、タイムゾーン情報が含まれていません。 | [なし] : | <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> |
| `s` タイムゾーン情報が含まれています。 | ローカルタイムゾーンの時刻に | <xref:System.DateTimeKind.Local?displayProperty=nameWithType> |
| `s` にはタイムゾーン情報が含まれ、`styles` には <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> フラグが含まれています。 | 協定世界時 (UTC) | <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> |
| `s` に、Z または GMT のタイムゾーン指定子が含まれており、`styles` に <xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType>が含まれています。 | [なし] : | <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> |

## <a name="example"></a>例

次の例では、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> メソッドを示し、結果として得られる <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティの値を表示します。  
  
[!code-csharp[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
[!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> に日付と時刻の有効な文字列形式が含まれていません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています。 たとえば、 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />の両方です。</exception>
        <altmember cref="Overload:System.DateTime.TryParse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/how-to-round-trip-date-and-time-values.md">方法 : 日付と時刻の値をラウンドトリップさせる</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTime" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。それ以外の場合は、例外がスローされます。</summary>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。</param>
        <param name="format"><paramref name="s" /> の必要な形式を定義する形式指定子。 詳細については、「解説」を参照してください。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式とカルチャ固有の書式情報を使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns><paramref name="s" /> および <paramref name="format" /> で指定された書式に従って表記された <paramref name="provider" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> メソッドは、日付の文字列形式を解析します。これは、`format` パラメーターで定義された形式である必要があります。 必要、\<日付 > と\<時間 > で指定された順序で表示される日付と時刻の文字列形式の要素`format`、および`s`で許可されている以外の空白があるないです`format`。 `format` が時刻要素のない日付を定義し、解析操作が成功した場合、結果の <xref:System.DateTime> 値の時間は深夜 (00:00:00) になります。 `format` が日付要素のない時刻を定義し、解析操作が成功した場合、結果の <xref:System.DateTime> 値の日付は `DateTime.Now.Date`になります。  
  
 `s` が特定のタイムゾーンの時刻を表しておらず、解析操作が成功した場合、返された <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>です。 `s` が特定のタイムゾーンの時刻を表していて、`format` してタイムゾーン情報を表示できる場合 (たとえば、`format` が "o"、"r"、"u" のいずれかの標準書式指定子に等しい場合、または "z"、"zz"、"zzz" カスタム書式指定子が含まれている場合、返される <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>されます。  

 `format` パラメーターは、1つの標準書式指定子を含む文字列か、または `s`の必要な書式を定義する1つ以上のカスタム書式指定子で構成されます。 有効な書式指定コードの詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)」または「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照してください。  
  
> [!NOTE]
>  `format` が、日付または時刻の区切り記号を含まないカスタム書式パターン ("yyyyMMddHHmm" など) である場合は、`provider` パラメーターにインバリアントカルチャを使用し、各カスタム書式指定子の幅の広い形式を使用します。 たとえば、書式パターンで時間を指定する場合は、幅の狭い形式の "H" ではなく、広い形式の "HH" を指定します。  
  
 `s` で使用される特定の日付と時刻の記号および文字列 (特定の言語の曜日の名前など) は、`provider` パラメーターによって定義されます。これは、`format` が標準書式指定子の文字列である場合の `s` の正確な形式です。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   `s`を解釈するために使用されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは `s`のシンボルと書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
-   <xref:System.IFormatProvider.GetFormat%2A> メソッドが <xref:System.Globalization.CultureInfo> オブジェクト、または書式設定情報を提供する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトのいずれかを返すカスタム <xref:System.IFormatProvider> 実装。  
  
 `provider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
   
  
## Examples  
 <xref:System.DateTime.ParseExact%2A>メソッドの例を次に示します。  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> 、または <paramref name="format" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> または <paramref name="format" /> が空の文字列です。  
  
または 
 <paramref name="s" /> に、<paramref name="format" /> で指定されているパターンに対応する日付と時刻が含まれていません。  
  
または 
<paramref name="s" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]では、解析対象の文字列に1時間の部分と、アグリーメントに含まれていない AM/PM 指定子が含まれている場合、<see cref="Overload:System.DateTime.ParseExact" /> メソッドは <see cref="T:System.FormatException" /> をスローします。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を表す文字を格納しているスパン。</param>
        <param name="format"><paramref name="s" /> の必要な書式を定義する書式指定子を表す文字を含んでいるスパン。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="style"><paramref name="s" />、<paramref name="s" /> に指定できるスタイル要素、または <paramref name="s" /> から <see cref="T:System.DateTime" /> 値への変換に関する追加情報を提供する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>指定した書式、カルチャ固有の書式情報、スタイルを使用して、指定した日付と時刻のスパン表現を、それと等価な <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。それ以外の場合は、例外がスローされます。</summary>
        <returns><paramref name="s" />、<paramref name="format" />、および <paramref name="provider" /> で指定された書式に従って表記された <paramref name="style" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style = System.Globalization.DateTimeStyles.None);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, Optional style As DateTimeStyles = System.Globalization.DateTimeStyles.None) As DateTime" />
      <MemberSignature Language="F#" Value="static member ParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を表す文字を格納しているスパン。</param>
        <param name="formats"><paramref name="s" /> の許可された形式の配列。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="style"><paramref name="s" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>指定した書式の配列、カルチャ固有の書式情報、スタイルを使用して、指定した日付と時刻のスパン表現を、それと等価な <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式の少なくとも 1 つと完全に一致する必要があります。それ以外の場合は、例外がスローされます。</summary>
        <returns><paramref name="s" />、<paramref name="formats" />、および <paramref name="provider" /> で指定された書式に従って表記された <paramref name="style" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, format, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="format"><paramref name="s" /> の必要な形式を定義する形式指定子。 詳細については、「解説」を参照してください。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="style"><paramref name="s" />、<paramref name="s" /> に指定できるスタイル要素、または <paramref name="s" /> から <see cref="T:System.DateTime" /> 値への変換に関する追加情報を提供する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。それ以外の場合は、例外がスローされます。</summary>
        <returns><paramref name="s" />、<paramref name="format" />、および <paramref name="provider" /> で指定された書式に従って表記された <paramref name="style" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドは、日付の文字列形式を解析します。これは、`format` パラメーターで定義された形式である必要があります。 また、`s` の日付と時刻の要素が `format`で指定された順序で表示される必要があります。 `s` が、`style` パラメーターで定義されたバリエーションと共に `format` パラメーターのパターンと一致しない場合、メソッドは <xref:System.FormatException>をスローします。 これに対し、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドは、書式プロバイダーの <xref:System.Globalization.DateTimeFormatInfo> オブジェクトによって認識される形式のいずれかで、日付の文字列形式を解析します。 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドを使用すると、`s` の日付と時刻の要素を任意の順序で表示することもできます。  
  
 `s` パラメーターに時刻のみが含まれ、日付が含まれていない場合、`style` パラメーターに <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> フラグが含まれていない限り、現在の日付が使用されます。この場合、既定の日付 (`DateTime.Date.MinValue`) が使用されます。 `s` パラメーターに日付のみが含まれ、時刻が指定されていない場合は、深夜 (00:00:00) が使用されます。 `style` パラメーターは、`s` パラメーターに先頭、内部、または末尾の空白文字を含めることができるかどうかも決定します。  
  
 タイムゾーン情報が含まれていない `s`、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>です。 この動作は、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> フラグを使用して変更できます。このフラグは、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType>である <xref:System.DateTime> 値を返すか、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> プロパティが <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> <xref:System.DateTime> 値を返す <xref:System.DateTime.Kind%2A> フラグと <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>フラグを使用します。 `s` タイムゾーン情報が含まれている場合は、必要に応じて時刻が現地時刻に変換され、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。 この動作を変更するには、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> フラグを使用して世界協定時刻 (UTC) を現地時刻に変換しないようにし、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。  
  
 `format` パラメーターは、`s` パラメーターの必要なパターンを定義します。 これは、[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)テーブルの1つ以上のカスタム書式指定子、または[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)の表から定義済みのパターンを識別する1つの標準書式指定子で構成されます。  
  
 カスタム書式パターンで日付または時刻の区切り記号を使用しない場合は、`provider` パラメーターにインバリアントカルチャを使用し、各カスタム書式指定子の幅が最も広い形式を使用します。 たとえば、パターンに時間を指定する場合は、幅の狭い形式の "H" ではなく、広い形式の "HH" を指定します。  
  
> [!NOTE]
>  解析操作を成功させるために、`s` が1つの形式に準拠している必要があるのではなく、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドを呼び出して、複数の許可された形式を指定することができます。 これにより、解析操作が成功する可能性が高くなります。  
  
 `styles` パラメーターには、<xref:System.Globalization.DateTimeStyles> 列挙体の1つ以上のメンバーが含まれており、`format` で定義されていない空白を `s` で使用できるかどうか、および解析操作の正確な動作を制御するかどうかを決定します。 次の表では、<xref:System.Globalization.DateTimeStyles> 列挙体の各メンバーが <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> メソッドの操作に与える影響について説明します。  
  
|DateTimeStyles メンバー|Description|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`s` を解析し、必要に応じて UTC に変換します。 `s` にタイムゾーンオフセットが含まれている場合、または `s` にタイムゾーン情報が含まれておらず、`styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> フラグが含まれている場合、メソッドは文字列を解析し、<xref:System.DateTime.ToUniversalTime%2A> を呼び出して返された <xref:System.DateTime> 値を UTC に変換し、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。 `s` が UTC を表すことを示している場合、または `s` にタイムゾーン情報が含まれておらず、`styles` かつ <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> フラグが含まれている場合、メソッドは文字列を解析し、返された <xref:System.DateTime> 値に対してタイムゾーン変換を実行せず、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。 それ以外の場合、フラグは無効です。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|`format` によって定義されていない空白を、任意の個別の日付または時刻要素の間に表示できることを指定します。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|`format` によって定義されていない空白が `s`の先頭に表示されることを指定します。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|`format` によって定義されていない空白が `s`の最後に表示されることを指定します。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`s` に `format`で定義されていない先頭、内部、および末尾の空白を含めることができるように指定します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|タイムゾーン情報が `s` ない場合は、現地時刻を表すと想定されます。 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> フラグが存在しない場合、返される <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|タイムゾーン情報が `s` ない場合、UTC を表すことを前提としています。 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> フラグが存在しない場合、メソッドは、返された <xref:System.DateTime> 値を UTC から現地時刻に変換し、その <xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定します。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|`s` に日付情報が含まれていない場合、戻り値の日付は `DateTime.MinValue.Date`に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` パラメーターは、既定値を使用して解析されます。 `format` に存在するもの以外の空白は許可されません。 `s` に日付要素がない場合、返された <xref:System.DateTime> 値の日付は1/1/0001 に設定されます。 タイムゾーン情報が含まれていない場合 `s` 返される <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>に設定されます。 タイムゾーン情報が `s`に存在する場合、時刻は現地時刻に変換され、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイムゾーン情報を含む文字列の場合、は、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定された <xref:System.DateTime> 値の日付と時刻への変換を防止しようとします。 このフラグは、主に UTC 時刻からローカル時刻への変換を防止します。|  
  
 `s` で使用される特定の日付と時刻の記号および文字列 (特定の言語での曜日の名前など) は、`provider` パラメーターによって定義されます。 `format` が標準書式指定子の文字列である場合、`s` の正確な形式として定義されています。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   `s`を解釈するために使用されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは `s`のシンボルと書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
-   <xref:System.IFormatProvider.GetFormat%2A> メソッドが <xref:System.Globalization.CultureInfo> オブジェクト、または書式設定情報を提供する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトのいずれかを返すカスタム <xref:System.IFormatProvider> 実装。  
  
 `provider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
   
  
## Examples  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>メソッドの例を次に示します。 `format`で先頭のスペースが許可されていないため、`styles` パラメーターが <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> のときに、文字列 "5/01/2009 8:30 AM" を正常に解析できないことに注意してください。 さらに、文字列 "5/01/2009 09:00" を "MM/dd/yyyyhh: mm" の `format` で正常に解析することはできません。これは、`format` が必要とするため、日付文字列が月番号の前に先行ゼロを付けないためです。  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> 、または <paramref name="format" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> または <paramref name="format" /> が空の文字列です。  
  
または 
 <paramref name="s" /> に、<paramref name="format" /> で指定されているパターンに対応する日付と時刻が含まれていません。  
  
または 
<paramref name="s" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています。 たとえば、 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />の両方です。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]では、解析対象の文字列に1時間の部分と、アグリーメントに含まれていない AM/PM 指定子が含まれている場合、<see cref="Overload:System.DateTime.ParseExact" /> メソッドは <see cref="T:System.FormatException" /> をスローします。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style);" />
      <MemberSignature Language="F#" Value="static member ParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles -&gt; DateTime" Usage="System.DateTime.ParseExact (s, formats, provider, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。</param>
        <param name="formats"><paramref name="s" /> の許可された形式の配列。 詳細については、「解説」を参照してください。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="style"><paramref name="s" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>指定した書式の配列、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式の少なくとも 1 つと完全に一致する必要があります。それ以外の場合は、例外がスローされます。</summary>
        <returns><paramref name="s" />、<paramref name="formats" />、および <paramref name="provider" /> で指定された書式に従って表記された <paramref name="style" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドは、`formats` パラメーターに割り当てられているパターンのいずれかと一致する日付の文字列形式を解析します。 文字列 `s` が、`styles` パラメーターで定義されたいずれのバリエーションとも一致しない場合、メソッドは <xref:System.FormatException>をスローします。 1つの書式パターンではなく、複数の書式指定パターンに `s` を比較する以外にも、このオーバーロードは <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドと同じように動作します。  
  
 `s` パラメーターには、解析する日付と時刻が含まれています。 `s` パラメーターに時刻のみが含まれ、日付が含まれていない場合、`style` パラメーターに <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> フラグが含まれていない限り、現在の日付が使用されます。この場合、既定の日付 (`DateTime.Date.MinValue`) が使用されます。 `s` パラメーターに日付のみが含まれ、時刻が指定されていない場合は、深夜 (00:00:00) が使用されます。 `style` パラメーターは、`formats`内のいずれかの書式指定文字列によって許可されていない空白文字を、`s` パラメーターに含めることができるかどうかも決定します。  
  
 タイムゾーン情報が含まれていない `s`、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>です。 この動作は、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> フラグを使用して変更できます。このフラグは、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType>である <xref:System.DateTime> 値を返すか、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> プロパティが <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> <xref:System.DateTime> 値を返す <xref:System.DateTime.Kind%2A> フラグと <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>フラグを使用します。 `s` タイムゾーン情報が含まれている場合は、必要に応じて時刻が現地時刻に変換され、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。 この動作を変更するには、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> フラグを使用して世界協定時刻 (UTC) を現地時刻に変換しないようにし、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。  
  
 `formats` パラメーターにはパターンの配列が含まれています。これには、解析操作が成功するかどうかを正確に一致させる必要がある `s` の1つです。 `formats` パラメーターのパターンは、[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)テーブルの1つ以上のカスタム書式指定子、または[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)の表から定義済みのパターンを識別する1つの標準書式指定子で構成されます。  
  
 カスタム書式パターンで日付または時刻の区切り記号を使用しない場合は、`provider` パラメーターにインバリアントカルチャを使用し、各カスタム書式指定子の幅が最も広い形式を使用します。 たとえば、パターンに時間を指定する場合は、幅の狭い形式の "H" ではなく、広い形式の "HH" を指定します。  
  
 `styles` パラメーターには、<xref:System.Globalization.DateTimeStyles> 列挙体の1つ以上のメンバーが含まれており、`format` で定義されていない空白を `s` で使用できるかどうか、および解析操作の正確な動作を制御するかどうかを決定します。 次の表では、<xref:System.Globalization.DateTimeStyles> 列挙体の各メンバーが <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29> メソッドの操作に与える影響について説明します。  
  
|DateTimeStyles メンバー|Description|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`s` を解析し、必要に応じて UTC に変換します。 `s` にタイムゾーンオフセットが含まれている場合、または `s` にタイムゾーン情報が含まれておらず、`styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> フラグが含まれている場合、メソッドは文字列を解析し、<xref:System.DateTime.ToUniversalTime%2A> を呼び出して返された <xref:System.DateTime> 値を UTC に変換し、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。 `s` が UTC を表すことを示している場合、または `s` にタイムゾーン情報が含まれておらず、`styles` かつ <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> フラグが含まれている場合、メソッドは文字列を解析し、返された <xref:System.DateTime> 値に対してタイムゾーン変換を実行せず、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。 それ以外の場合、フラグは無効です。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|`format` によって定義されていない空白を、任意の個別の日付または時刻要素の間に表示できることを指定します。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|`format` によって定義されていない空白が `s`の先頭に表示されることを指定します。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|`format` によって定義されていない空白が `s`の最後に表示されることを指定します。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`s` に `format`で定義されていない先頭、内部、および末尾の空白を含めることができるように指定します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|タイムゾーン情報が `s` ない場合は、現地時刻を表すと想定されます。 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> フラグが存在しない場合、返される <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|タイムゾーン情報が `s` ない場合、UTC を表すことを前提としています。 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> フラグが存在しない場合、メソッドは、返された <xref:System.DateTime> 値を UTC から現地時刻に変換し、その <xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定します。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|`s` に日付情報が含まれていない場合、戻り値の日付は `DateTime.MinValue.Date`に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` パラメーターは、既定値を使用して解析されます。 `format` に存在するもの以外の空白は許可されません。 `s` に日付要素がない場合、返された <xref:System.DateTime> 値の日付は1/1/0001 に設定されます。 タイムゾーン情報が含まれていない場合 `s` 返される <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>に設定されます。 タイムゾーン情報が `s`に存在する場合、時刻は現地時刻に変換され、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイムゾーン情報が含まれている文字列の場合、は、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定して、日付と時刻への変換を防止しようとします。 このフラグは、主に UTC 時刻からローカル時刻への変換を防止します。|  
  
 `s` で使用される特定の日付と時刻の記号および文字列 (特定の言語での曜日の名前など) は、`provider` パラメーターによって定義されます。 `format` が標準書式指定子の文字列である場合、`s` の正確な形式として定義されています。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   `s`を解釈するために使用されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは `s`のシンボルと書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
-   <xref:System.IFormatProvider.GetFormat%2A> メソッドが <xref:System.Globalization.CultureInfo> オブジェクト、または書式設定情報を提供する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトのいずれかを返すカスタム <xref:System.IFormatProvider> 実装。  
  
 `provider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドを使用して、さまざまな形式の文字列を正常に解析できることを確認します。  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="s" /> 、または <paramref name="formats" /> が <see langword="null" />です。</exception>
        <exception cref="T:System.FormatException"><paramref name="s" /> が空の文字列です。  
  
または 
<paramref name="formats" /> の要素は空の文字列です。  
  
または 
 <paramref name="s" /> には、 <paramref name="formats" />のどの要素に対応する日時も含まれていません。  
  
または 
<paramref name="s" /> の時間の部分と AM/PM 指定子が一致していません。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="style" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています。 たとえば、 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />の両方です。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]では、解析対象の文字列に1時間の部分と、アグリーメントに含まれていない AM/PM 指定子が含まれている場合、<see cref="Overload:System.DateTime.ParseExact" /> メソッドは <see cref="T:System.FormatException" /> をスローします。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTime.TryParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Second As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Second { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Second : int" Usage="System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の秒の部分を取得します。</summary>
        <value>DateTime の秒の部分 (0 ～ 59)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <xref:System.DateTime.Second%2A>プロパティの例を次に示します。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SpecifyKind (value As DateTime, kind As DateTimeKind) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime SpecifyKind(DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="F#" Value="static member SpecifyKind : DateTime * DateTimeKind -&gt; DateTime" Usage="System.DateTime.SpecifyKind (value, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="kind" Type="System.DateTimeKind" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="value">日付と時刻。</param>
        <param name="kind">新しいオブジェクトが現地時刻であるか、世界協定時刻 (UTC) であるか、またはそのどちらでもないかを示す列挙値の 1 つ。</param>
        <summary>指定された <see cref="T:System.DateTime" /> と同じタイマー刻みの数を持つ新しい <see cref="T:System.DateTime" />オブジェクトを、指定された <see cref="T:System.DateTimeKind" /> 値 (現地時刻、世界協定時刻 (UTC)、または、そのいずれでもないことを示す) に基づいて作成します。</summary>
        <returns><paramref name="value" /> パラメーターが表すオブジェクトと同じティック数、および <see cref="T:System.DateTimeKind" /> パラメーターで指定された <paramref name="kind" /> 値を持つ、新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime> オブジェクトは、時刻値が現地時刻、世界協定時刻 (UTC)、またはその両方に基づいているかどうか、および100ナノ秒刻みで計測された時間値を含むティックフィールドで構成されます。 <xref:System.DateTime.SpecifyKind%2A> メソッドは、指定された `kind` パラメーターと元の時刻値を使用して、新しい <xref:System.DateTime> オブジェクトを作成します。  
  
> [!IMPORTANT]
>  返された <xref:System.DateTime> 値は、`value` パラメーターと同じ瞬間を表しておらず、<xref:System.DateTime.SpecifyKind%2A> はタイムゾーンの変換メソッドではありません。 代わりに、`value` パラメーターで指定された時間を変更せずに、<xref:System.DateTime.Kind%2A> プロパティを `kind`に設定します。 タイムゾーン変換の詳細については、「[タイムゾーン間での](~/docs/standard/datetime/converting-between-time-zones.md)時刻の変換」を参照してください。  
  
 <xref:System.DateTime.SpecifyKind%2A> メソッドは、指定されていない種類フィールドを持つ <xref:System.DateTime> オブジェクトを受け取る相互運用性のシナリオで役立ちますが、独立して判断できるのは、ティックフィールドが現地時刻と UTC のどちらを表しているのかを意味します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.SpecifyKind%2A> メソッドを使用して、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTime.ToLocalTime%2A> および <xref:System.DateTime.ToUniversalTime%2A> の変換メソッドにどのように影響するかを示します。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/programming-guide/com-interop/com-interoperability-in-net-framework-applications.md">.NET Framework アプリケーションにおける COM 相互運用性 (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの値から指定した時刻または期間を減算した、新しい <see cref="T:System.DateTime" /> を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan Subtract(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : DateTime -&gt; TimeSpan" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">減算する日付と時刻の値。</param>
        <summary>このインスタンスの値から指定した日時を減算した、新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻から <paramref name="value" /> で表された日付と時刻を減算した値と等しい時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.DateTime%29> メソッドは、2つの日付の差を決定します。 現在のインスタンスから時間間隔を減算するには、<xref:System.DateTime.Subtract%28System.TimeSpan%29> メソッドを呼び出します。 現在のインスタンスから特定の時間間隔を減算するには、その時間間隔を現在の日付に加算するメソッドを呼び出し、メソッドの引数として負の値を指定します。 たとえば、現在の日付から2か月を減算するには、値-2 を指定して <xref:System.DateTime.AddMonths%28System.Int32%29> メソッドを呼び出します。  
  
 現在のインスタンスの日付と時刻が `value`よりも前の場合、メソッドは負の時間間隔を表す <xref:System.TimeSpan> オブジェクトを返します。 つまり、0以外のすべてのプロパティ (<xref:System.TimeSpan.Days%2A> や <xref:System.TimeSpan.Ticks%2A>など) の値は負になります。  
  
 <xref:System.DateTime.Subtract%28System.DateTime%29> メソッドは、減算を実行するときに、2つの <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティの値を考慮しません。 <xref:System.DateTime> オブジェクトを差し引く前に、オブジェクトが同じタイムゾーンの時刻を表していることを確認します。 それ以外の場合、結果にはタイムゾーン間の違いが含まれます。  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType> メソッドは、減算を実行するときのタイムゾーン間の違いを考慮します。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTime.Subtract%2A> メソッドと減算演算子を示しています。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果が <see cref="F:System.DateTime.MinValue" /> より小さいか、 <see cref="F:System.DateTime.MaxValue" />より大きいです。</exception>
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Subtract (value As TimeSpan) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime Subtract(TimeSpan value);" />
      <MemberSignature Language="F#" Value="member this.Subtract : TimeSpan -&gt; DateTime" Usage="dateTime.Subtract value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">減算する時間間隔。</param>
        <summary>このインスタンスの値から指定した期間を減算した、新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻から <paramref name="value" /> で表された時間間隔を減算した値と等しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29> メソッドは、現在のインスタンスと指定した時間間隔の差である日付を返します。 2つの日付間の時間間隔を決定するには、<xref:System.DateTime.Subtract%28System.DateTime%29> メソッドを呼び出します。 現在のインスタンスから特定の時間間隔を減算するには、その時間間隔を現在の日付に加算するメソッドを呼び出し、メソッドの引数として負の値を指定します。 たとえば、現在の日付から2か月を減算するには、値-2 を指定して <xref:System.DateTime.AddMonths%28System.Int32%29> メソッドを呼び出します。  
  
 このメソッドは、この <xref:System.DateTime>の値を変更しません。 代わりに、この操作の結果を値として持つ新しい <xref:System.DateTime> が返されます。  
  
 通常、<xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> メソッドは、正の時間範囲を表す <xref:System.TimeSpan> オブジェクトを減算し、現在のインスタンスの日時よりも前の <xref:System.DateTime> 値を返します。 ただし、<xref:System.TimeSpan> オブジェクトが負の時間間隔を表している場合、<xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> メソッドは、現在のインスタンスの日時よりも後の <xref:System.DateTime> 値を返します。  
  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType> メソッドを使用すると、複数の時間単位 (時間数や指定された分数など) で構成される時間間隔を減算できます。 <xref:System.DateTime> インスタンスから1つの時間単位 (年、月、日など) を減算するには、次のいずれかのメソッドにパラメーターとして負の数値を渡すことができます。  
  
-   <xref:System.DateTime.AddYears%2A>、現在の日付と時刻のインスタンスから特定の年数を減算します。  
  
-   <xref:System.DateTime.AddMonths%2A>、現在の日付と時刻のインスタンスから特定の月数を減算します。  
  
-   <xref:System.DateTime.AddDays%2A>、現在の日付と時刻のインスタンスから特定の日数を減算します。  
  
-   <xref:System.DateTime.AddHours%2A>、現在の日付と時刻のインスタンスから特定の時間数を減算します。  
  
-   <xref:System.DateTime.AddMinutes%2A>、現在の日付と時刻のインスタンスから特定の分数を減算します。  
  
-   <xref:System.DateTime.AddSeconds%2A>、現在の日付と時刻のインスタンスから特定の秒数を減算します。  
  
-   <xref:System.DateTime.AddMilliseconds%2A>、現在の日付と時刻のインスタンスから特定のミリ秒数を減算します。  
  
-   <xref:System.DateTime.AddTicks%2A>、現在の日付と時刻のインスタンスから特定のタイマー刻み数を減算します。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTime.Subtract%2A> メソッドと減算演算子を示しています。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果が <see cref="F:System.DateTime.MinValue" /> より小さいか、 <see cref="F:System.DateTime.MaxValue" />より大きいです。</exception>
        <altmember cref="T:System.TimeSpan" />
        <related type="Article" href="~/docs/standard/datetime/performing-arithmetic-operations.md">日付と時刻を使用した算術演算の実行</related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberSignature Language="F#" Value="abstract member System.IComparable.CompareTo : obj -&gt; int&#xA;override this.System.IComparable.CompareTo : obj -&gt; int" Usage="dateTime.System.IComparable.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.GetTypeCode : unit -&gt; TypeCode&#xA;override this.System.IConvertible.GetTypeCode : unit -&gt; TypeCode" Usage="dateTime.System.IConvertible.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToBoolean : IFormatProvider -&gt; bool&#xA;override this.System.IConvertible.ToBoolean : IFormatProvider -&gt; bool" Usage="dateTime.System.IConvertible.ToBoolean provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToByte : IFormatProvider -&gt; byte&#xA;override this.System.IConvertible.ToByte : IFormatProvider -&gt; byte" Usage="dateTime.System.IConvertible.ToByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToChar : IFormatProvider -&gt; char&#xA;override this.System.IConvertible.ToChar : IFormatProvider -&gt; char" Usage="dateTime.System.IConvertible.ToChar provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime&#xA;override this.System.IConvertible.ToDateTime : IFormatProvider -&gt; DateTime" Usage="dateTime.System.IConvertible.ToDateTime provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトを返します。</summary>
        <returns>現在のオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal&#xA;override this.System.IConvertible.ToDecimal : IFormatProvider -&gt; decimal" Usage="dateTime.System.IConvertible.ToDecimal provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToDouble : IFormatProvider -&gt; double&#xA;override this.System.IConvertible.ToDouble : IFormatProvider -&gt; double" Usage="dateTime.System.IConvertible.ToDouble provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt16 : IFormatProvider -&gt; int16&#xA;override this.System.IConvertible.ToInt16 : IFormatProvider -&gt; int16" Usage="dateTime.System.IConvertible.ToInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt32 : IFormatProvider -&gt; int&#xA;override this.System.IConvertible.ToInt32 : IFormatProvider -&gt; int" Usage="dateTime.System.IConvertible.ToInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToInt64 : IFormatProvider -&gt; int64&#xA;override this.System.IConvertible.ToInt64 : IFormatProvider -&gt; int64" Usage="dateTime.System.IConvertible.ToInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte&#xA;override this.System.IConvertible.ToSByte : IFormatProvider -&gt; sbyte" Usage="dateTime.System.IConvertible.ToSByte provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToSingle : IFormatProvider -&gt; single&#xA;override this.System.IConvertible.ToSingle : IFormatProvider -&gt; single" Usage="dateTime.System.IConvertible.ToSingle provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToType (type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToType : Type * IFormatProvider -&gt; obj&#xA;override this.System.IConvertible.ToType : Type * IFormatProvider -&gt; obj" Usage="dateTime.System.IConvertible.ToType (type, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="type">必要な型。</param>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトを、指定された型のオブジェクトに変換します。</summary>
        <returns>値が現在の <paramref name="type" /> オブジェクトに等価である、<see cref="T:System.DateTime" /> パラメーターによって指定された型のオブジェクト。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidCastException">この変換は、 <see cref="T:System.DateTime" /> 型ではサポートされていません。</exception>
        <altmember cref="T:System.Convert" />
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16&#xA;override this.System.IConvertible.ToUInt16 : IFormatProvider -&gt; uint16" Usage="dateTime.System.IConvertible.ToUInt16 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32&#xA;override this.System.IConvertible.ToUInt32 : IFormatProvider -&gt; uint32" Usage="dateTime.System.IConvertible.ToUInt32 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberSignature Language="F#" Value="abstract member System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64&#xA;override this.System.IConvertible.ToUInt64 : IFormatProvider -&gt; uint64" Usage="dateTime.System.IConvertible.ToUInt64 provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクトです。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dateTime.System.Runtime.Serialization.ISerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="info">データを読み込む先の オブジェクトです。</param>
        <param name="context">このシリアル化のシリアル化先です。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.DateTime" /> オブジェクトをシリアル化するために必要なすべてのデータを格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、`info` パラメーターに <xref:System.DateTime.Ticks%2A> および <xref:System.DateTime.Kind%2A> プロパティ値を設定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ticks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long Ticks { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Ticks : int64" Usage="System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスの日付と時刻を表すタイマー刻み数を取得します。</summary>
        <value>このインスタンスの日付と時刻を表すタイマー刻み数。 値は <see langword="DateTime.MinValue.Ticks" /> から <see langword="DateTime.MaxValue.Ticks" />までの間にあります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1ティックは、100ナノ秒または 1 10-万の秒を表します。 ミリ秒単位では1万ティック、1秒あたりは1000万タイマー刻みがあります。  
  
このプロパティの値は、<xref:System.DateTime.MinValue>を表すグレゴリオ暦で、0001年1月1日の午前12:00:00 からの経過時間を100ナノ秒単位で表します。 これには、うるう秒に起因するタイマー刻みの数は含まれません。
DateTime オブジェクトの `Kind` プロパティが `Local`に設定されている場合、そのタイマー刻みは、現在のタイムゾーンの設定によって指定された現地時刻で、0001年1月1日午前12:00:00 時からの経過時間を表します。
`DateTime` オブジェクトの `Kind` プロパティが `Utc`に設定されている場合、そのティックは、世界協定時刻の0001年1月1日午前12:00:00 時からの経過時間を表します。
`DateTime` オブジェクトの `Kind` プロパティが `Unspecified`に設定されている場合、そのタイマー刻みは、不明なタイムゾーンの0001年1月1日午前12:00:00 時からの経過時間を表します。

一般に、ティックは、`Kind` プロパティによって指定されたタイムゾーンに従って時間を表します。

  
## Examples  

 次の例では、<xref:System.DateTime.Ticks%2A> プロパティを使用して、21世紀の開始から経過したタイマー刻みの数を表示し、<xref:System.TimeSpan> オブジェクトをインスタンス化します。 その後、<xref:System.TimeSpan> オブジェクトを使用して、他のいくつかの時間間隔を使用して経過時間を表示します。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs" interactive="try-dotnet-method" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeOfDay As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeOfDay { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeOfDay : TimeSpan" Usage="System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスの時刻を取得します。</summary>
        <value>深夜の 12 時から経過した 1 日の端数部分を表す時間間隔。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Date%2A> プロパティとは異なります。 これにより、時刻部分を含まない日付を表す <xref:System.DateTime> 値が返されます。 <xref:System.DateTime.TimeOfDay%2A> プロパティは、<xref:System.DateTime> 値の時間部分を表す <xref:System.TimeSpan> 値を返します。  
  
 時刻を表示したり、<xref:System.DateTime> 値の時刻の時刻を文字列形式で取得したりする場合は、代わりに、`format` パラメーターを持つ <xref:System.DateTime.ToString%2A> メソッドのオーバーロードを呼び出すか、または "t" または "T" 標準書式指定文字列を持つ[複合書式指定](~/docs/standard/base-types/composite-formatting.md)機能を使用できます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime> 値の配列の <xref:System.DateTime.TimeOfDay%2A> プロパティの値を表示します。 また、複合書式指定操作で、戻り値を "t" 標準書式指定文字列によって返される文字列と比較します。  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberSignature Language="VB.NET" Value="Public Function ToBinary () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToBinary();" />
      <MemberSignature Language="F#" Value="member this.ToBinary : unit -&gt; int64" Usage="dateTime.ToBinary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトを 64 ビットのバイナリ値にシリアル化します。後で、この値を使って、 <see cref="T:System.DateTime" /> オブジェクトを再構築できます。</summary>
        <returns><see cref="P:System.DateTime.Kind" /> プロパティおよび <see cref="P:System.DateTime.Ticks" /> プロパティをエンコードする 64 ビットの符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.DateTime> オブジェクトの値をバイナリ値に変換するには、<xref:System.DateTime.ToBinary%2A> メソッドを使用します。 その後、バイナリ値と <xref:System.DateTime.FromBinary%2A> メソッドを使用して、元の <xref:System.DateTime> オブジェクトを再作成します。  
  
> [!IMPORTANT]
>  場合によっては、<xref:System.DateTime.FromBinary%2A> メソッドによって返される <xref:System.DateTime> 値は、<xref:System.DateTime.ToBinary%2A> メソッドに指定された元の <xref:System.DateTime> 値と同一ではありません。 詳細については、次のセクション「ローカル時間の調整」を参照してください。  
  
## <a name="local-time-adjustment"></a>ローカル時間の調整  
 ローカルタイムゾーンに調整された世界協定時刻である現地時刻は、<xref:System.DateTime.Kind%2A> プロパティに <xref:System.DateTimeKind.Local>値が設定された <xref:System.DateTime> 構造体によって表されます。 <xref:System.DateTime.ToBinary%2A> メソッドによって生成されたバイナリ表現からローカルの <xref:System.DateTime> 値を復元する場合、<xref:System.DateTime.FromBinary%2A> メソッドによって、元の値と等しくないように再作成された値が調整されることがあります。 これは、次のような条件で発生します。  
  
-   ローカル <xref:System.DateTime> オブジェクトが <xref:System.DateTime.ToBinary%2A> メソッドによって1つのタイムゾーンでシリアル化され、その後 <xref:System.DateTime.FromBinary%2A> メソッドによって別のタイムゾーンで逆シリアル化された場合、結果の <xref:System.DateTime> オブジェクトによって表されるローカル時間は、2番目のタイムゾーンに自動的に調整されます。  
  
     たとえば、午後3時の現地時刻を表す <xref:System.DateTime> オブジェクトを考えてみます。 米国太平洋標準時ゾーンで実行されているアプリケーションでは、<xref:System.DateTime.ToBinary%2A> メソッドを使用して、その <xref:System.DateTime> オブジェクトをバイナリ値に変換します。 米国東部標準時のタイムゾーンで実行されている別のアプリケーションでは、<xref:System.DateTime.FromBinary%2A> メソッドを使用して、バイナリ値を新しい <xref:System.DateTime> オブジェクトに変換します。 新しい <xref:System.DateTime> オブジェクトの値は午後6時です。これは、元の午後3時と同じ時点を表します。 値は、東部標準時のタイムゾーンで現地時刻に調整されます。  
  
-   ローカルの <xref:System.DateTime> 値のバイナリ表現が、<xref:System.DateTime.FromBinary%2A> が呼び出されたシステムのローカルタイムゾーン内の無効な時刻を表している場合、その時刻が有効になるように調整されます。  
  
     たとえば、標準時から夏時間への移行は、2:00 2010 年3月14日の米国太平洋標準時ゾーンで行われます。これは、時間が 1 3:00 時間経過したとき、午前15時になります。 この時間間隔は、無効な時刻、つまり、このタイムゾーンに存在しない時間間隔です。 次の例は、この範囲内にある時間が <xref:System.DateTime.ToBinary%2A> メソッドによってバイナリ値に変換され、<xref:System.DateTime.FromBinary%2A> メソッドによって復元されると、元の値が有効な時刻になるように調整されることを示しています。 特定の日付と時刻の値が変更される可能性があるかどうかを判断するには、例に示すように、<xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType> メソッドに渡します。  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>バージョンに関する考慮事項  
 .NET Framework バージョン2.0 以降では、<xref:System.DateTime> 構造は、指定された時間の値が現地時刻、世界協定時刻 (UTC)、またはその両方に基づいているかどうかを示す private Kind フィールドと、日付と時刻を指定する100ナノ秒タイマー刻みの数を含むプライベートティックフィールドで構成されます。 [ティック] フィールドには、<xref:System.DateTime.Ticks%2A> プロパティを使用してアクセスできます。また、[種類] フィールドには、<xref:System.DateTime.Kind%2A> プロパティを使用してアクセスできます。  
  
 .NET Framework 2.0 より前では、<xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>などのシリアル化インターフェイスを使用せずに <xref:System.DateTime> オブジェクトを手動でシリアル化した場合、<xref:System.DateTime> 構造のティックデータをシリアル化するだけで済みます。 バージョン2.0 以降では、種類データもシリアル化する必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.DateTime.FromBinary(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Today As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime Today { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.Today : DateTime" Usage="System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の日付を取得します。</summary>
        <value>今日の日付を表すオブジェクト (ただし、時刻部分は 00:00:00)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 .NET Framework バージョン2.0 以降、戻り値は <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local>を返す <xref:System.DateTime> です。  
  
 現在の日付が返されるため、<xref:System.DateTime.Today%2A> のプロパティは、日付のみを扱うアプリケーションでの使用に適しています。 詳細については、「 [DateTime、DateTimeOffset、TimeSpan、および TimeZoneInfo の使い分け](~/docs/standard/datetime/choosing-between-datetime.md)」を参照してください。 これに対し、<xref:System.DateTime.TimeOfDay%2A> プロパティは現在の日付を指定せずに現在の時刻を返し、<xref:System.DateTime.Now%2A> プロパティは現在の日付と現在の時刻の両方を返します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.Date%2A> プロパティを使用して、現在の日付を取得します。 また、標準の日時書式指定文字列を使用して <xref:System.DateTime> 値を書式設定する方法についても説明します。 <xref:System.DateTime.ToString%28System.String%29> メソッドの3番目の呼び出しによって生成される出力では、g 書式指定子を使用して、時間部分 (0) を指定することに注意してください。  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTime.Now" />
        <altmember cref="P:System.DateTime.TimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTime () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTime();" />
      <MemberSignature Language="F#" Value="member this.ToFileTime : unit -&gt; int64" Usage="dateTime.ToFileTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻で表した値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻は、64年1月 1601 1 日の午前0時から12:00 に経過した100ナノ秒間隔の数を表すビット値です。 西暦協定世界時 (UTC)。 Windows では、ファイルの作成、アクセス、またはファイルへの書き込みを行うときに、ファイルの時刻が記録されます。  
  
 <xref:System.DateTime.ToFileTime%2A> メソッドは、<xref:System.DateTime.Kind%2A> プロパティを使用して、現在の <xref:System.DateTime> オブジェクトが現地時刻、UTC 時刻、または現地時刻として扱われる指定されていない時刻のいずれであるかを判断します。  
  
   
  
## Examples  
 <xref:System.DateTime.ToFileTime%2A>メソッドの例を次に示します。  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果のファイル時刻が、 (UTC)。</exception>
        <block subset="none" type="usage"><para>通常、<see cref="M:System.DateTime.FromFileTime(System.Int64)" /> メソッドは <see cref="M:System.DateTime.ToFileTime" /> メソッドによって保存された <see cref="T:System.DateTime" /> 値を復元します。 ただし、次のような状況では、2つの値が異なる場合があります。 
-<see cref="T:System.DateTime" /> 値のシリアル化と逆シリアル化が異なるタイムゾーンで発生する場合。 たとえば、時刻が12:30 である <see cref="T:System.DateTime" /> 値の場合、 米国東部標準時のタイムゾーンはシリアル化され、米国太平洋標準時ゾーンで逆シリアル化されます。元の値は午後12:30 です。 は午前9:30 に調整されます。 2つのタイムゾーンの違いを反映する場合は。  
  
-シリアル化された <see cref="T:System.DateTime" /> 値がローカルタイムゾーンの無効な時刻を表している場合。 この場合、<see cref="M:System.DateTime.ToFileTime" /> メソッドは、復元された <see cref="T:System.DateTime" /> 値をローカルタイムゾーンの有効な時刻を表すように調整します。  
  
たとえば、標準時から夏時間への移行は、2:00 2010 年3月14日の米国太平洋標準時ゾーンで行われます。これは、時間が 1 3:00 時間経過したとき、午前15時になります。 この時間間隔は、無効な時刻、つまり、このタイムゾーンに存在しない時間間隔です。 次の例は、この範囲内にある時間が <see cref="M:System.DateTime.ToFileTime" /> メソッドによって長整数値に変換され、<see cref="M:System.DateTime.FromFileTime(System.Int64)" /> メソッドによって復元されると、元の値が有効な時刻になるように調整されることを示しています。 特定の日付と時刻の値が変更される可能性があるかどうかを判断するには、例に示すように、<see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> メソッドに渡します。  
  
[! code-csharp[. FromFileTime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)][! コード-vb[システム. DateTime. FromFileTime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToFileTimeUtc" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberSignature Language="VB.NET" Value="Public Function ToFileTimeUtc () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long ToFileTimeUtc();" />
      <MemberSignature Language="F#" Value="member this.ToFileTimeUtc : unit -&gt; int64" Usage="dateTime.ToFileTimeUtc " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻で表した値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻は、64年1月 1601 1 日の午前0時から12:00 に経過した100ナノ秒間隔の数を表すビット値です。 西暦協定世界時 (UTC)。 Windows では、ファイルの作成、アクセス、またはファイルへの書き込みを行うときに、ファイルの時刻が記録されます。  
  
 <xref:System.DateTime.ToFileTimeUtc%2A> メソッドは、<xref:System.DateTime.Kind%2A> プロパティを使用して、現在の <xref:System.DateTime> オブジェクトが現地時刻、UTC 時刻、または UTC 時刻として扱われる指定されていない時刻のいずれであるかを判断します。 現地時刻の場合は、時刻を UTC に変換してから、Windows ファイル時刻への変換を実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果のファイル時刻が、 (UTC)。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToFileTimeUtc" /> メソッドは、現地時刻を UTC に変換するために使用されることがあります。その後、<see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> メソッドを呼び出し、その後に <see cref="M:System.DateTime.ToLocalTime" /> メソッドを呼び出すことによって復元します。 ただし、元の時刻がローカルタイムゾーンの無効な時刻を表している場合、2つのローカル時刻値は等しくなりません。 詳細については、<see cref="M:System.DateTime.ToLocalTime" /> メソッドを参照してください。</para></block>
        <altmember cref="M:System.DateTime.ToFileTime" />
        <altmember cref="T:System.Int64" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLocalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToLocalTime();" />
      <MemberSignature Language="F#" Value="member this.ToLocalTime : unit -&gt; DateTime" Usage="dateTime.ToLocalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を現地時刻に変換します。</summary>
        <returns><see cref="P:System.DateTime.Kind" /> プロパティが <see cref="F:System.DateTimeKind.Local" />であるオブジェクト。通常は、現在の <see cref="T:System.DateTime" /> オブジェクトと等価な現地時刻が値として格納されます。ただし、変換後の値が <see cref="F:System.DateTime.MaxValue" /> オブジェクトで表現可能な範囲を超えている場合は <see cref="T:System.DateTime" /> の値が格納され、逆に変換跡の値が <see cref="F:System.DateTime.MinValue" /> オブジェクトで表現可能な範囲を下回る場合は <see cref="T:System.DateTime" /> が格納されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現地時刻は、協定世界時 (UTC) の時刻に UTC オフセットを加えた値と等しくなります。 UTC オフセットの詳細については、「<xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>」を参照してください。 変換では、現在の <xref:System.DateTime> オブジェクトで表される時間に適用される夏時間ルールも考慮されます。  
  
> [!IMPORTANT]
>  [!INCLUDE[winxp](~/includes/winxp-md.md)] システムでは、<xref:System.DateTime.ToLocalTime%2A> メソッドは UTC から現地時刻への変換時に現在の調整規則のみを認識します。 その結果、現在の調整規則が適用される前の期間の変換によって、UTC と現地時刻の差が正確に反映されない場合があります。  
  
 .NET Framework バージョン2.0 以降では、<xref:System.DateTime.ToLocalTime%2A> メソッドによって返される値は、現在の <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティによって決定されます。 次の表では、考えられる結果について説明します。  
  
|種類|[結果]|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|この <xref:System.DateTime> のインスタンスは、現地時刻に変換されます。|  
|<xref:System.DateTimeKind.Local>|変換は実行されません。|  
|<xref:System.DateTimeKind.Unspecified>|この <xref:System.DateTime> のインスタンスは UTC 時刻であると見なされ、<xref:System.DateTime.Kind%2A> が <xref:System.DateTimeKind.Utc>されているかのように変換が実行されます。|  
  
> [!NOTE]
>  <xref:System.DateTime.ToLocalTime%2A> メソッドは、<xref:System.DateTime> 値を UTC から現地時刻に変換します。 指定されたタイムゾーンの時刻を現地時刻に変換するには、<xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType> メソッドを使用します。  
  
 変換によって返される値は、<xref:System.DateTime.Kind%2A> プロパティが常に <xref:System.DateTimeKind.Local>を返す <xref:System.DateTime> です。 したがって、<xref:System.DateTime.ToLocalTime%2A> が同じ <xref:System.DateTime>に繰り返し適用される場合でも、有効な結果が返されます。  
  
   
  
## Examples  
 <xref:System.DateTime.ToLocalTime%2A>メソッドの例を次に示します。 正確な出力は、現在のカルチャと、それが実行されるシステムのローカルタイムゾーンによって異なります。  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 次の例では、<xref:System.DateTime.SpecifyKind%2A> メソッドを使用して、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTime.ToLocalTime%2A> および <xref:System.DateTime.ToUniversalTime%2A> の変換メソッドにどのように影響するかを示します。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToLocalTime" /> メソッドを使用して、<see cref="M:System.DateTime.ToUniversalTime" /> または <see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" /> メソッドによって UTC に変換されたローカルの日付と時刻の値を復元できます。 ただし、元の時刻がローカルタイムゾーンの無効な時刻を表している場合は、復元された値と一致しません。 <see cref="M:System.DateTime.ToLocalTime" /> メソッドによって時刻が UTC からローカルタイムゾーンに変換されるときに、ローカルタイムゾーンでが有効になるように時間が調整されます。  
  
たとえば、標準時から夏時間への移行は、2:00 2010 年3月14日の米国太平洋標準時ゾーンで行われます。これは、時間が 1 3:00 時間経過したとき、午前15時になります。 この時間間隔は、無効な時刻、つまり、このタイムゾーンに存在しない時間間隔です。 次の例は、この範囲内にある時間が <see cref="M:System.DateTime.ToUniversalTime" /> メソッドによって UTC に変換され、<see cref="M:System.DateTime.ToLocalTime" /> メソッドによって復元されると、元の値が有効な時刻になるように調整されることを示しています。 特定の日付と時刻の値が変更される可能性があるかどうかを判断するには、例に示すように、<see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" /> メソッドに渡します。  
  
[! code-csharp[datetime.tolocaltime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)][! code-vb[datetime.tolocaltime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para></block>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
        <altmember cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
        <altmember cref="M:System.DateTime.ToUniversalTime" />
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongDateString();" />
      <MemberSignature Language="F#" Value="member this.ToLongDateString : unit -&gt; string" Usage="dateTime.ToLongDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を、それと等価な長い形式の日付の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトを長い形式の日付で表した文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.DateTime> オブジェクトの値は、現在のスレッドカルチャに関連付けられている <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティによって定義されたパターンを使用して書式設定されます。 戻り値は、<xref:System.DateTime.ToString%28System.String%29> メソッドを使用して、[標準の DateTime 書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)"D" を指定することによって返される値と同じです。  
  
> [!NOTE]
>  <xref:System.DateTime.ToLongDateString%2A> メソッドによって返される文字列は、カルチャに依存します。 このメソッドは、現在のカルチャの <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern?displayProperty=nameWithType> プロパティによって定義されたパターンを反映します。 たとえば、en-us カルチャでは、標準の長い日付パターンは通常 "dddd, MMMM dd, yyyy" です。de 以外のカルチャでは、"dddd, d" になります。 MMMM yyyy ";ja-jp カルチャでは、"yyyy ' 年 m ' 月 ' 日 '" になります。 値は、.NET の実装とそのバージョン、オペレーティングシステムとバージョン、およびユーザーのカスタマイズによって異なる場合があることに注意してください。

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]
  
## Examples

<xref:System.DateTime.ToLongDateString%2A>メソッドの例を次に示します。  
  
[!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
[!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToLongTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToLongTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToLongTimeString : unit -&gt; string" Usage="dateTime.ToLongTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を、それと等価な長い形式の時刻の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトを長い形式の時刻で表した文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

現在の <xref:System.DateTime> オブジェクトの値は、現在のスレッドカルチャに関連付けられている <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> プロパティによって定義されたパターンを使用して書式設定されます。 戻り値は、<xref:System.DateTime.ToString%28System.String%29> メソッドで "T"[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)を指定することによって返される値と同じです。  
  
> [!NOTE]
>  <xref:System.DateTime.ToLongTimeString%2A> メソッドによって返される文字列は、カルチャに依存します。 このメソッドは、現在のカルチャの <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType> プロパティによって定義されたパターンを反映します。 たとえば、en-us カルチャでは、標準の長い時刻パターンは "h:mm: ss tt" です。de 以外のカルチャでは、"HH: mm: ss" です。ja-jp カルチャでは、"H:mm: ss" になります。 値は、.NET の実装とそのバージョン、オペレーティングシステムとバージョン、およびユーザーのカスタマイズによって異なる場合があることに注意してください。

[!INCLUDE[culture-sensitive-formatting](~/includes/thread-formatting.md)]
  
## Examples  
 <xref:System.DateTime.ToLongTimeString%2A>メソッドの例を次に示します。  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberSignature Language="VB.NET" Value="Public Function ToOADate () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double ToOADate();" />
      <MemberSignature Language="F#" Value="member this.ToOADate : unit -&gt; double" Usage="dateTime.ToOADate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの値をそれと等価な OLE オートメーション日付に変換します。</summary>
        <returns>このインスタンスの値と等価の OLE オートメーション日付を格納している倍精度浮動小数点数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 OLE オートメーション日付は、浮動小数点数として実装されます。これは、整数部分が午前0時から1899年12月30日までの日数で、小数部分がその日の日付を24で割った値であることを表します。 たとえば、午前0時、1899年12月31日は1.0 によって表されます。午前6時、1900年1月1日は2.25 で表されます。午前0時 (1899 年12月29日) は-1.0 によって表されます。また、午前6時には、1899年12月29日は-1.25 で表されます。  
  
 基本 OLE オートメーション日付は、1899年12月30日午前0時です。 OLE オートメーションの最小日付は、0100年1月1日午前0時になります。 OLE オートメーションの最大日付は、9999年12月31日の最後の瞬間 <xref:System.DateTime.MaxValue?displayProperty=nameWithType>と同じです。  
  
 <xref:System.DateTime.ToOADate%2A> メソッドは、現在のインスタンスが、January1 0100 の午前0時よりも <xref:System.DateTime.MaxValue> 後の日付を表している場合に <xref:System.OverflowException> をスローします。 ただし、現在のインスタンスの値が <xref:System.DateTime.MinValue>場合、このメソッドは0を返します。  
  
 OLE オートメーションの詳細については、 [MSDN ライブラリ](https://go.microsoft.com/fwlink/?linkid=37118)を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">このインスタンスの値を OLE オートメーション日付として表すことはできません。</exception>
        <altmember cref="T:System.Double" />
        <altmember cref="M:System.DateTime.FromOADate(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortDateString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortDateString();" />
      <MemberSignature Language="F#" Value="member this.ToShortDateString : unit -&gt; string" Usage="dateTime.ToShortDateString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を、それと等価な短い形式の日付の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトを短い形式の日付で表した文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.DateTime> オブジェクトの値は、現在のスレッドカルチャに関連付けられている <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType> プロパティによって定義されたパターンを使用して書式設定されます。 戻り値は、<xref:System.DateTime.ToString%28System.String%29> メソッドを使用して、[標準の DateTime 書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)"d" を指定することによって返される値と同じです。  
  
> [!NOTE]
>  <xref:System.DateTime.ToShortDateString%2A> メソッドによって返される文字列は、カルチャに依存します。 このメソッドは、現在のカルチャの <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern?displayProperty=nameWithType> プロパティによって定義されたパターンを反映します。 たとえば、en-us カルチャでは、標準の短い形式の日付パターンは "M/d/yyyy" です。de 以外のカルチャでは、"dd" になります。MM. yyyy ";ja-jp カルチャでは、"yyyy/MM/dd" になります。 値は、.NET の実装とそのバージョン、オペレーティングシステムとバージョン、およびユーザーのカスタマイズによって異なる場合があることに注意してください。

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]

## Examples  
 <xref:System.DateTime.ToShortDateString%2A>メソッドの例を次に示します。 また、<xref:System.DateTime.ToShortDateString%2A> メソッドを呼び出した結果が、format パラメーターとして "d" を指定した <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> メソッドを呼び出すことと同じであることがわかります。  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToShortTimeString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToShortTimeString();" />
      <MemberSignature Language="F#" Value="member this.ToShortTimeString : unit -&gt; string" Usage="dateTime.ToShortTimeString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を、それと等価な短い形式の時刻の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトを短い形式の時刻で表した文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

現在の <xref:System.DateTime> オブジェクトの値は、現在のスレッドカルチャに関連付けられている <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType> プロパティによって定義されたパターンを使用して書式設定されます。 戻り値は、<xref:System.DateTime.ToString%28System.String%29> メソッドで "t"[標準の DateTime 書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)を指定することによって返される値と同じです。  
  
> [!NOTE]
>  <xref:System.DateTime.ToShortTimeString%2A> メソッドによって返される文字列は、カルチャに依存します。 このメソッドは、現在のカルチャの <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern?displayProperty=nameWithType> プロパティによって定義されたパターンを反映します。 たとえば、en-us カルチャでは、標準の短い時刻パターンは "h:mm tt" です。de 以外のカルチャでは、"HH: mm" になります。ja-jp カルチャでは、"H:mm" になります。 値は、.NET の実装とそのバージョン、オペレーティングシステムとバージョン、およびユーザーのカスタマイズによって異なる場合があることに注意してください。 

[!INCLUDE[culture-sensitive formatting](~/includes/thread-formatting.md)]

## Examples  
 <xref:System.DateTime.ToShortTimeString%2A>メソッドの例を次に示します。  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.DateTime.ToString" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を等価の文字列形式に変換します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dateTime.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のカルチャの書式指定規則を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.DateTime> オブジェクトの値は、一般的な日付と時刻の書式指定子 (' G ') を使用して書式設定されます。 特定の日時書式指定子を使用して書式設定するには、<xref:System.DateTime.ToString%28System.String%29> メソッドを呼び出します。 特定のカルチャに対して一般的な日付と時刻の書式指定子 (' G ') を使用して書式設定するには、<xref:System.DateTime.ToString%28System.IFormatProvider%29> メソッドを呼び出します。 特定の日時書式指定子と特定のカルチャの規則を使用して書式設定するには、<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29> メソッドを呼び出します。  
  
 このメソッドは、現在のカルチャから派生した書式設定情報を使用します。 特に、`Thread.CurrentThread.CurrentCulture.DateTimeFormat` プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> および <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> プロパティによって返されるカスタム書式指定文字列を結合します。 詳細については、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> を参照してください。 <xref:System.DateTime.ToString%2A> メソッドの他のオーバーロードを使用すると、使用する書式設定を持つカルチャを指定し、<xref:System.DateTime> 値の出力パターンを定義できます。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTime.ToString> メソッドによって返される <xref:System.DateTime> 値の文字列形式が、スレッドの現在のカルチャにどのように依存しているかを示しています。 現在のスレッドカルチャを en-us から fr-fr に、ja-jp に変更します。 各ケースでは、<xref:System.DateTime.ToString> メソッドを呼び出して、そのカルチャを使用して日付と時刻の値の文字列形式を返します。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、現在のカルチャで使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString" /> メソッドは、現在のカルチャで使用されている暦での日付と時刻の文字列形式を返します。 現在の <see cref="T:System.DateTime" /> インスタンスの値が <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> より前または <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />よりも前の場合、メソッドは <see cref="T:System.ArgumentOutOfRangeException" />をスローします。 次に例を示します。 現在のカルチャがアラビア語 (シリア) の場合、<see cref="T:System.Globalization.HijriCalendar" /> クラスの範囲外の日付の書式を設定しようとします。  
 
::: code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs" id = "Snippet2":::::: code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb" id = "Snippet2":::

          </para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="dateTime.ToString provider" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" FrameworkAlternate="netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
        <returns><see cref="T:System.DateTime" /> により指定された、現在の <paramref name="provider" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の <xref:System.DateTime> オブジェクトの値は、一般的な日付と時刻の書式指定子 (' G ') を使用して書式設定されます。これは、短い形式の日付パターンと長い形式の時刻パターンを使用して出力を書式設定します。  
  
 短い日付パターンと長い時刻パターンの形式は、`provider` パラメーターによって定義されます。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   返される文字列に書式指定規則が反映されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、返される文字列の書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
-   <xref:System.IFormatProvider> インターフェイスを実装するカスタムオブジェクト。 <xref:System.IFormatProvider.GetFormat%2A> メソッドは、書式設定情報を提供する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを返します。  
  
 `provider` が `null`場合は、現在のカルチャに関連付けられている <xref:System.Globalization.DateTimeFormatInfo> オブジェクトが使用されます。 詳細については、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> を参照してください。  
  
   
  
## Examples  
 次の例では、5つの異なるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクトを使用して、日付と時刻の文字列形式を表示します。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs" interactive="try-dotnet" id="Snippet3":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb" id="Snippet3":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="provider" /> で使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString(System.IFormatProvider)" /> メソッドは、<paramref name="provider" /> パラメーターによって表されるカルチャによって使用される暦での日付と時刻の文字列形式を返します。 そのカレンダーは、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> プロパティによって定義されます。 現在の <see cref="T:System.DateTime" /> インスタンスの値が <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> より前または <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />よりも前の場合、メソッドは <see cref="T:System.ArgumentOutOfRangeException" />をスローします。 次に例を示します。 <see cref="T:System.Globalization.JapaneseCalendar" /> クラスの範囲外の日付の書式を設定しようとします。  
 
::: code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs" interactive = "dotnet" id = "Snippet1":::::: code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb" id = "Snippet1":::

          </para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format);" />
      <MemberSignature Language="F#" Value="override this.ToString : string -&gt; string" Usage="dateTime.ToString format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">標準またはカスタムの日時書式指定文字列。</param>
        <summary>指定した形式および現在のカルチャの書式指定規則を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
        <returns><see cref="T:System.DateTime" /> により指定された、現在の <paramref name="format" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ToString%28System.String%29> メソッドは、現在のカルチャの書式指定規則を使用する特定の形式で、日付と時刻の値の文字列形式を返します。詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>」を参照してください。  
  
 `format` パラメーターには、返される文字列の形式を定義する1つの書式指定子文字 ([標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)を参照) またはカスタム書式パターン (「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照) のいずれかを含める必要があります。 `format` が `null` または空の文字列の場合は、一般的な書式指定子 ' G ' が使用されます。  
  
 このメソッドの使用方法には、次のようなものがあります。  
  
-   現在のカルチャの短い日付と時刻の形式で日付と時刻を表示する文字列を取得します。 これを行うには、"G" 書式指定子を使用します。  
  
-   Month と year のみを含む文字列を取得します。 これを行うには、"MM/yyyy" 書式指定文字列を使用します。 書式指定文字列は、現在のカルチャの日付の区切り記号を使用します。  
  
-   特定の形式の日付と時刻を含む文字列を取得します。 たとえば、"MM/dd/yyyyHH: mm" 書式指定文字列は、日付と時刻の文字列を "19//03//2013 18:06" などの固定形式で表示します。 書式指定文字列では、カルチャ固有の設定に関係なく、固定の日付の区切り記号として "/" が使用されます。  
  
-   日付文字列をシリアル化するために使用できる、圧縮された形式で日付を取得しています。 たとえば、"yyyyMMdd" 書式指定文字列では、4桁の年、2桁の月、および日付の区切り記号のない2桁の日が表示されます。  
  
 次の例では、これら3つの書式指定文字列を使用して、en-us および fr-fr カルチャの規則を使用して日付と時刻の値を表示します。  
  
  :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs" interactive="try-dotnet" id="Snippet5":::
  :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb" id="Snippet5":::
  
## Examples  
 次の例では、標準の日時書式指定文字列とカスタム日時書式指定文字列の選択を使用して、<xref:System.DateTime> 値の文字列形式を表示します。 この例のスレッドの現在のカルチャは en-us です。  

  :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs" interactive="try-dotnet" id="Snippet2":::
  :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb" id="Snippet2":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> は長さが 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> で定義されている書式指定文字の 1 つではありません。  
  
または 
 <paramref name="format" /> には有効なカスタム書式パターンがありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、現在のカルチャで使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString(System.String)" /> メソッドは、現在のカルチャで使用されている暦での日付と時刻の文字列形式を返します。 現在の <see cref="T:System.DateTime" /> インスタンスの値が <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> より前または <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />よりも前の場合、メソッドは <see cref="T:System.ArgumentOutOfRangeException" />をスローします。 次に例を示します。 現在のカルチャがヘブライ語 (イスラエル) の場合、<see cref="T:System.Globalization.HebrewCalendar" /> クラスの範囲外の日付の書式を設定しようとします。  

::: code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs" interactive = "dotnet" id = "Snippet3":::::: code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb" id = "Snippet3":::

          </para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(System::String ^ format, IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : string * IFormatProvider -&gt; string" Usage="dateTime.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">標準またはカスタムの日時書式指定文字列。</param>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式およびカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価の文字列形式に変換します。</summary>
        <returns><see cref="T:System.DateTime" /> および <paramref name="format" /> により指定された、現在の <paramref name="provider" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format` パラメーターには、1つの書式指定子文字 ([標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)を参照) またはカスタム書式パターン (「[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)」を参照) のいずれかを含めることができます。 `format` が `null` または空の文字列 ("") の場合、標準書式指定子 "G" が使用されます。  
  
 `provider` パラメーターは、標準書式指定子に対応するパターン、および日付と時刻のコンポーネントのシンボルと名前を定義します。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   返される文字列に書式指定規則が反映されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、返される文字列の書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
-   <xref:System.IFormatProvider> インターフェイスを実装するカスタムオブジェクト。 <xref:System.IFormatProvider.GetFormat%2A> メソッドは、書式設定情報を提供する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを返します。  
  
 `provider` が `null`場合は、現在のカルチャに関連付けられている <xref:System.Globalization.DateTimeFormatInfo> が使用されます。 詳細については、<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> を参照してください。  
  
   
  
## Examples  
 次の例では、標準の日時書式指定文字列を使用して、4つの異なるカルチャの日付と時刻の文字列形式を表示しています。  

 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs" interactive="try-dotnet" id="Snippet4":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb" id="Snippet4":::
 
 次の例では、インバリアント <xref:System.Globalization.DateTimeFormatInfo>を使用して <xref:System.DateTime> 値の書式を設定するさまざまな方法を示します。  

 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><paramref name="format" /> は長さが 1 であり、<see cref="T:System.Globalization.DateTimeFormatInfo" /> で定義されている書式指定文字の 1 つではありません。  
  
または 
 <paramref name="format" /> には有効なカスタム書式パターンがありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、<paramref name="provider" /> で使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" /> メソッドは、<paramref name="provider" /> パラメーターで使用される暦での日付と時刻の文字列形式を返します。 そのカレンダーは、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> プロパティによって定義されます。 現在の <see cref="T:System.DateTime" /> インスタンスの値が <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> より前または <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />よりも前の場合、メソッドは <see cref="T:System.ArgumentOutOfRangeException" />をスローします。 次に例を示します。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> クラスの範囲外の日付の書式を設定しようとします。  

::: code language = "csharp" source = "~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs" interactive = "dotnet" id = "Snippet4":::::: code language = "vb" source = "~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb" id = "Snippet4":::

          </para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">.NET での型の書式設定</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">サンプル: .NET Core WinForms 書式指定ユーティリティC#()</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">サンプル: .NET Core WinForms の書式設定ユーティリティ (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberSignature Language="VB.NET" Value="Public Function ToUniversalTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime ToUniversalTime();" />
      <MemberSignature Language="F#" Value="member this.ToUniversalTime : unit -&gt; DateTime" Usage="dateTime.ToUniversalTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を世界協定時刻 (UTC) に変換します。</summary>
        <returns><see cref="P:System.DateTime.Kind" /> プロパティが <see cref="F:System.DateTimeKind.Utc" />であるオブジェクト。通常は、現在の <see cref="T:System.DateTime" /> オブジェクトと等価な UTC が値として格納されます。ただし、変換後の値が <see cref="F:System.DateTime.MaxValue" /> オブジェクトで表現可能な範囲を超えている場合は <see cref="T:System.DateTime" /> の値が格納され、逆に変換後の値が <see cref="F:System.DateTime.MinValue" /> オブジェクトで表現可能な範囲を下回る場合は <see cref="T:System.DateTime" /> が格納されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 世界協定時刻 (UTC) は、現地時刻から UTC オフセットを差し引いた値に相当します。 UTC オフセットの詳細については、「<xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>」を参照してください。 変換では、現在の <xref:System.DateTime> オブジェクトで表される時間に適用される夏時間ルールも考慮されます。  
  
> [!IMPORTANT]
>  [!INCLUDE[winxp](~/includes/winxp-md.md)] システムでは、<xref:System.DateTime.ToUniversalTime%2A> メソッドは、現地時刻から UTC に変換するときに現在の調整規則のみを認識します。 その結果、現在の調整規則が適用される前の期間の変換によって、現地時刻と UTC の差が正確に反映されない場合があります。  
  
 .NET Framework バージョン2.0 以降では、<xref:System.DateTime.ToUniversalTime%2A> メソッドによって返される値は、現在の <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティによって決定されます。 次の表では、考えられる結果について説明します。  
  
|種類|[結果]|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|変換は実行されません。|  
|<xref:System.DateTimeKind.Local>|現在の <xref:System.DateTime> オブジェクトは UTC に変換されます。|  
|<xref:System.DateTimeKind.Unspecified>|現在の <xref:System.DateTime> オブジェクトは、現地時刻であると見なされ、<xref:System.DateTime.Kind%2A> が <xref:System.DateTimeKind.Local>ているかのように変換されます。|  
  
> [!NOTE]
>  <xref:System.DateTime.ToUniversalTime%2A> メソッドは、<xref:System.DateTime> 値を現地時刻から UTC に変換します。 ローカル以外のタイムゾーンの時刻を UTC に変換するには、<xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> メソッドを使用します。 UTC からのオフセットがわかっている時刻を変換するには、<xref:System.DateTimeOffset.ToUniversalTime%2A> メソッドを使用します。  
  
 日付と時刻のインスタンスの値があいまいな時刻の場合、このメソッドは標準時であると想定します。 (あいまいな時刻とは、標準時またはローカルタイムゾーンの夏時間にマップできる時間です)。日付と時刻のインスタンスの値が無効な時刻の場合、このメソッドは単にローカルタイムゾーンの UTC オフセットから現地時刻を減算して、UTC を返します。 (無効な時刻とは、夏時間調整規則の適用によって存在しない時刻です)。  
  
   
  
## Examples  
 <xref:System.DateTime.ToUniversalTime%2A>メソッドの例を次に示します。  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 次の例では、<xref:System.DateTime.SpecifyKind%2A> メソッドを使用して、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTime.ToLocalTime%2A> および <xref:System.DateTime.ToUniversalTime%2A> の変換メソッドにどのように影響するかを示します。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><see cref="M:System.DateTime.ToUniversalTime" /> メソッドは、現地時刻を UTC に変換するために使用されることがあります。 次に、<see cref="M:System.DateTime.ToLocalTime" /> メソッドを呼び出して、元のローカル時刻を復元します。 ただし、元の時刻がローカルタイムゾーンの無効な時刻を表している場合、2つのローカル時刻値は等しくなりません。 詳細と例については、<see cref="M:System.DateTime.ToLocalTime" /> メソッドを参照してください。  
  
[!INCLUDE[winxp](~/includes/winxp-md.md)] システムでは、<see cref="M:System.DateTime.ToUniversalTime" /> メソッドはローカルタイムゾーンの現在の調整規則のみを認識します。これは、ダウンレベルの日付 (つまり、現在の調整規則の開始日よりも前の日付) を含むすべての日付に適用されます。 ローカルの日付と時刻の計算を正確に行う必要がある [!INCLUDE[winxp](~/includes/winxp-md.md)] で実行されているアプリケーションは、<see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" /> メソッドを使用して、ローカルタイムゾーンに対応する <see cref="T:System.TimeZoneInfo" /> オブジェクトを取得し、その <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> メソッドを呼び出すことで、この動作を回避する必要があります。  
  
次の例では、米国太平洋標準時タイムゾーンの [!INCLUDE[winxp](~/includes/winxp-md.md)] システムの <see cref="M:System.DateTime.ToUniversalTime" /> と <see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" /> のメソッドの違いを示します。 最初の2つのメソッド呼び出しでは、現在のタイムゾーン調整規則 (2007 で有効になっていた) が2006の日付に適用されます。 現在の調整規則では、3月の第2日曜日に夏時間への移行を行います。2006で有効になった前のルールは、4月の最初の日曜日に夏時間への移行を行うために提供されています。 3番目のメソッド呼び出しでのみ、この履歴日時の変換が正確に実行されます。  
  
[! code-csharp[ToUniversalTime # 1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)][! code-vb[ToUniversalTime # 1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para></block>
        <altmember cref="M:System.DateTime.ToLocalTime" />
      </Docs>
    </Member>
    <Member MemberName="TryFormat">
      <MemberSignature Language="C#" Value="public bool TryFormat (Span&lt;char&gt; destination, out int charsWritten, ReadOnlySpan&lt;char&gt; format = default, IFormatProvider provider = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryFormat(valuetype System.Span`1&lt;char&gt; destination, [out] int32&amp; charsWritten, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFormat (destination As Span(Of Char), ByRef charsWritten As Integer, Optional format As ReadOnlySpan(Of Char) = null, Optional provider As IFormatProvider = null) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryFormat : Span&lt;char&gt; * int * ReadOnlySpan&lt;char&gt; * IFormatProvider -&gt; bool" Usage="dateTime.TryFormat (destination, charsWritten, format, provider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="charsWritten" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="destination">このメソッドから制御が戻るときは、文字のスパンとして書式設定されているこのインスタンスの値。</param>
        <param name="charsWritten">このメソッドが返すときに、<paramref name="destination" /> に書き込まれる文字数。</param>
        <param name="format"><paramref name="destination" /> に許容される書式を定義する、標準またはカスタムの書式指定文字列を表す文字を含んでいるスパン。</param>
        <param name="provider"><paramref name="destination" /> のカルチャ固有の書式情報を指定する省略可能なオブジェクト。</param>
        <summary>現在の DateTime 型のインスタンスの値を、指定した文字スパンに書式設定しようとします。</summary>
        <returns>書式設定が正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日時を対応する <see cref="T:System.DateTime" /> 表現に変換し、変換に成功したかどうかを示す値を返します。</summary>
        <altmember cref="Overload:System.DateTime.Parse" />
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="result">変換に成功した場合は、このメソッドから戻る時点で、<see cref="T:System.DateTime" /> に格納された日時と等しい <paramref name="s" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターが <see langword="null" /> の場合、空の文字列 ("") の場合、または日付と時刻を表す有効な文字列形式が含まれていない場合は、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した日付と時刻の文字スパンを、それと等価な <see cref="T:System.DateTime" /> に変換し、変換が成功したかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="result">変換に成功した場合は、このメソッドから戻る時点で、<see cref="T:System.DateTime" /> に格納された日時と等しい <paramref name="s" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターが <see langword="null" /> の場合、空の文字列 ("") の場合、または日付と時刻を表す有効な文字列形式が含まれていない場合は、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した文字列形式の日時を対応する <see cref="T:System.DateTime" /> 表現に変換し、変換に成功したかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドは、変換に失敗した場合に <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29> メソッドが例外をスローしない点を除いて、<xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType> メソッドに似ています。  
  
 現在の <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの書式情報を使用して、現在のスレッドカルチャによって暗黙的に指定された `s` 文字列が解析されます。  
  
 このメソッドは、可能であれば、認識されていないデータを無視し、存在しない月、日、および年の情報を現在の日付に設定しようとします。 `s` に日付と時刻が含まれていない場合、このメソッドは時刻が12:00 午前0時であることを前提としています。 `s` に2桁の年の日付部分が含まれている場合、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> プロパティの値に基づいて、現在のカルチャの現在の暦の年に変換されます。 `s` 内の先頭、内部、または末尾の空白文字は無視されます。 日付と時刻は、先頭と末尾の符号記号 (' # '、U + 0023) のペアで囲むことができ、1つ以上の NULL 文字 (U + 0000) で trailed できます。  
  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドは、現在のカルチャの書式設定規則を使用して、日付と時刻の文字列形式を解析しようとするため、異なるカルチャで特定の文字列を解析しようとすると、失敗するか、異なる結果を返すことがあります。 特定の日付と時刻の形式が異なるロケールで解析される場合は、<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドまたは <xref:System.DateTime.TryParseExact%2A> メソッドのいずれかのオーバーロードを使用して、書式指定子を指定します。  
  
 現在の暦で `s` が閏月の閏年の文字列形式である場合、メソッドは `s` を正常に解析します。 現在のカルチャの現在の暦におけるうるう年以外の日付の文字列表現が `s` の場合、解析操作は失敗し、メソッドは `false`を返します。  
  
 `s` にタイムゾーン情報が含まれていない場合、`result` には、メソッドが返されたときに <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> である <xref:System.DateTime> 値が含まれます。 解析する文字列にタイムゾーン情報が含まれている場合、`result` には、メソッドから制御が戻ったときに <xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Local?displayProperty=nameWithType> する <xref:System.DateTime> 値が含まれます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドに複数の日付と時刻の文字列を渡します。  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>書式設定は、現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトのプロパティの影響を受けます。既定では、コントロールパネルの **[地域と言語のオプション]** 項目から派生します。 現在の <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> および <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> プロパティが同じ値に設定されている場合、<see cref="Overload:System.DateTime.TryParse" /> メソッドは予期せず失敗し、<see langword="False" /> を返します。</para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-cs/">サンプル: .NET Core WinForms 書式指定ユーティリティC#()</related>
        <related type="ExternalDocumentation" href="https://docs.microsoft.com/samples/dotnet/samples/winforms-formatting-utility-vb/">サンプル: .NET Core WinForms の書式設定ユーティリティ (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As ReadOnlySpan(Of Char), provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を表す文字を格納しているスパン。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">現在のタイム ゾーンまたは現在の日付と関連させて、解析された日付をどのように解釈するかを定義する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <param name="result">変換に成功した場合は、このメソッドから戻る時点で、<see cref="T:System.DateTime" /> に格納された日時と等しい <paramref name="s" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターが <see langword="null" /> の場合、空の文字列 ("") の場合、または日付と時刻を表す有効な文字列形式が含まれていない場合は、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定したカルチャ固有の書式情報と書式スタイルを使用して、日付と時刻のスパン表現を、それと等価な <see cref="T:System.DateTime" /> に変換し、変換が成功したかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, provider As IFormatProvider, styles As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, IFormatProvider ^ provider, System::Globalization::DateTimeStyles styles, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParse (s, provider, styles, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="styles">現在のタイム ゾーンまたは現在の日付と関連させて、解析された日付をどのように解釈するかを定義する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <param name="result">変換に成功した場合は、このメソッドから戻る時点で、<see cref="T:System.DateTime" /> に格納された日時と等しい <paramref name="s" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターが <see langword="null" /> の場合、空の文字列 ("") の場合、または日付と時刻を表す有効な文字列形式が含まれていない場合は、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定したカルチャ固有の書式情報と書式スタイルを使用して、指定した文字列形式の日付と時刻をそれと等価の <see cref="T:System.DateTime" /> に変換し、変換に成功したかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドは、日付、時刻、およびタイムゾーンの情報を格納できる文字列を解析します。 これは <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドに似ていますが、変換に失敗した場合に <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドが例外をスローしない点が異なります。  
  
 このメソッドは、認識されていないデータを無視して `s` を完全に解析しようとします。 `s` に時刻が含まれていても、日付が含まれていない場合、既定では現在の日付がメソッドに置き換えられます。また `styles` <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault> フラグが含まれている場合は、`DateTime.Date.MinValue`置換されます。 `s` に日付が含まれていても、時間がない場合は、既定の時刻として12:00 午前0時が使用されます。 日付が存在するが、その年の部分が2桁のみで構成されている場合、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType> プロパティの値に基づいて、`provider` パラメーターの現在の暦で年に変換されます。 `s` 内の先頭、内部、または末尾の空白文字はすべて無視されます。 日付と時刻は、先頭と末尾の符号記号 (' # '、U + 0023) のペアで囲むことができ、1つ以上の NULL 文字 (U + 0000) で trailed できます。  
  
 日付と時刻の要素、および日付と時刻で使用される名前と記号の特定の有効な形式は、`provider` パラメーターによって定義されます。これは、次のいずれかになります。  
  
-   書式設定が `s` パラメーターで使用されているカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは、`s`で使用される書式を定義します。  
  
-   `s`で使用される書式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
-   カスタムの <xref:System.IFormatProvider> 実装。 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> メソッドは、`s`で使用される書式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトを返します。  
  
 `provider` が `null` の場合は、現在のカルチャが使用されます。  
  
 現在の暦で `s` が閏月の閏年の文字列形式である場合、メソッドは `s` を正常に解析します。 `s` が、`provider`の現在の暦におけるうるう年以外の日付の文字列表現の場合、解析操作は失敗し、メソッドは `false`を返します。  
  
 `styles` パラメーターは、解析された文字列の正確な解釈と、解析操作でどのように処理するかを定義します。 次の表に示すように、<xref:System.Globalization.DateTimeStyles> 列挙体の1つ以上のメンバーを指定できます。  
  
|DateTimeStyles メンバー|Description|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`s` を解析し、必要に応じて UTC に変換します。 `s` にタイムゾーンオフセットが含まれている場合、または `s` にタイムゾーン情報が含まれておらず、`styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> フラグが含まれている場合、メソッドは文字列を解析し、<xref:System.DateTime.ToUniversalTime%2A> を呼び出して返された <xref:System.DateTime> 値を UTC に変換し、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。 `s` が UTC を表すことを示している場合、または `s` にタイムゾーン情報が含まれておらず、`styles` かつ <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> フラグが含まれている場合、メソッドは文字列を解析し、返された <xref:System.DateTime> 値に対してタイムゾーン変換を実行せず、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。 それ以外の場合、フラグは無効です。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|有効ですが、この値は無視されます。 `s`の日付と時刻の要素では、内側の空白文字を使用できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|有効ですが、この値は無視されます。 先頭の空白文字は、`s`の日付と時刻の要素で使用できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|有効ですが、この値は無視されます。 `s`の日付と時刻の要素では、末尾の空白文字を使用できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`s` に、先頭、内部、および末尾の空白を含めることができることを指定します。 これは既定の動作です。 <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType>など、より制限の厳しい <xref:System.Globalization.DateTimeStyles> 列挙値を指定することによってオーバーライドすることはできません。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|タイムゾーン情報が `s` ない場合は、現地時刻を表すと想定されます。 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> フラグが存在しない場合、返される <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|タイムゾーン情報が `s` ない場合、UTC を表すことを前提としています。 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> フラグが存在しない場合、メソッドは、返された <xref:System.DateTime> 値を UTC から現地時刻に変換し、その <xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定します。|  
|<xref:System.Globalization.DateTimeStyles.None>|有効ですが、この値は無視されます。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイムゾーン情報を含む文字列の場合、は、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定して、日付と時刻の文字列を <xref:System.DateTime> 値に変換できないようにします。 通常、このような文字列は、"o"、"r"、"u" のいずれかの標準書式指定子を使用して <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> メソッドを呼び出すことによって作成されます。|  
  
 `s` タイムゾーン情報が含まれていない場合、<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドは、<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> フラグがそれ以外の場合を示す場合を除き、<xref:System.DateTime.Kind%2A> プロパティが `styles` である <xref:System.DateTime> 値を返します。 `s` にタイムゾーンまたはタイムゾーンオフセット情報が含まれている場合、<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドは必要な時間変換を実行し、次のいずれかを返します。  
  
-   日付と時刻が現地時刻を反映し、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType>である <xref:System.DateTime> 値。  
  
-   または、`styles` に <xref:System.Globalization.DateTimeStyles.AdjustToUniversal> フラグが含まれている場合、日付と時刻が UTC を反映し、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>である <xref:System.DateTime> 値。  
  
 この動作は、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> フラグを使用してオーバーライドできます。  
  
## <a name="parsing-custom-cultures"></a>カスタムカルチャの解析  
 カスタムカルチャに対して生成された日付と時刻の文字列を解析する場合は、解析操作が成功する確率を上げるために、<xref:System.DateTime.TryParse%2A> メソッドの代わりに <xref:System.DateTime.TryParseExact%2A> メソッドを使用します。 カスタムカルチャの日付と時刻の文字列は、複雑で解析が困難な場合があります。 <xref:System.DateTime.TryParse%2A> メソッドは、いくつかの暗黙的な解析パターンを使用して文字列を解析しようとしますが、これらはすべて失敗する可能性があります。 これに対し、<xref:System.DateTime.TryParseExact%2A> メソッドでは、成功する可能性がある1つ以上の正確な解析パターンを明示的に指定する必要があります。  
  
 カスタムカルチャの詳細については、<xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType> クラスを参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドを示しています。  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> は有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。  
  
または 
 <paramref name="styles" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています (たとえば、 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />の両方などです)。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="provider" /> はニュートラル カルチャであり、解析操作で使用することはできません。</exception>
        <block subset="none" type="usage"><para>書式設定は、現在の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトのプロパティの影響を受けます。このオブジェクトは、<paramref name="provider" /> パラメーターによって指定されます。 現在の <see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" /> および <see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" /> プロパティが同じ値に設定されている場合、<see cref="Overload:System.DateTime.TryParse" /> メソッドは予期せず失敗し、<see langword="False" /> を返します。</para></block>
        <altmember cref="Overload:System.DateTime.Parse" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TryParseExact">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列形式の日付と時刻を等価の <see cref="T:System.DateTime" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。 このメソッドは、変換に成功したかどうかを示す値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

         ]]></format>
        </remarks>
        <altmember cref="Overload:System.DateTime.ParseExact" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, valuetype System.ReadOnlySpan`1&lt;char&gt; format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), format As ReadOnlySpan(Of Char), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, ReadOnlySpan&lt;char&gt; format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="format" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を表す文字を含むスパン。</param>
        <param name="format"><paramref name="s" /> に必要な書式。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="style"><paramref name="s" /> の許可された書式を示す 1 つまたは複数の列挙値のビットごとの組み合わせ。</param>
        <param name="result">変換に成功した場合は、このメソッドから戻る時点で、<see cref="T:System.DateTime" /> に格納された日時と等しい <paramref name="s" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターまたは <paramref name="format" /> パラメーターが <see langword="null" /> の場合、空の文字列の場合、あるいは <paramref name="format" /> に指定されたパターンに一致する日時が含まれていない場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式、カルチャ固有の書式情報、スタイルを使用して、指定した日付と時刻のスパン表現を、それと等価な <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。 このメソッドは、変換に成功したかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (ReadOnlySpan&lt;char&gt; s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(valuetype System.ReadOnlySpan`1&lt;char&gt; s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As ReadOnlySpan(Of Char), formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(ReadOnlySpan&lt;char&gt; s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : ReadOnlySpan&lt;char&gt; * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="s">解析する文字列を含むスパン。</param>
        <param name="formats"><paramref name="s" /> の許可された形式の配列。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="style">現在のタイム ゾーンまたは現在の日付と関連させて、解析された日付をどのように解釈するかを定義する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <param name="result">変換に成功した場合は、このメソッドから戻る時点で、<see cref="T:System.DateTime" /> に格納された日時と等しい <paramref name="s" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターが <see langword="null" /> か、<see cref="F:System.String.Empty" /> である場合、または日付と時刻を表す有効な文字列表現が含まれない場合、変換に失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した日付と時刻の文字スパンを、それと等価な <see cref="T:System.DateTime" /> に変換し、変換が成功したかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, format As String, provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, System::String ^ format, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, format, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="format" Type="System.String" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="format"><paramref name="s" /> に必要な書式。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="style"><paramref name="s" /> の許可された書式を示す 1 つまたは複数の列挙値のビットごとの組み合わせ。</param>
        <param name="result">変換に成功した場合は、このメソッドから戻る時点で、<see cref="T:System.DateTime" /> に格納された日時と等しい <paramref name="s" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> パラメーターまたは <paramref name="format" /> パラメーターが <see langword="null" /> の場合、空の文字列の場合、あるいは <paramref name="format" /> に指定されたパターンに一致する日時が含まれていない場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。 このメソッドは、変換に成功したかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドは、日付の文字列形式を解析します。これは、`format` パラメーターで定義された形式である必要があります。 これは <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドに似ていますが、変換に失敗した場合に <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> メソッドが例外をスローしない点が異なります。  
  
 `s` パラメーターには、解析する日付と時刻が含まれており、`format` パラメーターで定義された形式である必要があります。 日付、時刻、およびタイムゾーン要素が `s`に存在する場合は、`format`によって指定された順序でも表示される必要があります。 `format` が時刻要素のない日付を定義し、解析操作が成功した場合、結果の <xref:System.DateTime> 値の時間は深夜 (00:00:00) になります。 `format` が日付要素のない時刻を定義し、解析操作が成功した場合、既定では、結果の <xref:System.DateTime> 値は `DateTime.Now.Date`の日付になります。また、`styles` に <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> フラグが含まれている場合は、日付が `DateTime.MinValue.Date` になります。 `style` パラメーターは、`s` パラメーターに先頭、内部、または末尾の空白文字を含めることができるかどうかを決定します。  
  
 タイムゾーン情報が含まれていない `s`、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>です。 この動作は、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> フラグを使用して変更できます。このフラグは、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType>である <xref:System.DateTime> 値を返すか、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> プロパティが <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> <xref:System.DateTime> 値を返す <xref:System.DateTime.Kind%2A> フラグと <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>フラグを使用します。 にタイムゾーン情報が含まれている場合は、必要に応じて時刻が現地時刻に変換され、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。 この動作を変更するには、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> フラグを使用して世界協定時刻 (UTC) を現地時刻に変換しないようにし、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。  
  
 `format` パラメーターには、`s` パラメーターの予期される形式に対応するパターンが含まれています。 `format` パラメーターのパターンは、[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)の表にある1つ以上のカスタム書式指定子、または[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)の表から定義済みのパターンを識別する1つの標準書式指定子で構成されます。  
  
 カスタム書式パターンで日付または時刻の区切り記号を使用しない場合は、`provider` パラメーターにインバリアントカルチャを使用し、各カスタム書式指定子の幅が最も広い形式を使用します。 たとえば、パターンに時間を指定する場合は、幅の狭い形式の "H" ではなく、広い形式の "HH" を指定します。  
  
> [!NOTE]
>  解析操作を成功させるために、`s` が1つの形式に準拠している必要があるのではなく、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドを呼び出して、複数の許可された形式を指定することができます。 これにより、解析操作が成功する可能性が高くなります。  
  
 `s` で使用される特定の日付と時刻の記号および文字列 (特定の言語での曜日の名前など) は、`provider` パラメーターによって定義されます。 `format` が標準書式指定子の文字列である場合、`s` の正確な形式として定義されています。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   `s`を解釈するために使用されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは `s`のシンボルと書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
-   <xref:System.IFormatProvider.GetFormat%2A> メソッドが <xref:System.Globalization.CultureInfo> オブジェクト、または書式設定情報を提供する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトのいずれかを返すカスタム <xref:System.IFormatProvider> 実装。  
  
 `provider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 `styles` パラメーターには、<xref:System.Globalization.DateTimeStyles> 列挙体の1つ以上のメンバーが含まれており、`format` で定義されていない空白を `s` で使用できるかどうか、および解析操作の正確な動作を制御するかどうかを決定します。 次の表では、<xref:System.Globalization.DateTimeStyles> 列挙体の各メンバーが <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> メソッドの操作に与える影響について説明します。  
  
|DateTimeStyles メンバー|Description|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`s` を解析し、必要に応じて UTC に変換します。 `s` にタイムゾーンオフセットが含まれている場合、または `s` にタイムゾーン情報が含まれておらず、`styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> フラグが含まれている場合、メソッドは文字列を解析し、<xref:System.DateTime.ToUniversalTime%2A> を呼び出して返された <xref:System.DateTime> 値を UTC に変換し、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。 `s` が UTC を表すことを示している場合、または `s` にタイムゾーン情報が含まれておらず、`styles` かつ <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> フラグが含まれている場合、メソッドは文字列を解析し、返された <xref:System.DateTime> 値に対してタイムゾーン変換を実行せず、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。 それ以外の場合、フラグは無効です。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|`format` によって定義されていない空白を、任意の個別の日付または時刻要素の間に表示できることを指定します。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|`format` によって定義されていない空白が `s`の先頭に表示されることを指定します。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|`format` によって定義されていない空白が `s`の最後に表示されることを指定します。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`s` に `format`で定義されていない先頭、内部、および末尾の空白を含めることができるように指定します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|タイムゾーン情報が `s` ない場合は、現地時刻を表すと想定されます。 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> フラグが存在しない場合、返される <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|タイムゾーン情報が `s` ない場合、UTC を表すことを前提としています。 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> フラグが存在しない場合、メソッドは、返された <xref:System.DateTime> 値を UTC から現地時刻に変換し、その <xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定します。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|`s` に日付情報が含まれていない場合、戻り値の日付は `DateTime.MinValue.Date`に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` パラメーターは、既定値を使用して解析されます。 `format` に存在するもの以外の空白は許可されません。 `s` に日付要素がない場合、返された <xref:System.DateTime> 値の日付は1/1/0001 に設定されます。 タイムゾーン情報が含まれていない場合 `s` 返される <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>に設定されます。 タイムゾーン情報が `s`に存在する場合、時刻は現地時刻に変換され、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイムゾーン情報を含む文字列の場合、は、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定された <xref:System.DateTime> 値への変換を防止しようとします。 このフラグは、主に UTC 時刻からローカル時刻への変換を防止します。|  
  
   
  
## Examples  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドの例を次に示します。 `format`で先頭のスペースが許可されていないため、`styles` パラメーターが <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> のときに、文字列 "5/01/2009 8:30 AM" を正常に解析できないことに注意してください。 さらに、文字列 "5/01/2009 09:00" を "MM/dd/yyyyhh: mm" の `format` で正常に解析することはできません。これは、`format` が必要とするため、日付文字列が月番号の前に先行ゼロを付けないためです。  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> は有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。  
  
または 
 <paramref name="styles" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています (たとえば、 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />の両方などです)。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]では、解析対象の文字列に1時間の部分と、アグリーメントに含まれていない AM/PM 指定子が含まれている場合、<see cref="Overload:System.DateTime.TryParseExact" /> メソッドは <see langword="false" /> を返します。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseExact (s As String, formats As String(), provider As IFormatProvider, style As DateTimeStyles, ByRef result As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseExact(System::String ^ s, cli::array &lt;System::String ^&gt; ^ formats, IFormatProvider ^ provider, System::Globalization::DateTimeStyles style, [Runtime::InteropServices::Out] DateTime % result);" />
      <MemberSignature Language="F#" Value="static member TryParseExact : string * string[] * IFormatProvider * System.Globalization.DateTimeStyles * DateTime -&gt; bool" Usage="System.DateTime.TryParseExact (s, formats, provider, style, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="formats" Type="System.String[]" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="provider" Type="System.IFormatProvider" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="result" Type="System.DateTime" RefType="out" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。</param>
        <param name="formats"><paramref name="s" /> の許可された形式の配列。</param>
        <param name="provider"><paramref name="s" /> に関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <param name="style"><paramref name="s" /> で使用可能な書式を示す、列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <param name="result">変換に成功した場合は、このメソッドから戻る時点で、<see cref="T:System.DateTime" /> に格納された日時と等しい <paramref name="s" /> 値が格納されます。変換に失敗した場合は <see cref="F:System.DateTime.MinValue" /> が格納されます。 <paramref name="s" /> または <paramref name="formats" /> が <see langword="null" /> の場合、<paramref name="s" /> または <paramref name="formats" /> の要素が空の文字列の場合、あるいは、<paramref name="s" /> の書式が <paramref name="formats" /> に指定されたいずれの書式パターンとも一致しない場合、変換は失敗します。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式の配列、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式の少なくとも 1 つと完全に一致する必要があります。 このメソッドは、変換に成功したかどうかを示す値を返します。</summary>
        <returns><see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドは、`formats` パラメーターに割り当てられているパターンのいずれかと一致する日付の文字列形式を解析します。 これは <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> メソッドに似ていますが、変換に失敗した場合に <xref:System.DateTime.TryParseExact%2A> メソッドが例外をスローしない点が異なります。  
  
 `s` パラメーターには、解析する日付と時刻が含まれています。 `s` パラメーターに時刻のみが含まれ、日付が含まれていない場合、`style` パラメーターに <xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault?displayProperty=nameWithType> フラグが含まれていない限り、現在の日付が使用されます。この場合、既定の日付 (`DateTime.Date.MinValue`) が使用されます。 `s` パラメーターに日付のみが含まれ、時刻が指定されていない場合は、深夜 (00:00:00) が使用されます。 `style` パラメーターは、`formats`内のいずれかの書式指定文字列によって許可されていない空白文字を、`s` パラメーターに含めることができるかどうかも決定します。  
  
 タイムゾーン情報が含まれていない `s`、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>です。 この動作は、<xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> フラグを使用して変更できます。このフラグは、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType>である <xref:System.DateTime> 値を返すか、<xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> プロパティが <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> <xref:System.DateTime> 値を返す <xref:System.DateTime.Kind%2A> フラグと <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>フラグを使用します。 にタイムゾーン情報が含まれている場合は、必要に応じて時刻が現地時刻に変換され、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。 この動作を変更するには、<xref:System.Globalization.DateTimeStyles.RoundtripKind?displayProperty=nameWithType> フラグを使用して世界協定時刻 (UTC) を現地時刻に変換しないようにし、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。  
  
 `formats` パラメーターにはパターンの配列が含まれています。これには、解析操作が成功するかどうかを正確に一致させる必要がある `s` の1つです。 `formats` パラメーターのパターンは、[カスタム日時書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)テーブルの1つ以上のカスタム書式指定子、または[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)の表から定義済みのパターンを識別する1つの標準書式指定子で構成されます。  
  
 カスタム書式パターンで日付または時刻の区切り記号を使用しない場合は、`provider` パラメーターにインバリアントカルチャを使用し、各カスタム書式指定子の幅が最も広い形式を使用します。 たとえば、パターンに時間を指定する場合は、幅の狭い形式の "H" ではなく、広い形式の "HH" を指定します。  
  
 `s` で使用される特定の日付と時刻の記号および文字列 (特定の言語での曜日の名前など) は、`provider` パラメーターによって定義されます。 `format` が標準書式指定子の文字列である場合、`s` の正確な形式として定義されています。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   `s`を解釈するために使用されるカルチャを表す <xref:System.Globalization.CultureInfo> オブジェクト。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> プロパティによって返される <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは `s`のシンボルと書式を定義します。  
  
-   日付と時刻のデータの形式を定義する <xref:System.Globalization.DateTimeFormatInfo> オブジェクト。  
  
-   <xref:System.IFormatProvider.GetFormat%2A> メソッドが <xref:System.Globalization.CultureInfo> オブジェクト、または書式設定情報を提供する <xref:System.Globalization.DateTimeFormatInfo> オブジェクトのいずれかを返すカスタム <xref:System.IFormatProvider> 実装。  
  
 `provider` が `null`場合は、現在のカルチャに対応する <xref:System.Globalization.CultureInfo> オブジェクトが使用されます。  
  
 `styles` パラメーターには、<xref:System.Globalization.DateTimeStyles> 列挙体の1つ以上のメンバーが含まれており、`format` で定義されていない空白を `s` で使用できるかどうか、および解析操作の正確な動作を制御するかどうかを決定します。 次の表では、<xref:System.Globalization.DateTimeStyles> 列挙体の各メンバーが <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> メソッドの操作に与える影響について説明します。  
  
|DateTimeStyles メンバー|Description|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|`s` を解析し、必要に応じて UTC に変換します。 `s` にタイムゾーンオフセットが含まれている場合、または `s` にタイムゾーン情報が含まれておらず、`styles` に <xref:System.Globalization.DateTimeStyles.AssumeLocal?displayProperty=nameWithType> フラグが含まれている場合、メソッドは文字列を解析し、<xref:System.DateTime.ToUniversalTime%2A> を呼び出して返された <xref:System.DateTime> 値を UTC に変換し、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。 `s` が UTC を表すことを示している場合、または `s` にタイムゾーン情報が含まれておらず、`styles` かつ <xref:System.Globalization.DateTimeStyles.AssumeUniversal?displayProperty=nameWithType> フラグが含まれている場合、メソッドは文字列を解析し、返された <xref:System.DateTime> 値に対してタイムゾーン変換を実行せず、<xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>に設定します。 それ以外の場合、フラグは無効です。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|`format` によって定義されていない空白を、任意の個別の日付または時刻要素の間に表示できることを指定します。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|`format` によって定義されていない空白が `s`の先頭に表示されることを指定します。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|`format` によって定義されていない空白が `s`の最後に表示されることを指定します。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|`s` に `format`で定義されていない先頭、内部、および末尾の空白を含めることができるように指定します。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|タイムゾーン情報が `s` ない場合は、現地時刻を表すと想定されます。 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> フラグが存在しない場合、返される <xref:System.DateTime> 値の <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|タイムゾーン情報が `s` ない場合、UTC を表すことを前提としています。 <xref:System.Globalization.DateTimeStyles.AdjustToUniversal?displayProperty=nameWithType> フラグが存在しない場合、メソッドは、返された <xref:System.DateTime> 値を UTC から現地時刻に変換し、その <xref:System.DateTime.Kind%2A> プロパティを <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定します。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|`s` に日付情報が含まれていない場合、戻り値の日付は `DateTime.MinValue.Date`に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s` パラメーターは、既定値を使用して解析されます。 `format` に存在するもの以外の空白は許可されません。 `s` に日付要素がない場合、返された <xref:System.DateTime> 値の日付は1/1/0001 に設定されます。 タイムゾーン情報が含まれていない場合 `s` 返される <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>に設定されます。 タイムゾーン情報が `s`に存在する場合、時刻は現地時刻に変換され、返された <xref:System.DateTime> オブジェクトの <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定されます。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイムゾーン情報を含む文字列の場合、は、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Local?displayProperty=nameWithType>に設定された <xref:System.DateTime> 値への変換を防止しようとします。 このフラグは、主に UTC 時刻からローカル時刻への変換を防止します。|  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> メソッドを使用して、さまざまな形式の文字列を正常に解析できることを確認します。  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="styles" /> は有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。  
  
または 
 <paramref name="styles" /> に <see cref="T:System.Globalization.DateTimeStyles" /> 値の正しくない組み合わせが含まれています (たとえば、 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> と <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />の両方などです)。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]では、解析対象の文字列に1時間の部分と、アグリーメントに含まれていない AM/PM 指定子が含まれている場合、<see cref="Overload:System.DateTime.TryParseExact" /> メソッドは <see langword="false" /> を返します。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 以前のバージョンでは、AM/PM 指定子は無視されます。</para></block>
        <altmember cref="Overload:System.DateTime.ParseExact" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <related type="Article" href="~/docs/standard/base-types/parsing-datetime.md">.NET Framework における日付と時刻文字列の解析の解析</related>
        <related type="Article" href="~/docs/standard/base-types/standard-date-and-time-format-strings.md">標準の日時書式指定文字列</related>
        <related type="Article" href="~/docs/standard/base-types/custom-date-and-time-format-strings.md">カスタム日時書式指定文字列</related>
      </Docs>
    </Member>
    <Member MemberName="UnixEpoch">
      <MemberSignature Language="C#" Value="public static readonly DateTime UnixEpoch;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime UnixEpoch" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.UnixEpoch" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnixEpoch As DateTime " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTime UnixEpoch;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnixEpoch : DateTime" Usage="System.DateTime.UnixEpoch" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この定数の値は、グレゴリオ暦での 1970 年 1 月 1 日 00:00:00.0000000 UTC に相当します。 <see cref="F:System.DateTime.UnixEpoch" /> によって、Unix 時間が 0 に等しい時点が定義されます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UtcNow As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property DateTime UtcNow { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.UtcNow : DateTime" Usage="System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンピューター上の現在の日時を世界協定時刻 (UTC) で表した <see cref="T:System.DateTime" /> オブジェクトを取得します。</summary>
        <value>現在の UTC 日時を値として保持するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの解決策は、基になるオペレーティングシステムに依存するシステムタイマーによって異なります。 0.5 ~ 15 ミリ秒の範囲で指定します。

 .NET Framework バージョン2.0 以降、戻り値は <xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>を返す <xref:System.DateTime> です。

 <xref:System.DateTime.UtcNow%2A> を使用する代わりに、<xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>を使用することもできます。 前者は、日付と時刻の値が <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> を <xref:System.DateTime.Kind%2A> プロパティに割り当てることによって世界協定時刻 (UTC) であることを示していますが、後者では、日付と時刻の値が UTC 時刻のオフセット (<xref:System.TimeSpan.Zero?displayProperty=nameWithType>に等しい) に割り当てられます。
  
## Examples  
 次の例では、<xref:System.DateTime.SpecifyKind%2A> メソッドを使用して、<xref:System.DateTime.Kind%2A> プロパティが <xref:System.DateTime.ToLocalTime%2A> および <xref:System.DateTime.ToUniversalTime%2A> の変換メソッドにどのように影響するかを示します。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.DateTimeOffset.UtcNow" />
        <altmember cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Year As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Year { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Year : int" Usage="System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の年の部分を取得します。</summary>
        <value>1 から 9999 までの間の年。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Year%2A> プロパティは、グレゴリオ暦の現在のインスタンスの年を返します。 現在のカルチャの既定の暦を使用して年を返すことはありません。 特定の暦を使用して年を取得するには、次のコードに示すように、その暦の `GetYear` メソッドを呼び出すことができます。  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 <xref:System.DateTime.Year%2A>プロパティの例を次に示します。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
  </Members>
</Type>
