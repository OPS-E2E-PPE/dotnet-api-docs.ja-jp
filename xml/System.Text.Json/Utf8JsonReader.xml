<Type Name="Utf8JsonReader" FullName="System.Text.Json.Utf8JsonReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="47b83651de0554230ff6053974b5b0845e47cf7c" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75159480" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonReader" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonReader extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonReader" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonReader" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonReader" />
  <TypeSignature Language="F#" Value="type Utf8JsonReader = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ba82b-101">UTF-8 でエンコードされた JSON テキストに対する前方参照、読み取り専用のアクセスのための高パフォーマンスの API です。</span><span class="sxs-lookup"><span data-stu-id="ba82b-101">Provides a high-performance API for forward-only, read-only access to UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-102">`Utf8JsonReader` は、キャッシュなしでテキストを順番に処理し、既定では[JSON RFC](https://tools.ietf.org/html/rfc8259)に厳密に準拠します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-102">`Utf8JsonReader` processes the text sequentially with no caching and by default adheres strictly to the [JSON RFC](https://tools.ietf.org/html/rfc8259).</span></span>

<span data-ttu-id="ba82b-103">`Utf8JsonReader` が無効な JSON を検出した場合、行の行番号やバイト位置などの基本的なエラー情報を含む <xref:System.Text.Json.JsonException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-103">When `Utf8JsonReader` encounters invalid JSON, it throws a <xref:System.Text.Json.JsonException> with basic error information like line number and byte position on the line.</span></span>

<span data-ttu-id="ba82b-104">この型は ref 構造体であるため、非同期的には直接サポートされません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-104">Since this type is a ref struct, it doesn't directly support async.</span></span> <span data-ttu-id="ba82b-105">ただし、不完全なデータを読み取って、さらに多くのデータが表示された場合は、再入によるサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-105">However, it does provide support for reentrancy to read incomplete data and to continue reading once more data is presented.</span></span>

<span data-ttu-id="ba82b-106">コメントの読み取り中またはスキップを許可するときに、最大の深さを設定できるようにするには <xref:System.Text.Json.JsonReaderOptions> のインスタンスを作成し、リーダーに渡します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-106">To be able to set max depth while reading OR allow skipping comments, create an instance of <xref:System.Text.Json.JsonReaderOptions> and pass it to the reader.</span></span>

<span data-ttu-id="ba82b-107">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md#use-utf8jsonreader)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="ba82b-107">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#use-utf8jsonreader).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; jsonData, valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySequence(Of Byte), Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : System.Buffers.ReadOnlySequence&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="ba82b-108">UTF-8 でエンコードされた、処理対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="ba82b-108">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="options"><span data-ttu-id="ba82b-109">JSON RFC とは異なる <see cref="T:System.Text.Json.Utf8JsonReader" /> のカスタマイズされた動作を定義します (たとえば、コメントの処理方法、読み取り時に許容される最大深度など)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-109">Defines customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader" /> that differs from the JSON RFC (for example how to handle comments or maximum depth allowed when reading).</span></span> <span data-ttu-id="ba82b-110">既定で、<see cref="T:System.Text.Json.Utf8JsonReader" /> は JSON RFC に厳密に従います。JSON 内のコメントは無効で、最大深度は 64 です。</span><span class="sxs-lookup"><span data-stu-id="ba82b-110">By default, the <see cref="T:System.Text.Json.Utf8JsonReader" /> follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.</span></span></param>
        <summary><span data-ttu-id="ba82b-111">指定したオプションを使用し、UTF-8 でエンコードされたテキストの読み取り専用シーケンスを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-111">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> structure that processes a read-only sequence of UTF-8 encoded text using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-112">この型は ref 構造体であるため、スタックのみの型であり、ref 構造体のすべての制限が適用されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-112">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>

<span data-ttu-id="ba82b-113">このコンストラクターは、JSON ペイロード全体が `jsonData`に含まれていることを前提としています。これは、<xref:System.Text.Json.Utf8JsonReader.IsFinalBlock?displayProperty=nameWithType> = `true`に相当します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-113">This constructor assumes that the entire JSON payload is contained in `jsonData`; it is equivalent to <xref:System.Text.Json.Utf8JsonReader.IsFinalBlock?displayProperty=nameWithType> = `true`.</span></span>
              
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, System.Text.Json.JsonReaderOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="ba82b-114">UTF-8 でエンコードされた、処理対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="ba82b-114">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="options"><span data-ttu-id="ba82b-115">JSON RFC とは異なる <see cref="T:System.Text.Json.Utf8JsonReader" /> のカスタマイズされた動作を定義します (たとえば、コメントの処理方法、読み取り時に許容される最大深度など)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-115">Defines customized behavior of the <see cref="T:System.Text.Json.Utf8JsonReader" /> that differs from the JSON RFC (for example how to handle comments or maximum depth allowed when reading).</span></span> <span data-ttu-id="ba82b-116">既定で、<see cref="T:System.Text.Json.Utf8JsonReader" /> は JSON RFC に厳密に従います。JSON 内のコメントは無効で、最大深度は 64 です。</span><span class="sxs-lookup"><span data-stu-id="ba82b-116">By default, the <see cref="T:System.Text.Json.Utf8JsonReader" /> follows the JSON RFC strictly; comments within the JSON are invalid, and the maximum depth is 64.</span></span></param>
        <summary><span data-ttu-id="ba82b-117">指定したオプションを使用し、UTF-8 でエンコードされたテキストの読み取り専用スパンを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-117">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> structure that processes a read-only span of UTF-8 encoded text using the specified options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-118">この型は ref 構造体であるため、スタックのみの型であり、ref 構造体のすべての制限が適用されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-118">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>

<span data-ttu-id="ba82b-119">このコンストラクターは、JSON ペイロード全体が `jsonData`に含まれていることを前提としています。これは、<xref:System.Text.Json.Utf8JsonReader.IsFinalBlock?displayProperty=nameWithType> = `true`に相当します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-119">This constructor assumes that the entire JSON payload is contained in `jsonData`; it is equivalent to <xref:System.Text.Json.Utf8JsonReader.IsFinalBlock?displayProperty=nameWithType> = `true`.</span></span>
              
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySequence(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(System::Buffers::ReadOnlySequence&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : System.Buffers.ReadOnlySequence&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="ba82b-120">UTF-8 でエンコードされた、処理対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="ba82b-120">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="isFinalBlock"><span data-ttu-id="ba82b-121">処理対象のデータ全体が入力シーケンスに含まれていることを示すには <see langword="true" />。後続するデータがある部分的なデータが入力スパンに含まれていることを示すには <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-121"><see langword="true" /> to indicate that the input sequence contains the entire data to process; <see langword="false" /> to indicate that the input span contains partial data with more data to follow.</span></span></param>
        <param name="state"><span data-ttu-id="ba82b-122">リーダーの状態を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ba82b-122">An object that contains the reader state.</span></span> <span data-ttu-id="ba82b-123">これがコンストラクターの最初の呼び出しである場合は、既定の状態を渡します。それ以外の場合は、<see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> の前のインスタンスから <see cref="T:System.Text.Json.Utf8JsonReader" /> プロパティの値を渡します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-123">If this is the first call to the constructor, pass the default state; otherwise, pass the value of the <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> property from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader" />.</span></span></param>
        <summary><span data-ttu-id="ba82b-124">UTF-8 でエンコードされたテキストの読み取り専用のシーケンスを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化し、処理するすべてのテキストが入力に含まれるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-124">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> structure that processes a read-only sequence of UTF-8 encoded text and indicates whether the input contains all the text to process.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-125">この型は ref 構造体であるため、スタックのみの型であり、ref 構造体のすべての制限が適用されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-125">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="ba82b-126">コンストラクターが <xref:System.Text.Json.JsonReaderState>を受け入れる理由は次のようになります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-126">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonReaderState>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(ReadOnlySpan&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData"><span data-ttu-id="ba82b-127">UTF-8 でエンコードされた、処理対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="ba82b-127">The UTF-8 encoded JSON text to process.</span></span></param>
        <param name="isFinalBlock"><span data-ttu-id="ba82b-128">処理対象のデータ全体が入力シーケンスに含まれていることを示すには <see langword="true" />。後続するデータがある部分的なデータが入力スパンに含まれていることを示すには <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-128"><see langword="true" /> to indicate that the input sequence contains the entire data to process; <see langword="false" /> to indicate that the input span contains partial data with more data to follow.</span></span></param>
        <param name="state"><span data-ttu-id="ba82b-129">リーダーの状態を格納するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="ba82b-129">An object that contains the reader state.</span></span> <span data-ttu-id="ba82b-130">これがコンストラクターの最初の呼び出しである場合は、既定の状態を渡します。それ以外の場合は、<see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> の前のインスタンスから <see cref="T:System.Text.Json.Utf8JsonReader" /> プロパティの値を渡します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-130">If this is the first call to the constructor, pass the default state; otherwise, pass the value of the <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> property from the previous instance of the <see cref="T:System.Text.Json.Utf8JsonReader" />.</span></span></param>
        <summary><span data-ttu-id="ba82b-131">UTF-8 でエンコードされたテキストの読み取り専用のスパンを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化し、処理するすべてのテキストが入力に含まれるかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-131">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> structure that processes a read-only span of UTF-8 encoded text and indicates whether the input contains all the text to process.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-132">この型は ref 構造体であるため、スタックのみの型であり、ref 構造体のすべての制限が適用されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-132">Since this type is a ref struct, it is a stack-only type, and all the limitations of ref structs apply to it.</span></span>
<span data-ttu-id="ba82b-133">コンストラクターが <xref:System.Text.Json.JsonReaderState>を受け入れる理由は次のようになります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-133">This is the reason why the constructor accepts a <xref:System.Text.Json.JsonReaderState>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba82b-134"><see cref="T:System.Text.Json.Utf8JsonReader" /> のこのインスタンスでこれまで消費された合計バイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-134">Gets the total number of bytes consumed so far by this instance of the <see cref="T:System.Text.Json.Utf8JsonReader" />.</span></span></summary>
        <value><span data-ttu-id="ba82b-135">これまでに使用されたバイト数の合計です。</span><span class="sxs-lookup"><span data-stu-id="ba82b-135">The total number of bytes consumed so far.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba82b-136">現在のトークンの深さを取得します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-136">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="ba82b-137">現在のトークンの深さ。</span><span class="sxs-lookup"><span data-stu-id="ba82b-137">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-138">`CurrentDepth` プロパティは、これまでに処理された JSON テキスト内の入れ子になったオブジェクトまたは配列の再帰的な深さを追跡します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-138">The `CurrentDepth` property tracks the recursive depth of the nested objects or arrays within the JSON text processed so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As JsonReaderState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderState CurrentState { System::Text::Json::JsonReaderState get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Text.Json.JsonReaderState" Usage="System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba82b-139"><see cref="T:System.Text.Json.Utf8JsonReader" /> コンストラクターにより多くのデータを渡すのに、<see cref="T:System.Text.Json.Utf8JsonReader" /> の現在の状態を取得します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-139">Gets the current <see cref="T:System.Text.Json.Utf8JsonReader" /> state to pass to a <see cref="T:System.Text.Json.Utf8JsonReader" /> constructor with more data.</span></span></summary>
        <value><span data-ttu-id="ba82b-140">現在のリーダーの状態。</span><span class="sxs-lookup"><span data-stu-id="ba82b-140">The current reader state.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-141">Ref 構造体である <xref:System.Text.Json.Utf8JsonReader>とは異なり、非同期/待機の境界を越えて状態を維持することができます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-141">Unlike the <xref:System.Text.Json.Utf8JsonReader>, which is a ref struct, the state can survive across async/await boundaries.</span></span> <span data-ttu-id="ba82b-142">この型は、<xref:System.Text.Json.Utf8JsonReader>の新しいインスタンスを続行する前に、より多くのデータを非同期的に読み取るためのサポートを提供するために必要です。</span><span class="sxs-lookup"><span data-stu-id="ba82b-142">This type is required to provide support for reading in more data asynchronously before continuing with a new instance of the <xref:System.Text.Json.Utf8JsonReader>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public bool GetBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetBoolean();" />
      <MemberSignature Language="F#" Value="member this.GetBoolean : unit -&gt; bool" Usage="utf8JsonReader.GetBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-143">次の JSON トークン値をソースから <see cref="T:System.Boolean" /> として読み取ります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-143">Reads the next JSON token value from the source as a <see cref="T:System.Boolean" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-144"><see langword="true" /> が <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> の場合は <see cref="F:System.Text.Json.JsonTokenType.True" />。<see langword="false" /> が <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> の場合は <see cref="F:System.Text.Json.JsonTokenType.False" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-144"><see langword="true" /> if the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.True" />; <see langword="false" /> if the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.False" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-145">JSON トークンの値はブール値 (つまり、<see cref="F:System.Text.Json.JsonTokenType.True" /> または <see cref="F:System.Text.Json.JsonTokenType.False" />) ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-145">The value of the JSON token isn't a boolean value (that is, <see cref="F:System.Text.Json.JsonTokenType.True" /> or <see cref="F:System.Text.Json.JsonTokenType.False" />).</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetByte">
      <MemberSignature Language="C#" Value="public byte GetByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8 GetByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetByte" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByte () As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Byte GetByte();" />
      <MemberSignature Language="F#" Value="member this.GetByte : unit -&gt; byte" Usage="utf8JsonReader.GetByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-146">現在の JSON トークン値をソースから <see cref="T:System.Byte" /> として解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-146">Parses the current JSON token value from the source as a <see cref="T:System.Byte" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-147">UTF-8 でエンコードされたトークンの値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-147">The value of the UTF-8 encoded token.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-148">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-148">The value of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-149">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-149">The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).</span></span>
          
<span data-ttu-id="ba82b-150">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-150">-or-</span></span>

<span data-ttu-id="ba82b-151">JSON トークン値は、<see cref="F:System.Byte.MinValue" /> 未満の数値、または <see cref="F:System.Byte.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-151">The JSON token value represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetBytesFromBase64">
      <MemberSignature Language="C#" Value="public byte[] GetBytesFromBase64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytesFromBase64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytesFromBase64 () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytesFromBase64();" />
      <MemberSignature Language="F#" Value="member this.GetBytesFromBase64 : unit -&gt; byte[]" Usage="utf8JsonReader.GetBytesFromBase64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-152">ソースから現在の JSON トークン値を解析し、Base64 でエンコードされた JSON 文字列をバイト配列としてデコードします。</span><span class="sxs-lookup"><span data-stu-id="ba82b-152">Parses the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array.</span></span></summary>
        <returns><span data-ttu-id="ba82b-153">現在の JSON トークン値を表すバイト配列。</span><span class="sxs-lookup"><span data-stu-id="ba82b-153">The byte array that represents the current JSON token value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-154">JSON トークンの型が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-154">The type of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-155">値は Base64 テキストとしてエンコードされていないため、バイトにデコードできません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-155">The value is not encoded as Base64 text, so it can't be decoded to bytes.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetComment">
      <MemberSignature Language="C#" Value="public string GetComment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetComment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetComment" />
      <MemberSignature Language="VB.NET" Value="Public Function GetComment () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetComment();" />
      <MemberSignature Language="F#" Value="member this.GetComment : unit -&gt; string" Usage="utf8JsonReader.GetComment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-156">ソースからの現在の JSON トークン値をコメントとして解析し、<see cref="T:System.String" /> としてトランスコードします。</span><span class="sxs-lookup"><span data-stu-id="ba82b-156">Parses the current JSON token value from the source as a comment, transcoded it as a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-157">現在の JSON トークン値を表すコメント。</span><span class="sxs-lookup"><span data-stu-id="ba82b-157">The comment that represents the current JSON token value.</span></span></returns>
        <remarks><span data-ttu-id="ba82b-158">これは、<see cref="F:System.Text.Json.JsonCommentHandling.Allow" /> オプションを使用してリーダーが構築されている場合にのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-158">This is only applicable when the reader is constructed using the <see cref="F:System.Text.Json.JsonCommentHandling.Allow" /> option.</span></span> <span data-ttu-id="ba82b-159">それ以外の場合、<see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> は <see cref="F:System.Text.Json.JsonTokenType.Comment" />されません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-159">Otherwise, the <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> will never be <see cref="F:System.Text.Json.JsonTokenType.Comment" />.</span></span></remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-160">JSON トークンがコメントではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-160">The JSON token is not a comment.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDateTime">
      <MemberSignature Language="C#" Value="public DateTime GetDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetDateTime();" />
      <MemberSignature Language="F#" Value="member this.GetDateTime : unit -&gt; DateTime" Usage="utf8JsonReader.GetDateTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-161">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.DateTime" /> に解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-161">Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTime" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-162">UTF-8 でエンコードされたトークン値全体を正常に解析できる場合は日時の値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-162">The date and time value, if the entire UTF-8 encoded token value can be successfully parsed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-163">このメソッドは、ISO 8601-1 拡張形式に準拠した JSON 文字列の <xref:System.DateTime> 表現のみを作成します (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-163">This method only creates a <xref:System.DateTime> representation of JSON strings that conform to the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-164">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-164">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-165">JSON トークン値を <see cref="T:System.DateTime" /> として読み取ることはできません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-165">The JSON token value cannot be read as a <see cref="T:System.DateTime" />.</span></span>
        
<span data-ttu-id="ba82b-166">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-166">-or-</span></span> 
<span data-ttu-id="ba82b-167">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.DateTime" /> 値に解析することはできません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-167">The entire UTF-8 encoded token value cannot be parsed to a <see cref="T:System.DateTime" /> value.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset GetDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset GetDateTimeOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeOffset () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset GetDateTimeOffset();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeOffset : unit -&gt; DateTimeOffset" Usage="utf8JsonReader.GetDateTimeOffset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-168">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.DateTimeOffset" /> に解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-168">Reads the next JSON token value from the source and parses it to a <see cref="T:System.DateTimeOffset" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-169">UTF-8 でエンコードされたトークン値全体を正常に解析できる場合は日時のオフセット。</span><span class="sxs-lookup"><span data-stu-id="ba82b-169">The date and time offset, if the entire UTF-8 encoded token value can be successfully parsed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-170">このメソッドは、ISO 8601-1 拡張形式に準拠した JSON 文字列の <xref:System.DateTimeOffset> 表現のみを作成します (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-170">This method only creates a <xref:System.DateTimeOffset> representation of JSON strings that conform to the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-171">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-171">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-172">JSON トークン値を <see cref="T:System.DateTimeOffset" /> として読み取ることはできません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-172">The JSON token value cannot be read as a <see cref="T:System.DateTimeOffset" />.</span></span>

<span data-ttu-id="ba82b-173">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-173">-or-</span></span> 
<span data-ttu-id="ba82b-174">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.DateTimeOffset" /> 値に解析することはできません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-174">The entire UTF-8 encoded token value cannot be parsed to a <see cref="T:System.DateTimeOffset" /> value.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDecimal">
      <MemberSignature Language="C#" Value="public decimal GetDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Decimal GetDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Decimal GetDecimal();" />
      <MemberSignature Language="F#" Value="member this.GetDecimal : unit -&gt; decimal" Usage="utf8JsonReader.GetDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-175">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Decimal" /> に解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-175">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Decimal" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-176"><see cref="T:System.Decimal" /> に解析された、UTF-8 でエンコードされたトークン値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-176">The UTF-8 encoded token value parsed to a <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-177">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-177">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-178">JSON トークン値は、<see cref="F:System.Decimal.MinValue" /> 未満の数値、または <see cref="F:System.Decimal.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-178">The JSON token value represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public double GetDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDouble" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetDouble();" />
      <MemberSignature Language="F#" Value="member this.GetDouble : unit -&gt; double" Usage="utf8JsonReader.GetDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-179">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Double" /> に解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-179">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-180"><see cref="T:System.Double" /> に解析された、UTF-8 でエンコードされたトークン値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-180">The UTF-8 encoded token value parsed to a <see cref="T:System.Double" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-181">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-181">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-182">JSON トークン値は、<see cref="F:System.Double.MinValue" /> 未満の数値、または <see cref="F:System.Double.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-182">The JSON token value represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetGuid">
      <MemberSignature Language="C#" Value="public Guid GetGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid GetGuid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetGuid" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGuid () As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Guid GetGuid();" />
      <MemberSignature Language="F#" Value="member this.GetGuid : unit -&gt; Guid" Usage="utf8JsonReader.GetGuid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-183">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Guid" /> に解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-183">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Guid" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-184">UTF-8 でエンコードされたトークン値全体を正常に解析できる場合は GUID の値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-184">The GUID value, if the entire UTF-8 encoded token value can be successfully parsed.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-185">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-185">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-186">JSON トークン値は、GUID でサポートされていない形式です。</span><span class="sxs-lookup"><span data-stu-id="ba82b-186">The JSON token value is in an unsupported format for a Guid.</span></span>
        
<span data-ttu-id="ba82b-187">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-187">-or-</span></span>

<span data-ttu-id="ba82b-188">UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Guid" /> 値に解析することはできません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-188">The entire UTF-8 encoded token value cannot be parsed to a <see cref="T:System.Guid" /> value.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt16">
      <MemberSignature Language="C#" Value="public short GetInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int16 GetInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt16" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt16 () As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; short GetInt16();" />
      <MemberSignature Language="F#" Value="member this.GetInt16 : unit -&gt; int16" Usage="utf8JsonReader.GetInt16 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-189">現在の JSON トークン値をソースから <see cref="T:System.Int16" /> として解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-189">Parses the current JSON token value from the source as a <see cref="T:System.Int16" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-190"><see cref="T:System.Int16" /> に解析された、UTF-8 でエンコードされたトークン値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-190">The UTF-8 encoded token value parsed to an <see cref="T:System.Int16" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-191">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-191">The value of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-192">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-192">The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).</span></span>
          
<span data-ttu-id="ba82b-193">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-193">-or-</span></span>

<span data-ttu-id="ba82b-194">JSON トークン値は、<see cref="F:System.Int16.MinValue" /> 未満の数値、または <see cref="F:System.Int16.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-194">The JSON token value represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt32">
      <MemberSignature Language="C#" Value="public int GetInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt32 () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetInt32();" />
      <MemberSignature Language="F#" Value="member this.GetInt32 : unit -&gt; int" Usage="utf8JsonReader.GetInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-195">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Int32" /> に解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-195">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int32" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-196"><see cref="T:System.Int32" /> に解析された、UTF-8 でエンコードされたトークン値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-196">The UTF-8 encoded token value parsed to an <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-197">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-197">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-198">JSON トークン値の数値形式が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-198">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="ba82b-199">たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-199">For example, it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="ba82b-200">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-200">-or-</span></span>

<span data-ttu-id="ba82b-201">JSON トークン値は、<see cref="F:System.Int32.MinValue" /> 未満の数値、または <see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-201">The JSON token value represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt64">
      <MemberSignature Language="C#" Value="public long GetInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long GetInt64();" />
      <MemberSignature Language="F#" Value="member this.GetInt64 : unit -&gt; int64" Usage="utf8JsonReader.GetInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-202">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Int64" /> に解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-202">Reads the next JSON token value from the source and parses it to an <see cref="T:System.Int64" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-203"><see cref="T:System.Int64" /> に解析された、UTF-8 でエンコードされたトークン値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-203">The UTF-8 encoded token value parsed to an <see cref="T:System.Int64" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-204">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-204">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-205">JSON トークン値の数値形式が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-205">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="ba82b-206">たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-206">For example, it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="ba82b-207">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-207">-or-</span></span>

<span data-ttu-id="ba82b-208">JSON トークン値は、<see cref="F:System.Int64.MinValue" /> 未満の数値、または <see cref="F:System.Int64.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-208">The JSON token value represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetSByte">
      <MemberSignature Language="C#" Value="public sbyte GetSByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int8 GetSByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSByte" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSByte () As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::SByte GetSByte();" />
      <MemberSignature Language="F#" Value="member this.GetSByte : unit -&gt; sbyte" Usage="utf8JsonReader.GetSByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-209">現在の JSON トークン値をソースから <see cref="T:System.SByte" /> として解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-209">Parses the current JSON token value from the source as an <see cref="T:System.SByte" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-210"><see cref="T:System.SByte" /> に解析された、UTF-8 でエンコードされたトークン値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-210">The UTF-8 encoded token value parsed to an <see cref="T:System.SByte" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-211">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-211">The value of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-212">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-212">The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).</span></span>
          
<span data-ttu-id="ba82b-213">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-213">-or-</span></span>

<span data-ttu-id="ba82b-214">JSON トークン値は、<see cref="F:System.SByte.MinValue" /> 未満の数値、または <see cref="F:System.SByte.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-214">The JSON token value represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetSingle">
      <MemberSignature Language="C#" Value="public float GetSingle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetSingle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSingle" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSingle () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetSingle();" />
      <MemberSignature Language="F#" Value="member this.GetSingle : unit -&gt; single" Usage="utf8JsonReader.GetSingle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-215">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Single" /> に解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-215">Reads the next JSON token value from the source and parses it to a <see cref="T:System.Single" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-216"><see cref="T:System.Single" /> に解析された、UTF-8 でエンコードされたトークン値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-216">The UTF-8 encoded token value parsed to a <see cref="T:System.Single" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-217">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-217">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-218">JSON トークン値は、<see cref="F:System.Single.MinValue" /> 未満の数値、または <see cref="F:System.Single.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-218">The JSON token value represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString();" />
      <MemberSignature Language="F#" Value="member this.GetString : unit -&gt; string" Usage="utf8JsonReader.GetString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-219">次の JSON トークン値をソースから読み取り、エスケープ解除し、文字列としてトランスコードします。</span><span class="sxs-lookup"><span data-stu-id="ba82b-219">Reads the next JSON token value from the source, unescaped, and transcoded as a string.</span></span></summary>
        <returns><span data-ttu-id="ba82b-220">文字列に解析されたトークン値。または、<see langword="null" /> が <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> の場合は <see cref="F:System.Text.Json.JsonTokenType.Null" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-220">The token value parsed to a string, or <see langword="null" /> if <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> is <see cref="F:System.Text.Json.JsonTokenType.Null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-221"><xref:System.Text.Json.Utf8JsonReader.TokenType> が <xref:System.Text.Json.JsonTokenType.Null?displayProperty=nameWithType>場合に `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-221">Returns `null` when <xref:System.Text.Json.Utf8JsonReader.TokenType> is <xref:System.Text.Json.JsonTokenType.Null?displayProperty=nameWithType>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-222">JSON トークン値は文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" />、<see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> または <see cref="F:System.Text.Json.JsonTokenType.Null" /> ではない)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-222">The JSON token value isn't a string (that is, not a <see cref="F:System.Text.Json.JsonTokenType.String" />, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />, or <see cref="F:System.Text.Json.JsonTokenType.Null" />).</span></span>

<span data-ttu-id="ba82b-223">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-223">-or-</span></span>

<span data-ttu-id="ba82b-224">JSON 文字列に無効な UTF-8 バイトまたは無効な UTF-16 サロゲートが含まれています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-224">The JSON string contains invalid UTF-8 bytes or invalid UTF-16 surrogates.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt16">
      <MemberSignature Language="C#" Value="public ushort GetUInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int16 GetUInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt16" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt16 () As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt16 GetUInt16();" />
      <MemberSignature Language="F#" Value="member this.GetUInt16 : unit -&gt; uint16" Usage="utf8JsonReader.GetUInt16 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-225">現在の JSON トークン値をソースから <see cref="T:System.UInt16" /> として解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-225">Parses the current JSON token value from the source as a <see cref="T:System.UInt16" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-226"><see cref="T:System.UInt16" /> に解析された、UTF-8 でエンコードされたトークン値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-226">The UTF-8 encoded token value parsed to a <see cref="T:System.UInt16" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-227">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-227">The value of the JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-228">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-228">The numeric format of the JSON token value is incorrect (for example, it contains a fractional value or is written in scientific notation).</span></span>
          
<span data-ttu-id="ba82b-229">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-229">-or-</span></span>

<span data-ttu-id="ba82b-230">JSON トークン値は、<see cref="F:System.UInt16.MinValue" /> 未満の数値、または <see cref="F:System.UInt16.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-230">The JSON token value represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt32">
      <MemberSignature Language="C#" Value="public uint GetUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 GetUInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt32 () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt32 GetUInt32();" />
      <MemberSignature Language="F#" Value="member this.GetUInt32 : unit -&gt; uint32" Usage="utf8JsonReader.GetUInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-231">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.UInt32" /> に解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-231">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt32" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-232"><see cref="T:System.UInt32" /> に解析された、UTF-8 でエンコードされたトークン値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-232">The UTF-8 encoded token value parsed to a <see cref="T:System.UInt32" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-233">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-233">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-234">JSON トークン値の数値形式が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-234">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="ba82b-235">たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-235">For example, it contains a decimal or is written in scientific notation.</span></span>

<span data-ttu-id="ba82b-236">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-236">-or-</span></span>

<span data-ttu-id="ba82b-237">JSON トークン値は、<see cref="F:System.UInt32.MinValue" /> 未満の数値、または <see cref="F:System.UInt32.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-237">The JSON token value represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt64">
      <MemberSignature Language="C#" Value="public ulong GetUInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int64 GetUInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt64 () As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt64 GetUInt64();" />
      <MemberSignature Language="F#" Value="member this.GetUInt64 : unit -&gt; uint64" Usage="utf8JsonReader.GetUInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-238">次の JSON トークン値をソースから読み取り、それを <see cref="T:System.UInt64" /> に解析します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-238">Reads the next JSON token value from the source and parses it to a <see cref="T:System.UInt64" />.</span></span></summary>
        <returns><span data-ttu-id="ba82b-239"><see cref="T:System.UInt64" /> に解析された、UTF-8 でエンコードされたトークン値。</span><span class="sxs-lookup"><span data-stu-id="ba82b-239">The UTF-8 encoded token value parsed to a <see cref="T:System.UInt64" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-240">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-240">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="ba82b-241">JSON トークン値の数値形式が正しくありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-241">The JSON token value is of the incorrect numeric format.</span></span> <span data-ttu-id="ba82b-242">たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-242">For example, it contains a decimal or is written in scientific notation.</span></span>
            
<span data-ttu-id="ba82b-243">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-243">-or-</span></span>

<span data-ttu-id="ba82b-244">JSON トークン値は、<see cref="F:System.UInt64.MinValue" /> 未満の数値、または <see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-244">The JSON token value represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="HasValueSequence">
      <MemberSignature Language="C#" Value="public bool HasValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValueSequence As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValueSequence { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValueSequence : bool" Usage="System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba82b-245">トークン値を取得するために使用する <c>Value</c> プロパティを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-245">Gets a value that indicates which <c>Value</c> property to use to get the token value.</span></span></summary>
        <value><span data-ttu-id="ba82b-246">トークン値を取得するために <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> を使用する必要がある場合は <see langword="true" /> します。代わりに <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> を使用する必要がある場合は <see langword="false" /> します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-246"><see langword="true" /> if <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> should be used to get the token value; <see langword="false" /> if <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> should be used instead.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-247">`HasValueSequence` が `false`場合、<xref:System.Text.Json.Utf8JsonReader.ValueSequence> は空になります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-247">If `HasValueSequence` is `false`, <xref:System.Text.Json.Utf8JsonReader.ValueSequence> is empty.</span></span> <span data-ttu-id="ba82b-248">そのため、<xref:System.Text.Json.Utf8JsonReader.ValueSpan> プロパティを使用してトークン値を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-248">Therefore, read the token value using the <xref:System.Text.Json.Utf8JsonReader.ValueSpan> property.</span></span>

<span data-ttu-id="ba82b-249">`ReadOnlySpan<byte>`内の入力データの場合は、常に `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-249">For input data within a `ReadOnlySpan<byte>`, this always returns `false`.</span></span> <span data-ttu-id="ba82b-250">`ReadOnlySequence<byte>`内の入力データの場合、トークン値が1つ以上のセグメントをまたがっためにスパンとして表すことができない場合にのみ `true` を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-250">For input data within a `ReadOnlySequence<byte>`, this only returns `true` if the token value straddles more than a single segment and hence can't be represented as a span.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinalBlock">
      <MemberSignature Language="C#" Value="public bool IsFinalBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFinalBlock" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFinalBlock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFinalBlock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFinalBlock : bool" Usage="System.Text.Json.Utf8JsonReader.IsFinalBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba82b-251">すべての JSON データが与えられたか、あるいは他にもデータが入ってくるのかを示す <see cref="T:System.Text.Json.Utf8JsonReader" /> のこのインスタンスのモードを取得します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-251">Gets the mode of this instance of the <see cref="T:System.Text.Json.Utf8JsonReader" /> which indicates whether all the JSON data was provided or there is more data to come.</span></span></summary>
        <value><span data-ttu-id="ba82b-252">処理する JSON データ全体を含む入力範囲またはシーケンスを使用してリーダーが構築されたかどうかを <see langword="true" /> します。より多くのデータを含む部分的な JSON データを含む可能性のある入力範囲またはシーケンスを使用してリーダーが構築された場合に <see langword="false" /> します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-252"><see langword="true" /> if the reader was constructed with the input span or sequence containing the entire JSON data to process; <see langword="false" /> if the reader was constructed with an input span or sequence that may contain partial JSON data with more data to follow.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.Utf8JsonReader.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba82b-253">指定された UTF-8 でエンコードされた入力 ReadOnlySequence<see cref="T:System.SequencePosition" />byte&lt; 内の現在の &gt; を取得します。<see cref="T:System.SequencePosition" /> 構造体が ReadOnlySpan<see cref="T:System.Text.Json.Utf8JsonReader" />byte&lt; で構築されている場合は既定の &gt; を取得します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-253">Gets the current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt; or a default <see cref="T:System.SequencePosition" /> if the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt;.</span></span></summary>
        <value><span data-ttu-id="ba82b-254">指定した UTF-8 でエンコードされた入力 ReadOnlySequence 内の現在の <see cref="T:System.SequencePosition" />&lt;バイト&gt;、または <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体が ReadOnlySpan&lt;byte&gt;を使用して構築された場合は既定の <see cref="T:System.SequencePosition" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-254">The current <see cref="T:System.SequencePosition" /> within the provided UTF-8 encoded input ReadOnlySequence&lt;byte&gt; or a default <see cref="T:System.SequencePosition" /> if the <see cref="T:System.Text.Json.Utf8JsonReader" /> struct was constructed with a ReadOnlySpan&lt;byte&gt;.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Read();" />
      <MemberSignature Language="F#" Value="member this.Read : unit -&gt; bool" Usage="utf8JsonReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-255">次の JSON トークンを入力ソースから読み取ります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-255">Reads the next JSON token from the input source.</span></span></summary>
        <returns><span data-ttu-id="ba82b-256">トークンが正常に読み取られた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-256"><see langword="true" /> if the token was read successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="ba82b-257">JSON RFC では無効な JSON トークンが検出されました。</span><span class="sxs-lookup"><span data-stu-id="ba82b-257">An invalid JSON token according to the JSON RFC is encountered.</span></span>
        
<span data-ttu-id="ba82b-258">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-258">-or-</span></span>

<span data-ttu-id="ba82b-259">現在の深度が、最大深度によって設定された再帰の限度を超えています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-259">The current depth exceeds the recursive limit set by the maximum depth.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Skip();" />
      <MemberSignature Language="F#" Value="member this.Skip : unit -&gt; unit" Usage="utf8JsonReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-260">現在の JSON トークンの子をスキップします。</span><span class="sxs-lookup"><span data-stu-id="ba82b-260">Skips the children of the current JSON token.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-261"><xref:System.Text.Json.Utf8JsonReader.TokenType> が <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>場合、リーダーは最初にプロパティ値に移動します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-261">When <xref:System.Text.Json.Utf8JsonReader.TokenType> is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>, the reader first moves to the property value.</span></span>

<span data-ttu-id="ba82b-262"><xref:System.Text.Json.Utf8JsonReader.TokenType> (もともと、または前進後) が <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithtype> または <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>の場合、リーダーは一致する <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> または <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>に進みます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-262">When <xref:System.Text.Json.Utf8JsonReader.TokenType> (originally, or after advancing) is <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithtype> or  <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>, the reader advances to the matching <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>.</span></span>
            
<span data-ttu-id="ba82b-263">他のすべてのトークン型については、リーダーは移動しません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-263">For all other token types, the reader does not move.</span></span> <span data-ttu-id="ba82b-264">次に <xref:System.Text.Json.Utf8JsonReader.Read>を呼び出した後、リーダーは次の値 (配列の場合)、次のプロパティ名 (オブジェクトの場合)、または終了配列/オブジェクトトークンになります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-264">After the next call to <xref:System.Text.Json.Utf8JsonReader.Read>, the reader will be at the next value (when in an array), the next property name (when in an object), or the end array/object token.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-265">リーダーに与えられたデータは一部であり、この後にデータが続きます (つまり、<see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> は <see langword="false" /> です)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-265">The reader was given partial data with more data to follow (that is, <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> is <see langword="false" />).</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="ba82b-266">JSON RFC に基づき、スキップ中、無効な JSON トークンが検出されました。</span><span class="sxs-lookup"><span data-stu-id="ba82b-266">An invalid JSON token was encountered while skipping, according to the JSON RFC.</span></span>

<span data-ttu-id="ba82b-267">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-267">-or-</span></span>

<span data-ttu-id="ba82b-268">現在の深度が、最大深度によって設定された再帰の限度を超えています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-268">The current depth exceeds the recursive limit set by the maximum depth.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TokenStartIndex">
      <MemberSignature Language="C#" Value="public long TokenStartIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 TokenStartIndex" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenStartIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenStartIndex As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long TokenStartIndex { long get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenStartIndex : int64" Usage="System.Text.Json.Utf8JsonReader.TokenStartIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba82b-269">最後に処理された JSON トークンの (UTF-8 でエンコードされた指定の入力テキスト内の) 開始位置となるインデックスを取得します。空白はスキップされます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-269">Gets the index that the last processed JSON token starts at (within the given UTF-8 encoded input text), skipping any white space.</span></span></summary>
        <value><span data-ttu-id="ba82b-270">指定した UTF-8 でエンコードされた入力テキスト内で最後に処理された JSON トークンの開始インデックス。</span><span class="sxs-lookup"><span data-stu-id="ba82b-270">The starting index of the last processed JSON token within the given UTF-8 encoded input text.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-271">JSON 文字列 (プロパティ名を含む) の場合、この値は開始引用符の前を指します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-271">For JSON strings (including property names), this value points to before the start quote.</span></span>

<span data-ttu-id="ba82b-272">コメントの場合、この値は最初のコメント区切り記号 ('/') の前を指します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-272">For comments, this value points to before the first comment delimiter (that is, '/').</span></span> <span data-ttu-id="ba82b-273">これは、<xref:System.Text.Json.JsonCommentHandling.Allow?displayProperty=nameWithType> オプションを使用してリーダーが構築されている場合にのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-273">This is only applicable when the reader is constructed using the <xref:System.Text.Json.JsonCommentHandling.Allow?displayProperty=nameWithType> option.</span></span>

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonTokenType TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonTokenType TokenType" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenType As JsonTokenType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonTokenType TokenType { System::Text::Json::JsonTokenType get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : System.Text.Json.JsonTokenType" Usage="System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonTokenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba82b-274">UTF-8 でエンコードされた JSON テキスト内で最後に処理された JSON トークンの種類を取得します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-274">Gets the type of the last processed JSON token in the UTF-8 encoded JSON text.</span></span></summary>
        <value><span data-ttu-id="ba82b-275">最後に処理された JSON トークンの型。</span><span class="sxs-lookup"><span data-stu-id="ba82b-275">The type of the last processed JSON token.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetByte">
      <MemberSignature Language="C#" Value="public bool TryGetByte (out byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetByte([out] unsigned int8&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetByte (ByRef value As Byte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetByte([Runtime::InteropServices::Out] System::Byte % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetByte : byte -&gt; bool" Usage="utf8JsonReader.TryGetByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-276">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-276">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-277">ソースから現在の JSON トークン値を <see cref="T:System.Byte" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-277">Tries to parse the current JSON token value from the source as a <see cref="T:System.Byte" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-278">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.Byte" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-278"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Byte" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-279">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-279">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetBytesFromBase64">
      <MemberSignature Language="C#" Value="public bool TryGetBytesFromBase64 (out byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetBytesFromBase64([out] unsigned int8[]&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetBytesFromBase64 (ByRef value As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetBytesFromBase64([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetBytesFromBase64 : Byte[] -&gt; bool" Usage="utf8JsonReader.TryGetBytesFromBase64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-280">このメソッドが返される場合、Base64 テキストの (デコードされた) バイナリ表現が含まれます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-280">When this method returns, contains the decoded binary representation of the Base64 text.</span></span></param>
        <summary><span data-ttu-id="ba82b-281">ソースから現在の JSON トークン値を解析し、Base64 でエンコードされた JSON 文字列をバイト配列としてデコードし、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-281">Tries to parse the current JSON token value from the source and decodes the Base64 encoded JSON string as a byte array and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-282">トークン値全体が有効な Base64 テキストとしてエンコードされ、正常にバイトにデコードできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-282"><see langword="true" /> if the entire token value is encoded as valid Base64 text and can be successfully decoded to bytes; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-283">JSON トークンが <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-283">The JSON token is not a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTime">
      <MemberSignature Language="C#" Value="public bool TryGetDateTime (out DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTime([out] valuetype System.DateTime&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTime (ByRef value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTime([Runtime::InteropServices::Out] DateTime % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTime : DateTime -&gt; bool" Usage="utf8JsonReader.TryGetDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-284">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-284">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-285">ソースから現在の JSON トークン値を <see cref="T:System.DateTime" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-285">Tries to parse the current JSON token value from the source as a <see cref="T:System.DateTime" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-286">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.DateTime" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-286"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTime" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-287">このメソッドは、ISO 8601-1 拡張形式に準拠した JSON 文字列の <xref:System.DateTime> 表現のみを作成します (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-287">This method only creates a <xref:System.DateTime> representation of JSON strings that conform to the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)).</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-288">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-288">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTimeOffset">
      <MemberSignature Language="C#" Value="public bool TryGetDateTimeOffset (out DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTimeOffset([out] valuetype System.DateTimeOffset&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTimeOffset (ByRef value As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTimeOffset([Runtime::InteropServices::Out] DateTimeOffset % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTimeOffset : DateTimeOffset -&gt; bool" Usage="utf8JsonReader.TryGetDateTimeOffset value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-289">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-289">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-290">ソースから現在の JSON トークン値を <see cref="T:System.DateTimeOffset" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-290">Tries to parse the current JSON token value from the source as a <see cref="T:System.DateTimeOffset" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-291">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.DateTimeOffset" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-291"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.DateTimeOffset" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-292">このメソッドは、ISO 8601-1 拡張形式に準拠した JSON 文字列の <xref:System.DateTimeOffset> 表現のみを作成します (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-292">This method only creates a <xref:System.DateTimeOffset> representation of JSON strings that conform to the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)).</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-293">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-293">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDecimal">
      <MemberSignature Language="C#" Value="public bool TryGetDecimal (out decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDecimal([out] valuetype System.Decimal&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDecimal (ByRef value As Decimal) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDecimal([Runtime::InteropServices::Out] System::Decimal % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDecimal : decimal -&gt; bool" Usage="utf8JsonReader.TryGetDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-294">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-294">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-295">ソースから現在の JSON トークン値を <see cref="T:System.Decimal" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-295">Tries to parse the current JSON token value from the source as a <see cref="T:System.Decimal" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-296">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.Decimal" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-296"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Decimal" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-297">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-297">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDouble">
      <MemberSignature Language="C#" Value="public bool TryGetDouble (out double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDouble([out] float64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDouble (ByRef value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDouble([Runtime::InteropServices::Out] double % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDouble : double -&gt; bool" Usage="utf8JsonReader.TryGetDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-298">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-298">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-299">ソースから現在の JSON トークン値を <see cref="T:System.Double" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-299">Tries to parse the current JSON token value from the source as a <see cref="T:System.Double" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-300">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.Double" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-300"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Double" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-301">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-301">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetGuid">
      <MemberSignature Language="C#" Value="public bool TryGetGuid (out Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetGuid([out] valuetype System.Guid&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetGuid (ByRef value As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetGuid([Runtime::InteropServices::Out] Guid % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetGuid : Guid -&gt; bool" Usage="utf8JsonReader.TryGetGuid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-302">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-302">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-303">ソースから現在の JSON トークン値を <see cref="T:System.Guid" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-303">Tries to parse the current JSON token value from the source as a <see cref="T:System.Guid" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-304">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.Guid" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-304"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Guid" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-305">このメソッドでは、ハイフンを使用して <xref:System.Guid> 値を解析するだけで、周囲の装飾は使用しません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-305">This method only parses <xref:System.Guid> values with hyphens and without any surrounding decorations.</span></span> 

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-306">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-306">The value of the JSON token isn't a <see cref="F:System.Text.Json.JsonTokenType.String" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt16">
      <MemberSignature Language="C#" Value="public bool TryGetInt16 (out short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt16([out] int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt16 (ByRef value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt16([Runtime::InteropServices::Out] short % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt16 : int16 -&gt; bool" Usage="utf8JsonReader.TryGetInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-307">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-307">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-308">ソースから現在の JSON トークン値を <see cref="T:System.Int16" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-308">Tries to parse the current JSON token value from the source as an <see cref="T:System.Int16" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-309">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.Int16" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-309"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.Int16" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-310">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-310">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt32">
      <MemberSignature Language="C#" Value="public bool TryGetInt32 (out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt32([out] int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt32 (ByRef value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt32([Runtime::InteropServices::Out] int % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt32 : int -&gt; bool" Usage="utf8JsonReader.TryGetInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-311">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-311">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-312">ソースから現在の JSON トークン値を <see cref="T:System.Int32" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-312">Tries to parse the current JSON token value from the source as an <see cref="T:System.Int32" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-313">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.Int32" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-313"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int32" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-314">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-314">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt64">
      <MemberSignature Language="C#" Value="public bool TryGetInt64 (out long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt64([out] int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt64 (ByRef value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt64([Runtime::InteropServices::Out] long % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt64 : int64 -&gt; bool" Usage="utf8JsonReader.TryGetInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-315">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-315">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-316">ソースから現在の JSON トークン値を <see cref="T:System.Int64" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-316">Tries to parse the current JSON token value from the source as an <see cref="T:System.Int64" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-317">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.Int64" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-317"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Int64" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-318">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-318">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSByte">
      <MemberSignature Language="C#" Value="public bool TryGetSByte (out sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSByte([out] int8&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSByte (ByRef value As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSByte([Runtime::InteropServices::Out] System::SByte % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSByte : sbyte -&gt; bool" Usage="utf8JsonReader.TryGetSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-319">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-319">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-320">ソースから現在の JSON トークン値を <see cref="T:System.SByte" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-320">Tries to parse the current JSON token value from the source as an <see cref="T:System.SByte" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-321">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.SByte" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-321"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.SByte" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-322">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-322">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSingle">
      <MemberSignature Language="C#" Value="public bool TryGetSingle (out float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSingle([out] float32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSingle (ByRef value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSingle([Runtime::InteropServices::Out] float % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSingle : single -&gt; bool" Usage="utf8JsonReader.TryGetSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-323">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-323">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-324">ソースから現在の JSON トークン値を <see cref="T:System.Single" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-324">Tries to parse the current JSON token value from the source as a <see cref="T:System.Single" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-325">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.Single" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-325"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to an <see cref="T:System.Single" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-326">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-326">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt16">
      <MemberSignature Language="C#" Value="public bool TryGetUInt16 (out ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt16([out] unsigned int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt16 (ByRef value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt16([Runtime::InteropServices::Out] System::UInt16 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt16 : uint16 -&gt; bool" Usage="utf8JsonReader.TryGetUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-327">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-327">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-328">ソースから現在の JSON トークン値を <see cref="T:System.UInt16" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-328">Tries to parse the current JSON token value from the source as a <see cref="T:System.UInt16" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-329">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.UInt16" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-329"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt16" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-330">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-330">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt32">
      <MemberSignature Language="C#" Value="public bool TryGetUInt32 (out uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt32([out] unsigned int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt32 (ByRef value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt32([Runtime::InteropServices::Out] System::UInt32 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt32 : uint32 -&gt; bool" Usage="utf8JsonReader.TryGetUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-331">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-331">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-332">ソースから現在の JSON トークン値を <see cref="T:System.UInt32" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-332">Tries to parse the current JSON token value from the source as a <see cref="T:System.UInt32" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-333">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.UInt32" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-333"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt32" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-334">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-334">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt64">
      <MemberSignature Language="C#" Value="public bool TryGetUInt64 (out ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt64([out] unsigned int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt64 (ByRef value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt64([Runtime::InteropServices::Out] System::UInt64 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt64 : uint64 -&gt; bool" Usage="utf8JsonReader.TryGetUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="ba82b-335">このメソッドから戻るときに、解析された値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-335">When this method returns, contains the parsed value.</span></span></param>
        <summary><span data-ttu-id="ba82b-336">ソースから現在の JSON トークン値を <see cref="T:System.UInt64" /> として解析し、操作が成功したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-336">Tries to parse the current JSON token value from the source as a <see cref="T:System.UInt64" /> and returns a value that indicates whether the operation succeeded.</span></span></summary>
        <returns><span data-ttu-id="ba82b-337">UTF-8 でエンコードされたトークン値全体を <see langword="true" /> に正常に解析できる場合は <see cref="T:System.UInt64" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-337"><see langword="true" /> if the entire UTF-8 encoded token value can be successfully parsed to a <see cref="T:System.UInt64" /> value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-338">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-338">The JSON token value isn't a <see cref="F:System.Text.Json.JsonTokenType.Number" />.</span></span></exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TrySkip">
      <MemberSignature Language="C#" Value="public bool TrySkip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySkip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TrySkip" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySkip () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySkip();" />
      <MemberSignature Language="F#" Value="member this.TrySkip : unit -&gt; bool" Usage="utf8JsonReader.TrySkip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ba82b-339">現在の JSON トークンの子のスキップを試行します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-339">Tries to skip the children of the current JSON token.</span></span></summary>
        <returns><span data-ttu-id="ba82b-340">子を正常にスキップできるだけの十分なデータがあった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-340"><see langword="true" /> if there was enough data for the children to be skipped successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-341">リーダーが、現在のトークンの子を完全にスキップするのに十分なデータを持っていなかった場合は、メソッドが呼び出される前の状態にリセットされます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-341">If the reader did not have enough data to completely skip the children of the current token, it will be reset to the state it was in before the method was called.</span></span>
              
<span data-ttu-id="ba82b-342"><xref:System.Text.Json.Utf8JsonReader.TokenType> が <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>場合、リーダーは最初にプロパティ値に移動します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-342">When <xref:System.Text.Json.Utf8JsonReader.TokenType> is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>, the reader first moves to the property value.</span></span>

<span data-ttu-id="ba82b-343"><xref:System.Text.Json.Utf8JsonReader.TokenType> (もともと、または前進後) が <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithType> または <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>の場合、リーダーは一致する <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> または <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>に進みます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-343">When <xref:System.Text.Json.Utf8JsonReader.TokenType> (originally, or after advancing) is <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>, the reader advances to the matching <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>.</span></span>
            
<span data-ttu-id="ba82b-344">他のすべてのトークン型については、リーダーは移動しません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-344">For all other token types, the reader does not move.</span></span> <span data-ttu-id="ba82b-345">次に <xref:System.Text.Json.Utf8JsonReader.Read>を呼び出した後、リーダーは次の値 (配列の場合)、次のプロパティ名 (オブジェクトの場合)、または終了配列/オブジェクトトークンになります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-345">After the next call to <xref:System.Text.Json.Utf8JsonReader.Read>, the reader will be at the next value (when in an array), the next property name (when in an object), or the end array/object token.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="ba82b-346">JSON RFC に基づき、スキップ中、無効な JSON トークンが検出されました。</span><span class="sxs-lookup"><span data-stu-id="ba82b-346">An invalid JSON token was encountered while skipping, according to the JSON RFC.</span></span>
          
<span data-ttu-id="ba82b-347">または</span><span class="sxs-lookup"><span data-stu-id="ba82b-347">-or -</span></span>

<span data-ttu-id="ba82b-348">現在の深度が、最大深度によって設定された再帰の限度を超えています。</span><span class="sxs-lookup"><span data-stu-id="ba82b-348">The current depth exceeds the recursive limit set by the maximum depth.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ValueSequence">
      <MemberSignature Language="C#" Value="public System.Buffers.ReadOnlySequence&lt;byte&gt; ValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; ValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSequence As ReadOnlySequence(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::ReadOnlySequence&lt;System::Byte&gt; ValueSequence { System::Buffers::ReadOnlySequence&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSequence : System.Buffers.ReadOnlySequence&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Buffers.ReadOnlySequence&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba82b-349">トークンが複数のセグメントに含まれている場合にのみ、最後に処理されたトークンの生の値を入力ペイロードの ReadOnlySequence&lt;byte&gt; スライスとして取得します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-349">Gets the raw value of the last processed token as a ReadOnlySequence&lt;byte&gt; slice of the input payload, only if the token is contained within multiple segments.</span></span></summary>
        <value><span data-ttu-id="ba82b-350">バイト読み取り専用シーケンス。</span><span class="sxs-lookup"><span data-stu-id="ba82b-350">A byte read-only sequence.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-351">JSON が ReadOnlySequence&lt;byte&gt; 内に指定されていて、トークン値を表すスライスが単一のセグメント内に収まる場合、<xref:System.Text.Json.Utf8JsonReader.ValueSpan> にはスライスされた値が格納されます。それをスパンとして表現できるからです。</span><span class="sxs-lookup"><span data-stu-id="ba82b-351">If the JSON is provided within a ReadOnlySequence&lt;byte&gt; and the slice that represents the token value fits in a single segment, then <xref:System.Text.Json.Utf8JsonReader.ValueSpan> contains the sliced value since it can be represented as a span.</span></span> <span data-ttu-id="ba82b-352">それ以外の場合、`ValueSequence` にはトークン値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-352">Otherwise, `ValueSequence` contains the token value.</span></span>

<span data-ttu-id="ba82b-353"><xref:System.Text.Json.Utf8JsonReader.HasValueSequence> が `false`場合、`ValueSequence` は空になります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-353">If <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `false`, `ValueSequence` is empty.</span></span> <span data-ttu-id="ba82b-354">したがって、<xref:System.Text.Json.Utf8JsonReader.HasValueSequence> が `true`場合にのみ、アクセス `ValueSequence` になります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-354">Therefore, only access `ValueSequence` if <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `true`.</span></span>
<span data-ttu-id="ba82b-355">それ以外の場合は、<xref:System.Text.Json.Utf8JsonReader.ValueSpan>からトークン値にアクセスする必要があります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-355">Otherwise, the token value must be accessed from <xref:System.Text.Json.Utf8JsonReader.ValueSpan>.</span></span>

<span data-ttu-id="ba82b-356">このプロパティに常に適切な形式のデータが含まれるという保証はありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-356">There is no guarantee that this property will always contain well-formed data.</span></span> <span data-ttu-id="ba82b-357">`Utf8JsonReader` に渡された入力 JSON に JSON 文字列トークン内の無効な UTF-8 バイトが含まれている場合、このプロパティは無効な UTF-8 バイトをそのように返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-357">If the input JSON passed in to the `Utf8JsonReader` contains invalid UTF-8 bytes within JSON string tokens, this property will return back those invalid UTF-8 bytes as is.</span></span>
<span data-ttu-id="ba82b-358">そのため、入力が信頼されていないか、事前に検証されていない場合は、<xref:System.Text.Json.Utf8JsonReader.GetString> を呼び出して JSON 文字列トークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-358">Therefore, if the input is untrusted or not previously validated, call <xref:System.Text.Json.Utf8JsonReader.GetString> to get the JSON string token.</span></span>

<span data-ttu-id="ba82b-359">このプロパティは生のバイトを返すため、テキストの比較には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="ba82b-359">Since this property returns the raw bytes, avoid using it for text comparison.</span></span> <span data-ttu-id="ba82b-360">代わりに <xref:System.Text.Json.Utf8JsonReader.ValueTextEquals%2A>を呼び出します。これにより、必要に応じてテキストが unescapes されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-360">Instead call <xref:System.Text.Json.Utf8JsonReader.ValueTextEquals%2A>, which unescapes the text if necessary.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;byte&gt; ValueSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; ValueSpan" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSpan As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;System::Byte&gt; ValueSpan { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSpan : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ba82b-361">トークンが 1 つのセグメントに収まる場合、またはリーダーが ReadOnlySpan&lt;byte&gt; に含まれる JSON ペイロードを使用して構築された場合、最後に処理されたトークンの生の値を入力ペイロードの ReadOnlySpan&lt;byte&gt; スライスとして取得します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-361">Gets the raw value of the last processed token as a ReadOnlySpan&lt;byte&gt; slice of the input payload, if the token fits in a single segment or if the reader was constructed with a JSON payload contained in a ReadOnlySpan&lt;byte&gt;.</span></span></summary>
        <value><span data-ttu-id="ba82b-362">バイト型の読み取り専用スパン。</span><span class="sxs-lookup"><span data-stu-id="ba82b-362">A read-only span of bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-363">JSON が ReadOnlySequence&lt;byte&gt; 内に指定されていて、トークン値を表すスライスが単一のセグメント内に収まる場合、`ValueSpan` にはスライスされた値が格納されます。それをスパンとして表現できるからです。</span><span class="sxs-lookup"><span data-stu-id="ba82b-363">If the JSON is provided within a ReadOnlySequence&lt;byte&gt; and the slice that represents the token value fits in a single segment, then `ValueSpan` contains the sliced value since it can be represented as a span.</span></span> <span data-ttu-id="ba82b-364">それ以外の場合、<xref:System.Text.Json.Utf8JsonReader.ValueSequence> にはトークン値が格納されます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-364">Otherwise, <xref:System.Text.Json.Utf8JsonReader.ValueSequence> contains the token value.</span></span>

<span data-ttu-id="ba82b-365"><xref:System.Text.Json.Utf8JsonReader.HasValueSequence> が `true`場合、`ValueSpan` は空になります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-365">If <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `true`, `ValueSpan` is empty.</span></span> <span data-ttu-id="ba82b-366">したがって、<xref:System.Text.Json.Utf8JsonReader.HasValueSequence> が `false`場合にのみ、アクセス `ValueSpan` になります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-366">Therefore, only access `ValueSpan` if <xref:System.Text.Json.Utf8JsonReader.HasValueSequence> is `false`.</span></span>
<span data-ttu-id="ba82b-367">それ以外の場合は、<xref:System.Text.Json.Utf8JsonReader.ValueSequence>からトークン値にアクセスする必要があります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-367">Otherwise, the token value must be accessed from <xref:System.Text.Json.Utf8JsonReader.ValueSequence>.</span></span>

<span data-ttu-id="ba82b-368">このプロパティに常に適切な形式のデータが含まれるという保証はありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-368">There is no guarantee that this property will always contain well-formed data.</span></span> <span data-ttu-id="ba82b-369">`Utf8JsonReader` に渡された入力 JSON に JSON 文字列トークン内の無効な UTF-8 バイトが含まれている場合、このプロパティは無効な UTF-8 バイトをそのように返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-369">If the input JSON passed in to the `Utf8JsonReader` contains invalid UTF-8 bytes within JSON string tokens, this property will return back those invalid UTF-8 bytes as is.</span></span>
<span data-ttu-id="ba82b-370">そのため、入力が信頼されていないか、事前に検証されていない場合は、<xref:System.Text.Json.Utf8JsonReader.GetString> を呼び出して JSON 文字列トークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-370">Therefore, if the input is untrusted or not previously validated, call <xref:System.Text.Json.Utf8JsonReader.GetString> to get the JSON string token.</span></span>

<span data-ttu-id="ba82b-371">このプロパティは生のバイトを返すため、テキストの比較には使用しないでください。</span><span class="sxs-lookup"><span data-stu-id="ba82b-371">Since this property returns the raw bytes, avoid using it for text comparison.</span></span> <span data-ttu-id="ba82b-372">代わりに、必要に応じてテキストを unescapes する <xref:System.Text.Json.Utf8JsonReader.ValueTextEquals%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-372">Instead call <xref:System.Text.Json.Utf8JsonReader.ValueTextEquals%2A> which unescapes the text if necessary.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (ReadOnlySpan&lt;byte&gt; utf8Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (utf8Text As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(ReadOnlySpan&lt;System::Byte&gt; utf8Text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="utf8JsonReader.ValueTextEquals utf8Text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Text" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Text"><span data-ttu-id="ba82b-373">比較対象の UTF-8 でエンコードされたテキスト。</span><span class="sxs-lookup"><span data-stu-id="ba82b-373">The UTF-8 encoded text to compare against.</span></span></param>
        <summary><span data-ttu-id="ba82b-374">読み取り専用バイト スパン内の UTF-8 でエンコードされたテキストをソース内のエスケープされていない JSON トークン値と比較し、一致するかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-374">Compares the UTF-8 encoded text in a read-only byte span to the unescaped JSON token value in the source and returns a value that indicates whether they match.</span></span></summary>
        <returns><span data-ttu-id="ba82b-375">ソースの JSON トークン値が UTF-8 でエンコードされた検索テキストと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-375"><see langword="true" /> if the JSON token value in the source matches the UTF-8 encoded lookup text; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-376">参照テキストは、有効な UTF-8 テキストである必要があります。</span><span class="sxs-lookup"><span data-stu-id="ba82b-376">The lookup text must be valid UTF-8 text.</span></span> <span data-ttu-id="ba82b-377">それ以外の場合、このメソッドは `true` を返す可能性があります。これは、ソースに、と一致する無効な UTF-8 テキストを含む文字列トークンが含まれている場合です。</span><span class="sxs-lookup"><span data-stu-id="ba82b-377">Otherwise, this method could return `true` if the source has a string token containing invalid UTF-8 text that matches.</span></span>
              
<span data-ttu-id="ba82b-378">必要に応じて、ソースの JSON 値を最初にエスケープ解除することによって、ソース内の JSON トークン値の比較が行われます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-378">The comparison of the JSON token value in the source and the lookup text is done by first unescaping the JSON value in source, if required.</span></span> <span data-ttu-id="ba82b-379">参照テキストはそのままの状態で一致します。変更する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-379">The lookup text is matched as is, without any modifications to it.</span></span>
              
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-380">JSON トークンは JSON 文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-380">The JSON token is not a JSON string (that is, it is not <see cref="F:System.Text.Json.JsonTokenType.String" /> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(valuetype System.ReadOnlySpan`1&lt;char&gt; text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (text As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="utf8JsonReader.ValueTextEquals text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="ba82b-381">比較対象のテキスト。</span><span class="sxs-lookup"><span data-stu-id="ba82b-381">The text to compare against.</span></span></param>
        <summary><span data-ttu-id="ba82b-382">読み取り専用文字スパン内のテキストをソース内のエスケープされていない JSON トークン値と比較し、一致するかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-382">Compares the text in a read-only character span to the unescaped JSON token value in the source and returns a value that indicates whether they match.</span></span></summary>
        <returns><span data-ttu-id="ba82b-383">ソースの JSON トークン値が参照テキストと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-383"><see langword="true" /> if the JSON token value in the source matches the lookup text; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-384">参照テキストが無効または不完全な UTF-16 テキスト (つまり、ペアになっていないサロゲート) の場合、このメソッドは `false` を返します。これは、JSON ペイロード内で無効な UTF-16 を持つことができないためです。</span><span class="sxs-lookup"><span data-stu-id="ba82b-384">If the lookup text is invalid or incomplete UTF-16 text (that is, unpaired surrogates), the method returns `false` since you can't have invalid UTF-16 within the JSON payload.</span></span>
              
<span data-ttu-id="ba82b-385">必要に応じて、ソースの JSON 値を最初にエスケープ解除することによって、ソース内の JSON トークン値の比較が行われます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-385">The comparison of the JSON token value in the source and the lookup text is done by first unescaping the JSON value in source, if required.</span></span> <span data-ttu-id="ba82b-386">参照テキストはそのままの状態で一致します。変更する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-386">The lookup text is matched as is, without any modifications to it.</span></span>
              
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-387">JSON トークンは JSON 文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-387">The JSON token is not a JSON string (that is, it is not <see cref="F:System.Text.Json.JsonTokenType.String" /> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : string -&gt; bool" Usage="utf8JsonReader.ValueTextEquals text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="ba82b-388">比較対象のテキスト。</span><span class="sxs-lookup"><span data-stu-id="ba82b-388">The text to compare against.</span></span></param>
        <summary><span data-ttu-id="ba82b-389">文字列のテキストをソース内のエスケープされていない JSON トークン値と比較し、一致するかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="ba82b-389">Compares the string text to the unescaped JSON token value in the source and returns a value that indicates whether they match.</span></span></summary>
        <returns><span data-ttu-id="ba82b-390">ソースの JSON トークン値が参照テキストと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ba82b-390"><see langword="true" /> if the JSON token value in the source matches the lookup text; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="ba82b-391">参照テキストが無効または不完全な UTF-16 テキスト (つまり、ペアになっていないサロゲート) の場合、このメソッドは `false` を返します。これは、JSON ペイロード内で無効な UTF-16 を持つことができないためです。</span><span class="sxs-lookup"><span data-stu-id="ba82b-391">If the lookup text is invalid or incomplete UTF-16 text (that is, unpaired surrogates), the method returns `false` since you can't have invalid UTF-16 within the JSON payload.</span></span>
              
<span data-ttu-id="ba82b-392">必要に応じて、ソースの JSON 値を最初にエスケープ解除することによって、ソース内の JSON トークン値の比較が行われます。</span><span class="sxs-lookup"><span data-stu-id="ba82b-392">The comparison of the JSON token value in the source and the lookup text is done by first unescaping the JSON value in source, if required.</span></span> <span data-ttu-id="ba82b-393">参照テキストはそのままの状態で一致します。変更する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="ba82b-393">The lookup text is matched as is, without any modifications to it.</span></span>
              
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ba82b-394">JSON トークンは JSON 文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません)。</span><span class="sxs-lookup"><span data-stu-id="ba82b-394">The JSON token is not a JSON string (that is, it is not <see cref="F:System.Text.Json.JsonTokenType.String" /> or <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
