<Type Name="Utf8JsonReader" FullName="System.Text.Json.Utf8JsonReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c01c6625bbe829ad4ab0ec34634165ad33becf51" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83891483" /></Metadata><TypeSignature Language="C#" Value="public struct Utf8JsonReader" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Utf8JsonReader extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonReader" />
  <TypeSignature Language="VB.NET" Value="Public Structure Utf8JsonReader" />
  <TypeSignature Language="C++ CLI" Value="public value class Utf8JsonReader" />
  <TypeSignature Language="F#" Value="type Utf8JsonReader = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>UTF-8 でエンコードされた JSON テキストに対する前方参照、読み取り専用のアクセスのための高パフォーマンスの API です。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

`Utf8JsonReader` は、キャッシュなしでテキストを順番に処理し、既定では[JSON RFC](https://tools.ietf.org/html/rfc8259)に厳密に準拠します。

`Utf8JsonReader` が無効な JSON を検出した場合、行の行番号やバイト位置などの基本的なエラー情報を含む <xref:System.Text.Json.JsonException> がスローされます。

この型は ref 構造体であるため、非同期的には直接サポートされません。 ただし、不完全なデータを読み取って、さらに多くのデータが表示された場合は、再入によるサポートを提供します。

コメントの読み取り中またはスキップを許可するときに、最大の深さを設定できるようにするには <xref:System.Text.Json.JsonReaderOptions> のインスタンスを作成し、リーダーに渡します。

詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to#use-utf8jsonreader)」を参照してください。

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, System.Text.Json.JsonReaderOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; jsonData, valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySequence(Of Byte), Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : System.Buffers.ReadOnlySequence&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="jsonData">UTF-8 でエンコードされた、処理対象の JSON テキスト。</param>
        <param name="options">JSON RFC とは異なる <see cref="T:System.Text.Json.Utf8JsonReader" /> のカスタマイズされた動作を定義します (たとえば、コメントの処理方法、読み取り時に許容される最大深度など)。 既定で、<see cref="T:System.Text.Json.Utf8JsonReader" /> は JSON RFC に厳密に従います。JSON 内のコメントは無効で、最大深度は 64 です。</param>
        <summary>指定したオプションを使用し、UTF-8 でエンコードされたテキストの読み取り専用シーケンスを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

この型は ref 構造体であるため、スタックのみの型であり、ref 構造体のすべての制限が適用されます。

このコンストラクターは、JSON ペイロード全体が `jsonData`に含まれていることを前提としています。これは、<xref:System.Text.Json.Utf8JsonReader.IsFinalBlock?displayProperty=nameWithType> = `true`に相当します。
              
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, System.Text.Json.JsonReaderOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, valuetype System.Text.Json.JsonReaderOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), Optional options As JsonReaderOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonReaderOptions -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonReaderOptions" />
      </Parameters>
      <Docs>
        <param name="jsonData">UTF-8 でエンコードされた、処理対象の JSON テキスト。</param>
        <param name="options">JSON RFC とは異なる <see cref="T:System.Text.Json.Utf8JsonReader" /> のカスタマイズされた動作を定義します (たとえば、コメントの処理方法、読み取り時に許容される最大深度など)。 既定で、<see cref="T:System.Text.Json.Utf8JsonReader" /> は JSON RFC に厳密に従います。JSON 内のコメントは無効で、最大深度は 64 です。</param>
        <summary>指定したオプションを使用し、UTF-8 でエンコードされたテキストの読み取り専用スパンを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

この型は ref 構造体であるため、スタックのみの型であり、ref 構造体のすべての制限が適用されます。

このコンストラクターは、JSON ペイロード全体が `jsonData`に含まれていることを前提としています。これは、<xref:System.Text.Json.Utf8JsonReader.IsFinalBlock?displayProperty=nameWithType> = `true`に相当します。
              
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (System.Buffers.ReadOnlySequence&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySequence(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(System::Buffers::ReadOnlySequence&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : System.Buffers.ReadOnlySequence&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.Buffers.ReadOnlySequence&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData">UTF-8 でエンコードされた、処理対象の JSON テキスト。</param>
        <param name="isFinalBlock">処理対象のデータ全体が入力シーケンスに含まれていることを示すには <see langword="true" />。後続するデータがある部分的なデータが入力スパンに含まれていることを示すには <see langword="false" />。</param>
        <param name="state">リーダーの状態を格納するオブジェクト。 これがコンストラクターの最初の呼び出しである場合は、既定の状態を渡します。それ以外の場合は、<see cref="T:System.Text.Json.Utf8JsonReader" /> の前のインスタンスから <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> プロパティの値を渡します。</param>
        <summary>UTF-8 でエンコードされたテキストの読み取り専用のシーケンスを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化し、処理するすべてのテキストが入力に含まれるかどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

この型は ref 構造体であるため、スタックのみの型であり、ref 構造体のすべての制限が適用されます。
コンストラクターが <xref:System.Text.Json.JsonReaderState>を受け入れる理由は次のようになります。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonReader (ReadOnlySpan&lt;byte&gt; jsonData, bool isFinalBlock, System.Text.Json.JsonReaderState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; jsonData, bool isFinalBlock, valuetype System.Text.Json.JsonReaderState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (jsonData As ReadOnlySpan(Of Byte), isFinalBlock As Boolean, state As JsonReaderState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Utf8JsonReader(ReadOnlySpan&lt;System::Byte&gt; jsonData, bool isFinalBlock, System::Text::Json::JsonReaderState state);" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonReader : ReadOnlySpan&lt;byte&gt; * bool * System.Text.Json.JsonReaderState -&gt; System.Text.Json.Utf8JsonReader" Usage="new System.Text.Json.Utf8JsonReader (jsonData, isFinalBlock, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="jsonData" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="isFinalBlock" Type="System.Boolean" />
        <Parameter Name="state" Type="System.Text.Json.JsonReaderState" />
      </Parameters>
      <Docs>
        <param name="jsonData">UTF-8 でエンコードされた、処理対象の JSON テキスト。</param>
        <param name="isFinalBlock">処理対象のデータ全体が入力シーケンスに含まれていることを示すには <see langword="true" />。後続するデータがある部分的なデータが入力スパンに含まれていることを示すには <see langword="false" />。</param>
        <param name="state">リーダーの状態を格納するオブジェクト。 これがコンストラクターの最初の呼び出しである場合は、既定の状態を渡します。それ以外の場合は、<see cref="T:System.Text.Json.Utf8JsonReader" /> の前のインスタンスから <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> プロパティの値を渡します。</param>
        <summary>UTF-8 でエンコードされたテキストの読み取り専用のスパンを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化し、処理するすべてのテキストが入力に含まれるかどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

この型は ref 構造体であるため、スタックのみの型であり、ref 構造体のすべての制限が適用されます。
コンストラクターが <xref:System.Text.Json.JsonReaderState>を受け入れる理由は次のようになります。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesConsumed">
      <MemberSignature Language="C#" Value="public long BytesConsumed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesConsumed" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesConsumed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesConsumed { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesConsumed : int64" Usage="System.Text.Json.Utf8JsonReader.BytesConsumed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Text.Json.Utf8JsonReader" /> のこのインスタンスでこれまで消費された合計バイト数を取得します。</summary>
        <value>これまでに使用されたバイト数の合計です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonReader.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のトークンの深さを取得します。</summary>
        <value>現在のトークンの深さ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

`CurrentDepth` プロパティは、これまでに処理された JSON テキスト内の入れ子になったオブジェクトまたは配列の再帰的な深さを追跡します。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonReaderState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonReaderState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As JsonReaderState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonReaderState CurrentState { System::Text::Json::JsonReaderState get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Text.Json.JsonReaderState" Usage="System.Text.Json.Utf8JsonReader.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonReaderState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Text.Json.Utf8JsonReader" /> コンストラクターにより多くのデータを渡すのに、<see cref="T:System.Text.Json.Utf8JsonReader" /> の現在の状態を取得します。</summary>
        <value>現在のリーダーの状態。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

Ref 構造体である <xref:System.Text.Json.Utf8JsonReader>とは異なり、非同期/待機の境界を越えて状態を維持することができます。 この型は、<xref:System.Text.Json.Utf8JsonReader>の新しいインスタンスを続行する前に、より多くのデータを非同期的に読み取るためのサポートを提供するために必要です。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public bool GetBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBoolean" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBoolean () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetBoolean();" />
      <MemberSignature Language="F#" Value="member this.GetBoolean : unit -&gt; bool" Usage="utf8JsonReader.GetBoolean " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークン値をソースから <see cref="T:System.Boolean" /> として読み取ります。</summary>
        <returns><see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> が <see cref="F:System.Text.Json.JsonTokenType.True" /> の場合は <see langword="true" />。<see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> が <see cref="F:System.Text.Json.JsonTokenType.False" /> の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークンの値はブール値 (つまり、<see cref="F:System.Text.Json.JsonTokenType.True" /> または <see cref="F:System.Text.Json.JsonTokenType.False" />) ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetByte">
      <MemberSignature Language="C#" Value="public byte GetByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8 GetByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetByte" />
      <MemberSignature Language="VB.NET" Value="Public Function GetByte () As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Byte GetByte();" />
      <MemberSignature Language="F#" Value="member this.GetByte : unit -&gt; byte" Usage="utf8JsonReader.GetByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の JSON トークン値をソースから <see cref="T:System.Byte" /> として解析します。</summary>
        <returns>UTF-8 でエンコードされたトークンの値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。
          
または

JSON トークン値は、<see cref="F:System.Byte.MinValue" /> 未満の数値、または <see cref="F:System.Byte.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetBytesFromBase64">
      <MemberSignature Language="C#" Value="public byte[] GetBytesFromBase64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetBytesFromBase64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBytesFromBase64 () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetBytesFromBase64();" />
      <MemberSignature Language="F#" Value="member this.GetBytesFromBase64 : unit -&gt; byte[]" Usage="utf8JsonReader.GetBytesFromBase64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ソースから現在の JSON トークン値を解析し、Base64 でエンコードされた JSON 文字列をバイト配列としてデコードします。</summary>
        <returns>現在の JSON トークン値を表すバイト配列。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークンの型が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
        <exception cref="T:System.FormatException">値は Base64 テキストとしてエンコードされていないため、バイトにデコードできません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetComment">
      <MemberSignature Language="C#" Value="public string GetComment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetComment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetComment" />
      <MemberSignature Language="VB.NET" Value="Public Function GetComment () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetComment();" />
      <MemberSignature Language="F#" Value="member this.GetComment : unit -&gt; string" Usage="utf8JsonReader.GetComment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ソースからの現在の JSON トークン値をコメントとして解析し、<see cref="T:System.String" /> としてトランスコードします。</summary>
        <returns>現在の JSON トークン値を表すコメント。</returns>
        <remarks>これは、<see cref="F:System.Text.Json.JsonCommentHandling.Allow" /> オプションを使用してリーダーが構築されている場合にのみ適用されます。 それ以外の場合、<see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> は <see cref="F:System.Text.Json.JsonTokenType.Comment" />されません。</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークンがコメントではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDateTime">
      <MemberSignature Language="C#" Value="public DateTime GetDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTime" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTime () As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTime GetDateTime();" />
      <MemberSignature Language="F#" Value="member this.GetDateTime : unit -&gt; DateTime" Usage="utf8JsonReader.GetDateTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.DateTime" /> に解析します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を正常に解析できる場合は日時の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

このメソッドは、ISO 8601-1 拡張形式に準拠した JSON 文字列の <xref:System.DateTime> 表現のみを作成します (「system.string[での DateTime と DateTimeOffset のサポート](/dotnet/standard/datetime/system-text-json-support)」を参照してください)。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値を <see cref="T:System.DateTime" /> として読み取ることはできません。
        
または 
UTF-8 でエンコードされたトークン値全体を <see cref="T:System.DateTime" /> 値に解析することはできません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset GetDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset GetDateTimeOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDateTimeOffset () As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeOffset GetDateTimeOffset();" />
      <MemberSignature Language="F#" Value="member this.GetDateTimeOffset : unit -&gt; DateTimeOffset" Usage="utf8JsonReader.GetDateTimeOffset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.DateTimeOffset" /> に解析します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を正常に解析できる場合は日時のオフセット。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

このメソッドは、ISO 8601-1 拡張形式に準拠した JSON 文字列の <xref:System.DateTimeOffset> 表現のみを作成します (「system.string[での DateTime と DateTimeOffset のサポート](/dotnet/standard/datetime/system-text-json-support)」を参照してください)。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値を <see cref="T:System.DateTimeOffset" /> として読み取ることはできません。

または 
UTF-8 でエンコードされたトークン値全体を <see cref="T:System.DateTimeOffset" /> 値に解析することはできません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDecimal">
      <MemberSignature Language="C#" Value="public decimal GetDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Decimal GetDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDecimal" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDecimal () As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Decimal GetDecimal();" />
      <MemberSignature Language="F#" Value="member this.GetDecimal : unit -&gt; decimal" Usage="utf8JsonReader.GetDecimal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Decimal" /> に解析します。</summary>
        <returns><see cref="T:System.Decimal" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値は、<see cref="F:System.Decimal.MinValue" /> 未満の数値、または <see cref="F:System.Decimal.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public double GetDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetDouble" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; double GetDouble();" />
      <MemberSignature Language="F#" Value="member this.GetDouble : unit -&gt; double" Usage="utf8JsonReader.GetDouble " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Double" /> に解析します。</summary>
        <returns><see cref="T:System.Double" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値は、<see cref="F:System.Double.MinValue" /> 未満の数値、または <see cref="F:System.Double.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetGuid">
      <MemberSignature Language="C#" Value="public Guid GetGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid GetGuid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetGuid" />
      <MemberSignature Language="VB.NET" Value="Public Function GetGuid () As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Guid GetGuid();" />
      <MemberSignature Language="F#" Value="member this.GetGuid : unit -&gt; Guid" Usage="utf8JsonReader.GetGuid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Guid" /> に解析します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を正常に解析できる場合は GUID の値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値は、GUID でサポートされていない形式です。
        
または

UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Guid" /> 値に解析することはできません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt16">
      <MemberSignature Language="C#" Value="public short GetInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int16 GetInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt16" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt16 () As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; short GetInt16();" />
      <MemberSignature Language="F#" Value="member this.GetInt16 : unit -&gt; int16" Usage="utf8JsonReader.GetInt16 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の JSON トークン値をソースから <see cref="T:System.Int16" /> として解析します。</summary>
        <returns><see cref="T:System.Int16" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。
          
または

JSON トークン値は、<see cref="F:System.Int16.MinValue" /> 未満の数値、または <see cref="F:System.Int16.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt32">
      <MemberSignature Language="C#" Value="public int GetInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt32 () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetInt32();" />
      <MemberSignature Language="F#" Value="member this.GetInt32 : unit -&gt; int" Usage="utf8JsonReader.GetInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Int32" /> に解析します。</summary>
        <returns><see cref="T:System.Int32" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値の数値形式が正しくありません。 たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。
            
または

JSON トークン値は、<see cref="F:System.Int32.MinValue" /> 未満の数値、または <see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetInt64">
      <MemberSignature Language="C#" Value="public long GetInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInt64 () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long GetInt64();" />
      <MemberSignature Language="F#" Value="member this.GetInt64 : unit -&gt; int64" Usage="utf8JsonReader.GetInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Int64" /> に解析します。</summary>
        <returns><see cref="T:System.Int64" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値の数値形式が正しくありません。 たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。
            
または

JSON トークン値は、<see cref="F:System.Int64.MinValue" /> 未満の数値、または <see cref="F:System.Int64.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetSByte">
      <MemberSignature Language="C#" Value="public sbyte GetSByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int8 GetSByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSByte" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSByte () As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::SByte GetSByte();" />
      <MemberSignature Language="F#" Value="member this.GetSByte : unit -&gt; sbyte" Usage="utf8JsonReader.GetSByte " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の JSON トークン値をソースから <see cref="T:System.SByte" /> として解析します。</summary>
        <returns><see cref="T:System.SByte" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。
          
または

JSON トークン値は、<see cref="F:System.SByte.MinValue" /> 未満の数値、または <see cref="F:System.SByte.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetSingle">
      <MemberSignature Language="C#" Value="public float GetSingle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetSingle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetSingle" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSingle () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetSingle();" />
      <MemberSignature Language="F#" Value="member this.GetSingle : unit -&gt; single" Usage="utf8JsonReader.GetSingle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Single" /> に解析します。</summary>
        <returns><see cref="T:System.Single" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値は、<see cref="F:System.Single.MinValue" /> 未満の数値、または <see cref="F:System.Single.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetString" />
      <MemberSignature Language="VB.NET" Value="Public Function GetString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetString();" />
      <MemberSignature Language="F#" Value="member this.GetString : unit -&gt; string" Usage="utf8JsonReader.GetString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークン値をソースから読み取り、エスケープ解除し、文字列としてトランスコードします。</summary>
        <returns>文字列に解析されたトークン値。または、<see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> が <see cref="F:System.Text.Json.JsonTokenType.Null" /> の場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Text.Json.Utf8JsonReader.TokenType> が <xref:System.Text.Json.JsonTokenType.Null?displayProperty=nameWithType>場合に `null` を返します。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" />、<see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> または <see cref="F:System.Text.Json.JsonTokenType.Null" /> ではない)。

または

JSON 文字列に無効な UTF-8 バイトまたは無効な UTF-16 サロゲートが含まれています。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt16">
      <MemberSignature Language="C#" Value="public ushort GetUInt16 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int16 GetUInt16() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt16" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt16 () As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt16 GetUInt16();" />
      <MemberSignature Language="F#" Value="member this.GetUInt16 : unit -&gt; uint16" Usage="utf8JsonReader.GetUInt16 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の JSON トークン値をソースから <see cref="T:System.UInt16" /> として解析します。</summary>
        <returns><see cref="T:System.UInt16" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。
          
または

JSON トークン値は、<see cref="F:System.UInt16.MinValue" /> 未満の数値、または <see cref="F:System.UInt16.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt32">
      <MemberSignature Language="C#" Value="public uint GetUInt32 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 GetUInt32() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt32" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt32 () As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt32 GetUInt32();" />
      <MemberSignature Language="F#" Value="member this.GetUInt32 : unit -&gt; uint32" Usage="utf8JsonReader.GetUInt32 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.UInt32" /> に解析します。</summary>
        <returns><see cref="T:System.UInt32" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値の数値形式が正しくありません。 たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。

または

JSON トークン値は、<see cref="F:System.UInt32.MinValue" /> 未満の数値、または <see cref="F:System.UInt32.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="GetUInt64">
      <MemberSignature Language="C#" Value="public ulong GetUInt64 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int64 GetUInt64() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.GetUInt64" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUInt64 () As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::UInt64 GetUInt64();" />
      <MemberSignature Language="F#" Value="member this.GetUInt64 : unit -&gt; uint64" Usage="utf8JsonReader.GetUInt64 " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.UInt64" /> に解析します。</summary>
        <returns><see cref="T:System.UInt64" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <exception cref="T:System.FormatException">JSON トークン値の数値形式が正しくありません。 たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。
            
または

JSON トークン値は、<see cref="F:System.UInt64.MinValue" /> 未満の数値、または <see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="HasValueSequence">
      <MemberSignature Language="C#" Value="public bool HasValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValueSequence As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValueSequence { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValueSequence : bool" Usage="System.Text.Json.Utf8JsonReader.HasValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トークン値を取得するために使用する <c>Value</c> プロパティを示す値を取得します。</summary>
        <value>トークン値を取得するために <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> を使用する必要がある場合は <see langword="true" /> します。代わりに <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> を使用する必要がある場合は <see langword="false" /> します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

`HasValueSequence` が `false`場合、<xref:System.Text.Json.Utf8JsonReader.ValueSequence> は空になります。 そのため、<xref:System.Text.Json.Utf8JsonReader.ValueSpan> プロパティを使用してトークン値を読み取ります。

`ReadOnlySpan<byte>`内の入力データの場合は、常に `false`を返します。 `ReadOnlySequence<byte>`内の入力データの場合、トークン値が1つ以上のセグメントをまたがっためにスパンとして表すことができない場合にのみ `true` を返します。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinalBlock">
      <MemberSignature Language="C#" Value="public bool IsFinalBlock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFinalBlock" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFinalBlock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFinalBlock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFinalBlock : bool" Usage="System.Text.Json.Utf8JsonReader.IsFinalBlock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべての JSON データが与えられたか、あるいは他にもデータが入ってくるのかを示す <see cref="T:System.Text.Json.Utf8JsonReader" /> のこのインスタンスのモードを取得します。</summary>
        <value>処理する JSON データ全体を含む入力範囲またはシーケンスを使用してリーダーが構築されたかどうかを <see langword="true" /> します。より多くのデータを含む部分的な JSON データを含む可能性のある入力範囲またはシーケンスを使用してリーダーが構築された場合に <see langword="false" /> します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public SequencePosition Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.SequencePosition Position" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As SequencePosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property SequencePosition Position { SequencePosition get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : SequencePosition" Usage="System.Text.Json.Utf8JsonReader.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SequencePosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定された UTF-8 でエンコードされた入力 ReadOnlySequence&lt;byte&gt; 内の現在の <see cref="T:System.SequencePosition" /> を取得します。<see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体が ReadOnlySpan&lt;byte&gt; で構築されている場合は既定の <see cref="T:System.SequencePosition" /> を取得します。</summary>
        <value>指定した UTF-8 でエンコードされた入力 ReadOnlySequence 内の現在の <see cref="T:System.SequencePosition" />&lt;バイト&gt;、または <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体が ReadOnlySpan&lt;byte&gt;を使用して構築された場合は既定の <see cref="T:System.SequencePosition" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Read();" />
      <MemberSignature Language="F#" Value="member this.Read : unit -&gt; bool" Usage="utf8JsonReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の JSON トークンを入力ソースから読み取ります。</summary>
        <returns>トークンが正常に読み取られた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException">JSON RFC では無効な JSON トークンが検出されました。
        
または

現在の深度が、最大深度によって設定された再帰の限度を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Skip();" />
      <MemberSignature Language="F#" Value="member this.Skip : unit -&gt; unit" Usage="utf8JsonReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の JSON トークンの子をスキップします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<xref:System.Text.Json.Utf8JsonReader.TokenType> が <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>場合、リーダーは最初にプロパティ値に移動します。

<xref:System.Text.Json.Utf8JsonReader.TokenType> (もともと、または前進後) が <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithtype> または <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>の場合、リーダーは一致する <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> または <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>に進みます。
            
他のすべてのトークン型については、リーダーは移動しません。 次に <xref:System.Text.Json.Utf8JsonReader.Read>を呼び出した後、リーダーは次の値 (配列の場合)、次のプロパティ名 (オブジェクトの場合)、または終了配列/オブジェクトトークンになります。

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">リーダーに与えられたデータは一部であり、この後にデータが続きます (つまり、<see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> は <see langword="false" /> です)。</exception>
        <exception cref="T:System.Text.Json.JsonException">JSON RFC に基づき、スキップ中、無効な JSON トークンが検出されました。

または

現在の深度が、最大深度によって設定された再帰の限度を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="TokenStartIndex">
      <MemberSignature Language="C#" Value="public long TokenStartIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 TokenStartIndex" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenStartIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenStartIndex As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long TokenStartIndex { long get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenStartIndex : int64" Usage="System.Text.Json.Utf8JsonReader.TokenStartIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最後に処理された JSON トークンの (UTF-8 でエンコードされた指定の入力テキスト内の) 開始位置となるインデックスを取得します。空白はスキップされます。</summary>
        <value>指定した UTF-8 でエンコードされた入力テキスト内で最後に処理された JSON トークンの開始インデックス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

JSON 文字列 (プロパティ名を含む) の場合、この値は開始引用符の前を指します。

コメントの場合、この値は最初のコメント区切り記号 ('/') の前を指します。 これは、<xref:System.Text.Json.JsonCommentHandling.Allow?displayProperty=nameWithType> オプションを使用してリーダーが構築されている場合にのみ適用されます。

            ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenType">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonTokenType TokenType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonTokenType TokenType" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TokenType As JsonTokenType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonTokenType TokenType { System::Text::Json::JsonTokenType get(); };" />
      <MemberSignature Language="F#" Value="member this.TokenType : System.Text.Json.JsonTokenType" Usage="System.Text.Json.Utf8JsonReader.TokenType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonTokenType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>UTF-8 でエンコードされた JSON テキスト内で最後に処理された JSON トークンの種類を取得します。</summary>
        <value>最後に処理された JSON トークンの型。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetByte">
      <MemberSignature Language="C#" Value="public bool TryGetByte (out byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetByte([out] unsigned int8&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetByte (ByRef value As Byte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetByte([Runtime::InteropServices::Out] System::Byte % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetByte : byte -&gt; bool" Usage="utf8JsonReader.TryGetByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.Byte" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Byte" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetBytesFromBase64">
      <MemberSignature Language="C#" Value="public bool TryGetBytesFromBase64 (out byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetBytesFromBase64([out] unsigned int8[]&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetBytesFromBase64 (ByRef value As Byte()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetBytesFromBase64([Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetBytesFromBase64 : Byte[] -&gt; bool" Usage="utf8JsonReader.TryGetBytesFromBase64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName>System.Diagnostics.CodeAnalysis.NotNullWhen(true)</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value">このメソッドが返される場合、Base64 テキストの (デコードされた) バイナリ表現が含まれます。</param>
        <summary>ソースから現在の JSON トークン値を解析し、Base64 でエンコードされた JSON 文字列をバイト配列としてデコードし、操作が成功したかどうかを示す値を返します。</summary>
        <returns>トークン値全体が有効な Base64 テキストとしてエンコードされ、正常にバイトにデコードできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークンが <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTime">
      <MemberSignature Language="C#" Value="public bool TryGetDateTime (out DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTime([out] valuetype System.DateTime&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTime (ByRef value As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTime([Runtime::InteropServices::Out] DateTime % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTime : DateTime -&gt; bool" Usage="utf8JsonReader.TryGetDateTime value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.DateTime" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.DateTime" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

このメソッドは、ISO 8601-1 拡張形式に準拠した JSON 文字列の <xref:System.DateTime> 表現のみを作成します (「system.string[での DateTime と DateTimeOffset のサポート](/dotnet/standard/datetime/system-text-json-support)」を参照してください)。

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDateTimeOffset">
      <MemberSignature Language="C#" Value="public bool TryGetDateTimeOffset (out DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDateTimeOffset([out] valuetype System.DateTimeOffset&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDateTimeOffset (ByRef value As DateTimeOffset) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDateTimeOffset([Runtime::InteropServices::Out] DateTimeOffset % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDateTimeOffset : DateTimeOffset -&gt; bool" Usage="utf8JsonReader.TryGetDateTimeOffset value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.DateTimeOffset" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.DateTimeOffset" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

このメソッドは、ISO 8601-1 拡張形式に準拠した JSON 文字列の <xref:System.DateTimeOffset> 表現のみを作成します (「system.string[での DateTime と DateTimeOffset のサポート](/dotnet/standard/datetime/system-text-json-support)」を参照してください)。

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDecimal">
      <MemberSignature Language="C#" Value="public bool TryGetDecimal (out decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDecimal([out] valuetype System.Decimal&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDecimal (ByRef value As Decimal) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDecimal([Runtime::InteropServices::Out] System::Decimal % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDecimal : decimal -&gt; bool" Usage="utf8JsonReader.TryGetDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.Decimal" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Decimal" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetDouble">
      <MemberSignature Language="C#" Value="public bool TryGetDouble (out double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetDouble([out] float64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetDouble (ByRef value As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetDouble([Runtime::InteropServices::Out] double % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetDouble : double -&gt; bool" Usage="utf8JsonReader.TryGetDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.Double" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Double" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetGuid">
      <MemberSignature Language="C#" Value="public bool TryGetGuid (out Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetGuid([out] valuetype System.Guid&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetGuid (ByRef value As Guid) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetGuid([Runtime::InteropServices::Out] Guid % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetGuid : Guid -&gt; bool" Usage="utf8JsonReader.TryGetGuid value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.Guid" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Guid" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

このメソッドでは、ハイフンを使用して <xref:System.Guid> 値を解析するだけで、周囲の装飾は使用しません。 

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt16">
      <MemberSignature Language="C#" Value="public bool TryGetInt16 (out short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt16([out] int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt16 (ByRef value As Short) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt16([Runtime::InteropServices::Out] short % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt16 : int16 -&gt; bool" Usage="utf8JsonReader.TryGetInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.Int16" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Int16" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt32">
      <MemberSignature Language="C#" Value="public bool TryGetInt32 (out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt32([out] int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt32 (ByRef value As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt32([Runtime::InteropServices::Out] int % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt32 : int -&gt; bool" Usage="utf8JsonReader.TryGetInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.Int32" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Int32" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetInt64">
      <MemberSignature Language="C#" Value="public bool TryGetInt64 (out long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetInt64([out] int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetInt64 (ByRef value As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetInt64([Runtime::InteropServices::Out] long % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetInt64 : int64 -&gt; bool" Usage="utf8JsonReader.TryGetInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.Int64" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Int64" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSByte">
      <MemberSignature Language="C#" Value="public bool TryGetSByte (out sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSByte([out] int8&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSByte (ByRef value As SByte) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSByte([Runtime::InteropServices::Out] System::SByte % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSByte : sbyte -&gt; bool" Usage="utf8JsonReader.TryGetSByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.SByte" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.SByte" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetSingle">
      <MemberSignature Language="C#" Value="public bool TryGetSingle (out float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetSingle([out] float32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetSingle (ByRef value As Single) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetSingle([Runtime::InteropServices::Out] float % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetSingle : single -&gt; bool" Usage="utf8JsonReader.TryGetSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.Single" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Single" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt16">
      <MemberSignature Language="C#" Value="public bool TryGetUInt16 (out ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt16([out] unsigned int16&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt16 (ByRef value As UShort) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt16([Runtime::InteropServices::Out] System::UInt16 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt16 : uint16 -&gt; bool" Usage="utf8JsonReader.TryGetUInt16 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.UInt16" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.UInt16" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt32">
      <MemberSignature Language="C#" Value="public bool TryGetUInt32 (out uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt32([out] unsigned int32&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt32 (ByRef value As UInteger) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt32([Runtime::InteropServices::Out] System::UInt32 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt32 : uint32 -&gt; bool" Usage="utf8JsonReader.TryGetUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.UInt32" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.UInt32" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TryGetUInt64">
      <MemberSignature Language="C#" Value="public bool TryGetUInt64 (out ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetUInt64([out] unsigned int64&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetUInt64 (ByRef value As ULong) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetUInt64([Runtime::InteropServices::Out] System::UInt64 % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetUInt64 : uint64 -&gt; bool" Usage="utf8JsonReader.TryGetUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" RefType="out" />
      </Parameters>
      <Docs>
        <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
        <summary>ソースから現在の JSON トークン値を <see cref="T:System.UInt64" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
        <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.UInt64" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
        <altmember cref="P:System.Text.Json.Utf8JsonReader.TokenType" />
      </Docs>
    </Member>
    <Member MemberName="TrySkip">
      <MemberSignature Language="C#" Value="public bool TrySkip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySkip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.TrySkip" />
      <MemberSignature Language="VB.NET" Value="Public Function TrySkip () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrySkip();" />
      <MemberSignature Language="F#" Value="member this.TrySkip : unit -&gt; bool" Usage="utf8JsonReader.TrySkip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の JSON トークンの子のスキップを試行します。</summary>
        <returns>子を正常にスキップできるだけの十分なデータがあった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

リーダーが、現在のトークンの子を完全にスキップするのに十分なデータを持っていなかった場合は、メソッドが呼び出される前の状態にリセットされます。
              
<xref:System.Text.Json.Utf8JsonReader.TokenType> が <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType>場合、リーダーは最初にプロパティ値に移動します。

<xref:System.Text.Json.Utf8JsonReader.TokenType> (もともと、または前進後) が <xref:System.Text.Json.JsonTokenType.StartObject?displayProperty=nameWithType> または <xref:System.Text.Json.JsonTokenType.StartArray?displayProperty=nameWithType>の場合、リーダーは一致する <xref:System.Text.Json.JsonTokenType.EndObject?displayProperty=nameWithType> または <xref:System.Text.Json.JsonTokenType.EndArray?displayProperty=nameWithType>に進みます。
            
他のすべてのトークン型については、リーダーは移動しません。 次に <xref:System.Text.Json.Utf8JsonReader.Read>を呼び出した後、リーダーは次の値 (配列の場合)、次のプロパティ名 (オブジェクトの場合)、または終了配列/オブジェクトトークンになります。

          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException">JSON RFC に基づき、スキップ中、無効な JSON トークンが検出されました。
          
または

現在の深度が、最大深度によって設定された再帰の限度を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ValueSequence">
      <MemberSignature Language="C#" Value="public System.Buffers.ReadOnlySequence&lt;byte&gt; ValueSequence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Buffers.ReadOnlySequence`1&lt;unsigned int8&gt; ValueSequence" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSequence As ReadOnlySequence(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::ReadOnlySequence&lt;System::Byte&gt; ValueSequence { System::Buffers::ReadOnlySequence&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSequence : System.Buffers.ReadOnlySequence&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSequence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Buffers.ReadOnlySequence&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トークンが複数のセグメントに含まれている場合にのみ、最後に処理されたトークンの生の値を入力ペイロードの ReadOnlySequence&lt;byte&gt; スライスとして取得します。</summary>
        <value>バイト読み取り専用シーケンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

JSON が ReadOnlySequence&lt;byte&gt; 内に指定されていて、トークン値を表すスライスが単一のセグメント内に収まる場合、<xref:System.Text.Json.Utf8JsonReader.ValueSpan> にはスライスされた値が格納されます。それをスパンとして表現できるからです。 それ以外の場合、`ValueSequence` にはトークン値が格納されます。

<xref:System.Text.Json.Utf8JsonReader.HasValueSequence> が `false`場合、`ValueSequence` は空になります。 したがって、<xref:System.Text.Json.Utf8JsonReader.HasValueSequence> が `true`場合にのみ、アクセス `ValueSequence` になります。
それ以外の場合は、<xref:System.Text.Json.Utf8JsonReader.ValueSpan>からトークン値にアクセスする必要があります。

このプロパティに常に適切な形式のデータが含まれるという保証はありません。 `Utf8JsonReader` に渡された入力 JSON に JSON 文字列トークン内の無効な UTF-8 バイトが含まれている場合、このプロパティは無効な UTF-8 バイトをそのように返します。
そのため、入力が信頼されていないか、事前に検証されていない場合は、<xref:System.Text.Json.Utf8JsonReader.GetString> を呼び出して JSON 文字列トークンを取得します。

このプロパティは生のバイトを返すため、テキストの比較には使用しないでください。 代わりに <xref:System.Text.Json.Utf8JsonReader.ValueTextEquals%2A>を呼び出します。これにより、必要に応じてテキストが unescapes されます。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSpan">
      <MemberSignature Language="C#" Value="public ReadOnlySpan&lt;byte&gt; ValueSpan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; ValueSpan" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSpan As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ReadOnlySpan&lt;System::Byte&gt; ValueSpan { ReadOnlySpan&lt;System::Byte&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSpan : ReadOnlySpan&lt;byte&gt;" Usage="System.Text.Json.Utf8JsonReader.ValueSpan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.CompilerServices.IsReadOnly</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トークンが 1 つのセグメントに収まる場合、またはリーダーが ReadOnlySpan&lt;byte&gt; に含まれる JSON ペイロードを使用して構築された場合、最後に処理されたトークンの生の値を入力ペイロードの ReadOnlySpan&lt;byte&gt; スライスとして取得します。</summary>
        <value>バイト型の読み取り専用スパン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

JSON が ReadOnlySequence&lt;byte&gt; 内に指定されていて、トークン値を表すスライスが単一のセグメント内に収まる場合、`ValueSpan` にはスライスされた値が格納されます。それをスパンとして表現できるからです。 それ以外の場合、<xref:System.Text.Json.Utf8JsonReader.ValueSequence> にはトークン値が格納されます。

<xref:System.Text.Json.Utf8JsonReader.HasValueSequence> が `true`場合、`ValueSpan` は空になります。 したがって、<xref:System.Text.Json.Utf8JsonReader.HasValueSequence> が `false`場合にのみ、アクセス `ValueSpan` になります。
それ以外の場合は、<xref:System.Text.Json.Utf8JsonReader.ValueSequence>からトークン値にアクセスする必要があります。

このプロパティに常に適切な形式のデータが含まれるという保証はありません。 `Utf8JsonReader` に渡された入力 JSON に JSON 文字列トークン内の無効な UTF-8 バイトが含まれている場合、このプロパティは無効な UTF-8 バイトをそのように返します。
そのため、入力が信頼されていないか、事前に検証されていない場合は、<xref:System.Text.Json.Utf8JsonReader.GetString> を呼び出して JSON 文字列トークンを取得します。

このプロパティは生のバイトを返すため、テキストの比較には使用しないでください。 代わりに、必要に応じてテキストを unescapes する <xref:System.Text.Json.Utf8JsonReader.ValueTextEquals%2A> を呼び出します。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (ReadOnlySpan&lt;byte&gt; utf8Text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (utf8Text As ReadOnlySpan(Of Byte)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(ReadOnlySpan&lt;System::Byte&gt; utf8Text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : ReadOnlySpan&lt;byte&gt; -&gt; bool" Usage="utf8JsonReader.ValueTextEquals utf8Text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Text" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Text">比較対象の UTF-8 でエンコードされたテキスト。</param>
        <summary>読み取り専用バイト スパン内の UTF-8 でエンコードされたテキストをソース内のエスケープされていない JSON トークン値と比較し、一致するかどうかを示す値を返します。</summary>
        <returns>ソースの JSON トークン値が UTF-8 でエンコードされた検索テキストと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

参照テキストは、有効な UTF-8 テキストである必要があります。 それ以外の場合、このメソッドは `true` を返す可能性があります。これは、ソースに、と一致する無効な UTF-8 テキストを含む文字列トークンが含まれている場合です。
              
必要に応じて、ソースの JSON 値を最初にエスケープ解除することによって、ソース内の JSON トークン値の比較が行われます。 参照テキストはそのままの状態で一致します。変更する必要はありません。
              
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークンは JSON 文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(valuetype System.ReadOnlySpan`1&lt;char&gt; text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (text As ReadOnlySpan(Of Char)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(ReadOnlySpan&lt;char&gt; text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : ReadOnlySpan&lt;char&gt; -&gt; bool" Usage="utf8JsonReader.ValueTextEquals text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="text">比較対象のテキスト。</param>
        <summary>読み取り専用文字スパン内のテキストをソース内のエスケープされていない JSON トークン値と比較し、一致するかどうかを示す値を返します。</summary>
        <returns>ソースの JSON トークン値が参照テキストと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

参照テキストが無効または不完全な UTF-16 テキスト (つまり、ペアになっていないサロゲート) の場合、このメソッドは `false` を返します。これは、JSON ペイロード内で無効な UTF-16 を持つことができないためです。
              
必要に応じて、ソースの JSON 値を最初にエスケープ解除することによって、ソース内の JSON トークン値の比較が行われます。 参照テキストはそのままの状態で一致します。変更する必要はありません。
              
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークンは JSON 文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません)。</exception>
      </Docs>
    </Member>
    <Member MemberName="ValueTextEquals">
      <MemberSignature Language="C#" Value="public bool ValueTextEquals (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ValueTextEquals(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueTextEquals (text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ValueTextEquals(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.ValueTextEquals : string -&gt; bool" Usage="utf8JsonReader.ValueTextEquals text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">比較対象のテキスト。</param>
        <summary>文字列のテキストをソース内のエスケープされていない JSON トークン値と比較し、一致するかどうかを示す値を返します。</summary>
        <returns>ソースの JSON トークン値が参照テキストと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

参照テキストが無効または不完全な UTF-16 テキスト (つまり、ペアになっていないサロゲート) の場合、このメソッドは `false` を返します。これは、JSON ペイロード内で無効な UTF-16 を持つことができないためです。
              
必要に応じて、ソースの JSON 値を最初にエスケープ解除することによって、ソース内の JSON トークン値の比較が行われます。 参照テキストはそのままの状態で一致します。変更する必要はありません。
              
          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">JSON トークンは JSON 文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません)。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
