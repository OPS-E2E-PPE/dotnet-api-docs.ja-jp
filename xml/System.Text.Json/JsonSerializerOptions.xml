<Type Name="JsonSerializerOptions" FullName="System.Text.Json.JsonSerializerOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af405132229afd452216d5a334bb4c07bc5015f5" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75159506" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonSerializerOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonSerializerOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializerOptions" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonSerializerOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializerOptions sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializerOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="a5627-101"><see cref="T:System.Text.Json.JsonSerializer" /> で使用されるオプションを提供します。</span><span class="sxs-lookup"><span data-stu-id="a5627-101">Provides options to be used with <see cref="T:System.Text.Json.JsonSerializer" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-102">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5627-102">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonSerializerOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializerOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonSerializerOptions();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a5627-103"><see cref="T:System.Text.Json.JsonSerializerOptions" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a5627-103">Initializes a new instance of the <see cref="T:System.Text.Json.JsonSerializerOptions" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowTrailingCommas">
      <MemberSignature Language="C#" Value="public bool AllowTrailingCommas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowTrailingCommas" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowTrailingCommas As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowTrailingCommas { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowTrailingCommas : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.AllowTrailingCommas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5627-104">逆シリアル化される JSON ペイロード内でオブジェクトまたは配列の JSON 値の一覧の終わりにある余分なコンマが許可 (および無視) されるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="a5627-104">Get or sets a value that indicates whether an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored) within the JSON payload being deserialized.</span></span></summary>
        <value><span data-ttu-id="a5627-105">オブジェクトまたは配列内の JSON 値の一覧の末尾に余分なコンマがある場合は <see langword="true" /> します (無視されます)。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a5627-105"><see langword="true" /> if an extra comma at the end of a list of JSON values in an object or array is allowed (and ignored); <see langword="false" /> otherwise.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-106">既定では、`AllowTrailingCommas` は `false`に設定され、末尾のコンマが検出された場合、逆シリアル化中に <xref:System.Text.Json.JsonException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="a5627-106">By default, `AllowTrailingCommas` is set to `false`, and a <xref:System.Text.Json.JsonException> is thrown during deserialization if a trailing comma is encountered.</span></span>

<span data-ttu-id="a5627-107">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md#allow-comments-and-trailing-commas)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5627-107">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#allow-comments-and-trailing-commas).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5627-108">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</span><span class="sxs-lookup"><span data-stu-id="a5627-108">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Converters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt; Converters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Text.Json.Serialization.JsonConverter&gt; Converters" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.Converters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Converters As IList(Of JsonConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Text::Json::Serialization::JsonConverter ^&gt; ^ Converters { System::Collections::Generic::IList&lt;System::Text::Json::Serialization::JsonConverter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Converters : System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt;" Usage="System.Text.Json.JsonSerializerOptions.Converters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Text.Json.Serialization.JsonConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5627-109">登録されたユーザー定義のコンバーターの一覧を取得します。</span><span class="sxs-lookup"><span data-stu-id="a5627-109">Gets the list of user-defined converters that were registered.</span></span></summary>
        <value><span data-ttu-id="a5627-110">カスタムコンバーターの一覧。</span><span class="sxs-lookup"><span data-stu-id="a5627-110">The list of custom converters.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-111">シリアル化または逆シリアル化が発生した場合、一覧は変更できません。</span><span class="sxs-lookup"><span data-stu-id="a5627-111">Once serialization or deserialization occurs, the list cannot be modified.</span></span>

<span data-ttu-id="a5627-112">詳細については、「[カスタムコンバーターを記述する方法](~/docs/standard/serialization/system-text-json-converters-how-to.md#registration-sample---converters-collection)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5627-112">For more information, see [How to write custom converters](~/docs/standard/serialization/system-text-json-converters-how-to.md#registration-sample---converters-collection).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultBufferSize">
      <MemberSignature Language="C#" Value="public int DefaultBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultBufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DefaultBufferSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBufferSize : int with get, set" Usage="System.Text.Json.JsonSerializerOptions.DefaultBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5627-113">一時バッファーの作成時に使用する、既定のバッファー サイズ (バイト単位) を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="a5627-113">Gets or sets the default buffer size, in bytes, to use when creating temporary buffers.</span></span></summary>
        <value><span data-ttu-id="a5627-114">既定のバッファーサイズ (バイト単位)。</span><span class="sxs-lookup"><span data-stu-id="a5627-114">The default buffer size in bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-115">既定のバッファーサイズ (バイト単位) は16384です。</span><span class="sxs-lookup"><span data-stu-id="a5627-115">The default buffer size, in bytes, is 16,384.</span></span>
<span data-ttu-id="a5627-116">ほとんどのワークロードでは、ストリームからの読み取り時またはストリームへの書き込み中に、既定のサイズがバッファーに対して妥当な量の JSON になります。</span><span class="sxs-lookup"><span data-stu-id="a5627-116">For most workloads, the default size is a reasonable amount of JSON to buffer while reading from a stream or writing to a stream.</span></span>
<span data-ttu-id="a5627-117">つまり、ガベージコレクター (GC) が追跡するために、大きなオブジェクトヒープ上にオブジェクトを作成しなくても、パフォーマンスが優れています。非ストリーミングシナリオでは、既定のバッファーサイズを大きくすると、大きな JSON 文字列または UTF-8 バイト配列のパフォーマンスが向上する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a5627-117">That is, it performs well without creating objects on the Large Object Heap for the Garbage Collector (GC) to track. In non-streaming scenarios, increasing the default buffer size could improve performance for large JSON strings or UTF-8 byte arrays.</span></span>
<span data-ttu-id="a5627-118">変更しない限り、この値は変更せずに変更しないことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a5627-118">We recommend that you leave this value unchanged unless changing it makes an observable difference in performance.</span></span>


          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a5627-119">バッファー サイズは 1 未満です。</span><span class="sxs-lookup"><span data-stu-id="a5627-119">The buffer size is less than 1.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5627-120">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</span><span class="sxs-lookup"><span data-stu-id="a5627-120">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DictionaryKeyPolicy">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonNamingPolicy DictionaryKeyPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Json.JsonNamingPolicy DictionaryKeyPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property DictionaryKeyPolicy As JsonNamingPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonNamingPolicy ^ DictionaryKeyPolicy { System::Text::Json::JsonNamingPolicy ^ get(); void set(System::Text::Json::JsonNamingPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DictionaryKeyPolicy : System.Text.Json.JsonNamingPolicy with get, set" Usage="System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonNamingPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5627-121"><see cref="T:System.Collections.IDictionary" /> キーの名前を、camel 形式などの別の形式に変換するために使用されるポリシーを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="a5627-121">Gets or sets the policy used to convert a <see cref="T:System.Collections.IDictionary" /> key's name to another format, such as camel-casing.</span></span></summary>
        <value><span data-ttu-id="a5627-122"><see cref="T:System.Collections.IDictionary" /> キーの名前を別の形式に変換するために使用するポリシー。</span><span class="sxs-lookup"><span data-stu-id="a5627-122">The policy used to convert a <see cref="T:System.Collections.IDictionary" /> key's name to another format.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-123">このプロパティを <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> に設定すると、camel 形式のポリシーを指定できます。</span><span class="sxs-lookup"><span data-stu-id="a5627-123">This property can be set to <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> to specify a camel-casing policy.</span></span>

<span data-ttu-id="a5627-124">このプロパティを <xref:System.Text.Json.JsonNamingPolicy.CamelCase> に設定すると、camel 形式のポリシーを指定できます。</span><span class="sxs-lookup"><span data-stu-id="a5627-124">This property can be set to <xref:System.Text.Json.JsonNamingPolicy.CamelCase> to specify a camel-casing policy.</span></span>

<span data-ttu-id="a5627-125">逆シリアル化時には使用されません。</span><span class="sxs-lookup"><span data-stu-id="a5627-125">It is not used when deserializing.</span></span>

<span data-ttu-id="a5627-126">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md#camel-case-dictionary-keys)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5627-126">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#camel-case-dictionary-keys).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoder">
      <MemberSignature Language="C#" Value="public System.Text.Encodings.Web.JavaScriptEncoder Encoder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encodings.Web.JavaScriptEncoder Encoder" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.Encoder" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoder As JavaScriptEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encodings::Web::JavaScriptEncoder ^ Encoder { System::Text::Encodings::Web::JavaScriptEncoder ^ get(); void set(System::Text::Encodings::Web::JavaScriptEncoder ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoder : System.Text.Encodings.Web.JavaScriptEncoder with get, set" Usage="System.Text.Json.JsonSerializerOptions.Encoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encodings.Web.JavaScriptEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5627-127">文字列をエスケープするときに使用するエンコーダーを取得または設定します。既定のエンコーダーを使用する場合は <see langword="null" /> を設定します。</span><span class="sxs-lookup"><span data-stu-id="a5627-127">Gets or sets the encoder to use when escaping strings, or <see langword="null" /> to use the default encoder.</span></span></summary>
        <value><span data-ttu-id="a5627-128">JavaScript 文字エンコーディング。</span><span class="sxs-lookup"><span data-stu-id="a5627-128">The JavaScript character encoding.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-129">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md#customize-character-encoding)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5627-129">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#customize-character-encoding).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public System.Text.Json.Serialization.JsonConverter GetConverter (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Text.Json.Serialization.JsonConverter GetConverter(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConverter (typeToConvert As Type) As JsonConverter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Text::Json::Serialization::JsonConverter ^ GetConverter(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="member this.GetConverter : Type -&gt; System.Text.Json.Serialization.JsonConverter" Usage="jsonSerializerOptions.GetConverter typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="a5627-130">コンバーターを返す型。</span><span class="sxs-lookup"><span data-stu-id="a5627-130">The type to return a converter for.</span></span></param>
        <summary><span data-ttu-id="a5627-131">指定された型のコンバーターを返します。</span><span class="sxs-lookup"><span data-stu-id="a5627-131">Returns the converter for the specified type.</span></span></summary>
        <returns><span data-ttu-id="a5627-132">指定された型をサポートする最初のコンバーター。コンバーターがない場合は、<see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a5627-132">The first converter that supports the given type, or <see langword="null" /> if there is no converter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-133">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md#sample-factory-pattern-converter)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5627-133">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#sample-factory-pattern-converter).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreNullValues">
      <MemberSignature Language="C#" Value="public bool IgnoreNullValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreNullValues" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreNullValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreNullValues { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreNullValues : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5627-134">シリアル化および逆シリアル化の間に <see langword="null" /> 値を無視するかどうかを決定する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="a5627-134">Gets or sets a value that determines whether <see langword="null" /> values are ignored during serialization and deserialization.</span></span> <span data-ttu-id="a5627-135">既定値は <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="a5627-135">The default value is <see langword="false" />.</span></span></summary>
        <value><span data-ttu-id="a5627-136">シリアル化および逆シリアル化中に null 値を無視するように <see langword="true" /> ます。それ以外の場合は、「langword = "false"/&gt;」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5627-136"><see langword="true" /> to ignore null values during serialization and deserialization; otherwise, see langword="false" /&gt;.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-137">詳細については、「 [null 値プロパティをすべて除外](~/docs/standard/serialization/system-text-json-how-to.md#exclude-all-null-value-properties)する」および「[逆シリアル化するときに null を無視する](~/docs/standard/serialization/system-text-json-how-to.md#ignore-null-when-deserializing)」を参照してください</span><span class="sxs-lookup"><span data-stu-id="a5627-137">For more information, see [Exclude all null value properties](~/docs/standard/serialization/system-text-json-how-to.md#exclude-all-null-value-properties) and [Ignore null when deserializing](~/docs/standard/serialization/system-text-json-how-to.md#ignore-null-when-deserializing).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5627-138">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</span><span class="sxs-lookup"><span data-stu-id="a5627-138">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IgnoreReadOnlyProperties">
      <MemberSignature Language="C#" Value="public bool IgnoreReadOnlyProperties { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreReadOnlyProperties" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreReadOnlyProperties As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreReadOnlyProperties { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreReadOnlyProperties : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5627-139">シリアル化中に読み取り専用プロパティを無視するかどうかを決定する値を取得します。</span><span class="sxs-lookup"><span data-stu-id="a5627-139">Gets a value that determines whether read-only properties are ignored during serialization.</span></span> <span data-ttu-id="a5627-140">既定値は <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="a5627-140">The default value is <see langword="false" />.</span></span></summary>
        <value><span data-ttu-id="a5627-141">シリアル化中に読み取り専用プロパティを無視するように <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="a5627-141"><see langword="true" /> to ignore read-only properties during serialization; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-142">パブリックゲッターが含まれていてもパブリック setter がない場合、プロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="a5627-142">A property is read-only if it contains a public getter but not a public setter.</span></span> 

<span data-ttu-id="a5627-143">読み取り専用プロパティは、この設定に関係なく逆シリアル化されません。</span><span class="sxs-lookup"><span data-stu-id="a5627-143">Read-only properties are not deserialized regardless of this setting.</span></span>

<span data-ttu-id="a5627-144">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md#exclude-all-read-only-properties)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5627-144">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#exclude-all-read-only-properties).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5627-145">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</span><span class="sxs-lookup"><span data-stu-id="a5627-145">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaxDepth">
      <MemberSignature Language="C#" Value="public int MaxDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.MaxDepth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxDepth { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxDepth : int with get, set" Usage="System.Text.Json.JsonSerializerOptions.MaxDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5627-146">JSON をシリアル化または逆シリアル化するときに許容される最大の深さを取得または設定します。既定値は 0 で、最大の深さが 64 であることを示します。</span><span class="sxs-lookup"><span data-stu-id="a5627-146">Gets or sets the maximum depth allowed when serializing or deserializing JSON, with the default value of 0 indicating a maximum depth of 64.</span></span></summary>
        <value><span data-ttu-id="a5627-147">JSON をシリアル化または逆シリアル化するときに許容される最大の深さ。</span><span class="sxs-lookup"><span data-stu-id="a5627-147">The maximum depth allowed when serializing or deserializing JSON.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-148">この深さを超えると、<xref:System.Text.Json.JsonException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="a5627-148">Going past this depth throws a <xref:System.Text.Json.JsonException>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5627-149">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</span><span class="sxs-lookup"><span data-stu-id="a5627-149">This property was set after serialization or deserialization has occurred.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a5627-150">最大深度が負の値に設定されています。</span><span class="sxs-lookup"><span data-stu-id="a5627-150">The max depth is set to a negative value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PropertyNameCaseInsensitive">
      <MemberSignature Language="C#" Value="public bool PropertyNameCaseInsensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PropertyNameCaseInsensitive" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyNameCaseInsensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PropertyNameCaseInsensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyNameCaseInsensitive : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5627-151">逆シリアル化中に、プロパティの名前で大文字と小文字を区別しない比較が使用されるかどうかを決定する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="a5627-151">Gets or sets a value that determines whether a property's name uses a case-insensitive comparison during deserialization.</span></span> <span data-ttu-id="a5627-152">既定値は <see langword="false" />です。</span><span class="sxs-lookup"><span data-stu-id="a5627-152">The default value is <see langword="false" />.</span></span></summary>
        <value><span data-ttu-id="a5627-153">大文字と小文字を区別しない比較を使用してプロパティ名を比較するための <see langword="true" />それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="a5627-153"><see langword="true" /> to compare property names using case-insensitive comparison; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-154">大文字と小文字を区別しない比較 (つまり `PropertyNameCaseInsensitive` が `true`) に関連するパフォーマンスコストが発生します。</span><span class="sxs-lookup"><span data-stu-id="a5627-154">There is a performance cost associated with case-insensitive comparison (that is, when `PropertyNameCaseInsensitive` is `true`).</span></span>

<span data-ttu-id="a5627-155">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md#case-insensitive-property-matching)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5627-155">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#case-insensitive-property-matching).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyNamingPolicy">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonNamingPolicy PropertyNamingPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Json.JsonNamingPolicy PropertyNamingPolicy" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property PropertyNamingPolicy As JsonNamingPolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonNamingPolicy ^ PropertyNamingPolicy { System::Text::Json::JsonNamingPolicy ^ get(); void set(System::Text::Json::JsonNamingPolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PropertyNamingPolicy : System.Text.Json.JsonNamingPolicy with get, set" Usage="System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonNamingPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5627-156">オブジェクトのプロパティの名前を、キャメルケース形式などの別の形式に変換するために使用されるポリシーを指定する値を取得または設定するか、プロパティ名を変更しない場合は <see langword="null" /> にします。</span><span class="sxs-lookup"><span data-stu-id="a5627-156">Gets or sets a value that specifies the policy used to convert a property's name on an object to another format, such as camel-casing, or <see langword="null" /> to leave property names unchanged.</span></span></summary>
        <value><span data-ttu-id="a5627-157">プロパティの名前付けポリシー。プロパティ名を変更しない場合は <see langword="null" /> します。</span><span class="sxs-lookup"><span data-stu-id="a5627-157">A property naming policy, or <see langword="null" /> to leave property names unchanged.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-158">結果として得られるプロパティ名は、逆シリアル化時に JSON ペイロードに一致すると予測され、シリアル化中にプロパティ名を書き込むときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="a5627-158">The resulting property name is expected to match the JSON payload during deserialization, and will be used when writing the property name during serialization.</span></span>

<span data-ttu-id="a5627-159">ポリシーは、<xref:System.Text.Json.Serialization.JsonPropertyNameAttribute> 適用されているプロパティには使用されません。</span><span class="sxs-lookup"><span data-stu-id="a5627-159">The policy is not used for properties that have a <xref:System.Text.Json.Serialization.JsonPropertyNameAttribute> applied.</span></span>

<span data-ttu-id="a5627-160">このプロパティを <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> に設定すると、camel 形式のポリシーを指定できます。</span><span class="sxs-lookup"><span data-stu-id="a5627-160">This property can be set to <xref:System.Text.Json.JsonNamingPolicy.CamelCase?displayProperty=nameWithType> to specify a camel-casing policy.</span></span>

<span data-ttu-id="a5627-161">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md#customize-json-names-and-values)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5627-161">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#customize-json-names-and-values).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadCommentHandling">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonCommentHandling ReadCommentHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonCommentHandling ReadCommentHandling" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadCommentHandling As JsonCommentHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonCommentHandling ReadCommentHandling { System::Text::Json::JsonCommentHandling get(); void set(System::Text::Json::JsonCommentHandling value); };" />
      <MemberSignature Language="F#" Value="member this.ReadCommentHandling : System.Text.Json.JsonCommentHandling with get, set" Usage="System.Text.Json.JsonSerializerOptions.ReadCommentHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonCommentHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5627-162">逆シリアル化中にコメントを処理する方法を定義する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="a5627-162">Gets or sets a value that defines how comments are handled during deserialization.</span></span></summary>
        <value><span data-ttu-id="a5627-163">コメントを許可するか、禁止するか、またはスキップするかを示す値。</span><span class="sxs-lookup"><span data-stu-id="a5627-163">A value that indicates whether comments are allowed, disallowed, or skipped.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="a5627-164">既定では、コメントが検出されると、逆シリアル化中に <xref:System.Text.Json.JsonException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="a5627-164">By default, a <xref:System.Text.Json.JsonException> is thrown during deserialization if a comment is encountered.</span></span>

<span data-ttu-id="a5627-165">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md#allow-comments-and-trailing-commas)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5627-165">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#allow-comments-and-trailing-commas).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5627-166">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</span><span class="sxs-lookup"><span data-stu-id="a5627-166">This property was set after serialization or deserialization has occurred.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="a5627-167">コメント処理列挙型が、サポートされていない (または <see cref="T:System.Text.Json.JsonCommentHandling" /> 列挙型の範囲内ではない) 値に設定されています。</span><span class="sxs-lookup"><span data-stu-id="a5627-167">The comment handling enum is set to a value that is not supported (or not within the <see cref="T:System.Text.Json.JsonCommentHandling" /> enum range).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteIndented">
      <MemberSignature Language="C#" Value="public bool WriteIndented { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteIndented" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.JsonSerializerOptions.WriteIndented" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteIndented As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteIndented { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteIndented : bool with get, set" Usage="System.Text.Json.JsonSerializerOptions.WriteIndented" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a5627-168">JSON で整形出力を使用する必要があるかどうかを定義する値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="a5627-168">Gets or sets a value that defines whether JSON should use pretty printing.</span></span> <span data-ttu-id="a5627-169">既定では、JSON は余分な空白なしでシリアル化されます。</span><span class="sxs-lookup"><span data-stu-id="a5627-169">By default, JSON is serialized without any extra white space.</span></span></summary>
        <value><span data-ttu-id="a5627-170">JSON がシリアル化で非常に印刷される必要があるかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="a5627-170"><see langword="true" /> if JSON should pretty print on serialization; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="a5627-171">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="a5627-171">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="a5627-172">印刷には次のものが含まれます。</span><span class="sxs-lookup"><span data-stu-id="a5627-172">Pretty printing includes:</span></span> 

- <span data-ttu-id="a5627-173">入れ子になった JSON トークンをインデントします。</span><span class="sxs-lookup"><span data-stu-id="a5627-173">Indenting nested JSON tokens.</span></span>
- <span data-ttu-id="a5627-174">新しい行の追加</span><span class="sxs-lookup"><span data-stu-id="a5627-174">Adding new lines</span></span>
- <span data-ttu-id="a5627-175">プロパティの名前と値の間に空白を追加します。</span><span class="sxs-lookup"><span data-stu-id="a5627-175">Adding white space between property names and values.</span></span> 

<span data-ttu-id="a5627-176">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md#serialize-to-formatted-json)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a5627-176">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md#serialize-to-formatted-json).</span></span>

         ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a5627-177">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</span><span class="sxs-lookup"><span data-stu-id="a5627-177">This property was set after serialization or deserialization has occurred.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
