<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="62c2f7221cd3e50678bf3a2a3306bda52f14e4bd" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83945845" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="004ce-101">オブジェクトまたは値型を JSON にシリアル化したり、JSON をオブジェクトまたは値型に逆シリアル化したりする機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="004ce-101">Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-102">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-102">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="004ce-103">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="004ce-103">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="004ce-104">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="004ce-104">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-105">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-105">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="004ce-106">単一の JSON 値を表す UTF-8 エンコード テキストを、指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="004ce-106">Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="004ce-107">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="004ce-107">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-108">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-108">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="004ce-109"><paramref name="returnType" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="004ce-109"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="004ce-110">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="004ce-110">The JSON is invalid.</span></span>

<span data-ttu-id="004ce-111">または</span><span class="sxs-lookup"><span data-stu-id="004ce-111">-or-</span></span>

<span data-ttu-id="004ce-112"><typeparamref name="returnType" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-112"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="004ce-113">または</span><span class="sxs-lookup"><span data-stu-id="004ce-113">-or-</span></span>

<span data-ttu-id="004ce-114">1 つの JSON 値を超えるデータがスパンに残っています。</span><span class="sxs-lookup"><span data-stu-id="004ce-114">There is remaining data in the span beyond a single JSON value.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-115"><paramref name="returnType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-115">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="004ce-116">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="004ce-116">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="004ce-117">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="004ce-117">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-118">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-118">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="004ce-119">単一の JSON 値を表すテキストを、指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="004ce-119">Parses the text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="004ce-120">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="004ce-120">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-121">実装では UTF-8 がネイティブに使用されるため、<xref:System.String> を使用することは、UTF-8 メソッドを使用するほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-121">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

<span data-ttu-id="004ce-122">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-122">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="004ce-123"><paramref name="json" /> 、または <paramref name="returnType" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="004ce-123"><paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="004ce-124">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="004ce-124">The JSON is invalid.</span></span>
          
<span data-ttu-id="004ce-125">または</span><span class="sxs-lookup"><span data-stu-id="004ce-125">-or-</span></span>

<span data-ttu-id="004ce-126"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-126"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="004ce-127">または</span><span class="sxs-lookup"><span data-stu-id="004ce-127">-or-</span></span>

<span data-ttu-id="004ce-128">1 つの JSON 値を超えるデータが文字列に残っています。</span><span class="sxs-lookup"><span data-stu-id="004ce-128">There is remaining data in the string beyond a single JSON value.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-129"><paramref name="returnType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-129">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="004ce-130">JSON の読み取り元のリーダー。</span><span class="sxs-lookup"><span data-stu-id="004ce-130">The reader to read the JSON from.</span></span></param>
        <param name="returnType"><span data-ttu-id="004ce-131">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="004ce-131">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-132">読み取り中にシリアライザーの動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-132">Options to control the serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="004ce-133">提供されたリーダーから 1 つの JSON 値 (オブジェクトまたは配列を含む) を読み取り、それを指定された型のインスタンスに変換します。</span><span class="sxs-lookup"><span data-stu-id="004ce-133">Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</span></span></summary>
        <returns><span data-ttu-id="004ce-134">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="004ce-134">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-135">`reader` の <xref:System.Text.Json.Utf8JsonReader.TokenType> プロパティが <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> または <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>の場合、リーダーは、値の先頭を特定するために、<xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> の1回の呼び出しによって高度なものになります。</span><span class="sxs-lookup"><span data-stu-id="004ce-135">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>

<span data-ttu-id="004ce-136">このメソッドの完了時には、JSON 値の最終トークンに `reader` が配置されます。</span><span class="sxs-lookup"><span data-stu-id="004ce-136">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span>  <span data-ttu-id="004ce-137">例外がスローされた場合、リーダーは、メソッドが呼び出されたときの状態にリセットされます。</span><span class="sxs-lookup"><span data-stu-id="004ce-137">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>

<span data-ttu-id="004ce-138">このメソッドは、リーダーが処理したデータのコピーを作成します。したがって、このメソッドの戻り値を超えてデータの整合性を維持するための呼び出し元の要件はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-138">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

<span data-ttu-id="004ce-139"><xref:System.Text.Json.Utf8JsonReader> のインスタンスの作成に使用される <xref:System.Text.Json.JsonReaderOptions> は、競合している場合に <xref:System.Text.Json.JsonSerializerOptions> より優先されます。</span><span class="sxs-lookup"><span data-stu-id="004ce-139">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="004ce-140">そのため、読み取り中に <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>、<xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>、および <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="004ce-140">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>

<span data-ttu-id="004ce-141">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-141">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="004ce-142"><paramref name="returnType" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="004ce-142"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="004ce-143">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="004ce-143">The JSON is invalid.</span></span>
          
<span data-ttu-id="004ce-144">または</span><span class="sxs-lookup"><span data-stu-id="004ce-144">-or-</span></span>

<span data-ttu-id="004ce-145"><typeparamref name="returnType" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-145"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="004ce-146">または</span><span class="sxs-lookup"><span data-stu-id="004ce-146">-or-</span></span>

<span data-ttu-id="004ce-147">リーダーから値を読み取ることができませんでした。</span><span class="sxs-lookup"><span data-stu-id="004ce-147">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="004ce-148"><paramref name="reader" /> で、サポートされていないオプションが使用されています。</span><span class="sxs-lookup"><span data-stu-id="004ce-148"><paramref name="reader" /> is using unsupported options.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-149"><paramref name="returnType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-149">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="004ce-150">UTF-8 でエンコードされたテキストの対象の型。</span><span class="sxs-lookup"><span data-stu-id="004ce-150">The target type of the UTF-8 encoded text.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="004ce-151">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="004ce-151">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-152">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-152">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="004ce-153">単一の JSON 値を表す UTF-8 エンコード テキストを、ジェネリック型パラメーターで指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="004ce-153">Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="004ce-154">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="004ce-154">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-155">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-155">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="004ce-156">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="004ce-156">The JSON is invalid.</span></span>

<span data-ttu-id="004ce-157">または</span><span class="sxs-lookup"><span data-stu-id="004ce-157">-or-</span></span>

<span data-ttu-id="004ce-158"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-158"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="004ce-159">または</span><span class="sxs-lookup"><span data-stu-id="004ce-159">-or-</span></span>

<span data-ttu-id="004ce-160">1 つの JSON 値を超えるデータがスパンに残っています。</span><span class="sxs-lookup"><span data-stu-id="004ce-160">There is remaining data in the span beyond a single JSON value.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-161"><typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-161">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="004ce-162">JSON 値の対象の型。</span><span class="sxs-lookup"><span data-stu-id="004ce-162">The target type of the JSON value.</span></span></typeparam>
        <param name="json"><span data-ttu-id="004ce-163">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="004ce-163">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-164">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-164">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="004ce-165">単一の JSON 値を表すテキストを、ジェネリック型パラメーターで指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="004ce-165">Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="004ce-166">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="004ce-166">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-167">実装では UTF-8 がネイティブに使用されるため、<xref:System.String> を使用することは、UTF-8 メソッドを使用するほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-167">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

<span data-ttu-id="004ce-168">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-168">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="004ce-169"><paramref name="json" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="004ce-169"><paramref name="json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="004ce-170">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="004ce-170">The JSON is invalid.</span></span>

<span data-ttu-id="004ce-171">または</span><span class="sxs-lookup"><span data-stu-id="004ce-171">-or-</span></span>

<span data-ttu-id="004ce-172"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-172"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="004ce-173">または</span><span class="sxs-lookup"><span data-stu-id="004ce-173">-or-</span></span>

<span data-ttu-id="004ce-174">1 つの JSON 値を超えるデータが文字列に残っています。</span><span class="sxs-lookup"><span data-stu-id="004ce-174">There is remaining data in the string beyond a single JSON value.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-175"><typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-175">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="004ce-176">JSON 値の対象の型。</span><span class="sxs-lookup"><span data-stu-id="004ce-176">The target type of the JSON value.</span></span></typeparam>
        <param name="reader"><span data-ttu-id="004ce-177">JSON の読み取り元のリーダー。</span><span class="sxs-lookup"><span data-stu-id="004ce-177">The reader to read the JSON from.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-178">読み取り中にシリアライザーの動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-178">Options to control serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="004ce-179">提供されたリーダーから、ジェネリック型パラメーターで指定された型のインスタンスに、1 つの JSON 値 (オブジェクトまたは配列を含む) を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="004ce-179">Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="004ce-180">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="004ce-180">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-181">`reader` の <xref:System.Text.Json.Utf8JsonReader.TokenType> プロパティが <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> または <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>の場合、リーダーは、値の先頭を特定するために、<xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> の1回の呼び出しによって高度なものになります。</span><span class="sxs-lookup"><span data-stu-id="004ce-181">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="004ce-182">このメソッドの完了時には、JSON 値の最終トークンに `reader` が配置されます。</span><span class="sxs-lookup"><span data-stu-id="004ce-182">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span> <span data-ttu-id="004ce-183">例外がスローされた場合、リーダーは、メソッドが呼び出されたときの状態にリセットされます。</span><span class="sxs-lookup"><span data-stu-id="004ce-183">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="004ce-184">このメソッドは、リーダーが処理したデータのコピーを作成します。したがって、このメソッドの戻り値を超えてデータの整合性を維持するための呼び出し元の要件はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-184">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
               
<span data-ttu-id="004ce-185"><xref:System.Text.Json.Utf8JsonReader> のインスタンスの作成に使用される <xref:System.Text.Json.JsonReaderOptions> は、競合している場合に <xref:System.Text.Json.JsonSerializerOptions> より優先されます。</span><span class="sxs-lookup"><span data-stu-id="004ce-185">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="004ce-186">そのため、読み取り中に <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>、<xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>、および <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="004ce-186">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>

<span data-ttu-id="004ce-187">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-187">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="004ce-188">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="004ce-188">The JSON is invalid.</span></span>

<span data-ttu-id="004ce-189">または</span><span class="sxs-lookup"><span data-stu-id="004ce-189">-or-</span></span>

<span data-ttu-id="004ce-190"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-190"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="004ce-191">または</span><span class="sxs-lookup"><span data-stu-id="004ce-191">-or-</span></span>

<span data-ttu-id="004ce-192">リーダーから値を読み取ることができませんでした。</span><span class="sxs-lookup"><span data-stu-id="004ce-192">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="004ce-193"><paramref name="reader" /> で、サポートされていないオプションが使用されています。</span><span class="sxs-lookup"><span data-stu-id="004ce-193"><paramref name="reader" /> uses unsupported options.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-194"><typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-194">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeserializeAsync (utf8Json As Stream, returnType As Type, Optional options As JsonSerializerOptions = null, Optional cancellationToken As CancellationToken = null) As ValueTask(Of Object)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="004ce-195">解析対象の JSON データ。</span><span class="sxs-lookup"><span data-stu-id="004ce-195">The JSON data to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="004ce-196">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="004ce-196">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-197">読み取り中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-197">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="004ce-198">読み取り操作を取り消すために使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="004ce-198">A cancellation token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="004ce-199">単一の JSON 値を表す UTF-8 エンコード テキストを、指定された型のインスタンスに、非同期に読み取ります。</span><span class="sxs-lookup"><span data-stu-id="004ce-199">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span> <span data-ttu-id="004ce-200">ストリームは最後まで読み取られます。</span><span class="sxs-lookup"><span data-stu-id="004ce-200">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="004ce-201">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="004ce-201">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-202">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-202">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="004ce-203"><paramref name="utf8Json" /> 、または <paramref name="returnType" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="004ce-203"><paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="004ce-204">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="004ce-204">The JSON is invalid.</span></span>

<span data-ttu-id="004ce-205">または</span><span class="sxs-lookup"><span data-stu-id="004ce-205">-or-</span></span>

<span data-ttu-id="004ce-206"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-206"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="004ce-207">または</span><span class="sxs-lookup"><span data-stu-id="004ce-207">-or-</span></span>

<span data-ttu-id="004ce-208">ストリームにデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="004ce-208">There is remaining data in the stream.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-209"><paramref name="returnType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-209">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="returnType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeserializeAsync(Of TValue) (utf8Json As Stream, Optional options As JsonSerializerOptions = null, Optional cancellationToken As CancellationToken = null) As ValueTask(Of TValue)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="004ce-210">JSON 値の対象の型。</span><span class="sxs-lookup"><span data-stu-id="004ce-210">The target type of the JSON value.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="004ce-211">解析対象の JSON データ。</span><span class="sxs-lookup"><span data-stu-id="004ce-211">The JSON data to parse.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-212">読み取り中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-212">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="004ce-213">読み取り操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="004ce-213">A token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="004ce-214">単一の JSON 値を表す UTF-8 エンコード テキストを、ジェネリック型パラメーターで指定された型のインスタンスに、非同期に読み取ります。</span><span class="sxs-lookup"><span data-stu-id="004ce-214">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter.</span></span> <span data-ttu-id="004ce-215">ストリームは最後まで読み取られます。</span><span class="sxs-lookup"><span data-stu-id="004ce-215">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="004ce-216">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="004ce-216">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-217">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-217">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="004ce-218">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="004ce-218">The JSON is invalid.</span></span>

<span data-ttu-id="004ce-219">または</span><span class="sxs-lookup"><span data-stu-id="004ce-219">-or-</span></span>

<span data-ttu-id="004ce-220"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-220"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="004ce-221">または</span><span class="sxs-lookup"><span data-stu-id="004ce-221">-or-</span></span>

<span data-ttu-id="004ce-222">ストリームにデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="004ce-222">There is remaining data in the stream.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-223"><typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-223">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="004ce-224">変換する値。</span><span class="sxs-lookup"><span data-stu-id="004ce-224">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="004ce-225">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="004ce-225">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-226">変換動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-226">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="004ce-227">指定した型の値を JSON 文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="004ce-227">Converts the value of a specified type into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="004ce-228">値の JSON 文字列表現。</span><span class="sxs-lookup"><span data-stu-id="004ce-228">The JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-229">実装では、内部的に UTF-8 を使用しているため、<xref:System.String> を使用することは、UTF-8 エンコードを使用するほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-229">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="004ce-230">「<xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)>」および「<xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>」も参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-230">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

<span data-ttu-id="004ce-231">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-231">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="004ce-232"><paramref name="inputType" /> と <paramref name="value" /> には互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-232"><paramref name="inputType" /> is not compatible with <paramref name="value" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="004ce-233"><paramref name="inputType" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="004ce-233"><paramref name="inputType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-234"><paramref name="inputType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-234">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="004ce-235">書き込み先の JSON ライター。</span><span class="sxs-lookup"><span data-stu-id="004ce-235">The JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="004ce-236">変換して書き込む値。</span><span class="sxs-lookup"><span data-stu-id="004ce-236">The value to convert and write.</span></span></param>
        <param name="inputType"><span data-ttu-id="004ce-237">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="004ce-237">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-238">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-238">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="004ce-239">指定された型の JSON 表現を指定されたライターに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="004ce-239">Writes the JSON representation of the specified type to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-240"><xref:System.Text.Json.Utf8JsonWriter> のインスタンスの作成に使用される <xref:System.Text.Json.JsonWriterOptions> は、競合している場合に <xref:System.Text.Json.JsonSerializerOptions> より優先されます。</span><span class="sxs-lookup"><span data-stu-id="004ce-240">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="004ce-241">そのため、<xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>、<xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>、および <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> は書き込み中に使用されます。</span><span class="sxs-lookup"><span data-stu-id="004ce-241">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>

<span data-ttu-id="004ce-242">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-242">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="004ce-243"><paramref name="inputType" /> は <paramref name="value" /> と互換性がありません</span><span class="sxs-lookup"><span data-stu-id="004ce-243"><paramref name="inputType" /> is not compatible with <paramref name="value" /></span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="004ce-244"><paramref name="writer" /> 、または <paramref name="inputType" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="004ce-244"><paramref name="writer" /> or <paramref name="inputType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-245"><paramref name="inputType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-245">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="004ce-246">シリアル化する値の型。</span><span class="sxs-lookup"><span data-stu-id="004ce-246">The type of the value to serialize.</span></span></typeparam>
        <param name="value"><span data-ttu-id="004ce-247">変換する値。</span><span class="sxs-lookup"><span data-stu-id="004ce-247">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-248">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-248">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="004ce-249">ジェネリック型パラメーターで指定された型の値を JSON 文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="004ce-249">Converts the value of a type specified by a generic type parameter into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="004ce-250">値の JSON 文字列表現。</span><span class="sxs-lookup"><span data-stu-id="004ce-250">A JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-251">実装では、内部的に UTF-8 を使用しているため、<xref:System.String> を使用することは、UTF-8 エンコードを使用するほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-251">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="004ce-252">「<xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)>」および「<xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>」も参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-252">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

<span data-ttu-id="004ce-253">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-253">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-254"><typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-254">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="004ce-255">シリアル化する値の型。</span><span class="sxs-lookup"><span data-stu-id="004ce-255">The type of the value to serialize.</span></span></typeparam>
        <param name="writer"><span data-ttu-id="004ce-256">書き込み先の JSON ライター。</span><span class="sxs-lookup"><span data-stu-id="004ce-256">A JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="004ce-257">変換して書き込む値。</span><span class="sxs-lookup"><span data-stu-id="004ce-257">The value to convert and write.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-258">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-258">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="004ce-259">ジェネリック型パラメーターで指定された型の JSON 表現を指定されたライターに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="004ce-259">Writes the JSON representation of a type specified by a generic type parameter to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-260"><xref:System.Text.Json.Utf8JsonWriter> のインスタンスの作成に使用される <xref:System.Text.Json.JsonWriterOptions> は、競合している場合に <xref:System.Text.Json.JsonSerializerOptions> より優先されます。</span><span class="sxs-lookup"><span data-stu-id="004ce-260">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="004ce-261">そのため、<xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>、<xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>、および <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> は書き込み中に使用されます。</span><span class="sxs-lookup"><span data-stu-id="004ce-261">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>

<span data-ttu-id="004ce-262">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-262">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="004ce-263"><paramref name="writer" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="004ce-263"><paramref name="writer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-264"><typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-264">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeAsync (utf8Json As Stream, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null, Optional cancellationToken As CancellationToken = null) As Task" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, inputType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="004ce-265">書き込み先の UTF-8 ストリーム。</span><span class="sxs-lookup"><span data-stu-id="004ce-265">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="004ce-266">変換する値。</span><span class="sxs-lookup"><span data-stu-id="004ce-266">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="004ce-267">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="004ce-267">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-268">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-268">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="004ce-269">書き込み操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="004ce-269">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="004ce-270">指定された型の値を UTF-8 でエンコードされた JSON テキストに非同期に変換し、指定されたストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="004ce-270">Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</span></span></summary>
        <returns><span data-ttu-id="004ce-271">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="004ce-271">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-272">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-272">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="004ce-273"><paramref name="inputType" /> と <paramref name="value" /> には互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-273"><paramref name="inputType" /> is not compatible with <paramref name="value" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="004ce-274"><paramref name="utf8Json" /> 、または <paramref name="inputType" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="004ce-274"><paramref name="utf8Json" /> or <paramref name="inputType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-275"><paramref name="inputType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-275">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeAsync(Of TValue) (utf8Json As Stream, value As TValue, Optional options As JsonSerializerOptions = null, Optional cancellationToken As CancellationToken = null) As Task" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="004ce-276">シリアル化する値の型。</span><span class="sxs-lookup"><span data-stu-id="004ce-276">The type of the value to serialize.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="004ce-277">書き込み先の UTF-8 ストリーム。</span><span class="sxs-lookup"><span data-stu-id="004ce-277">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="004ce-278">変換する値。</span><span class="sxs-lookup"><span data-stu-id="004ce-278">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-279">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-279">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="004ce-280">書き込み操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="004ce-280">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="004ce-281">ジェネリック型パラメーターによって指定された型の値を UTF-8 でエンコードされた JSON テキストに非同期に変換し、ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="004ce-281">Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.</span></span></summary>
        <returns><span data-ttu-id="004ce-282">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="004ce-282">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-283">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-283">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="004ce-284"><paramref name="utf8Json" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="004ce-284"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-285"><typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-285">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="004ce-286">変換する値。</span><span class="sxs-lookup"><span data-stu-id="004ce-286">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="004ce-287">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="004ce-287">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-288">変換動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-288">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="004ce-289">指定された型の値を、UTF-8 バイトとしてエンコードされた JSON 文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="004ce-289">Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="004ce-290">UTF-8 バイト形式でエンコードされた値の JSON 文字列表現。</span><span class="sxs-lookup"><span data-stu-id="004ce-290">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-291">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-291">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="004ce-292"><paramref name="inputType" /> と <paramref name="value" /> には互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-292"><paramref name="inputType" /> is not compatible with <paramref name="value" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="004ce-293"><paramref name="inputType" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="004ce-293"><paramref name="inputType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-294"><paramref name="inputType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-294">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <paramref name="inputType" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="004ce-295">値の型。</span><span class="sxs-lookup"><span data-stu-id="004ce-295">The type of the value.</span></span></typeparam>
        <param name="value"><span data-ttu-id="004ce-296">変換する値。</span><span class="sxs-lookup"><span data-stu-id="004ce-296">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="004ce-297">変換動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="004ce-297">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="004ce-298">ジェネリック型パラメーターで指定された型の値を、UTF-8 バイト形式でエンコードされた JSON 文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="004ce-298">Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="004ce-299">UTF-8 バイト形式でエンコードされた値の JSON 文字列表現。</span><span class="sxs-lookup"><span data-stu-id="004ce-299">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="004ce-300">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](/dotnet/standard/serialization/system-text-json-how-to)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="004ce-300">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="004ce-301"><typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</span><span class="sxs-lookup"><span data-stu-id="004ce-301">There is no compatible <see cref="System.Text.Json.Serialization.JsonConverter" /> for <typeparamref name="TValue" /> or its serializable members.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
