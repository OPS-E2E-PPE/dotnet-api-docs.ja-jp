<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5456543ac0aaac6934fd944a4bf62dc952c3d6bf" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73381148" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f48bf-101">オブジェクトまたは値型を JSON にシリアル化したり、JSON をオブジェクトまたは値型に逆シリアル化したりする機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="f48bf-101">Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="f48bf-102">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="f48bf-102">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="f48bf-103">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-103">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-104">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-104">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="f48bf-105">単一の JSON 値を表す UTF-8 エンコード テキストを、指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="f48bf-105">Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="f48bf-106">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="f48bf-106">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f48bf-107"><paramref name="returnType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-107"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f48bf-108">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-108">The JSON is invalid.</span></span>
          
<span data-ttu-id="f48bf-109">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-109">-or-</span></span>

<span data-ttu-id="f48bf-110"><typeparamref name="returnType" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-110"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f48bf-111">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-111">-or-</span></span>

<span data-ttu-id="f48bf-112">1 つの JSON 値を超えるデータがスパンに残っています。</span><span class="sxs-lookup"><span data-stu-id="f48bf-112">There is remaining data in the span beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="f48bf-113">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="f48bf-113">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="f48bf-114">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-114">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-115">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-115">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="f48bf-116">単一の JSON 値を表すテキストを、指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="f48bf-116">Parses the text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="f48bf-117">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="f48bf-117">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f48bf-118">実装では UTF-8 がネイティブに使用されるため、<xref:System.String> を使用することは、UTF-8 メソッドを使用するほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-118">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f48bf-119"><paramref name="json" /> または <paramref name="returnType" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-119"><paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f48bf-120">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-120">The JSON is invalid.</span></span>
          
<span data-ttu-id="f48bf-121">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-121">-or-</span></span>

<span data-ttu-id="f48bf-122"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-122"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f48bf-123">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-123">-or-</span></span>

<span data-ttu-id="f48bf-124">1 つの JSON 値を超えるデータが文字列に残っています。</span><span class="sxs-lookup"><span data-stu-id="f48bf-124">There is remaining data in the string beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="f48bf-125">JSON の読み取り元のリーダー。</span><span class="sxs-lookup"><span data-stu-id="f48bf-125">The reader to read the JSON from.</span></span></param>
        <param name="returnType"><span data-ttu-id="f48bf-126">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-126">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-127">読み取り中にシリアライザーの動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-127">Options to control the serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="f48bf-128">提供されたリーダーから 1 つの JSON 値 (オブジェクトまたは配列を含む) を読み取り、それを指定された型のインスタンスに変換します。</span><span class="sxs-lookup"><span data-stu-id="f48bf-128">Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</span></span></summary>
        <returns><span data-ttu-id="f48bf-129">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="f48bf-129">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f48bf-130">`reader` の <xref:System.Text.Json.Utf8JsonReader.TokenType> プロパティが <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> または <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>の場合、リーダーは、値の先頭を特定するために、<xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> の1回の呼び出しによって高度なものになります。</span><span class="sxs-lookup"><span data-stu-id="f48bf-130">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>

<span data-ttu-id="f48bf-131">このメソッドが完了すると、JSON 値の最後のトークンに `reader` が配置されます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-131">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span>  <span data-ttu-id="f48bf-132">例外がスローされた場合、リーダーは、メソッドが呼び出されたときの状態にリセットされます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-132">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>

<span data-ttu-id="f48bf-133">このメソッドは、リーダーが処理したデータのコピーを作成します。したがって、このメソッドの戻り値を超えてデータの整合性を維持するための呼び出し元の要件はありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-133">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

<span data-ttu-id="f48bf-134"><xref:System.Text.Json.Utf8JsonReader> のインスタンスの作成に使用される <xref:System.Text.Json.JsonReaderOptions> は、競合している場合に <xref:System.Text.Json.JsonSerializerOptions> より優先されます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-134">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="f48bf-135">そのため、読み取り中に <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>、<xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>、<xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-135">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f48bf-136"><paramref name="returnType" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-136"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f48bf-137">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-137">The JSON is invalid.</span></span>
          
<span data-ttu-id="f48bf-138">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-138">-or-</span></span>

<span data-ttu-id="f48bf-139"><typeparamref name="returnType" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-139"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f48bf-140">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-140">-or-</span></span>

<span data-ttu-id="f48bf-141">リーダーから値を読み取ることができませんでした。</span><span class="sxs-lookup"><span data-stu-id="f48bf-141">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f48bf-142"><paramref name="reader" /> で、サポートされていないオプションが使用されています。</span><span class="sxs-lookup"><span data-stu-id="f48bf-142"><paramref name="reader" /> is using unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f48bf-143">UTF-8 でエンコードされたテキストの対象の型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-143">The target type of the UTF-8 encoded text.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="f48bf-144">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="f48bf-144">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-145">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-145">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="f48bf-146">単一の JSON 値を表す UTF-8 エンコード テキストを、ジェネリック型パラメーターで指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="f48bf-146">Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="f48bf-147">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="f48bf-147">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f48bf-148">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-148">The JSON is invalid.</span></span>
          
<span data-ttu-id="f48bf-149">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-149">-or-</span></span>

<span data-ttu-id="f48bf-150"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-150"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f48bf-151">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-151">-or-</span></span>

<span data-ttu-id="f48bf-152">1 つの JSON 値を超えるデータがスパンに残っています。</span><span class="sxs-lookup"><span data-stu-id="f48bf-152">There is remaining data in the span beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f48bf-153">JSON 値の対象の型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-153">The target type of the JSON value.</span></span></typeparam>
        <param name="json"><span data-ttu-id="f48bf-154">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="f48bf-154">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-155">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-155">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="f48bf-156">単一の JSON 値を表すテキストを、ジェネリック型パラメーターで指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="f48bf-156">Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="f48bf-157">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="f48bf-157">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f48bf-158">実装では UTF-8 がネイティブに使用されるため、<xref:System.String> を使用することは、UTF-8 メソッドを使用するほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-158">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f48bf-159"><paramref name="json" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-159"><paramref name="json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f48bf-160">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-160">The JSON is invalid.</span></span>
          
<span data-ttu-id="f48bf-161">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-161">-or-</span></span>

<span data-ttu-id="f48bf-162"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-162"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f48bf-163">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-163">-or-</span></span>

<span data-ttu-id="f48bf-164">1 つの JSON 値を超えるデータが文字列に残っています。</span><span class="sxs-lookup"><span data-stu-id="f48bf-164">There is remaining data in the string beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f48bf-165">JSON 値の対象の型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-165">The target type of the JSON value.</span></span></typeparam>
        <param name="reader"><span data-ttu-id="f48bf-166">JSON の読み取り元のリーダー。</span><span class="sxs-lookup"><span data-stu-id="f48bf-166">The reader to read the JSON from.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-167">読み取り中にシリアライザーの動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-167">Options to control serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="f48bf-168">提供されたリーダーから、ジェネリック型パラメーターで指定された型のインスタンスに、1 つの JSON 値 (オブジェクトまたは配列を含む) を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f48bf-168">Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="f48bf-169">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="f48bf-169">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f48bf-170">`reader` の <xref:System.Text.Json.Utf8JsonReader.TokenType> プロパティが <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> または <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>の場合、リーダーは、値の先頭を特定するために、<xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> の1回の呼び出しによって高度なものになります。</span><span class="sxs-lookup"><span data-stu-id="f48bf-170">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="f48bf-171">このメソッドが完了すると、JSON 値の最後のトークンに `reader` が配置されます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-171">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span> <span data-ttu-id="f48bf-172">例外がスローされた場合、リーダーは、メソッドが呼び出されたときの状態にリセットされます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-172">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="f48bf-173">このメソッドは、リーダーが処理したデータのコピーを作成します。したがって、このメソッドの戻り値を超えてデータの整合性を維持するための呼び出し元の要件はありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-173">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
               
<span data-ttu-id="f48bf-174"><xref:System.Text.Json.Utf8JsonReader> のインスタンスの作成に使用される <xref:System.Text.Json.JsonReaderOptions> は、競合している場合に <xref:System.Text.Json.JsonSerializerOptions> より優先されます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-174">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="f48bf-175">そのため、読み取り中に <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>、<xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>、<xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-175">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f48bf-176">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-176">The JSON is invalid.</span></span>
          
<span data-ttu-id="f48bf-177">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-177">-or-</span></span>

<span data-ttu-id="f48bf-178"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-178"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f48bf-179">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-179">-or-</span></span>

<span data-ttu-id="f48bf-180">リーダーから値を読み取ることができませんでした。</span><span class="sxs-lookup"><span data-stu-id="f48bf-180">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f48bf-181"><paramref name="reader" /> で、サポートされていないオプションが使用されています。</span><span class="sxs-lookup"><span data-stu-id="f48bf-181"><paramref name="reader" /> uses unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="f48bf-182">解析対象の JSON データ。</span><span class="sxs-lookup"><span data-stu-id="f48bf-182">The JSON data to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="f48bf-183">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-183">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-184">読み取り中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-184">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f48bf-185">読み取り操作を取り消すために使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="f48bf-185">A cancellation token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="f48bf-186">単一の JSON 値を表す UTF-8 エンコード テキストを、指定された型のインスタンスに、非同期に読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f48bf-186">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span> <span data-ttu-id="f48bf-187">ストリームは最後まで読み取られます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-187">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="f48bf-188">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="f48bf-188">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f48bf-189"><paramref name="utf8Json" /> または <paramref name="returnType" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-189"><paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f48bf-190">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-190">The JSON is invalid.</span></span>
          
<span data-ttu-id="f48bf-191">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-191">-or-</span></span>

<span data-ttu-id="f48bf-192"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-192"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f48bf-193">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-193">-or-</span></span>

<span data-ttu-id="f48bf-194">ストリームにデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="f48bf-194">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f48bf-195">JSON 値の対象の型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-195">The target type of the JSON value.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="f48bf-196">解析対象の JSON データ。</span><span class="sxs-lookup"><span data-stu-id="f48bf-196">The JSON data to parse.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-197">読み取り中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-197">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f48bf-198">読み取り操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="f48bf-198">A token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="f48bf-199">単一の JSON 値を表す UTF-8 エンコード テキストを、ジェネリック型パラメーターで指定された型のインスタンスに、非同期に読み取ります。</span><span class="sxs-lookup"><span data-stu-id="f48bf-199">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter.</span></span> <span data-ttu-id="f48bf-200">ストリームは最後まで読み取られます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-200">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="f48bf-201">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="f48bf-201">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="f48bf-202">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="f48bf-202">The JSON is invalid.</span></span>
          
<span data-ttu-id="f48bf-203">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-203">-or-</span></span>

<span data-ttu-id="f48bf-204"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-204"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="f48bf-205">- または -</span><span class="sxs-lookup"><span data-stu-id="f48bf-205">-or-</span></span>

<span data-ttu-id="f48bf-206">ストリームにデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="f48bf-206">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f48bf-207">変換する値。</span><span class="sxs-lookup"><span data-stu-id="f48bf-207">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="f48bf-208">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-208">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-209">変換動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-209">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="f48bf-210">指定した型の値を JSON 文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="f48bf-210">Converts the value of a specified type into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="f48bf-211">値の JSON 文字列表現。</span><span class="sxs-lookup"><span data-stu-id="f48bf-211">The JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f48bf-212">実装では内部的に UTF-8 が使用されるため、<xref:System.String> を使用することは、UTF-8 エンコードを使用する場合ほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-212">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="f48bf-213"><xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> および <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)> も参照してください。</span><span class="sxs-lookup"><span data-stu-id="f48bf-213">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="f48bf-214">書き込み先の JSON ライター。</span><span class="sxs-lookup"><span data-stu-id="f48bf-214">The JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="f48bf-215">変換して書き込む値。</span><span class="sxs-lookup"><span data-stu-id="f48bf-215">The value to convert and write.</span></span></param>
        <param name="inputType"><span data-ttu-id="f48bf-216">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-216">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-217">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-217">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="f48bf-218">指定された型の JSON 表現を指定されたライターに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-218">Writes the JSON representation of the specified type to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f48bf-219"><xref:System.Text.Json.Utf8JsonWriter> のインスタンスの作成に使用される <xref:System.Text.Json.JsonWriterOptions> は、競合している場合に <xref:System.Text.Json.JsonSerializerOptions> より優先されます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-219">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="f48bf-220">そのため、書き込み中に <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>、<xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>、<xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-220">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>
               
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f48bf-221">シリアル化する値の型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-221">The type of the value to serialize.</span></span></typeparam>
        <param name="value"><span data-ttu-id="f48bf-222">変換する値。</span><span class="sxs-lookup"><span data-stu-id="f48bf-222">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-223">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-223">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="f48bf-224">ジェネリック型パラメーターで指定された型の値を JSON 文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="f48bf-224">Converts the value of a type specified by a generic type parameter into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="f48bf-225">値の JSON 文字列表現。</span><span class="sxs-lookup"><span data-stu-id="f48bf-225">A JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f48bf-226">実装では内部的に UTF-8 が使用されるため、<xref:System.String> を使用することは、UTF-8 エンコードを使用する場合ほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="f48bf-226">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="f48bf-227"><xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> および <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)> も参照してください。</span><span class="sxs-lookup"><span data-stu-id="f48bf-227">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f48bf-228">シリアル化する値の型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-228">The type of the value to serialize.</span></span></typeparam>
        <param name="writer"><span data-ttu-id="f48bf-229">書き込み先の JSON ライター。</span><span class="sxs-lookup"><span data-stu-id="f48bf-229">A JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="f48bf-230">変換して書き込む値。</span><span class="sxs-lookup"><span data-stu-id="f48bf-230">The value to convert and write.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-231">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-231">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="f48bf-232">ジェネリック型パラメーターで指定された型の JSON 表現を指定されたライターに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-232">Writes the JSON representation of a type specified by a generic type parameter to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="f48bf-233"><xref:System.Text.Json.Utf8JsonWriter> のインスタンスの作成に使用される <xref:System.Text.Json.JsonWriterOptions> は、競合している場合に <xref:System.Text.Json.JsonSerializerOptions> より優先されます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-233">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="f48bf-234">そのため、書き込み中に <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>、<xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>、<xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-234">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>
               
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, inputType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="f48bf-235">書き込み先の UTF-8 ストリーム。</span><span class="sxs-lookup"><span data-stu-id="f48bf-235">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="f48bf-236">変換する値。</span><span class="sxs-lookup"><span data-stu-id="f48bf-236">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="f48bf-237">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-237">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-238">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-238">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f48bf-239">書き込み操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="f48bf-239">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="f48bf-240">指定された型の値を UTF-8 でエンコードされた JSON テキストに非同期に変換し、指定されたストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-240">Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</span></span></summary>
        <returns><span data-ttu-id="f48bf-241">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="f48bf-241">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f48bf-242">シリアル化する値の型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-242">The type of the value to serialize.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="f48bf-243">書き込み先の UTF-8 ストリーム。</span><span class="sxs-lookup"><span data-stu-id="f48bf-243">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="f48bf-244">変換する値。</span><span class="sxs-lookup"><span data-stu-id="f48bf-244">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-245">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-245">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f48bf-246">書き込み操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="f48bf-246">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="f48bf-247">ジェネリック型パラメーターによって指定された型の値を UTF-8 でエンコードされた JSON テキストに非同期に変換し、ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="f48bf-247">Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.</span></span></summary>
        <returns><span data-ttu-id="f48bf-248">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="f48bf-248">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="f48bf-249">変換する値。</span><span class="sxs-lookup"><span data-stu-id="f48bf-249">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="f48bf-250">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-250">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-251">変換動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-251">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="f48bf-252">指定された型の値を、UTF-8 バイトとしてエンコードされた JSON 文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="f48bf-252">Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="f48bf-253">UTF-8 バイト形式でエンコードされた値の JSON 文字列表現。</span><span class="sxs-lookup"><span data-stu-id="f48bf-253">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="f48bf-254">値の型。</span><span class="sxs-lookup"><span data-stu-id="f48bf-254">The type of the value.</span></span></typeparam>
        <param name="value"><span data-ttu-id="f48bf-255">変換する値。</span><span class="sxs-lookup"><span data-stu-id="f48bf-255">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="f48bf-256">変換動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="f48bf-256">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="f48bf-257">ジェネリック型パラメーターで指定された型の値を、UTF-8 バイト形式でエンコードされた JSON 文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="f48bf-257">Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="f48bf-258">UTF-8 バイト形式でエンコードされた値の JSON 文字列表現。</span><span class="sxs-lookup"><span data-stu-id="f48bf-258">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
