<Type Name="JsonSerializer" FullName="System.Text.Json.JsonSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f7d6a48791b662fd63bb83058096e0fdb4244195" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78786199" /></Metadata><TypeSignature Language="C#" Value="public static class JsonSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit JsonSerializer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.JsonSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class JsonSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonSerializer abstract sealed" />
  <TypeSignature Language="F#" Value="type JsonSerializer = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7a714-101">オブジェクトまたは値型を JSON にシリアル化したり、JSON をオブジェクトまたは値型に逆シリアル化したりする機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="7a714-101">Provides functionality to serialize objects or value types to JSON and to deserialize JSON into objects or value types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-102">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-102">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ReadOnlySpan&lt;byte&gt; utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (utf8Json As ReadOnlySpan(Of Byte), returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="7a714-103">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="7a714-103">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="7a714-104">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="7a714-104">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-105">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-105">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="7a714-106">単一の JSON 値を表す UTF-8 エンコード テキストを、指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="7a714-106">Parses the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="7a714-107">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="7a714-107">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-108">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-108">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a714-109"><paramref name="returnType" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a714-109"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7a714-110">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="7a714-110">The JSON is invalid.</span></span>
          
<span data-ttu-id="7a714-111">または</span><span class="sxs-lookup"><span data-stu-id="7a714-111">-or-</span></span>

<span data-ttu-id="7a714-112"><typeparamref name="returnType" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-112"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7a714-113">または</span><span class="sxs-lookup"><span data-stu-id="7a714-113">-or-</span></span>

<span data-ttu-id="7a714-114">1 つの JSON 値を超えるデータがスパンに残っています。</span><span class="sxs-lookup"><span data-stu-id="7a714-114">There is remaining data in the span beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (string json, Type returnType, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(string json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (json As String, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (json, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="json"><span data-ttu-id="7a714-115">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="7a714-115">The JSON text to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="7a714-116">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="7a714-116">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-117">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-117">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="7a714-118">単一の JSON 値を表すテキストを、指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="7a714-118">Parses the text representing a single JSON value into an instance of a specified type.</span></span></summary>
        <returns><span data-ttu-id="7a714-119">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="7a714-119">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-120">実装では UTF-8 がネイティブに使用されるため、<xref:System.String> を使用することは、UTF-8 メソッドを使用するほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-120">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

<span data-ttu-id="7a714-121">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-121">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a714-122"><paramref name="json" /> または <paramref name="returnType" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a714-122"><paramref name="json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7a714-123">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="7a714-123">The JSON is invalid.</span></span>
          
<span data-ttu-id="7a714-124">または</span><span class="sxs-lookup"><span data-stu-id="7a714-124">-or-</span></span>

<span data-ttu-id="7a714-125"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-125"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7a714-126">または</span><span class="sxs-lookup"><span data-stu-id="7a714-126">-or-</span></span>

<span data-ttu-id="7a714-127">1 つの JSON 値を超えるデータが文字列に残っています。</span><span class="sxs-lookup"><span data-stu-id="7a714-127">There is remaining data in the string beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public static object Deserialize (ref System.Text.Json.Utf8JsonReader reader, Type returnType, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Deserialize(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize (ByRef reader As Utf8JsonReader, returnType As Type, Optional options As JsonSerializerOptions = null) As Object" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * Type * System.Text.Json.JsonSerializerOptions -&gt; obj" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, returnType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="7a714-128">JSON の読み取り元のリーダー。</span><span class="sxs-lookup"><span data-stu-id="7a714-128">The reader to read the JSON from.</span></span></param>
        <param name="returnType"><span data-ttu-id="7a714-129">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="7a714-129">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-130">読み取り中にシリアライザーの動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-130">Options to control the serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="7a714-131">提供されたリーダーから 1 つの JSON 値 (オブジェクトまたは配列を含む) を読み取り、それを指定された型のインスタンスに変換します。</span><span class="sxs-lookup"><span data-stu-id="7a714-131">Reads one JSON value (including objects or arrays) from the provided reader and converts it into an instance of  a specified type.</span></span></summary>
        <returns><span data-ttu-id="7a714-132">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="7a714-132">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-133">`reader` の <xref:System.Text.Json.Utf8JsonReader.TokenType> プロパティが <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> または <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>の場合、リーダーは、値の先頭を特定するために、<xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> の1回の呼び出しによって高度なものになります。</span><span class="sxs-lookup"><span data-stu-id="7a714-133">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>

<span data-ttu-id="7a714-134">このメソッドの完了時には、JSON 値の最終トークンに `reader` が配置されます。</span><span class="sxs-lookup"><span data-stu-id="7a714-134">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span>  <span data-ttu-id="7a714-135">例外がスローされた場合、リーダーは、メソッドが呼び出されたときの状態にリセットされます。</span><span class="sxs-lookup"><span data-stu-id="7a714-135">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>

<span data-ttu-id="7a714-136">このメソッドは、リーダーが処理したデータのコピーを作成します。したがって、このメソッドの戻り値を超えてデータの整合性を維持するための呼び出し元の要件はありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-136">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>

<span data-ttu-id="7a714-137"><xref:System.Text.Json.Utf8JsonReader> のインスタンスの作成に使用される <xref:System.Text.Json.JsonReaderOptions> は、競合している場合に <xref:System.Text.Json.JsonSerializerOptions> より優先されます。</span><span class="sxs-lookup"><span data-stu-id="7a714-137">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="7a714-138">そのため、読み取り中に <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>、<xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>、および <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="7a714-138">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>

<span data-ttu-id="7a714-139">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-139">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a714-140"><paramref name="returnType" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a714-140"><paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7a714-141">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="7a714-141">The JSON is invalid.</span></span>
          
<span data-ttu-id="7a714-142">または</span><span class="sxs-lookup"><span data-stu-id="7a714-142">-or-</span></span>

<span data-ttu-id="7a714-143"><typeparamref name="returnType" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-143"><typeparamref name="returnType" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7a714-144">または</span><span class="sxs-lookup"><span data-stu-id="7a714-144">-or-</span></span>

<span data-ttu-id="7a714-145">リーダーから値を読み取ることができませんでした。</span><span class="sxs-lookup"><span data-stu-id="7a714-145">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a714-146"><paramref name="reader" /> で、サポートされていないオプションが使用されています。</span><span class="sxs-lookup"><span data-stu-id="7a714-146"><paramref name="reader" /> is using unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ReadOnlySpan&lt;byte&gt; utf8Json, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (utf8Json As ReadOnlySpan(Of Byte), Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (utf8Json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7a714-147">UTF-8 でエンコードされたテキストの対象の型。</span><span class="sxs-lookup"><span data-stu-id="7a714-147">The target type of the UTF-8 encoded text.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="7a714-148">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="7a714-148">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-149">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-149">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="7a714-150">単一の JSON 値を表す UTF-8 エンコード テキストを、ジェネリック型パラメーターで指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="7a714-150">Parses the UTF-8 encoded text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="7a714-151">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="7a714-151">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-152">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-152">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7a714-153">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="7a714-153">The JSON is invalid.</span></span>
          
<span data-ttu-id="7a714-154">または</span><span class="sxs-lookup"><span data-stu-id="7a714-154">-or-</span></span>

<span data-ttu-id="7a714-155"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-155"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7a714-156">または</span><span class="sxs-lookup"><span data-stu-id="7a714-156">-or-</span></span>

<span data-ttu-id="7a714-157">1 つの JSON 値を超えるデータがスパンに残っています。</span><span class="sxs-lookup"><span data-stu-id="7a714-157">There is remaining data in the span beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (string json, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(string json, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (json As String, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : string * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (json, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="json" Type="System.String" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7a714-158">JSON 値の対象の型。</span><span class="sxs-lookup"><span data-stu-id="7a714-158">The target type of the JSON value.</span></span></typeparam>
        <param name="json"><span data-ttu-id="7a714-159">解析対象の JSON テキスト。</span><span class="sxs-lookup"><span data-stu-id="7a714-159">The JSON text to parse.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-160">解析中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-160">Options to control the behavior during parsing.</span></span></param>
        <summary><span data-ttu-id="7a714-161">単一の JSON 値を表すテキストを、ジェネリック型パラメーターで指定された型のインスタンスに解析します。</span><span class="sxs-lookup"><span data-stu-id="7a714-161">Parses the text representing a single JSON value into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="7a714-162">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="7a714-162">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-163">実装では UTF-8 がネイティブに使用されるため、<xref:System.String> を使用することは、UTF-8 メソッドを使用するほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-163">Using a <xref:System.String> is not as efficient as using the UTF-8 methods since the implementation natively uses UTF-8.</span></span>

<span data-ttu-id="7a714-164">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-164">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a714-165"><paramref name="json" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a714-165"><paramref name="json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7a714-166">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="7a714-166">The JSON is invalid.</span></span>
          
<span data-ttu-id="7a714-167">または</span><span class="sxs-lookup"><span data-stu-id="7a714-167">-or-</span></span>

<span data-ttu-id="7a714-168"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-168"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7a714-169">または</span><span class="sxs-lookup"><span data-stu-id="7a714-169">-or-</span></span>

<span data-ttu-id="7a714-170">1 つの JSON 値を超えるデータが文字列に残っています。</span><span class="sxs-lookup"><span data-stu-id="7a714-170">There is remaining data in the string beyond a single JSON value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Deserialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue Deserialize&lt;TValue&gt; (ref System.Text.Json.Utf8JsonReader reader, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue Deserialize&lt;TValue&gt;(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Deserialize(Of TValue) (ByRef reader As Utf8JsonReader, Optional options As JsonSerializerOptions = null) As TValue" />
      <MemberSignature Language="F#" Value="static member Deserialize : Utf8JsonReader * System.Text.Json.JsonSerializerOptions -&gt; 'Value" Usage="System.Text.Json.JsonSerializer.Deserialize (reader, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7a714-171">JSON 値の対象の型。</span><span class="sxs-lookup"><span data-stu-id="7a714-171">The target type of the JSON value.</span></span></typeparam>
        <param name="reader"><span data-ttu-id="7a714-172">JSON の読み取り元のリーダー。</span><span class="sxs-lookup"><span data-stu-id="7a714-172">The reader to read the JSON from.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-173">読み取り中にシリアライザーの動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-173">Options to control serializer behavior during reading.</span></span></param>
        <summary><span data-ttu-id="7a714-174">提供されたリーダーから、ジェネリック型パラメーターで指定された型のインスタンスに、1 つの JSON 値 (オブジェクトまたは配列を含む) を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="7a714-174">Reads one JSON value (including objects or arrays) from the provided reader into an instance of the type specified by a generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="7a714-175">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="7a714-175">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-176">`reader` の <xref:System.Text.Json.Utf8JsonReader.TokenType> プロパティが <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> または <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>の場合、リーダーは、値の先頭を特定するために、<xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> の1回の呼び出しによって高度なものになります。</span><span class="sxs-lookup"><span data-stu-id="7a714-176">If the <xref:System.Text.Json.Utf8JsonReader.TokenType> property of `reader` is <xref:System.Text.Json.JsonTokenType.PropertyName?displayProperty=nameWithType> or <xref:System.Text.Json.JsonTokenType.None?displayProperty=nameWithType>, the reader will be advanced by one call to <xref:System.Text.Json.Utf8JsonReader.Read?displayProperty=nameWithType> to determine the start of the value.</span></span>
               
<span data-ttu-id="7a714-177">このメソッドの完了時には、JSON 値の最終トークンに `reader` が配置されます。</span><span class="sxs-lookup"><span data-stu-id="7a714-177">Upon completion of this method, `reader` will be positioned at the final token in the JSON value.</span></span> <span data-ttu-id="7a714-178">例外がスローされた場合、リーダーは、メソッドが呼び出されたときの状態にリセットされます。</span><span class="sxs-lookup"><span data-stu-id="7a714-178">If an exception is thrown, the reader is reset to the state it was in when the method was called.</span></span>
               
<span data-ttu-id="7a714-179">このメソッドは、リーダーが処理したデータのコピーを作成します。したがって、このメソッドの戻り値を超えてデータの整合性を維持するための呼び出し元の要件はありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-179">This method makes a copy of the data the reader acted on, so there is no caller requirement to maintain data integrity beyond the return of this method.</span></span>
               
<span data-ttu-id="7a714-180"><xref:System.Text.Json.Utf8JsonReader> のインスタンスの作成に使用される <xref:System.Text.Json.JsonReaderOptions> は、競合している場合に <xref:System.Text.Json.JsonSerializerOptions> より優先されます。</span><span class="sxs-lookup"><span data-stu-id="7a714-180">The <xref:System.Text.Json.JsonReaderOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonReader> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="7a714-181">そのため、読み取り中に <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>、<xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>、および <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> が使用されます。</span><span class="sxs-lookup"><span data-stu-id="7a714-181">Hence, <xref:System.Text.Json.JsonReaderOptions.AllowTrailingCommas?displayProperty=nameWithType>, <xref:System.Text.Json.JsonReaderOptions.MaxDepth?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonReaderOptions.CommentHandling?displayProperty=nameWithType> are used while reading.</span></span>

<span data-ttu-id="7a714-182">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-182">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>
               
          ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7a714-183">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="7a714-183">The JSON is invalid.</span></span>
          
<span data-ttu-id="7a714-184">または</span><span class="sxs-lookup"><span data-stu-id="7a714-184">-or-</span></span>

<span data-ttu-id="7a714-185"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-185"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7a714-186">または</span><span class="sxs-lookup"><span data-stu-id="7a714-186">-or-</span></span>

<span data-ttu-id="7a714-187">リーダーから値を読み取ることができませんでした。</span><span class="sxs-lookup"><span data-stu-id="7a714-187">A value could not be read from the reader.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="7a714-188"><paramref name="reader" /> で、サポートされていないオプションが使用されています。</span><span class="sxs-lookup"><span data-stu-id="7a714-188"><paramref name="reader" /> uses unsupported options.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;object&gt; DeserializeAsync (System.IO.Stream utf8Json, Type returnType, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;object&gt; DeserializeAsync(class System.IO.Stream utf8Json, class System.Type returnType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeserializeAsync (utf8Json As Stream, returnType As Type, Optional options As JsonSerializerOptions = null, Optional cancellationToken As CancellationToken = null) As ValueTask(Of Object)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;obj&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, returnType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="7a714-189">解析対象の JSON データ。</span><span class="sxs-lookup"><span data-stu-id="7a714-189">The JSON data to parse.</span></span></param>
        <param name="returnType"><span data-ttu-id="7a714-190">変換元または変換先のオブジェクトの型。</span><span class="sxs-lookup"><span data-stu-id="7a714-190">The type of the object to convert to and return.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-191">読み取り中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-191">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a714-192">読み取り操作を取り消すために使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="7a714-192">A cancellation token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="7a714-193">単一の JSON 値を表す UTF-8 エンコード テキストを、指定された型のインスタンスに、非同期に読み取ります。</span><span class="sxs-lookup"><span data-stu-id="7a714-193">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a specified type.</span></span> <span data-ttu-id="7a714-194">ストリームは最後まで読み取られます。</span><span class="sxs-lookup"><span data-stu-id="7a714-194">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="7a714-195">JSON 値の <paramref name="returnType" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="7a714-195">A <paramref name="returnType" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-196">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-196">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a714-197"><paramref name="utf8Json" /> または <paramref name="returnType" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a714-197"><paramref name="utf8Json" /> or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7a714-198">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="7a714-198">The JSON is invalid.</span></span>
          
<span data-ttu-id="7a714-199">または</span><span class="sxs-lookup"><span data-stu-id="7a714-199">-or-</span></span>

<span data-ttu-id="7a714-200"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-200"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7a714-201">または</span><span class="sxs-lookup"><span data-stu-id="7a714-201">-or-</span></span>

<span data-ttu-id="7a714-202">ストリームにデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="7a714-202">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DeserializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ValueTask&lt;TValue&gt; DeserializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ValueTask`1&lt;!!TValue&gt; DeserializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DeserializeAsync(Of TValue) (utf8Json As Stream, Optional options As JsonSerializerOptions = null, Optional cancellationToken As CancellationToken = null) As ValueTask(Of TValue)" />
      <MemberSignature Language="F#" Value="static member DeserializeAsync : System.IO.Stream * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;'Value&gt;" Usage="System.Text.Json.JsonSerializer.DeserializeAsync (utf8Json, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7a714-203">JSON 値の対象の型。</span><span class="sxs-lookup"><span data-stu-id="7a714-203">The target type of the JSON value.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="7a714-204">解析対象の JSON データ。</span><span class="sxs-lookup"><span data-stu-id="7a714-204">The JSON data to parse.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-205">読み取り中の動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-205">Options to control the behavior during reading.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a714-206">読み取り操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="7a714-206">A token that may be used to cancel the read operation.</span></span></param>
        <summary><span data-ttu-id="7a714-207">単一の JSON 値を表す UTF-8 エンコード テキストを、ジェネリック型パラメーターで指定された型のインスタンスに、非同期に読み取ります。</span><span class="sxs-lookup"><span data-stu-id="7a714-207">Asynchronously reads the UTF-8 encoded text representing a single JSON value into an instance of a type specified by a generic type parameter.</span></span> <span data-ttu-id="7a714-208">ストリームは最後まで読み取られます。</span><span class="sxs-lookup"><span data-stu-id="7a714-208">The stream will be read to completion.</span></span></summary>
        <returns><span data-ttu-id="7a714-209">JSON 値の <typeparamref name="TValue" /> 表現。</span><span class="sxs-lookup"><span data-stu-id="7a714-209">A <typeparamref name="TValue" /> representation of the JSON value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-210">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-210">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Text.Json.JsonException"><span data-ttu-id="7a714-211">JSON が無効です。</span><span class="sxs-lookup"><span data-stu-id="7a714-211">The JSON is invalid.</span></span>
          
<span data-ttu-id="7a714-212">または</span><span class="sxs-lookup"><span data-stu-id="7a714-212">-or-</span></span>

<span data-ttu-id="7a714-213"><typeparamref name="TValue" /> は JSON と互換性がありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-213"><typeparamref name="TValue" /> is not compatible with the JSON.</span></span>

<span data-ttu-id="7a714-214">または</span><span class="sxs-lookup"><span data-stu-id="7a714-214">-or-</span></span>

<span data-ttu-id="7a714-215">ストリームにデータが残っています。</span><span class="sxs-lookup"><span data-stu-id="7a714-215">There is remaining data in the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static string Serialize (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7a714-216">変換する値。</span><span class="sxs-lookup"><span data-stu-id="7a714-216">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="7a714-217">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="7a714-217">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-218">変換動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-218">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="7a714-219">指定した型の値を JSON 文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="7a714-219">Converts the value of a specified type into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="7a714-220">値の JSON 文字列表現。</span><span class="sxs-lookup"><span data-stu-id="7a714-220">The JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-221">実装では、内部的に UTF-8 を使用しているため、<xref:System.String> を使用することは、UTF-8 エンコードを使用するほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-221">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="7a714-222">「<xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)>」および「<xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>」も参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-222">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

<span data-ttu-id="7a714-223">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-223">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public static void Serialize (System.Text.Json.Utf8JsonWriter writer, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize(class System.Text.Json.Utf8JsonWriter writer, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize (writer As Utf8JsonWriter, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * obj * Type * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="7a714-224">書き込み先の JSON ライター。</span><span class="sxs-lookup"><span data-stu-id="7a714-224">The JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="7a714-225">変換して書き込む値。</span><span class="sxs-lookup"><span data-stu-id="7a714-225">The value to convert and write.</span></span></param>
        <param name="inputType"><span data-ttu-id="7a714-226">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="7a714-226">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-227">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-227">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="7a714-228">指定された型の JSON 表現を指定されたライターに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="7a714-228">Writes the JSON representation of the specified type to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-229"><xref:System.Text.Json.Utf8JsonWriter> のインスタンスの作成に使用される <xref:System.Text.Json.JsonWriterOptions> は、競合している場合に <xref:System.Text.Json.JsonSerializerOptions> より優先されます。</span><span class="sxs-lookup"><span data-stu-id="7a714-229">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="7a714-230">そのため、<xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>、<xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>、および <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> は書き込み中に使用されます。</span><span class="sxs-lookup"><span data-stu-id="7a714-230">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>

<span data-ttu-id="7a714-231">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-231">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a714-232"><paramref name="writer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a714-232"><paramref name="writer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static string Serialize&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Serialize&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Serialize(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As String" />
      <MemberSignature Language="F#" Value="static member Serialize : 'Value * System.Text.Json.JsonSerializerOptions -&gt; string" Usage="System.Text.Json.JsonSerializer.Serialize (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7a714-233">シリアル化する値の型。</span><span class="sxs-lookup"><span data-stu-id="7a714-233">The type of the value to serialize.</span></span></typeparam>
        <param name="value"><span data-ttu-id="7a714-234">変換する値。</span><span class="sxs-lookup"><span data-stu-id="7a714-234">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-235">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-235">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="7a714-236">ジェネリック型パラメーターで指定された型の値を JSON 文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="7a714-236">Converts the value of a type specified by a generic type parameter into a JSON string.</span></span></summary>
        <returns><span data-ttu-id="7a714-237">値の JSON 文字列表現。</span><span class="sxs-lookup"><span data-stu-id="7a714-237">A JSON string representation of the value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-238">実装では、内部的に UTF-8 を使用しているため、<xref:System.String> を使用することは、UTF-8 エンコードを使用するほど効率的ではありません。</span><span class="sxs-lookup"><span data-stu-id="7a714-238">Using a <xref:System.String> is not as efficient as using UTF-8 encoding since the implementation internally uses UTF-8.</span></span> <span data-ttu-id="7a714-239">「<xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)>」および「<xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>」も参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-239">See also <xref:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)> and <xref:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)>.</span></span>

<span data-ttu-id="7a714-240">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-240">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Serialize&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static void Serialize&lt;TValue&gt; (System.Text.Json.Utf8JsonWriter writer, TValue value, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Serialize&lt;TValue&gt;(class System.Text.Json.Utf8JsonWriter writer, !!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Serialize(Of TValue) (writer As Utf8JsonWriter, value As TValue, Optional options As JsonSerializerOptions = null)" />
      <MemberSignature Language="F#" Value="static member Serialize : System.Text.Json.Utf8JsonWriter * 'Value * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="System.Text.Json.JsonSerializer.Serialize (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7a714-241">シリアル化する値の型。</span><span class="sxs-lookup"><span data-stu-id="7a714-241">The type of the value to serialize.</span></span></typeparam>
        <param name="writer"><span data-ttu-id="7a714-242">書き込み先の JSON ライター。</span><span class="sxs-lookup"><span data-stu-id="7a714-242">A JSON writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="7a714-243">変換して書き込む値。</span><span class="sxs-lookup"><span data-stu-id="7a714-243">The value to convert and write.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-244">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-244">Options to control serialization behavior.</span></span></param>
        <summary><span data-ttu-id="7a714-245">ジェネリック型パラメーターで指定された型の JSON 表現を指定されたライターに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="7a714-245">Writes the JSON representation of a type specified by a generic type parameter to the provided writer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-246"><xref:System.Text.Json.Utf8JsonWriter> のインスタンスの作成に使用される <xref:System.Text.Json.JsonWriterOptions> は、競合している場合に <xref:System.Text.Json.JsonSerializerOptions> より優先されます。</span><span class="sxs-lookup"><span data-stu-id="7a714-246">The <xref:System.Text.Json.JsonWriterOptions> used to create the instance of the <xref:System.Text.Json.Utf8JsonWriter> take precedence over the <xref:System.Text.Json.JsonSerializerOptions> when they conflict.</span></span> <span data-ttu-id="7a714-247">そのため、<xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>、<xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>、および <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> は書き込み中に使用されます。</span><span class="sxs-lookup"><span data-stu-id="7a714-247">Hence, <xref:System.Text.Json.JsonWriterOptions.Indented?displayProperty=nameWithType>, <xref:System.Text.Json.JsonWriterOptions.SkipValidation?displayProperty=nameWithType>, and <xref:System.Text.Json.JsonWriterOptions.Encoder?displayProperty=nameWithType> are used while writing.</span></span>

<span data-ttu-id="7a714-248">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-248">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a714-249"><paramref name="writer" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a714-249"><paramref name="writer" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync (System.IO.Stream utf8Json, object value, Type inputType, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync(class System.IO.Stream utf8Json, object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeAsync (utf8Json As Stream, value As Object, inputType As Type, Optional options As JsonSerializerOptions = null, Optional cancellationToken As CancellationToken = null) As Task" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * obj * Type * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, inputType, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="7a714-250">書き込み先の UTF-8 ストリーム。</span><span class="sxs-lookup"><span data-stu-id="7a714-250">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="7a714-251">変換する値。</span><span class="sxs-lookup"><span data-stu-id="7a714-251">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="7a714-252">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="7a714-252">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-253">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-253">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a714-254">書き込み操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="7a714-254">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="7a714-255">指定された型の値を UTF-8 でエンコードされた JSON テキストに非同期に変換し、指定されたストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="7a714-255">Asynchronously converts the value of a specified type to UTF-8 encoded JSON text and writes it to the specified stream.</span></span></summary>
        <returns><span data-ttu-id="7a714-256">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="7a714-256">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-257">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-257">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a714-258"><paramref name="utf8Json" /> または <paramref name="inputType" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a714-258"><paramref name="utf8Json" /> or <paramref name="inputType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SerializeAsync&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt; (System.IO.Stream utf8Json, TValue value, System.Text.Json.JsonSerializerOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SerializeAsync&lt;TValue&gt;(class System.IO.Stream utf8Json, !!TValue value, class System.Text.Json.JsonSerializerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeAsync(Of TValue) (utf8Json As Stream, value As TValue, Optional options As JsonSerializerOptions = null, Optional cancellationToken As CancellationToken = null) As Task" />
      <MemberSignature Language="F#" Value="static member SerializeAsync : System.IO.Stream * 'Value * System.Text.Json.JsonSerializerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Text.Json.JsonSerializer.SerializeAsync (utf8Json, value, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7a714-259">シリアル化する値の型。</span><span class="sxs-lookup"><span data-stu-id="7a714-259">The type of the value to serialize.</span></span></typeparam>
        <param name="utf8Json"><span data-ttu-id="7a714-260">書き込み先の UTF-8 ストリーム。</span><span class="sxs-lookup"><span data-stu-id="7a714-260">The UTF-8 stream to write to.</span></span></param>
        <param name="value"><span data-ttu-id="7a714-261">変換する値。</span><span class="sxs-lookup"><span data-stu-id="7a714-261">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-262">シリアル化動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-262">Options to control serialization behavior.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="7a714-263">書き込み操作を取り消すために使用できるトークン。</span><span class="sxs-lookup"><span data-stu-id="7a714-263">A token that may be used to cancel the write operation.</span></span></param>
        <summary><span data-ttu-id="7a714-264">ジェネリック型パラメーターによって指定された型の値を UTF-8 でエンコードされた JSON テキストに非同期に変換し、ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="7a714-264">Asynchronously converts a value of a type specified by a generic type parameter to UTF-8 encoded JSON text and writes it to a stream.</span></span></summary>
        <returns><span data-ttu-id="7a714-265">非同期の書き込み操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="7a714-265">A task that represents the asynchronous write operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-266">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-266">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7a714-267"><paramref name="utf8Json" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="7a714-267"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes (object value, Type inputType, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes(object value, class System.Type inputType, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes (value As Object, inputType As Type, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : obj * Type * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, inputType, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="inputType" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="7a714-268">変換する値。</span><span class="sxs-lookup"><span data-stu-id="7a714-268">The value to convert.</span></span></param>
        <param name="inputType"><span data-ttu-id="7a714-269">変換対象の <paramref name="value" /> の型。</span><span class="sxs-lookup"><span data-stu-id="7a714-269">The type of the <paramref name="value" /> to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-270">変換動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-270">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="7a714-271">指定された型の値を、UTF-8 バイトとしてエンコードされた JSON 文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="7a714-271">Converts a value of the specified type into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="7a714-272">UTF-8 バイト形式でエンコードされた値の JSON 文字列表現。</span><span class="sxs-lookup"><span data-stu-id="7a714-272">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-273">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-273">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializeToUtf8Bytes&lt;TValue&gt;">
      <MemberSignature Language="C#" Value="public static byte[] SerializeToUtf8Bytes&lt;TValue&gt; (TValue value, System.Text.Json.JsonSerializerOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] SerializeToUtf8Bytes&lt;TValue&gt;(!!TValue value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SerializeToUtf8Bytes(Of TValue) (value As TValue, Optional options As JsonSerializerOptions = null) As Byte()" />
      <MemberSignature Language="F#" Value="static member SerializeToUtf8Bytes : 'Value * System.Text.Json.JsonSerializerOptions -&gt; byte[]" Usage="System.Text.Json.JsonSerializer.SerializeToUtf8Bytes (value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TValue"><span data-ttu-id="7a714-274">値の種類。</span><span class="sxs-lookup"><span data-stu-id="7a714-274">The type of the value.</span></span></typeparam>
        <param name="value"><span data-ttu-id="7a714-275">変換する値。</span><span class="sxs-lookup"><span data-stu-id="7a714-275">The value to convert.</span></span></param>
        <param name="options"><span data-ttu-id="7a714-276">変換動作を制御するオプション。</span><span class="sxs-lookup"><span data-stu-id="7a714-276">Options to control the conversion behavior.</span></span></param>
        <summary><span data-ttu-id="7a714-277">ジェネリック型パラメーターで指定された型の値を、UTF-8 バイト形式でエンコードされた JSON 文字列に変換します。</span><span class="sxs-lookup"><span data-stu-id="7a714-277">Converts the value of a type specified by a generic type parameter into a JSON string, encoded as UTF-8 bytes.</span></span></summary>
        <returns><span data-ttu-id="7a714-278">UTF-8 バイト形式でエンコードされた値の JSON 文字列表現。</span><span class="sxs-lookup"><span data-stu-id="7a714-278">A JSON string representation of the value, encoded as UTF-8 bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="7a714-279">詳細については、「 [JSON をシリアル化および逆シリアル化する方法](~/docs/standard/serialization/system-text-json-how-to.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7a714-279">For more information, see [How to serialize and deserialize JSON](~/docs/standard/serialization/system-text-json-how-to.md).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
