<Type Name="Utf8JsonWriter" FullName="System.Text.Json.Utf8JsonWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d0289f40fe104361daf9e25a0bd3e7e2a913bae5" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73381109" /></Metadata><TypeSignature Language="C#" Value="public sealed class Utf8JsonWriter : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Utf8JsonWriter extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Utf8JsonWriter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Utf8JsonWriter&#xA;Implements IAsyncDisposable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Utf8JsonWriter sealed : IAsyncDisposable, IDisposable" />
  <TypeSignature Language="F#" Value="type Utf8JsonWriter = class&#xA;    interface IAsyncDisposable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netcore-3.0">System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="8b1ba-101">UTF-8 でエンコードされた JSON テキストの前方参照、非キャッシュの書き込みのために、高パフォーマンスの API を提供します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-101">Provides a high-performance API for forward-only, non-cached writing of UTF-8 encoded JSON text.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-102">`Utf8JsonWriter` は、キャッシュなしでテキストをシーケンシャルに書き込みます。また、コメントの書き込みを除き、既定では[JSON RFC](https://tools.ietf.org/html/rfc8259)に準拠します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-102">`Utf8JsonWriter` writes the text sequentially with no caching and by default adheres to the [JSON RFC](https://tools.ietf.org/html/rfc8259), with the exception of writing comments.</span></span>

<span data-ttu-id="8b1ba-103">検証が有効になっているときに無効な JSON を書き込もうとするメソッドは、コンテキスト固有のエラーメッセージを含む <xref:System.InvalidOperationException> をスローします。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-103">A method that attempts to write invalid JSON when validation is enabled throws an <xref:System.InvalidOperationException> with a context-specific error message.</span></span>

<span data-ttu-id="8b1ba-104">インデントと空白で出力の書式を設定したり、検証をスキップしたり、エスケープ動作をカスタマイズしたりするには、<xref:System.Text.Json.JsonWriterOptions> のインスタンスを作成し、それをライターに渡します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-104">To be able to format the output with indentation and white space, to skip validation, OR to customize the escaping behavior, create an instance of <xref:System.Text.Json.JsonWriterOptions> and pass it in to the writer.</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (bufferWriter As IBufferWriter(Of Byte), Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.Buffers.IBufferWriter&lt;byte&gt; * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (bufferWriter, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="8b1ba-105">JSON テキストの書き込み先。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-105">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="8b1ba-106"><see cref="T:System.Text.Json.Utf8JsonWriter" /> のカスタマイズされた動作を定義します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-106">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span> <span data-ttu-id="8b1ba-107">既定では、(余分な空白を含まない) 最小限の JSON が書き込まれ、記述されている JSON が JSON RFC に従って構造的に有効であることが検証されます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-107">By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="8b1ba-108">出力の書き込み先に指定された <see cref="T:System.Text.Json.Utf8JsonWriter" /> とカスタマイズ オプションを使用して、<see cref="T:System.Buffers.IBufferWriter`1" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-108">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class using the specified <see cref="T:System.Buffers.IBufferWriter`1" /> to write the output to and customization options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-109"><paramref name="bufferWriter" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-109"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Utf8JsonWriter (System.IO.Stream utf8Json, System.Text.Json.JsonWriterOptions options = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream utf8Json, valuetype System.Text.Json.JsonWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (utf8Json As Stream, Optional options As JsonWriterOptions = null)" />
      <MemberSignature Language="F#" Value="new System.Text.Json.Utf8JsonWriter : System.IO.Stream * System.Text.Json.JsonWriterOptions -&gt; System.Text.Json.Utf8JsonWriter" Usage="new System.Text.Json.Utf8JsonWriter (utf8Json, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Text.Json.JsonWriterOptions" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="8b1ba-110">JSON テキストの書き込み先。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-110">The destination for writing JSON text.</span></span></param>
        <param name="options"><span data-ttu-id="8b1ba-111"><see cref="T:System.Text.Json.Utf8JsonWriter" /> のカスタマイズされた動作を定義します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-111">Defines the customized behavior of the <see cref="T:System.Text.Json.Utf8JsonWriter" />.</span></span> <span data-ttu-id="8b1ba-112">既定では、(余分な空白を含まない) 最小限の JSON が書き込まれ、記述されている JSON が JSON RFC に従って構造的に有効であることが検証されます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-112">By default, it writes minimized JSON (with no extra white space) and validates that the JSON being written is structurally valid according to the JSON RFC.</span></span></param>
        <summary><span data-ttu-id="8b1ba-113">出力の書き込み先に指定されたストリームとカスタマイズ オプションを使用して、<see cref="T:System.Text.Json.Utf8JsonWriter" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-113">Initializes a new instance of the <see cref="T:System.Text.Json.Utf8JsonWriter" /> class using the specified stream to write the output to and customization options.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-114"><paramref name="utf8Json" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-114"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BytesCommitted">
      <MemberSignature Language="C#" Value="public long BytesCommitted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 BytesCommitted" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesCommitted As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long BytesCommitted { long get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesCommitted : int64" Usage="System.Text.Json.Utf8JsonWriter.BytesCommitted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b1ba-115">現在のインスタンスによってこれまで出力にコミットされた合計バイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-115">Gets the total number of bytes committed to the output by the current instance so far.</span></span></summary>
        <value><span data-ttu-id="8b1ba-116">これまでに <see cref="T:System.Text.Json.Utf8JsonWriter" /> によって出力にコミットされたバイトの合計数。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-116">The total number of bytes committed to the output by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far.</span></span></value>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-117"><xref:System.Buffers.IBufferWriter%601>の場合、このプロパティは IBufferWriter がどの程度進んでいるかを示します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-117">In the case of an <xref:System.Buffers.IBufferWriter%601>, this property indicates how much the IBufferWriter has advanced.</span></span>

<span data-ttu-id="8b1ba-118"><xref:System.IO.Stream>の場合、このプロパティはストリームに書き込まれたデータの量を示します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-118">In the case of a <xref:System.IO.Stream>, this property indicates how much data has been written to the stream.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPending">
      <MemberSignature Language="C#" Value="public int BytesPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPending" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesPending As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesPending { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesPending : int" Usage="System.Text.Json.Utf8JsonWriter.BytesPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b1ba-119">これまでに <see cref="T:System.Text.Json.Utf8JsonWriter" /> によって書き込まれたバイト数のうち、まだ出力にフラッシュされてコミットされていないバイト数を取得します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-119">Gets the number of bytes written by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> so far that have not yet been flushed to the output and committed.</span></span></summary>
        <value><span data-ttu-id="8b1ba-120">出力にフラッシュされずにコミットされていない <see cref="T:System.Text.Json.Utf8JsonWriter" /> によってこれまでに書き込まれたバイト数。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-120">The number of bytes written so far by the <see cref="T:System.Text.Json.Utf8JsonWriter" /> that have not yet been flushed to the output and committed.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Text.Json.Utf8JsonWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b1ba-121">現在のトークンの深さを取得します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-121">Gets the depth of the current token.</span></span></summary>
        <value><span data-ttu-id="8b1ba-122">現在のトークンの深さ。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-122">The depth of the current token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-123">`CurrentDepth` プロパティは、これまでに記述された JSON テキスト内の入れ子になったオブジェクト/配列の再帰的な深さを追跡します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-123">The `CurrentDepth` property tracks the recursive depth of the nested objects / arrays within the JSON text written so far.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="utf8JsonWriter.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b1ba-124">まだフラッシュされていない残りの JSON テキストがあればそれをコミットし、現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-124">Commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-125">IBufferWriter の場合は、これまでに記述された内容に基づいて、基になる <xref:System.Buffers.IBufferWriter`1> が進められます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-125">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="8b1ba-126">ストリームの場合、これによってデータがストリームに書き込まれ、フラッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-126">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="8b1ba-127">破棄後に <xref:System.Text.Json.Utf8JsonWriter> インスタンスを再利用することはできません。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-127">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="utf8JsonWriter.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b1ba-128">まだフラッシュされていない残りの JSON テキストがあればそれを非同期的にコミットし、現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-128">Asynchronously commits any leftover JSON text that has not yet been flushed and releases all resources used by the current instance.</span></span></summary>
        <returns><span data-ttu-id="8b1ba-129">非同期の破棄操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-129">A task representing the asynchronous dispose operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-130">IBufferWriter の場合は、これまでに記述された内容に基づいて、基になる <xref:System.Buffers.IBufferWriter`1> が進められます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-130">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>
          
<span data-ttu-id="8b1ba-131">ストリームの場合、これによってデータがストリームに書き込まれ、フラッシュされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-131">In the case of Stream, this writes the data to the stream and flushes it.</span></span>

<span data-ttu-id="8b1ba-132">破棄後に <xref:System.Text.Json.Utf8JsonWriter> インスタンスを再利用することはできません。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-132">The <xref:System.Text.Json.Utf8JsonWriter> instance cannot be reused after disposing.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="utf8JsonWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b1ba-133">これまでに書き込まれた JSON テキストをコミットします。これにより出力先で表示できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-133">Commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-134">IBufferWriter の場合は、これまでに記述された内容に基づいて、基になる <xref:System.Buffers.IBufferWriter`1> が進められます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-134">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="8b1ba-135"><xref:System.IO.Stream>の場合は、ストリームにデータを書き込み、フラッシュします。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-135">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8b1ba-136">このインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-136">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="utf8JsonWriter.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="8b1ba-137">キャンセル要求を監視するためのトークン。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-137">The token to monitor for cancellation requests.</span></span> <span data-ttu-id="8b1ba-138">既定値は <see cref="T:System.Threading.CancellationToken.None" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-138">The default value is <see cref="T:System.Threading.CancellationToken.None" />.</span></span></param>
        <summary><span data-ttu-id="8b1ba-139">これまでに書き込まれた JSON テキストを非同期的にコミットします。これにより出力先で表示できるようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-139">Asynchronously commits the JSON text written so far, which makes it visible to the output destination.</span></span></summary>
        <returns><span data-ttu-id="8b1ba-140">非同期のフラッシュ操作を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-140">A task representing the asynchronous flush operation.</span></span></returns>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-141">IBufferWriter の場合は、これまでに記述された内容に基づいて、基になる <xref:System.Buffers.IBufferWriter`1> が進められます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-141">In the case of IBufferWriter, this advances the underlying <xref:System.Buffers.IBufferWriter`1> based on what has been written so far.</span></span>

<span data-ttu-id="8b1ba-142"><xref:System.IO.Stream>の場合は、キャンセル要求を監視しながら、データをストリームに書き込み、非同期的にフラッシュします。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-142">In the case of <xref:System.IO.Stream>, this writes the data to the stream and flushes it asynchronously, while monitoring cancellation requests.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8b1ba-143">このインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-143">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.Json.JsonWriterOptions Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.Json.JsonWriterOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Utf8JsonWriter.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As JsonWriterOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Json::JsonWriterOptions Options { System::Text::Json::JsonWriterOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.Json.JsonWriterOptions" Usage="System.Text.Json.Utf8JsonWriter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.JsonWriterOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8b1ba-144">このインスタンスを使用して JSON を書き込む際のカスタム動作を取得します。これによって、書き込み中に出力をフォーマットするかどうか、JSON の構造検証をスキップするかどうか、およびエスケープする文字が示されます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-144">Gets the custom behavior when writing JSON using this instance, which indicates whether to format the output while writing, whether to skip structural JSON validation, and which characters to escape.</span></span></summary>
        <value><span data-ttu-id="8b1ba-145">書式設定、検証、およびエスケープを行うライターのこのインスタンスのカスタム動作。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-145">The custom behavior of this instance of the writer for formatting, validating, and escaping.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="utf8JsonWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b1ba-146">このインスタンスの内部状態をリセットして、それを再利用できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-146">Resets the internal state of this instance so that it can be reused.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-147"><xref:System.Text.Json.Utf8JsonWriter> は、元のライターオプションと元の出力 (<xref:System.Buffers.IBufferWriter`1> または <xref:System.IO.Stream>) をコピー先として使用し続けます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-147">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options and the original output (either <xref:System.Buffers.IBufferWriter`1> or <xref:System.IO.Stream>) as the destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8b1ba-148">このインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-148">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.Buffers.IBufferWriter&lt;byte&gt; bufferWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.Buffers.IBufferWriter`1&lt;unsigned int8&gt; bufferWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (bufferWriter As IBufferWriter(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::Buffers::IBufferWriter&lt;System::Byte&gt; ^ bufferWriter);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.Buffers.IBufferWriter&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.Reset bufferWriter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferWriter" Type="System.Buffers.IBufferWriter&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bufferWriter"><span data-ttu-id="8b1ba-149">JSON テキストの書き込み先。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-149">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="8b1ba-150">このインスタンスの内部状態をリセットして、<see cref="T:System.Buffers.IBufferWriter`1" /> の新しいインスタンスで再利用できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-150">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.Buffers.IBufferWriter`1" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-151"><xref:System.Text.Json.Utf8JsonWriter> は引き続き元のライターオプションを使用しますが、ここでは新しい変換先として `bufferWriter` に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-151">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `bufferWriter` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-152"><paramref name="bufferWriter" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-152"><paramref name="bufferWriter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8b1ba-153">このインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-153">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset (System.IO.Stream utf8Json);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset(class System.IO.Stream utf8Json) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset (utf8Json As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset(System::IO::Stream ^ utf8Json);" />
      <MemberSignature Language="F#" Value="member this.Reset : System.IO.Stream -&gt; unit" Usage="utf8JsonWriter.Reset utf8Json" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Json" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="utf8Json"><span data-ttu-id="8b1ba-154">JSON テキストの書き込み先。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-154">The destination for writing JSON text.</span></span></param>
        <summary><span data-ttu-id="8b1ba-155">このインスタンスの内部状態をリセットして、<see cref="T:System.IO.Stream" /> の新しいインスタンスで再利用できるようにします。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-155">Resets the internal state of this instance so that it can be reused with a new instance of <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-156"><xref:System.Text.Json.Utf8JsonWriter> は引き続き元のライターオプションを使用しますが、ここでは新しい変換先として `utf8Json` に書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-156">The <xref:System.Text.Json.Utf8JsonWriter> will continue to use the original writer options but now writes to `utf8Json` as the new destination.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-157"><paramref name="utf8Json" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-157"><paramref name="utf8Json" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="8b1ba-158">このインスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-158">This instance has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (utf8PropertyName As ReadOnlySpan(Of Byte), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (utf8PropertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-159">書き込むプロパティの UTF-8 でエンコードされた名前。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-159">The UTF-8 encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="8b1ba-160">Base64 でエンコードされたテキストとして書き込むバイナリ データ。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-160">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="8b1ba-161">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-161">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-162">Base64 として書き込むバイナリデータの最大許容サイズは1億2500万バイト (または約 125 MB) です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-162">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="8b1ba-163">この制限を超えると <xref:System.ArgumentException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-163">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="8b1ba-164">プロパティ名はエスケープされ、書き込む前にバイトがエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-164">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-165">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-165">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-166">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-166">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As ReadOnlySpan(Of Char), bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-167">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-167">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="8b1ba-168">Base64 でエンコードされたテキストとして書き込むバイナリ データ。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-168">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="8b1ba-169">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-169">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-170">Base64 として書き込むバイナリデータの最大許容サイズは1億2500万バイト (または約 125 MB) です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-170">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="8b1ba-171">この制限を超えると <xref:System.ArgumentException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-171">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="8b1ba-172">プロパティ名はエスケープされ、書き込む前にバイトがエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-172">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-173">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-173">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-174">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-174">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (string propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As String, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-175">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-175">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="bytes"><span data-ttu-id="8b1ba-176">Base64 でエンコードされたテキストとして書き込むバイナリ データ。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-176">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="8b1ba-177">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-177">Writes the property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-178">Base64 として書き込むバイナリデータの最大許容サイズは1億2500万バイト (または約 125 MB) です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-178">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="8b1ba-179">この制限を超えると <xref:System.ArgumentException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-179">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="8b1ba-180">プロパティ名はエスケープされ、書き込む前にバイトがエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-180">The property name is escaped and the bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-181">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-181">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-182">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-182">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-183"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-183">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64String">
      <MemberSignature Language="C#" Value="public void WriteBase64String (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64String(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64String (propertyName As JsonEncodedText, bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64String(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64String : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64String (propertyName, bytes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-184">書き込むプロパティの JSON でエンコードされた名前。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-184">The JSON-encoded name of the property to write.</span></span></param>
        <param name="bytes"><span data-ttu-id="8b1ba-185">Base64 でエンコードされたテキストとして書き込むバイナリ データ。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-185">The binary data to write as Base64 encoded text.</span></span></param>
        <summary><span data-ttu-id="8b1ba-186">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-186">Writes the pre-encoded property name and raw bytes value (as a Base64 encoded JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-187">Base64 として書き込むバイナリデータの最大許容サイズは1億2500万バイト (または約 125 MB) です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-187">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="8b1ba-188">この制限を超えると <xref:System.ArgumentException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-188">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="8b1ba-189">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-189">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="8b1ba-190">書き込みの前にバイトがエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-190">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-191">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-191">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-192">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-192">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64StringValue">
      <MemberSignature Language="C#" Value="public void WriteBase64StringValue (ReadOnlySpan&lt;byte&gt; bytes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBase64StringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; bytes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBase64StringValue (bytes As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBase64StringValue(ReadOnlySpan&lt;System::Byte&gt; bytes);" />
      <MemberSignature Language="F#" Value="member this.WriteBase64StringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteBase64StringValue bytes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="bytes"><span data-ttu-id="8b1ba-193">JSON 配列の Base64 でエンコードされた JSON 文字列要素として書き込まれるバイナリ データ。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-193">The binary data to be written as a Base64 encoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-194">JSON 配列の要素として、Base64 でエンコードされた JSON 文字列として生バイト値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-194">Writes the raw bytes value as a Base64 encoded JSON string as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-195">Base64 として書き込むバイナリデータの最大許容サイズは1億2500万バイト (または約 125 MB) です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-195">The maximum allowed size of the binary data to write as Base64 is 125,000,000 bytes (or approximately 125 MB).</span></span> <span data-ttu-id="8b1ba-196">この制限を超えると <xref:System.ArgumentException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-196">Exceeding this limit results in an <xref:System.ArgumentException> being thrown.</span></span>

<span data-ttu-id="8b1ba-197">書き込みの前にバイトがエンコードされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-197">The bytes are encoded before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-198">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-198">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-199">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-199">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (utf8PropertyName As ReadOnlySpan(Of Byte), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;byte&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-200">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-200">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-201">名前/値ペアの一部として、JSON リテラル <b>true</b> または <b>false</b> として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-201">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-202">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Boolean" /> 値 (JSON リテラルの <b>true</b> または <b>false</b> として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-202">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-203">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-203">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-204">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-204">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-205">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-205">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As ReadOnlySpan(Of Char), value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(ReadOnlySpan&lt;char&gt; propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : ReadOnlySpan&lt;char&gt; * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-206">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-206">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-207">名前/値ペアの一部として、JSON リテラル <b>true</b> または <b>false</b> として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-207">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-208">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Boolean" /> 値 (JSON リテラルの <b>true</b> または <b>false</b> として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-208">Writes a property name specified as a read-only character span and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-209">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-209">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-210">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-210">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-211">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-211">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (string propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(string propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As String, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::String ^ propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : string * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-212">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-212">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-213">名前/値ペアの一部として、JSON リテラル <b>true</b> または <b>false</b> として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-213">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-214">文字列として指定されたプロパティ名と、<see cref="T:System.Boolean" /> 値 (JSON リテラルの <b>true</b> または <b>false</b> として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-214">Writes a property name specified as a string and a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-215">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-215">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-216">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-216">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-217">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-217">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-218"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-218">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (System.Text.Json.JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(valuetype System.Text.Json.JsonEncodedText propertyName, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (propertyName As JsonEncodedText, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(System::Text::Json::JsonEncodedText propertyName, bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : System.Text.Json.JsonEncodedText * bool -&gt; unit" Usage="utf8JsonWriter.WriteBoolean (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-219">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-219">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-220">名前/値ペアの一部として、JSON リテラル <b>true</b> または <b>false</b> として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-220">The value to be written as a JSON literal <b>true</b> or <b>false</b> as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-221">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Boolean" /> 値 (JSON リテラル <b>true</b> または <b>false</b>) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-221">Writes the pre-encoded property name and <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-222">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-222">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-223">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-223">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBooleanValue">
      <MemberSignature Language="C#" Value="public void WriteBooleanValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBooleanValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBooleanValue (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBooleanValue(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBooleanValue : bool -&gt; unit" Usage="utf8JsonWriter.WriteBooleanValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-224">JSON 配列の一部として、JSON リテラル <b>true</b> または <b>false</b> として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-224">The value to be written as a JSON literal <b>true</b> or <b>false</b> as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-225">JSON 配列の要素として、<see cref="T:System.Boolean" /> 値 (JSON リテラル <b>true</b> または <b>false</b> として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-225">Writes a <see cref="T:System.Boolean" /> value (as a JSON literal <b>true</b> or <b>false</b>) as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-226">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-226">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="8b1ba-227">`/*..*/` 内に JSON コメントとして書き込まれる、UTF-8 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-227">The UTF-8 encoded value to be written as a JSON comment within `/*..*/`.</span></span></param>
        <summary><span data-ttu-id="8b1ba-228">UTF-8 テキスト値を JSON コメントとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-228">Writes a UTF-8 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-229">コメント値は、書き込みの前にエスケープされません。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-229">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-230">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-230">The specified value is too large.</span></span>
        
<span data-ttu-id="8b1ba-231">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-231">-or-</span></span>

<span data-ttu-id="8b1ba-232"><paramref name="utf8Value" /> にコメント区切り記号 (つまり `*/`) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-232"><paramref name="utf8Value" /> contains a comment delimiter (that is, `*/`).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-233">`/*..*/` 内に UTF-8 でトランスコードされた JSON コメントとして書き込まれる、UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-233">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within `/*..*/`.</span></span></param>
        <summary><span data-ttu-id="8b1ba-234">UTF-16 テキスト値を JSON コメントとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-234">Writes a UTF-16 text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-235">コメント値は、書き込みの前にエスケープされません。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-235">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-236">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-236">The specified value is too large.</span></span>
        
<span data-ttu-id="8b1ba-237">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-237">-or-</span></span>

<span data-ttu-id="8b1ba-238"><paramref name="value" /> にコメント区切り記号 (つまり `*/`) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-238"><paramref name="value" /> contains a comment delimiter (that is, `*/`).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentValue">
      <MemberSignature Language="C#" Value="public void WriteCommentValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCommentValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCommentValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCommentValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteCommentValue : string -&gt; unit" Usage="utf8JsonWriter.WriteCommentValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-239">`/*..*/` 内に UTF-8 でトランスコードされた JSON コメントとして書き込まれる、UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-239">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON comment within `/*..*/`.</span></span></param>
        <summary><span data-ttu-id="8b1ba-240">文字列テキスト値を JSON コメントとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-240">Writes a string text value as a JSON comment.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-241">コメント値は、書き込みの前にエスケープされません。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-241">The comment value is not escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-242">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-242">The specified value is too large.</span></span>
        
<span data-ttu-id="8b1ba-243">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-243">-or-</span></span>

<span data-ttu-id="8b1ba-244"><paramref name="value" /> にコメント区切り記号 (つまり `*/`) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-244"><paramref name="value" /> contains a comment delimiter (that is, `*/`).</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-245"><paramref name="value" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-245">The <paramref name="value" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b1ba-246">JSON 配列の終了を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-246">Writes the end of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-247">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-247">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndObject();" />
      <MemberSignature Language="F#" Value="member this.WriteEndObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b1ba-248">JSON オブジェクトの終了を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-248">Writes the end of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-249">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-249">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-250">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-250">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="8b1ba-251">バイト型の読み取り専用スパンとして指定されたプロパティ名と、JSON リテラルの <b>null</b> を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-251">Writes a property name specified as a read-only span of bytes and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-252">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-252">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-253">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-253">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-254">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-254">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-255">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-255">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="8b1ba-256">読み取り専用の文字範囲として指定されたプロパティ名と、JSON リテラルの <b>null</b> を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-256">Writes a property name specified as a read-only character span and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-257">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-257">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-258">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-258">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-259">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-259">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : string -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-260">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-260">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="8b1ba-261">文字列として指定されたプロパティ名と、JSON リテラルの <b>null</b> を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-261">Writes a property name specified as a string and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-262">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-262">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-263">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-263">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-264">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-264">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-265"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-265">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteNull : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteNull propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-266">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-266">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="8b1ba-267">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と JSON リテラル <b>null</b> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-267">Writes the pre-encoded property name and the JSON literal <b>null</b> as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-268">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-268">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-269">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-269">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNullValue">
      <MemberSignature Language="C#" Value="public void WriteNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNullValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNullValue();" />
      <MemberSignature Language="F#" Value="member this.WriteNullValue : unit -&gt; unit" Usage="utf8JsonWriter.WriteNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b1ba-270">JSON 配列の要素として、JSON リテラル <b>null</b> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-270">Writes the JSON literal <b>null</b> as an element of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-271">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-271">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-272">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-272">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-273">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-273">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-274">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-274">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[ 

## Remarks

<span data-ttu-id="8b1ba-275">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Decimal> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-275">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="8b1ba-276">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-276">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-277">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-277">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-278">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-278">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-279">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-279">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-280">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-280">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-281">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Double" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-281">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-282">.NET Core 3.0 以降のバージョンで、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Double> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-282">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="8b1ba-283">は、他のすべてのフレームワークで ' G17 ' を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-283">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="8b1ba-284">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-284">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-285">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-285">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-286">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-286">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-287">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-287">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-288">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-288">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-289">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Int32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-289">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-290">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Int32> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-290">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-291">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-291">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-292">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-292">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-293">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-293">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-294">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-294">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-295">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-295">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-296">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Int64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-296">Writes a property name specified as a read-only span of bytes and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-297">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Int64> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-297">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-298">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-298">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-299">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-299">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-300">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-300">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-301">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-301">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-302">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-302">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-303">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Single" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-303">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-304">.NET Core 3.0 以降のバージョンで、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Single> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-304">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="8b1ba-305">は、他のすべてのフレームワークで ' G9 ' を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-305">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="8b1ba-306">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-306">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-307">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-307">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-308">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-308">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-309">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-309">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-310">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-310">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-311">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-311">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-312">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.UInt32> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-312">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-313">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-313">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-314">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-314">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-315">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-315">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (utf8PropertyName As ReadOnlySpan(Of Byte), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;byte&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-316">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-316">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-317">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-317">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-318">バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-318">Writes a property name specified as a read-only span of bytes and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-319">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.UInt64> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-319">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-320">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-320">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-321">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-321">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-322">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-322">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-323">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-323">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-324">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-324">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-325">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-325">Writes a property name specified as a read-only character span and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-326">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Decimal> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-326">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="8b1ba-327">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-327">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-328">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-328">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-329">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-329">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-330">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-330">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-331">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-331">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-332">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Double" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-332">Writes a property name specified as a read-only character span and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-333">.NET Core 3.0 以降のバージョンで、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Double> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-333">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="8b1ba-334">は、他のすべてのフレームワークで ' G17 ' を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-334">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="8b1ba-335">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-335">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-336">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-336">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-337">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-337">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-338">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-338">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-339">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-339">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-340">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Int32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-340">Writes a property name specified as a read-only character span and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-341">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Int32> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-341">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-342">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-342">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-343">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-343">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-344">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-344">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-345">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-345">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-346">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-346">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-347">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Int64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-347">Writes a property name specified as a read-only character span and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-348">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Int64> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-348">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-349">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-349">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-350">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-350">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-351">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-351">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-352">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-352">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-353">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-353">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-354">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Single" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-354">Writes a property name specified as a read-only character span and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-355">.NET Core 3.0 以降のバージョンで、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Single> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-355">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="8b1ba-356">は、他のすべてのフレームワークで ' G9 ' を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-356">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="8b1ba-357">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-357">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-358">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-358">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-359">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-359">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-360">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-360">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-361">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-361">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-362">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-362">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-363">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.UInt32> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-363">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-364">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-364">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-365">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-365">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-366">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-366">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (ReadOnlySpan&lt;char&gt; propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As ReadOnlySpan(Of Char), value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(ReadOnlySpan&lt;char&gt; propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : ReadOnlySpan&lt;char&gt; * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-367">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-367">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-368">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-368">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-369">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-369">Writes a property name specified as a read-only character span and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-370">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.UInt64> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-370">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-371">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-371">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-372">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-372">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-373">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-373">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-374">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-374">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-375">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-375">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-376">文字列として指定されたプロパティ名と、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-376">Writes a property name specified as a string and a <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-377">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Decimal> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-377">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="8b1ba-378">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-378">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-379">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-379">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-380">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-380">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-381"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-381">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-382">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-382">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-383">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-383">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-384">文字列として指定されたプロパティ名と、<see cref="T:System.Double" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-384">Writes a property name specified as a string and a <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-385">.NET Core 3.0 以降のバージョンで、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Double> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-385">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="8b1ba-386">は、他のすべてのフレームワークで ' G17 ' を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-386">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="8b1ba-387">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-387">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-388">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-388">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-389">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-389">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-390"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-390">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-391">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-391">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-392">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-392">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-393">文字列として指定されたプロパティ名と、<see cref="T:System.Int32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-393">Writes a property name specified as a string and an <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-394">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Int32> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-394">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-395">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-395">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-396">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-396">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-397">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-397">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-398"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-398">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-399">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-399">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-400">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-400">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-401">文字列として指定されたプロパティ名と、<see cref="T:System.Int64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-401">Writes a property name specified as a string and an <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-402">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Int64> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-402">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-403">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-403">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-404">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-404">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-405">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-405">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-406"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-406">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-407">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-407">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-408">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-408">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-409">文字列として指定されたプロパティ名と、<see cref="T:System.Single" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-409">Writes a property name specified as a string and a <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-410">.NET Core 3.0 以降のバージョンで、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Single> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-410">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="8b1ba-411">は、他のすべてのフレームワークで ' G9 ' を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-411">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="8b1ba-412">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-412">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-413">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-413">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-414">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-414">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-415"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-415">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-416">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-416">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-417">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-417">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-418">文字列として指定されたプロパティ名と、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-418">Writes a property name specified as a string and a <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-419">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.UInt32> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-419">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-420">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-420">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-421">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-421">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-422">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-422">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-423"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-423">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (string propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(string propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As String, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::String ^ propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : string * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-424">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-424">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-425">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-425">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-426">文字列として指定されたプロパティ名と、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-426">Writes a property name specified as a string and a <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-427">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.UInt64> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-427">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-428">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-428">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-429">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-429">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-430">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-430">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-431"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-431">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-432">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-432">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-433">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-433">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-434">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Decimal" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-434">Writes the pre-encoded property name and <see cref="T:System.Decimal" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-435">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Decimal> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-435">Writes the <xref:System.Decimal> using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

<span data-ttu-id="8b1ba-436">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-436">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-437">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-437">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * double -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-438">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-438">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-439">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-439">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-440">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Double" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-440">Writes the pre-encoded property name and <see cref="T:System.Double" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-441">.NET Core 3.0 以降のバージョンで、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Double> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-441">Writes the <xref:System.Double> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="8b1ba-442">は、他のすべてのフレームワークで ' G17 ' を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-442">Uses 'G17' on any other framework.</span></span>

<span data-ttu-id="8b1ba-443">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-443">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-444">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-444">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-445">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-445">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-446">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-446">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-447">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Int32" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-447">Writes the pre-encoded property name and <see cref="T:System.Int32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-448">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Int32> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-448">Writes the <xref:System.Int32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-449">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-449">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-450">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-450">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-451">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-451">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-452">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-452">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-453">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Int64" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-453">Writes the pre-encoded property name and <see cref="T:System.Int64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-454">既定の <xref:System.Buffers.StandardFormat> (' G ') を使用して <xref:System.Int64> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-454">Writes the <xref:System.Int64> using the default <xref:System.Buffers.StandardFormat> (this is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-455">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-455">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-456">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-456">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * single -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-457">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-457">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-458">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-458">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-459">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Single" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-459">Writes the pre-encoded property name and <see cref="T:System.Single" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-460">.NET Core 3.0 以降のバージョンで、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Single> を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-460">Writes the <xref:System.Single> using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="8b1ba-461">は、他のすべてのフレームワークで ' G9 ' を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-461">Uses 'G9' on any other framework.</span></span>

<span data-ttu-id="8b1ba-462">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-462">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-463">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-463">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-464">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-464">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-465">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-465">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-466">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.UInt32" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-466">Writes the pre-encoded property name and <see cref="T:System.UInt32" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-467">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.UInt32> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-467">Writes the <xref:System.UInt32> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-468">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-468">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-469">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-469">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumber">
      <MemberSignature Language="C#" Value="public void WriteNumber (System.Text.Json.JsonEncodedText propertyName, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumber(valuetype System.Text.Json.JsonEncodedText propertyName, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumber (propertyName As JsonEncodedText, value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumber(System::Text::Json::JsonEncodedText propertyName, System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumber : System.Text.Json.JsonEncodedText * uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumber (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-470">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-470">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-471">名前/値ペアの一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-471">The value to be written as a JSON number as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-472">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.UInt64" /> 値 (JSON 番号) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-472">Writes the pre-encoded property name and <see cref="T:System.UInt64" /> value (as a JSON number) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-473">既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.UInt64> を書き込みます。たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-473">Writes the <xref:System.UInt64> using the default <xref:System.Buffers.StandardFormat> (that is, 'G'); for example, 32767.</span></span>

<span data-ttu-id="8b1ba-474">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-474">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-475">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-475">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : decimal -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-476">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-476">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-477">JSON 配列の要素として、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-477">Writes a <see cref="T:System.Decimal" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-478">このメソッドは、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Decimal> 値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-478">This method writes the <xref:System.Decimal> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-479">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-479">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : double -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-480">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-480">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-481">JSON 配列の要素として、<see cref="T:System.Double" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-481">Writes a <see cref="T:System.Double" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-482">このメソッドは、.NET Core 3.0 以降のバージョンで既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Double> 値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-482">This method writes the <xref:System.Double> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="8b1ba-483">は、他のすべてのフレームワークで ' G17 ' を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-483">Uses 'G17' on any other framework.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-484">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-484">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-485">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-485">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-486">JSON 配列の要素として、<see cref="T:System.Int32" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-486">Writes an <see cref="T:System.Int32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-487">このメソッドは、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Int32> 値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-487">This method writes the <xref:System.Int32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="8b1ba-488">たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-488">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-489">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-489">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : int64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-490">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-490">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-491">JSON 配列の要素として、<see cref="T:System.Int64" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-491">Writes an <see cref="T:System.Int64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-492">このメソッドは、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Int64> 値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-492">This method writes the <xref:System.Int64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="8b1ba-493">たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-493">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-494">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-494">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : single -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-495">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-495">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-496">JSON 配列の要素として、<see cref="T:System.Single" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-496">Writes a <see cref="T:System.Single" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-497">このメソッドは、.NET Core 3.0 以降のバージョンで既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.Single> 値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-497">This method writes the <xref:System.Single> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G') on .NET Core 3.0 or later versions.</span></span> <span data-ttu-id="8b1ba-498">は、他のすべてのフレームワークで ' G9 ' を使用します。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-498">Uses 'G9' on any other framework.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-499">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-499">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint32 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-500">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-500">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-501">JSON 配列の要素として、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-501">Writes a <see cref="T:System.UInt32" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-502">このメソッドは、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.UInt32> 値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-502">This method writes the <xref:System.UInt32> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="8b1ba-503">たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-503">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-504">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-504">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNumberValue">
      <MemberSignature Language="C#" Value="public void WriteNumberValue (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNumberValue(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNumberValue (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNumberValue(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteNumberValue : uint64 -&gt; unit" Usage="utf8JsonWriter.WriteNumberValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-505">JSON 配列の一部として、JSON 数値として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-505">The value to be written as a JSON number as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-506">JSON 配列の要素として、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-506">Writes a <see cref="T:System.UInt64" /> value (as a JSON number) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-507">このメソッドは、既定の <xref:System.Buffers.StandardFormat> ("G") を使用して <xref:System.UInt64> 値を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-507">This method writes the <xref:System.UInt64> value using the default <xref:System.Buffers.StandardFormat> (that is, 'G').</span></span> <span data-ttu-id="8b1ba-508">たとえば、32767のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-508">For example, 32767.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-509">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-509">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-510">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-510">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="8b1ba-511">JSON オブジェクトの名前/値ペアの最初の部分として、UTF-8 プロパティ名 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-511">Writes the UTF-8 property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-512">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-512">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-513">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-513">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-514">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-514">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-515">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-515">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="8b1ba-516">JSON オブジェクトの名前/値ペアの最初の部分として、プロパティ名 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-516">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-517">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-517">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-518">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-518">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-519">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-519">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : string -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-520">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-520">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="8b1ba-521">JSON オブジェクトの名前/値ペアの最初の部分として、プロパティ名 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-521">Writes the property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-522">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-522">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-523">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-523">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-524">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-524">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-525"><paramref name="propertyName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-525"><paramref name="propertyName" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WritePropertyName">
      <MemberSignature Language="C#" Value="public void WritePropertyName (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WritePropertyName(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WritePropertyName (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WritePropertyName(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WritePropertyName : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WritePropertyName propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-526">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-526">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="8b1ba-527">JSON オブジェクトの名前/値ペアの最初の部分として、事前にエンコードされたプロパティ名 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-527">Writes the pre-encoded property name (as a JSON string) as the first part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-528">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-528">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-529">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-529">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray();" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b1ba-530">JSON 配列の先頭を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-530">Writes the beginning of a JSON array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-531">JSON の深度が、最大深度 1,000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-531">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="8b1ba-532">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-532">-or-</span></span>

<span data-ttu-id="8b1ba-533">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-533">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-534">書き込み対象の JSON 配列の UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-534">The UTF-8 encoded property name of the JSON array to be written.</span></span></param>
        <summary><span data-ttu-id="8b1ba-535">バイト型の読み取り専用スパンとして指定されたプロパティ名を含む JSON 配列の先頭をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-535">Writes the beginning of a JSON array with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-536">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-536">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-537">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-537">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-538">JSON の深度が、最大深度 1,000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-538">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="8b1ba-539">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-539">-or-</span></span>
       
<span data-ttu-id="8b1ba-540">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-540">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-541">UTF-8 としてトランスコードおよび書き込み対象の JSON 配列の UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-541">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="8b1ba-542">読み取り専用の文字範囲として指定されたプロパティ名を含む JSON 配列の先頭をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-542">Writes the beginning of a JSON array with a property name specified as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-543">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-543">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-544">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-544">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-545">JSON の深度が、最大深度 1,000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-545">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="8b1ba-546">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-546">-or-</span></span>
       
<span data-ttu-id="8b1ba-547">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-547">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : string -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-548">UTF-8 としてトランスコードおよび書き込み対象の JSON 配列の UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-548">The UTF-16 encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="8b1ba-549">文字列として指定されたプロパティ名を含む JSON 配列の先頭をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-549">Writes the beginning of a JSON array with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-550">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-550">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-551">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-551">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-552">JSON の深度が、最大深度 1,000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-552">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="8b1ba-553">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-553">-or-</span></span>
       
<span data-ttu-id="8b1ba-554">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-554">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-555"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-555">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartArray propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-556">UTF-8 としてトランスコードおよび書き込み対象の JSON 配列の JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-556">The JSON encoded property name of the JSON array to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="8b1ba-557">JSON 配列の先頭を、事前にエンコードされたプロパティ名をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-557">Writes the beginning of a JSON array with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-558">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-558">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-559">JSON の深度が、最大深度 1,000 を超えています。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-559">The depth of the JSON has exceeded the maximum depth of 1,000.</span></span>
    
<span data-ttu-id="8b1ba-560">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-560">-or-</span></span>

<span data-ttu-id="8b1ba-561">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-561">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject();" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : unit -&gt; unit" Usage="utf8JsonWriter.WriteStartObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8b1ba-562">JSON オブジェクトの先頭を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-562">Writes the beginning of a JSON object.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-563">JSON の深度が、最大深度 1,000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-563">The depth of the JSON exceeds the maximum depth of 1,000.</span></span>

<span data-ttu-id="8b1ba-564">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-564">-or-</span></span>

<span data-ttu-id="8b1ba-565">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-565">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;byte&gt; utf8PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (utf8PropertyName As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject utf8PropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-566">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-566">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <summary><span data-ttu-id="8b1ba-567">バイト型の読み取り専用スパンとして指定されたプロパティ名を含む JSON オブジェクトの先頭をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-567">Writes the beginning of a JSON object with a property name specified as a read-only span of bytes as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-568">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-568">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-569">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-569">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-570">JSON の深度が、最大深度 1,000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-570">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="8b1ba-571">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-571">-or-</span></span>
       
<span data-ttu-id="8b1ba-572">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-572">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(ReadOnlySpan&lt;char&gt; propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-573">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-573">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="8b1ba-574">読み取り専用の文字範囲として指定されたプロパティ名を含む JSON オブジェクトの先頭をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-574">Writes the beginning of a JSON object with a property name specififed as a read-only character span as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-575">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-575">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-576">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-576">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-577">JSON の深度が、最大深度 1,000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-577">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="8b1ba-578">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-578">-or-</span></span>
       
<span data-ttu-id="8b1ba-579">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-579">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : string -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-580">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-580">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="8b1ba-581">文字列として指定されたプロパティ名を含む JSON オブジェクトの先頭をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-581">Writes the beginning of a JSON object with a property name specified as a string as the key.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-582">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-582">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-583">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-583">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-584">JSON の深度が、最大深度 1,000 を超えました。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-584">The depth of the JSON exceeds the maximum depth of 1,000.</span></span> 

<span data-ttu-id="8b1ba-585">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-585">-or-</span></span>
       
<span data-ttu-id="8b1ba-586">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-586">Validation is enabled, and this write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-587"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-587">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public void WriteStartObject (System.Text.Json.JsonEncodedText propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartObject(valuetype System.Text.Json.JsonEncodedText propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartObject (propertyName As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartObject(System::Text::Json::JsonEncodedText propertyName);" />
      <MemberSignature Language="F#" Value="member this.WriteStartObject : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStartObject propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-588">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-588">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <summary><span data-ttu-id="8b1ba-589">JSON オブジェクトの先頭を、事前にエンコードされたプロパティ名をキーとして書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-589">Writes the beginning of a JSON object with a pre-encoded property name as the key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-590">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-590">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-591">JSON の深度が、最大深度 1,000 を超えています。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-591">The depth of the JSON has exceeded the maximum depth of 1,000.</span></span>
          
<span data-ttu-id="8b1ba-592">- または -</span><span class="sxs-lookup"><span data-stu-id="8b1ba-592">-or-</span></span>

<span data-ttu-id="8b1ba-593">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-593">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-594">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-594">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-595">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-595">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-596">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と <see cref="T:System.DateTime" /> 値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-596">Writes a UTF-8 property name and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-597">ISO 8601-1 拡張形式を使用して <xref:System.DateTime> を書き込みます (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。たとえば、2017-06-12T05:30: 45.7680000 のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-597">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="8b1ba-598">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-598">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-599">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-599">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-600">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-600">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-601">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-601">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-602">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-602">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-603">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と <see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-603">Writes a UTF-8 property name and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-604">ISO 8601-1 拡張形式を使用して <xref:System.DateTimeOffset> を書き込みます (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。たとえば、2017-06-12T05:30: 45.7680000-07:00 のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-604">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="8b1ba-605">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-605">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-606">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-606">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-607">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-607">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-608">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-608">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-609">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-609">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-610">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と <see cref="T:System.Guid" /> 値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-610">Writes a UTF-8 property name and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-611">既定の <xref:System.Buffers.StandardFormat> ("d") を使用して、<xref:System.Guid> を nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn の形式で書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-611">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="8b1ba-612">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-612">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-613">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-613">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-614">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-614">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-615">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-615">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="8b1ba-616">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-616">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-617">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と UTF-8 テキスト値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-617">Writes a UTF-8 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-618">プロパティの名前と値は、書き込む前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-618">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-619">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-619">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-620">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-620">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-621">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-621">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-622">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-622">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-623">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と UTF-16 テキスト値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-623">Writes a UTF-8 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-624">プロパティの名前と値は、書き込む前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-624">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-625">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-625">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-626">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-626">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-627">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-627">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-628">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-628">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-629">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と文字列テキスト値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-629">Writes a UTF-8 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-630">プロパティの名前と値は、書き込む前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-630">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="8b1ba-631">`value` が `null`場合、<xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})> メソッドが呼び出されたかのように、JSON **null**値が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-631">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-632">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-632">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-633">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-633">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;byte&gt; utf8PropertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8PropertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (utf8PropertyName As ReadOnlySpan(Of Byte), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;System::Byte&gt; utf8PropertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;byte&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (utf8PropertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8PropertyName" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="utf8PropertyName"><span data-ttu-id="8b1ba-634">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-634">The UTF-8 encoded property name of the JSON object to be written.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-635">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-635">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-636">JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-636">Writes the UTF-8 property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-637">この値は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-637">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="8b1ba-638">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-638">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-639">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-639">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-640">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-640">Validation is enabled, and this method would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-641">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-641">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-642">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-642">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-643">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.DateTime" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-643">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-644">ISO 8601-1 拡張形式を使用して <xref:System.DateTime> を書き込みます (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。たとえば、2017-06-12T05:30: 45.7680000 のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-644">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="8b1ba-645">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-645">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-646">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-646">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-647">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-647">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-648">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-648">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-649">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-649">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-650">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-650">Writes a property name specified as a read-only character span and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-651">ISO 8601-1 拡張形式を使用して <xref:System.DateTimeOffset> を書き込みます (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。たとえば、2017-06-12T05:30: 45.7680000-07:00 のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-651">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="8b1ba-652">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-652">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-653">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-653">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-654">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-654">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-655">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-655">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-656">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-656">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-657">読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Guid" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-657">Writes a property name specified as a read-only character span and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-658">既定の <xref:System.Buffers.StandardFormat> ("d") を使用して、<xref:System.Guid> を nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn の形式で書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-658">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="8b1ba-659">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-659">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-660">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-660">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-661">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-661">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-662">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-662">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="8b1ba-663">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-663">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-664">JSON オブジェクトの名前/値ペアの一部として、UTF-16 プロパティ名と UTF-8 テキスト値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-664">Writes a UTF-16 property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-665">プロパティの名前と値は、書き込む前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-665">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-666">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-666">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-667">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-667">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-668">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-668">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-669">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-669">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-670">JSON オブジェクトの名前/値ペアの一部として、UTF-16 プロパティ名と UTF-16 テキスト値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-670">Writes a UTF-16 property name and UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-671">プロパティの名前と値は、書き込む前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-671">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-672">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-672">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-673">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-673">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-674">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-674">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-675">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-675">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-676">JSON オブジェクトの名前/値ペアの一部として、UTF-16 プロパティ名と文字列テキスト値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-676">Writes a UTF-16 property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-677">プロパティの名前と値は、書き込む前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-677">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="8b1ba-678">`value` が `null`場合、<xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})> メソッドが呼び出されたかのように、JSON **null**値が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-678">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-679">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-679">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-680">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-680">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (ReadOnlySpan&lt;char&gt; propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.ReadOnlySpan`1&lt;char&gt; propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As ReadOnlySpan(Of Char), value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(ReadOnlySpan&lt;char&gt; propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : ReadOnlySpan&lt;char&gt; * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-681">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-681">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-682">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-682">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-683">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-683">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-684">この値は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-684">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="8b1ba-685">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-685">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-686">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-686">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-687">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-687">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-688">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-688">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-689">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-689">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-690">文字列として指定されたプロパティ名と、<see cref="T:System.DateTime" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-690">Writes a property name specified as a string and a <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-691">ISO 8601-1 拡張形式を使用して <xref:System.DateTime> を書き込みます (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。たとえば、2017-06-12T05:30: 45.7680000 のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-691">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="8b1ba-692">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-692">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-693">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-693">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-694">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-694">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-695"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-695">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-696">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-696">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-697">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-697">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-698">文字列として指定されたプロパティ名と、<see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-698">Writes a property name specified as a string and a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-699">ISO 8601-1 拡張形式を使用して <xref:System.DateTimeOffset> を書き込みます (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。たとえば、2017-06-12T05:30: 45.7680000-07:00 のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-699">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="8b1ba-700">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-700">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-701">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-701">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-702">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-702">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-703"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-703">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-704">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-704">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-705">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-705">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-706">文字列として指定されたプロパティ名と、<see cref="T:System.Guid" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-706">Writes a property name specified as a string and a <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-707">既定の <xref:System.Buffers.StandardFormat> ("d") を使用して、<xref:System.Guid> を nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn の形式で書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-707">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span> <span data-ttu-id="8b1ba-708">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-708">The property name is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-709">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-709">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-710">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-710">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-711"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-711">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-712">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-712">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="8b1ba-713">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-713">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-714">文字列として指定されたプロパティ名と、UTF-8 テキスト値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-714">Writes a property name specified as a string and a UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-715">プロパティの名前と値は、書き込む前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-715">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-716">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-716">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-717">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-717">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-718"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-718">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-719">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-719">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-720">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-720">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-721">文字列として指定されたプロパティ名と、UTF-16 テキスト値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-721">Writes a property name specified as a string and a UTF-16 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-722">プロパティの名前と値は、書き込む前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-722">The property name and value are escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-723">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-723">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-724">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-724">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-725"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-725">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-726">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-726">The UTF-16 encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-727">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-727">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-728">文字列として指定されたプロパティ名と、文字列テキスト値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-728">Writes a property name specified as a string and a string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-729">プロパティの名前と値は、書き込む前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-729">The property name and value are escaped before writing.</span></span>

<span data-ttu-id="8b1ba-730">`value` が `null`場合、<xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)> メソッドが呼び出されたかのように、JSON **null**値が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-730">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-731">指定されたプロパティ名または値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-731">The specified property name or value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-732">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-732">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-733"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-733">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (string propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(string propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As String, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::String ^ propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : string * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-734">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-734">The property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-735">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-735">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-736">JSON オブジェクトの名前/値ペアの一部として、プロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-736">Writes the property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-737">この値は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-737">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="8b1ba-738">書き込みの前にプロパティ名がエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-738">The property name is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-739">指定されたプロパティ名が長すぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-739">The specified property name is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-740">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-740">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="8b1ba-741"><paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-741">The <paramref name="propertyName" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTime -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-742">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-742">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-743">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-743">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-744">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.DateTime" /> 値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-744">Writes the pre-encoded property name and <see cref="T:System.DateTime" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-745">ISO 8601-1 拡張形式を使用して <xref:System.DateTime> を書き込みます (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。たとえば、2017-06-12T05:30: 45.7680000 のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-745">Writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

<span data-ttu-id="8b1ba-746">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-746">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-747">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-747">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-748">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-748">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-749">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-749">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-750">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-750">Writes the pre-encoded property name and <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-751">ISO 8601-1 拡張形式を使用して <xref:System.DateTimeOffset> を書き込みます (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。たとえば、2017-06-12T05:30: 45.7680000-07:00 のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-751">Writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

<span data-ttu-id="8b1ba-752">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-752">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-753">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-753">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * Guid -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-754">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-754">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-755">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-755">The value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-756">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Guid" /> 値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-756">Writes the pre-encoded property name and <see cref="T:System.Guid" /> value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-757">既定の <xref:System.Buffers.StandardFormat> ("d") を使用して、<xref:System.Guid> を nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn の形式で書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-757">Writes the <xref:System.Guid> using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), in the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

<span data-ttu-id="8b1ba-758">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-758">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-759">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-759">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, utf8Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-760">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-760">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="utf8Value"><span data-ttu-id="8b1ba-761">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-761">The UTF-8 encoded value to be written as a JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-762">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と UTF-8 テキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-762">Writes the pre-encoded property name and UTF-8 text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-763">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-763">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="8b1ba-764">値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-764">The value is escaped before writing.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-765">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-765">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-766">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-766">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-767">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-767">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-768">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-768">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-769">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名とテキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-769">Writes the pre-encoded property name and text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-770">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-770">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="8b1ba-771">値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-771">The value is escaped before writing.</span></span>

<span data-ttu-id="8b1ba-772">`value` が `null`場合、<xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> メソッドが呼び出されたかのように、JSON **null**値が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-772">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> method was called.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-773">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-773">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-774">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-774">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * string -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-775">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-775">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-776">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-776">The value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-777">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と文字列テキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-777">Writes the pre-encoded property name and string text value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-778">プロパティ名は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-778">The property name should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

<span data-ttu-id="8b1ba-779">値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-779">The value is escaped before writing.</span></span>

<span data-ttu-id="8b1ba-780">`value` が `null`場合、<xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> メソッドが呼び出されたかのように、JSON **null**値が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-780">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)> method was called.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-781">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-781">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-782">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-782">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public void WriteString (System.Text.Json.JsonEncodedText propertyName, System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteString(valuetype System.Text.Json.JsonEncodedText propertyName, valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteString (propertyName As JsonEncodedText, value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteString(System::Text::Json::JsonEncodedText propertyName, System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteString : System.Text.Json.JsonEncodedText * System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteString (propertyName, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.Text.Json.JsonEncodedText" />
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8b1ba-783">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-783">The JSON encoded property name of the JSON object to be transcoded and written as UTF-8.</span></span></param>
        <param name="value"><span data-ttu-id="8b1ba-784">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-784">The JSON encoded value to be written as a UTF-8 transcoded JSON string as part of the name/value pair.</span></span></param>
        <summary><span data-ttu-id="8b1ba-785">JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-785">Writes the pre-encoded property name and pre-encoded value (as a JSON string) as part of a name/value pair of a JSON object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-786">プロパティの名前と値は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-786">The property name and value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-787">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-787">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTime value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTime -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-788">JSON 配列の一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-788">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-789">JSON 配列の要素として、<see cref="T:System.DateTime" /> 値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-789">Writes a <see cref="T:System.DateTime" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-790">このメソッドは、ISO 8601-1 拡張形式を使用して <xref:System.DateTime> を書き込みます (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。たとえば、2017-06-12T05:30: 45.7680000 のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-790">This method writes the <xref:System.DateTime> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-791">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-791">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : DateTimeOffset -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-792">JSON 配列の一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-792">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-793">JSON 配列の要素として、<see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-793">Writes a <see cref="T:System.DateTimeOffset" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-794">このメソッドは、ISO 8601-1 拡張形式を使用して <xref:System.DateTimeOffset> を書き込みます (「system.string[での DateTime と DateTimeOffset のサポート](~/docs/standard/datetime/system-text-json-support.md)」を参照してください)。たとえば、2017-06-12T05:30: 45.7680000-07:00 のようになります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-794">This method writes the <xref:System.DateTimeOffset> using the ISO 8601-1 extended format (see [DateTime and DateTimeOffset support in System.Text.Json](~/docs/standard/datetime/system-text-json-support.md)); for example, 2017-06-12T05:30:45.7680000-07:00.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-795">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-795">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Guid value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(Guid value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : Guid -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-796">JSON 配列の一部として、JSON 文字列として書き込まれる値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-796">The value to be written as a JSON string as an element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-797">JSON 配列の要素として、<see cref="T:System.Guid" /> 値 (JSON 文字列として) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-797">Writes a <see cref="T:System.Guid" /> value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-798">このメソッドは、次の形式で既定の <xref:System.Buffers.StandardFormat> (つまり、' d ') を使用して <xref:System.Guid> 値を書き込みます: nnnnnnnn-nnnn-nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-798">This method writes the <xref:System.Guid> value using the default <xref:System.Buffers.StandardFormat> (that is, 'D'), as the form: nnnnnnnn-nnnn-nnnn-nnnn-nnnnnnnnnnnn.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-799">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-799">Validation is enabled, and the operation would result in writing invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;byte&gt; utf8Value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; utf8Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (utf8Value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;System::Byte&gt; utf8Value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue utf8Value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf8Value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="utf8Value"><span data-ttu-id="8b1ba-800">JSON 配列の JSON 文字列要素として書き込まれる UTF-8 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-800">The UTF-8 encoded value to be written as a JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-801">JSON 配列の要素として、UTF-8 テキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-801">Writes a UTF-8 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-802">値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-802">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-803">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-803">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-804">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-804">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-805">JSON 配列の UTF-8 でトランスコードされた JSON 文字列要素として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-805">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-806">JSON 配列の要素として、UTF-16 テキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-806">Writes a UTF-16 text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-807">値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-807">The value is escaped before writing.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-808">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-808">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-809">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-809">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : string -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-810">JSON 配列の UTF-8 でトランスコードされた JSON 文字列要素として書き込まれる UTF-16 でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-810">The UTF-16 encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-811">JSON 配列の要素として、文字列テキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-811">Writes a string text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-812">値は、書き込みの前にエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-812">The value is escaped before writing.</span></span>

<span data-ttu-id="8b1ba-813">`value` が `null`場合、<xref:System.Text.Json.Utf8JsonWriter.WriteNullValue> メソッドが呼び出されたかのように、JSON **null**値が書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-813">If `value` is `null`, the JSON **null** value is written, as if the <xref:System.Text.Json.Utf8JsonWriter.WriteNullValue> method was called.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8b1ba-814">指定した値が大きすぎます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-814">The specified value is too large.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-815">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-815">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringValue">
      <MemberSignature Language="C#" Value="public void WriteStringValue (System.Text.Json.JsonEncodedText value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStringValue(valuetype System.Text.Json.JsonEncodedText value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStringValue (value As JsonEncodedText)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStringValue(System::Text::Json::JsonEncodedText value);" />
      <MemberSignature Language="F#" Value="member this.WriteStringValue : System.Text.Json.JsonEncodedText -&gt; unit" Usage="utf8JsonWriter.WriteStringValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Text.Json.JsonEncodedText" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8b1ba-816">JSON 配列の UTF-8 でトランスコードされた JSON 文字列要素として書き込まれる JSON でエンコードされた値。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-816">The JSON encoded value to be written as a UTF-8 transcoded JSON string element of a JSON array.</span></span></param>
        <summary><span data-ttu-id="8b1ba-817">JSON 配列の要素として、事前にエンコードされたテキスト値 (JSON 文字列) を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-817">Writes the pre-encoded text value (as a JSON string) as an element of a JSON array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="8b1ba-818">この値は、<xref:System.Text.Json.JsonEncodedText> のインスタンスが作成されたときに、既にエスケープされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-818">The value should already be escaped when the instance of <xref:System.Text.Json.JsonEncodedText> was created.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8b1ba-819">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</span><span class="sxs-lookup"><span data-stu-id="8b1ba-819">Validation is enabled, and the write operation would produce invalid JSON.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
