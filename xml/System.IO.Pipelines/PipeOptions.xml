<Type Name="PipeOptions" FullName="System.IO.Pipelines.PipeOptions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b5b5616907e2e80b7dca968bdcd77a0efd096ecb" /><Meta Name="ms.sourcegitcommit" Value="6c0b6310824199ff476e4a9eec6e9ed0bd1a51c9" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/06/2019" /><Meta Name="ms.locfileid" Value="74387431" /></Metadata><TypeSignature Language="C#" Value="public class PipeOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PipeOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IO.Pipelines.PipeOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class PipeOptions" />
  <TypeSignature Language="C++ CLI" Value="public ref class PipeOptions" />
  <TypeSignature Language="F#" Value="type PipeOptions = class" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Pipelines</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.IO.Pipelines.Pipe" /> オプションのセットを表します。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PipeOptions (System.Buffers.MemoryPool&lt;byte&gt; pool = null, System.IO.Pipelines.PipeScheduler readerScheduler = null, System.IO.Pipelines.PipeScheduler writerScheduler = null, long pauseWriterThreshold = 32768, long resumeWriterThreshold = 16384, int minimumSegmentSize = 2048, bool useSynchronizationContext = true);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Buffers.MemoryPool`1&lt;unsigned int8&gt; pool, class System.IO.Pipelines.PipeScheduler readerScheduler, class System.IO.Pipelines.PipeScheduler writerScheduler, int64 pauseWriterThreshold, int64 resumeWriterThreshold, int32 minimumSegmentSize, bool useSynchronizationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Pipelines.PipeOptions.#ctor(System.Buffers.MemoryPool{System.Byte},System.IO.Pipelines.PipeScheduler,System.IO.Pipelines.PipeScheduler,System.Int64,System.Int64,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional pool As MemoryPool(Of Byte) = null, Optional readerScheduler As PipeScheduler = null, Optional writerScheduler As PipeScheduler = null, Optional pauseWriterThreshold As Long = 32768, Optional resumeWriterThreshold As Long = 16384, Optional minimumSegmentSize As Integer = 2048, Optional useSynchronizationContext As Boolean = true)" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
      <MemberSignature Language="F#" Value="new System.IO.Pipelines.PipeOptions : System.Buffers.MemoryPool&lt;byte&gt; * System.IO.Pipelines.PipeScheduler * System.IO.Pipelines.PipeScheduler * int64 * int64 * int * bool -&gt; System.IO.Pipelines.PipeOptions" Usage="new System.IO.Pipelines.PipeOptions (pool, readerScheduler, writerScheduler, pauseWriterThreshold, resumeWriterThreshold, minimumSegmentSize, useSynchronizationContext)" />
      <MemberSignature Language="C#" Value="public PipeOptions (System.Buffers.MemoryPool&lt;byte&gt; pool = null, System.IO.Pipelines.PipeScheduler readerScheduler = null, System.IO.Pipelines.PipeScheduler writerScheduler = null, long pauseWriterThreshold = -1, long resumeWriterThreshold = -1, int minimumSegmentSize = -1, bool useSynchronizationContext = true);" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional pool As MemoryPool(Of Byte) = null, Optional readerScheduler As PipeScheduler = null, Optional writerScheduler As PipeScheduler = null, Optional pauseWriterThreshold As Long = -1, Optional resumeWriterThreshold As Long = -1, Optional minimumSegmentSize As Integer = -1, Optional useSynchronizationContext As Boolean = true)" FrameworkAlternate="dotnet-plat-ext-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pool" Type="System.Buffers.MemoryPool&lt;System.Byte&gt;" />
        <Parameter Name="readerScheduler" Type="System.IO.Pipelines.PipeScheduler" />
        <Parameter Name="writerScheduler" Type="System.IO.Pipelines.PipeScheduler" />
        <Parameter Name="pauseWriterThreshold" Type="System.Int64" />
        <Parameter Name="resumeWriterThreshold" Type="System.Int64" />
        <Parameter Name="minimumSegmentSize" Type="System.Int32" />
        <Parameter Name="useSynchronizationContext" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pool">バッファー管理に使用されるメモリ ブロックのプール。</param>
        <param name="readerScheduler"><see cref="T:System.IO.Pipelines.PipeReader" /> のコールバックおよび非同期継続を実行するために使用される <see cref="T:System.IO.Pipelines.PipeScheduler" />。</param>
        <param name="writerScheduler"><see cref="T:System.IO.Pipelines.PipeWriter" /> のコールバックおよび非同期継続を実行するために使用される <see cref="T:System.IO.Pipelines.PipeScheduler" />。</param>
        <param name="pauseWriterThreshold"><see cref="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" /> でブロックが開始される前の <see cref="T:System.IO.Pipelines.Pipe" /> のバイト数。 負の値を指定すると、<see cref="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" /> によるブロックが回避され、<see cref="T:System.IO.Pipelines.Pipe" /> のバイト数が事実上無制限になります。</param>
        <param name="resumeWriterThreshold"><see cref="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" /> でブロックが停止されたときの <see cref="T:System.IO.Pipelines.Pipe" /> のバイト数。</param>
        <param name="minimumSegmentSize"><paramref name="pool" /> から要求されるセグメントの最小サイズ。</param>
        <param name="useSynchronizationContext">キャプチャされた <see langword="true" /> で非同期継続を実行する場合は <see cref="T:System.Threading.SynchronizationContext" />。それ以外の場合は <see langword="false" />。 これは、<see cref="P:System.IO.Pipelines.PipeOptions.ReaderScheduler" /> と <see cref="P:System.IO.Pipelines.PipeOptions.WriterScheduler" /> で指定したスケジューラよりも優先されます。</param>
        <summary>指定したパラメーターを使用して、<see cref="T:System.IO.Pipelines.PipeOptions" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.IO.Pipelines.PipeOptions Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.Pipelines.PipeOptions Default" />
      <MemberSignature Language="DocId" Value="P:System.IO.Pipelines.PipeOptions.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As PipeOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::Pipelines::PipeOptions ^ Default { System::IO::Pipelines::PipeOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.IO.Pipelines.PipeOptions" Usage="System.IO.Pipelines.PipeOptions.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Pipelines.PipeOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.IO.Pipelines.PipeOptions" /> の既定のインスタンスを取得します。</summary>
        <value>既定のパラメーターを使用して初期化された <see cref="T:System.IO.Pipelines.PipeOptions" /> オブジェクト。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumSegmentSize">
      <MemberSignature Language="C#" Value="public int MinimumSegmentSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumSegmentSize" />
      <MemberSignature Language="DocId" Value="P:System.IO.Pipelines.PipeOptions.MinimumSegmentSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MinimumSegmentSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumSegmentSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MinimumSegmentSize : int" Usage="System.IO.Pipelines.PipeOptions.MinimumSegmentSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.IO.Pipelines.PipeOptions.Pool" /> から要求されるセグメントの最小サイズを取得します。</summary>
        <value><see cref="P:System.IO.Pipelines.PipeOptions.Pool" />から要求されたセグメントの最小サイズ。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PauseWriterThreshold">
      <MemberSignature Language="C#" Value="public long PauseWriterThreshold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PauseWriterThreshold" />
      <MemberSignature Language="DocId" Value="P:System.IO.Pipelines.PipeOptions.PauseWriterThreshold" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PauseWriterThreshold As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PauseWriterThreshold { long get(); };" />
      <MemberSignature Language="F#" Value="member this.PauseWriterThreshold : int64" Usage="System.IO.Pipelines.PipeOptions.PauseWriterThreshold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.IO.Pipelines.Pipe" /> でブロックが開始されたときの <see cref="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" /> のバイト数を取得します。</summary>
        <value><see cref="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" /> がブロックを開始したときに <see cref="T:System.IO.Pipelines.Pipe" /> 内のバイト数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pool">
      <MemberSignature Language="C#" Value="public System.Buffers.MemoryPool&lt;byte&gt; Pool { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Buffers.MemoryPool`1&lt;unsigned int8&gt; Pool" />
      <MemberSignature Language="DocId" Value="P:System.IO.Pipelines.PipeOptions.Pool" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pool As MemoryPool(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Buffers::MemoryPool&lt;System::Byte&gt; ^ Pool { System::Buffers::MemoryPool&lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pool : System.Buffers.MemoryPool&lt;byte&gt;" Usage="System.IO.Pipelines.PipeOptions.Pool" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Buffers.MemoryPool&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バッファー管理に使用される <see cref="T:System.Buffers.MemoryPool`1" /> オブジェクトを取得します。</summary>
        <value>バッファー管理に使用されるメモリブロックのプール。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReaderScheduler">
      <MemberSignature Language="C#" Value="public System.IO.Pipelines.PipeScheduler ReaderScheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Pipelines.PipeScheduler ReaderScheduler" />
      <MemberSignature Language="DocId" Value="P:System.IO.Pipelines.PipeOptions.ReaderScheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReaderScheduler As PipeScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Pipelines::PipeScheduler ^ ReaderScheduler { System::IO::Pipelines::PipeScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReaderScheduler : System.IO.Pipelines.PipeScheduler" Usage="System.IO.Pipelines.PipeOptions.ReaderScheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Pipelines.PipeScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.IO.Pipelines.PipeReader" /> のコールバックおよび非同期継続を実行するために使用される <see cref="T:System.IO.Pipelines.PipeScheduler" /> を取得します。</summary>
        <value><see cref="T:System.IO.Pipelines.PipeReader" /> コールバックと非同期継続を実行するために使用される <see cref="T:System.IO.Pipelines.PipeScheduler" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeWriterThreshold">
      <MemberSignature Language="C#" Value="public long ResumeWriterThreshold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ResumeWriterThreshold" />
      <MemberSignature Language="DocId" Value="P:System.IO.Pipelines.PipeOptions.ResumeWriterThreshold" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ResumeWriterThreshold As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ResumeWriterThreshold { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ResumeWriterThreshold : int64" Usage="System.IO.Pipelines.PipeOptions.ResumeWriterThreshold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" /> でブロックが停止されたときの <see cref="T:System.IO.Pipelines.Pipe" /> のバイト数を取得します。</summary>
        <value><see cref="M:System.IO.Pipelines.PipeWriter.FlushAsync(System.Threading.CancellationToken)" /> でブロックが停止されたときの <see cref="T:System.IO.Pipelines.Pipe" /> のバイト数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSynchronizationContext">
      <MemberSignature Language="C#" Value="public bool UseSynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.IO.Pipelines.PipeOptions.UseSynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseSynchronizationContext As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSynchronizationContext { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseSynchronizationContext : bool" Usage="System.IO.Pipelines.PipeOptions.UseSynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期コールバックと継続を、それがキャプチャされた <see cref="T:System.Threading.SynchronizationContext" /> 上で実行するかどうかを示す値を取得します。 これは、<see cref="P:System.IO.Pipelines.PipeOptions.ReaderScheduler" /> と <see cref="P:System.IO.Pipelines.PipeOptions.WriterScheduler" /> で指定したスケジューラよりも優先されます。</summary>
        <value>キャプチャされた <see cref="T:System.Threading.SynchronizationContext" /> で非同期コールバックと継続を実行する必要があるかどうかを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriterScheduler">
      <MemberSignature Language="C#" Value="public System.IO.Pipelines.PipeScheduler WriterScheduler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Pipelines.PipeScheduler WriterScheduler" />
      <MemberSignature Language="DocId" Value="P:System.IO.Pipelines.PipeOptions.WriterScheduler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WriterScheduler As PipeScheduler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Pipelines::PipeScheduler ^ WriterScheduler { System::IO::Pipelines::PipeScheduler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriterScheduler : System.IO.Pipelines.PipeScheduler" Usage="System.IO.Pipelines.PipeOptions.WriterScheduler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Pipelines</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Pipelines.PipeScheduler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.IO.Pipelines.PipeWriter" /> のコールバックおよび非同期継続を実行するために使用される <see cref="T:System.IO.Pipelines.PipeScheduler" /> を取得します。</summary>
        <value><see cref="T:System.IO.Pipelines.PipeWriter" /> コールバックと非同期継続を実行するために使用される <see cref="T:System.IO.Pipelines.PipeScheduler" /> オブジェクト。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
