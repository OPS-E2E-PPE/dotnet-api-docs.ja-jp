<Type Name="HttpServerUtility" FullName="System.Web.HttpServerUtility">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7383a764cbdd7ba2bd6e38f9034fb638366a87bb" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83949232" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpServerUtility" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpServerUtility extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpServerUtility" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpServerUtility" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpServerUtility sealed" />
  <TypeSignature Language="F#" Value="type HttpServerUtility = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c597e-101">Web 要求を処理するヘルパー メソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="c597e-101">Provides helper methods for processing Web requests.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-102"><xref:System.Web.HttpServerUtility> クラスのメソッドとプロパティは、ASP.NET によって提供される組み込みの <xref:System.Web.HttpContext.Server%2A> オブジェクトを介して公開されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-102">The methods and properties of the <xref:System.Web.HttpServerUtility> class are exposed through the intrinsic <xref:System.Web.HttpContext.Server%2A> object provided by ASP.NET.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-103">このトピックでは、ソースコードが含まれている Visual Studio Web サイトプロジェクトを[ダウンロード](https://go.microsoft.com/fwlink/?LinkId=192870)できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-103">A Visual Studio Web site project with source code is available to accompany this topic: [Download](https://go.microsoft.com/fwlink/?LinkId=192870).</span></span>  
  
 <span data-ttu-id="c597e-104">次の例は、<xref:System.Web.HttpServerUtility.HtmlEncode%2A> メソッドと <xref:System.Web.HttpServerUtility> クラスの <xref:System.Web.HttpServerUtility.UrlEncode%2A> メソッドを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c597e-104">The following example demonstrates how to use the <xref:System.Web.HttpServerUtility.HtmlEncode%2A> method and the <xref:System.Web.HttpServerUtility.UrlEncode%2A> method of the <xref:System.Web.HttpServerUtility> class.</span></span> <span data-ttu-id="c597e-105"><xref:System.Web.HttpServerUtility.HtmlEncode%2A> メソッドを使用すると、ユーザーが指定した文字列入力が、実行可能なスクリプトや HTML 要素ではなく、ブラウザーに静的なテキストとして表示されるようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="c597e-105">The <xref:System.Web.HttpServerUtility.HtmlEncode%2A> method helps ensure that any user-supplied string input will be rendered as static text in browsers instead of executable script or HTML elements.</span></span> <span data-ttu-id="c597e-106"><xref:System.Web.HttpServerUtility.UrlEncode%2A> メソッドは、HTTP ストリームで正しく送信されるように Url をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-106">The <xref:System.Web.HttpServerUtility.UrlEncode%2A> method encodes URLs so that they are correctly transmitted in the HTTP stream.</span></span>  
  
 [!code-aspx-csharp[System.Web.HttpServerUtility1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpServerUtility1/cs/HttpServerUtilityCS.aspx#1)]
 [!code-aspx-vb[System.Web.HttpServerUtility1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpServerUtility1/vb/HttpServerUtilityVB.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.HttpContext" />
  </Docs>
  <Members>
    <Member MemberName="ClearError">
      <MemberSignature Language="C#" Value="public void ClearError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.ClearError" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearError ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearError();" />
      <MemberSignature Language="F#" Value="member this.ClearError : unit -&gt; unit" Usage="httpServerUtility.ClearError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c597e-107">前回の例外を削除します。</span><span class="sxs-lookup"><span data-stu-id="c597e-107">Clears the previous exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c597e-108">次の例では、スローされた最後の例外をクリアします。</span><span class="sxs-lookup"><span data-stu-id="c597e-108">The following example clears the last exception that was thrown.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.ClearError Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.ClearError Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.ClearError Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.ClearError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.GetLastError" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateObject">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c597e-109">COM オブジェクトのサーバー インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c597e-109">Creates a server instance of a COM object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (progID As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObject(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : string -&gt; obj" Usage="httpServerUtility.CreateObject progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="c597e-110">インスタンスを作成するオブジェクトのクラスまたは型。</span><span class="sxs-lookup"><span data-stu-id="c597e-110">The class or type of object to create an instance of.</span></span></param>
        <summary><span data-ttu-id="c597e-111">オブジェクトのプログラム ID (ProgID) で識別されている COM オブジェクトのサーバー インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c597e-111">Creates a server instance of a COM object identified by the object's programmatic identifier (ProgID).</span></span></summary>
        <returns><span data-ttu-id="c597e-112">新しいオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c597e-112">The new object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c597e-113">次の例では、オブジェクトの ProgID を使用してオブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="c597e-113">The following example creates an object by using the object's ProgID.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.CreateObject Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObject Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.CreateObject Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObject Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-114">オブジェクトのインスタンスを作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="c597e-114">An instance of the object could not be created.</span></span></exception>
        <altmember cref="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public object CreateObject (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObject(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObject(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject (type As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObject(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : Type -&gt; obj" Usage="httpServerUtility.CreateObject type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c597e-115">作成するオブジェクトを表す <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="c597e-115">A <see cref="T:System.Type" /> representing the object to create.</span></span></param>
        <summary><span data-ttu-id="c597e-116">オブジェクトの型で識別されている COM オブジェクトのサーバー インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c597e-116">Creates a server instance of a COM object identified by the object's type.</span></span></summary>
        <returns><span data-ttu-id="c597e-117">新しいオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c597e-117">The new object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectFromClsid">
      <MemberSignature Language="C#" Value="public object CreateObjectFromClsid (string clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateObjectFromClsid(string clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.CreateObjectFromClsid(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectFromClsid (clsid As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateObjectFromClsid(System::String ^ clsid);" />
      <MemberSignature Language="F#" Value="member this.CreateObjectFromClsid : string -&gt; obj" Usage="httpServerUtility.CreateObjectFromClsid clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="c597e-118">インスタンスを作成するオブジェクトのクラス ID。</span><span class="sxs-lookup"><span data-stu-id="c597e-118">The class identifier of the object to create an instance of.</span></span></param>
        <summary><span data-ttu-id="c597e-119">オブジェクトのクラス ID (CLSID) で識別されている COM オブジェクトのサーバー インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="c597e-119">Creates a server instance of a COM object identified by the object's class identifier (CLSID).</span></span></summary>
        <returns><span data-ttu-id="c597e-120">新しいオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c597e-120">The new object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c597e-121">次の例は、<xref:System.Web.HttpServerUtility.CreateObjectFromClsid%2A> メソッドを使用して COM オブジェクトのサーバーインスタンスを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c597e-121">The following example demonstrates how to use the <xref:System.Web.HttpServerUtility.CreateObjectFromClsid%2A> method to create a server instance of a COM object.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObjectFromClsid Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.CreateObjectFromClsid Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.CreateObjectFromClsid Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-122">オブジェクトのインスタンスを作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="c597e-122">An instance of the object could not be created.</span></span></exception>
        <altmember cref="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Execute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c597e-123">指定したリソースのハンドラーを現在の要求のコンテキストで実行し、そのハンドラーを起動したページに実行を戻します。</span><span class="sxs-lookup"><span data-stu-id="c597e-123">Executes the handler for a specified resource in the context of the current request and returns execution to the page that invoked it.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Execute : string -&gt; unit" Usage="httpServerUtility.Execute path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c597e-124">実行する URL パス。</span><span class="sxs-lookup"><span data-stu-id="c597e-124">The URL path to execute.</span></span></param>
        <summary><span data-ttu-id="c597e-125">指定した仮想パスのハンドラーを現在の要求のコンテキストで実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-125">Executes the handler for the specified virtual path in the context of the current request.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-126"><xref:System.Web.HttpServerUtility.Execute%2A> メソッドは、新しいページの実行が完了した後も元のページの実行を継続します。</span><span class="sxs-lookup"><span data-stu-id="c597e-126">The <xref:System.Web.HttpServerUtility.Execute%2A> method continues execution of the original page after execution of the new page is completed.</span></span> <span data-ttu-id="c597e-127"><xref:System.Web.HttpServerUtility.Transfer%2A> メソッドは無条件で別のハンドラーに実行を転送します。</span><span class="sxs-lookup"><span data-stu-id="c597e-127">The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.</span></span>  
  
 <span data-ttu-id="c597e-128">ASP.NET は、現在のユーザーが <xref:System.Web.HttpServerUtility.Execute%2A> メソッドによって配信されたリソースを表示する権限を持っているかどうかを検証しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-128">ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c597e-129">ASP.NET 承認と認証ロジックは、元のリソースハンドラーが呼び出される前に実行されますが、ASP.NET は、<xref:System.Web.HttpServerUtility.Execute%2A> メソッドによって示されるハンドラーを直接呼び出し、新しいリソースの認証および承認ロジックを再実行しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-129">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the <xref:System.Web.HttpServerUtility.Execute%2A> method and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c597e-130">アプリケーションのセキュリティポリシーで、クライアントがリソースにアクセスするための適切な承認を要求する必要がある場合、アプリケーションは再認証を強制するか、カスタムのアクセス制御メカニズムを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-130">If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c597e-131"><xref:System.Web.HttpServerUtility.Execute%2A> メソッドの代わりに <xref:System.Web.HttpResponse.Redirect%2A> メソッドを使用して、強制的に再認証することができます。</span><span class="sxs-lookup"><span data-stu-id="c597e-131">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c597e-132"><xref:System.Web.HttpResponse.Redirect%2A> は、ブラウザーが新しいリソースを要求するクライアント側のリダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-132"><xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c597e-133">このリダイレクトはシステムへの新しい要求であるため、インターネットインフォメーションサービス (IIS) と ASP.NET の両方のセキュリティポリシーのすべての認証と承認のロジックが対象となります。</span><span class="sxs-lookup"><span data-stu-id="c597e-133">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c597e-134">アプリケーションが <xref:System.Web.HttpServerUtility.Execute%2A> メソッドを呼び出す前に、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> メソッドを使用するカスタム承認メソッドを組み込むことによって、ユーザーがリソースを表示するアクセス許可を持っていることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-134">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-135">次の例では、現在のディレクトリに .aspx ページ "Updateinfo .aspx" を表示します。</span><span class="sxs-lookup"><span data-stu-id="c597e-135">The following example displays the .aspx page "Updateinfo.aspx" in the current directory.</span></span> <span data-ttu-id="c597e-136">Updateinfo .aspx ページが表示された後、プログラムの実行が開始ページに戻ります。</span><span class="sxs-lookup"><span data-stu-id="c597e-136">Program execution returns to the starting page after the Updateinfo.aspx page is displayed.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.Execute Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Execute Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Execute Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Execute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-137">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="c597e-137">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c597e-138">または</span><span class="sxs-lookup"><span data-stu-id="c597e-138">-or-</span></span> 
<span data-ttu-id="c597e-139"><paramref name="path" /> によって指定されているハンドラーの実行中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="c597e-139">An error occurred while executing the handler specified by <paramref name="path" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c597e-140"><paramref name="path" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c597e-140"><paramref name="path" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c597e-141">または</span><span class="sxs-lookup"><span data-stu-id="c597e-141">-or-</span></span> 
 <span data-ttu-id="c597e-142"><paramref name="path" /> は仮想パスではありません。</span><span class="sxs-lookup"><span data-stu-id="c597e-142"><paramref name="path" /> is not a virtual path.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * bool -&gt; unit" Usage="httpServerUtility.Execute (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c597e-143">実行する URL パス。</span><span class="sxs-lookup"><span data-stu-id="c597e-143">The URL path to execute.</span></span></param>
        <param name="preserveForm"><span data-ttu-id="c597e-144"><see langword="true" /> コレクションおよび <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションを保持する場合は <see cref="P:System.Web.HttpRequest.Form" /> 。 <see langword="false" /> コレクションおよび <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションをクリアする場合は <see cref="P:System.Web.HttpRequest.Form" /> 。</span><span class="sxs-lookup"><span data-stu-id="c597e-144"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></param>
        <summary><span data-ttu-id="c597e-145">指定した仮想パスのハンドラーを現在の要求のコンテキストで実行し、<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="c597e-145">Executes the handler for the specified virtual path in the context of the current request and specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c597e-146">次の例は、現在の要求で `Updateinfo.aspx` .aspx ページを実行し、<xref:System.Web.HttpRequest.QueryString%2A> コレクションと <xref:System.Web.HttpRequest.Form%2A> コレクションを保持する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c597e-146">The following example shows how to execute the .aspx page `Updateinfo.aspx` in the current request and preserve the <xref:System.Web.HttpRequest.QueryString%2A> and <xref:System.Web.HttpRequest.Form%2A> collections.</span></span> <span data-ttu-id="c597e-147">`Updateinfo.aspx` が表示されると、プログラムの実行が開始ページに戻ります。</span><span class="sxs-lookup"><span data-stu-id="c597e-147">Program execution returns to the starting page after `Updateinfo.aspx` is displayed.</span></span>  
  
 [!code-csharp[HttpServerUtility.Execute#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpServerUtility.Execute/CS/httpserverutility.execute_cs.aspx#1)]
 [!code-vb[HttpServerUtility.Execute#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpServerUtility.Execute/VB/httpserverutility.execute_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-148">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="c597e-148">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c597e-149">または</span><span class="sxs-lookup"><span data-stu-id="c597e-149">-or-</span></span> 
<span data-ttu-id="c597e-150"><paramref name="path" /> によって指定されているハンドラーの実行中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="c597e-150">An error occurred while executing the handler specified by <paramref name="path" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c597e-151"><paramref name="path" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c597e-151"><paramref name="path" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c597e-152">または</span><span class="sxs-lookup"><span data-stu-id="c597e-152">-or-</span></span> 
 <span data-ttu-id="c597e-153"><paramref name="path" /> は仮想パスではありません。</span><span class="sxs-lookup"><span data-stu-id="c597e-153"><paramref name="path" /> is not a virtual path.</span></span></exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.Execute (path, writer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c597e-154">実行する URL パス。</span><span class="sxs-lookup"><span data-stu-id="c597e-154">The URL path to execute.</span></span></param>
        <param name="writer"><span data-ttu-id="c597e-155">出力を取り込む <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c597e-155">The <see cref="T:System.IO.TextWriter" /> to capture the output.</span></span></param>
        <summary><span data-ttu-id="c597e-156">指定した仮想パスのハンドラーを現在の要求のコンテキストで実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-156">Executes the handler for the specified virtual path in the context of the current request.</span></span> <span data-ttu-id="c597e-157"><see cref="T:System.IO.TextWriter" /> は、実行されたハンドラーからの出力を取り込みます。</span><span class="sxs-lookup"><span data-stu-id="c597e-157">A <see cref="T:System.IO.TextWriter" /> captures output from the executed handler.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-158"><xref:System.Web.HttpServerUtility.Execute%2A> メソッドは、指定された仮想パスの実行が完了した後に、元の要求の実行を継続します。</span><span class="sxs-lookup"><span data-stu-id="c597e-158">The <xref:System.Web.HttpServerUtility.Execute%2A> method continues execution of the original request after execution of the virtual path specified is completed.</span></span> <span data-ttu-id="c597e-159"><xref:System.Web.HttpServerUtility.Transfer%2A> メソッドは無条件で別のハンドラーに実行を転送します。</span><span class="sxs-lookup"><span data-stu-id="c597e-159">The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.</span></span>  
  
 <span data-ttu-id="c597e-160">ASP.NET は、現在のユーザーが <xref:System.Web.HttpServerUtility.Execute%2A> メソッドによって配信されたリソースを表示する権限を持っているかどうかを検証しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-160">ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c597e-161">ASP.NET 承認と認証ロジックは、元のリソースハンドラーが呼び出される前に実行されますが、ASP.NET は、<xref:System.Web.HttpServerUtility.Execute%2A> メソッドによって示されるハンドラーを直接呼び出し、新しいリソースの認証および承認ロジックを再実行しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-161">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the <xref:System.Web.HttpServerUtility.Execute%2A> method and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c597e-162">アプリケーションのセキュリティポリシーで、クライアントがリソースにアクセスするための適切な承認を要求する必要がある場合、アプリケーションは再認証を強制するか、カスタムのアクセス制御メカニズムを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-162">If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c597e-163"><xref:System.Web.HttpServerUtility.Execute%2A> メソッドの代わりに <xref:System.Web.HttpResponse.Redirect%2A> メソッドを使用して、強制的に再認証することができます。</span><span class="sxs-lookup"><span data-stu-id="c597e-163">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c597e-164"><xref:System.Web.HttpResponse.Redirect%2A> は、ブラウザーが新しいリソースを要求するクライアント側のリダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-164"><xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c597e-165">このリダイレクトはシステムへの新しい要求であるため、インターネットインフォメーションサービス (IIS) と ASP.NET の両方のセキュリティポリシーのすべての認証と承認のロジックが対象となります。</span><span class="sxs-lookup"><span data-stu-id="c597e-165">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c597e-166">アプリケーションが <xref:System.Web.HttpServerUtility.Execute%2A> メソッドを呼び出す前に、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> メソッドを使用するカスタム承認メソッドを組み込むことによって、ユーザーがリソースを表示するアクセス許可を持っていることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-166">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-167">次の例では、現在のディレクトリにあるサーバー上の `Login.aspx` ページを実行し、<xref:System.IO.StringWriter> オブジェクト `writer`を通じてページからの出力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="c597e-167">The following example executes the `Login.aspx` page on the server in the current directory and receives the output from the page through the <xref:System.IO.StringWriter> object `writer`.</span></span> <span data-ttu-id="c597e-168">`writer` から受信した HTML ストリームを HTTP 出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="c597e-168">It writes the HTML stream received from `writer` to the HTTP output stream.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.Execute1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Execute1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Execute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Execute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-169">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="c597e-169">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c597e-170">または</span><span class="sxs-lookup"><span data-stu-id="c597e-170">-or-</span></span> 
<span data-ttu-id="c597e-171"><paramref name="path" /> によって指定されているハンドラーの実行中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="c597e-171">An error occurred while executing the handler specified by <paramref name="path" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c597e-172"><paramref name="path" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c597e-172"><paramref name="path" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c597e-173">または</span><span class="sxs-lookup"><span data-stu-id="c597e-173">-or-</span></span> 
 <span data-ttu-id="c597e-174"><paramref name="path" /> は仮想パスではありません。</span><span class="sxs-lookup"><span data-stu-id="c597e-174"><paramref name="path" /> is not a virtual path.</span></span></exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (string path, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(string path, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.String,System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (path As String, writer As TextWriter, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::String ^ path, System::IO::TextWriter ^ writer, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : string * System.IO.TextWriter * bool -&gt; unit" Usage="httpServerUtility.Execute (path, writer, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c597e-175">実行する URL パス。</span><span class="sxs-lookup"><span data-stu-id="c597e-175">The URL path to execute.</span></span></param>
        <param name="writer"><span data-ttu-id="c597e-176">出力を取り込む <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c597e-176">The <see cref="T:System.IO.TextWriter" /> to capture the output.</span></span></param>
        <param name="preserveForm"><span data-ttu-id="c597e-177"><see langword="true" /> コレクションおよび <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションを保持する場合は <see cref="P:System.Web.HttpRequest.Form" /> 。 <see langword="false" /> コレクションおよび <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションをクリアする場合は <see cref="P:System.Web.HttpRequest.Form" /> 。</span><span class="sxs-lookup"><span data-stu-id="c597e-177"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></param>
        <summary><span data-ttu-id="c597e-178">指定した仮想パスのハンドラーを現在の要求のコンテキストで実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-178">Executes the handler for the specified virtual path in the context of the current request.</span></span> <span data-ttu-id="c597e-179"><see cref="T:System.IO.TextWriter" /> はページからの出力を取り込み、<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアするかどうかをブール型のパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="c597e-179">A <see cref="T:System.IO.TextWriter" /> captures output from the page and a Boolean parameter specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-180"><xref:System.Web.HttpServerUtility.Execute%2A> メソッドは、指定された仮想パスの実行が完了した後に、元の要求の実行を続行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-180">The <xref:System.Web.HttpServerUtility.Execute%2A> method continues execution of the original request after execution of the specified virtual path is completed.</span></span> <span data-ttu-id="c597e-181"><xref:System.Web.HttpServerUtility.Transfer%2A> メソッドは無条件で別のハンドラーに実行を転送します。</span><span class="sxs-lookup"><span data-stu-id="c597e-181">The <xref:System.Web.HttpServerUtility.Transfer%2A> method unconditionally transfers execution to another handler.</span></span>  
  
 <span data-ttu-id="c597e-182">ASP.NET は、現在のユーザーが <xref:System.Web.HttpServerUtility.Execute%2A> メソッドによって配信されたリソースを表示する権限を持っているかどうかを検証しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-182">ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c597e-183">ASP.NET 承認と認証ロジックは、元のリソースハンドラーが呼び出される前に実行されますが、ASP.NET は、<xref:System.Web.HttpServerUtility.Execute%2A> メソッドによって示されるハンドラーを直接呼び出し、新しいリソースの認証および承認ロジックを再実行しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-183">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the <xref:System.Web.HttpServerUtility.Execute%2A> method and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c597e-184">アプリケーションのセキュリティポリシーで、クライアントがリソースにアクセスするための適切な承認を要求する必要がある場合、アプリケーションは再認証を強制するか、カスタムのアクセス制御メカニズムを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-184">If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c597e-185"><xref:System.Web.HttpServerUtility.Execute%2A> メソッドの代わりに <xref:System.Web.HttpResponse.Redirect%2A> メソッドを使用して、強制的に再認証することができます。</span><span class="sxs-lookup"><span data-stu-id="c597e-185">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c597e-186"><xref:System.Web.HttpResponse.Redirect%2A> は、ブラウザーが新しいリソースを要求するクライアント側のリダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-186"><xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c597e-187">このリダイレクトはシステムへの新しい要求であるため、インターネットインフォメーションサービス (IIS) と ASP.NET の両方のセキュリティポリシーのすべての認証と承認のロジックが対象となります。</span><span class="sxs-lookup"><span data-stu-id="c597e-187">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c597e-188">アプリケーションが <xref:System.Web.HttpServerUtility.Execute%2A> メソッドを呼び出す前に、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> メソッドを使用するカスタム承認メソッドを組み込むことによって、ユーザーがリソースを表示するアクセス許可を持っていることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-188">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-189">次の例では、現在のディレクトリにあるサーバー上の `Login.aspx` ページを実行し、<xref:System.IO.StringWriter> オブジェクト `writer`を通じてページからの出力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="c597e-189">The following example executes the `Login.aspx` page on the server in the current directory and receives the output from the page through the <xref:System.IO.StringWriter> object `writer`.</span></span> <span data-ttu-id="c597e-190">`writer` から受信した HTML ストリームを HTTP 出力ストリームに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="c597e-190">It writes the HTML stream received from `writer` to the HTTP output stream.</span></span> <span data-ttu-id="c597e-191"><xref:System.Web.HttpRequest.Form%2A> コレクションと <xref:System.Web.HttpRequest.QueryString%2A> コレクションの内容は保持されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-191">The contents of the <xref:System.Web.HttpRequest.Form%2A> and <xref:System.Web.HttpRequest.QueryString%2A> collections are preserved.</span></span>  
  
 [!code-csharp[HttpServerUtility.Execute02#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpServerUtility.Execute02/CS/httpserverutility.execute02_cs.aspx#1)]
 [!code-vb[HttpServerUtility.Execute02#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpServerUtility.Execute02/VB/httpserverutility.execute02_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-192">現在の <see cref="T:System.Web.HttpContext" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</span><span class="sxs-lookup"><span data-stu-id="c597e-192">The current <see cref="T:System.Web.HttpContext" /> is a null reference (<see langword="Nothing" /> in Visual Basic).</span></span>  
  
<span data-ttu-id="c597e-193">または</span><span class="sxs-lookup"><span data-stu-id="c597e-193">-or-</span></span> 
 <span data-ttu-id="c597e-194"><paramref name="path" /> がピリオド (.) で終わっています。</span><span class="sxs-lookup"><span data-stu-id="c597e-194"><paramref name="path" /> ends with a period (.).</span></span>  
  
<span data-ttu-id="c597e-195">または</span><span class="sxs-lookup"><span data-stu-id="c597e-195">-or-</span></span> 
<span data-ttu-id="c597e-196"><paramref name="path" /> によって指定されているハンドラーの実行中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="c597e-196">An error occurred while executing the handler specified by <paramref name="path" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c597e-197"><paramref name="path" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c597e-197"><paramref name="path" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c597e-198"><paramref name="path" /> は仮想パスではありません。</span><span class="sxs-lookup"><span data-stu-id="c597e-198"><paramref name="path" /> is not a virtual path.</span></span></exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (System.Web.IHttpHandler handler, System.IO.TextWriter writer, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(class System.Web.IHttpHandler handler, class System.IO.TextWriter writer, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Execute(System.Web.IHttpHandler,System.IO.TextWriter,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (handler As IHttpHandler, writer As TextWriter, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Web::IHttpHandler ^ handler, System::IO::TextWriter ^ writer, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Execute : System.Web.IHttpHandler * System.IO.TextWriter * bool -&gt; unit" Usage="httpServerUtility.Execute (handler, writer, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="c597e-199">現在の要求の転送先となる <see cref="T:System.Web.IHttpHandler" /> を実装する HTTP ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="c597e-199">The HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> to transfer the current request to.</span></span></param>
        <param name="writer"><span data-ttu-id="c597e-200">出力を取り込む <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="c597e-200">The <see cref="T:System.IO.TextWriter" /> to capture the output.</span></span></param>
        <param name="preserveForm"><span data-ttu-id="c597e-201"><see langword="true" /> コレクションおよび <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションを保持する場合は <see cref="P:System.Web.HttpRequest.Form" /> 。 <see langword="false" /> コレクションおよび <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションをクリアする場合は <see cref="P:System.Web.HttpRequest.Form" /> 。</span><span class="sxs-lookup"><span data-stu-id="c597e-201"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></param>
        <summary><span data-ttu-id="c597e-202">指定した仮想パスのハンドラーを現在の要求のコンテキストで実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-202">Executes the handler for the specified virtual path in the context of the current request.</span></span> <span data-ttu-id="c597e-203"><see cref="T:System.IO.TextWriter" /> は実行されたハンドラーからの出力を取り込み、<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアするかどうかをブール型のパラメーターで指定します。</span><span class="sxs-lookup"><span data-stu-id="c597e-203">A <see cref="T:System.IO.TextWriter" /> captures output from the executed handler and a Boolean parameter specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-204">カスタム HTTP ハンドラーを記述して、共通言語仕様 (CLS) に準拠している任意の言語で、事前に定義された特定の種類の HTTP 要求を処理することができます。</span><span class="sxs-lookup"><span data-stu-id="c597e-204">You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS).</span></span> <span data-ttu-id="c597e-205">従来の ASP (classic ASP) ページまたは ASP.NET ページではなく、HTTP ハンドラークラスで定義されている実行可能コードは、これらの特定の要求に応答します。</span><span class="sxs-lookup"><span data-stu-id="c597e-205">Executable code that is defined in the HTTP handler classes instead of  conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests.</span></span> <span data-ttu-id="c597e-206">HTTP ハンドラーを使用すると、インターネットインフォメーションサービス (IIS) を実行している Web サーバーの下位レベルの要求および応答サービスと対話できます。また、ISAPI 拡張に似ていても、より単純なプログラミングモデルを使用する機能が提供されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-206">HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.</span></span>  
  
 <span data-ttu-id="c597e-207">ASP.NET は、現在のユーザーが <xref:System.Web.HttpServerUtility.Execute%2A> メソッドによって配信されたリソースを表示する権限を持っているかどうかを検証しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-207">ASP.NET does not verify that the current user is authorized to view the resource that is delivered by the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c597e-208">ASP.NET 承認と認証ロジックは、元のリソースハンドラーが呼び出される前に実行されますが、ASP.NET は、<xref:System.Web.HttpServerUtility.Execute%2A> メソッドによって示されるハンドラーを直接呼び出し、新しいリソースの認証および承認ロジックを再実行しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-208">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler that is indicated by the <xref:System.Web.HttpServerUtility.Execute%2A> method and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c597e-209">アプリケーションのセキュリティポリシーで、クライアントがリソースへのアクセスを取得するための適切な承認を必要とする場合、アプリケーションは再認証を強制するか、カスタムのアクセス制御メカニズムを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-209">If the security policy for your application requires clients to have appropriate authorization to gain access to the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c597e-210"><xref:System.Web.HttpServerUtility.Execute%2A> メソッドの代わりに <xref:System.Web.HttpResponse.Redirect%2A> メソッドを使用して、強制的に再認証することができます。</span><span class="sxs-lookup"><span data-stu-id="c597e-210">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span> <span data-ttu-id="c597e-211"><xref:System.Web.HttpResponse.Redirect%2A> は、ブラウザーが新しいリソースを要求するクライアント側のリダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-211">The <xref:System.Web.HttpResponse.Redirect%2A> performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c597e-212">このリダイレクトはシステムへの新しい要求であるため、IIS と ASP.NET の両方のセキュリティポリシーのすべての認証と承認のロジックが対象となります。</span><span class="sxs-lookup"><span data-stu-id="c597e-212">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c597e-213">アプリケーションが <xref:System.Web.HttpServerUtility.Execute%2A> メソッドを呼び出す前に、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> メソッドを使用するカスタム承認メソッドを組み込むことによって、ユーザーがリソースを表示するアクセス許可を持っていることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-213">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Execute%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-214"><paramref name="handler" /> によって指定されているハンドラーの実行中にエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="c597e-214">An error occurred while executing the handler specified by <paramref name="handler" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c597e-215"><paramref name="handler" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c597e-215">The <paramref name="handler" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.Web.HttpServerUtility.Transfer" />
      </Docs>
    </Member>
    <Member MemberName="GetLastError">
      <MemberSignature Language="C#" Value="public Exception GetLastError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception GetLastError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.GetLastError" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLastError () As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ GetLastError();" />
      <MemberSignature Language="F#" Value="member this.GetLastError : unit -&gt; Exception" Usage="httpServerUtility.GetLastError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c597e-216">前回の例外を返します。</span><span class="sxs-lookup"><span data-stu-id="c597e-216">Returns the previous exception.</span></span></summary>
        <returns><span data-ttu-id="c597e-217">スローされた前回の例外。</span><span class="sxs-lookup"><span data-stu-id="c597e-217">The previous exception that was thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c597e-218">次の例では、アプリケーションの最後のエラーの説明を HTTP 出力ストリームに出力します。</span><span class="sxs-lookup"><span data-stu-id="c597e-218">The following example prints a description of the application's last error to the HTTP output stream.</span></span> <span data-ttu-id="c597e-219">エラーが発生していない場合は、"エラーがありません" が出力されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-219">It prints "No Errors" if no errors have been encountered.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.GetLastError Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.GetLastError Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.GetLastError Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.GetLastError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpServerUtility.ClearError" />
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c597e-220">エンコードされた文字列をデコードして、無効な HTML 文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="c597e-220">Decodes a string that has been encoded to eliminate invalid HTML characters.</span></span>  
  
<span data-ttu-id="c597e-221"><see cref="T:System.Net.WebUtility" /> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-221">To encode or decode values outside of a web application, use the <see cref="T:System.Net.WebUtility" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public string HtmlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlDecode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HtmlDecode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ HtmlDecode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.HtmlDecode : string -&gt; string" Usage="httpServerUtility.HtmlDecode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c597e-222">デコードする HTML 文字列。</span><span class="sxs-lookup"><span data-stu-id="c597e-222">The HTML string to decode.</span></span></param>
        <summary><span data-ttu-id="c597e-223">HTML エンコードされた文字列をデコードし、デコードした文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c597e-223">Decodes an HTML-encoded string and returns the decoded string.</span></span></summary>
        <returns><span data-ttu-id="c597e-224">デコードされたテキスト。</span><span class="sxs-lookup"><span data-stu-id="c597e-224">The decoded text.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-225">HTML エンコードを使用すると、ブラウザーでテキストが正しく表示され、ブラウザーでは HTML として解釈されません。</span><span class="sxs-lookup"><span data-stu-id="c597e-225">HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML.</span></span> <span data-ttu-id="c597e-226">たとえば、テキスト文字列に不等号 (\<) または不等号 (>) が含まれている場合、ブラウザーはこれらの文字を HTML タグの左または右の角かっことして解釈します。</span><span class="sxs-lookup"><span data-stu-id="c597e-226">For example, if a text string contains a less than sign (\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag.</span></span> <span data-ttu-id="c597e-227">文字が HTML エンコードされている場合、これらの文字は `&lt;` および `&gt;`の文字列に変換されます。これにより、ブラウザーでは、不等号が表示され、署名が正しくなります。</span><span class="sxs-lookup"><span data-stu-id="c597e-227">When the characters are HTML encoded, they are converted to the strings `&lt;` and `&gt;`, which causes the browser to display the less than sign and greater than sign correctly.</span></span> <span data-ttu-id="c597e-228"><xref:System.Web.HttpServerUtility.HtmlDecode%2A> サーバーに送信されたテキストをデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-228"><xref:System.Web.HttpServerUtility.HtmlDecode%2A> decodes text that has been transmitted to the server.</span></span>  
  
 <span data-ttu-id="c597e-229">このメソッドは、ASP.NET アプリケーションから実行時に <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> メソッドにアクセスするための便利な方法です。</span><span class="sxs-lookup"><span data-stu-id="c597e-229">This method is a convenient way to access the <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c597e-230">内部的には、このメソッドは <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> を使用して文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-230">Internally, this method uses <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> to decode strings.</span></span>  
  
 <span data-ttu-id="c597e-231">ASP.NET web ページの分離コードファイルで、`Server` プロパティを使用して <xref:System.Web.HttpServerUtility> クラスのインスタンスにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="c597e-231">In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property.</span></span> <span data-ttu-id="c597e-232">分離コードファイルにないクラスでは、`HttpContext.Current.Server` を使用して、<xref:System.Web.HttpServerUtility> クラスのインスタンスにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="c597e-232">In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.</span></span>  
  
 <span data-ttu-id="c597e-233">Web アプリケーションの外部では、<xref:System.Net.WebUtility> クラスを使用して値をエンコードまたはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-233">Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-234">次の例には、ファイルからデータをデコードし、1つの文字列にコピーする関数 `LoadDecodedFile`が含まれています。</span><span class="sxs-lookup"><span data-stu-id="c597e-234">The following example contains the function `LoadDecodedFile`, which decodes the data from a file and copies it into one string.</span></span>  
  
 [!code-aspx-csharp[Classic HttpServerUtility.HtmlDecode Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HttpServerUtility.HtmlDecode Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlDecode">
      <MemberSignature Language="C#" Value="public void HtmlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HtmlDecode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HtmlDecode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.HtmlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.HtmlDecode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c597e-235">デコードする HTML 文字列。</span><span class="sxs-lookup"><span data-stu-id="c597e-235">The HTML string to decode.</span></span></param>
        <param name="output"><span data-ttu-id="c597e-236">デコードされた文字列を格納する <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="c597e-236">The <see cref="T:System.IO.TextWriter" /> output stream that contains the decoded string.</span></span></param>
        <summary><span data-ttu-id="c597e-237">HTML エンコードされた文字列をデコードし、その結果の出力を <see cref="T:System.IO.TextWriter" /> 出力ストリームに送信します。</span><span class="sxs-lookup"><span data-stu-id="c597e-237">Decodes an HTML-encoded string and sends the resulting output to a <see cref="T:System.IO.TextWriter" /> output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-238">HTML エンコードを使用すると、ブラウザーでテキストが正しく表示され、ブラウザーでは HTML として解釈されません。</span><span class="sxs-lookup"><span data-stu-id="c597e-238">HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML.</span></span> <span data-ttu-id="c597e-239">たとえば、テキスト文字列に不等号 (\<) または不等号 (>) が含まれている場合、ブラウザーはこれらの文字を HTML タグの左または右の角かっことして解釈します。</span><span class="sxs-lookup"><span data-stu-id="c597e-239">For example, if a text string contains a less than sign (\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag.</span></span> <span data-ttu-id="c597e-240">文字が HTML エンコードされている場合、これらの文字は `&lt;` および `&gt;`の文字列に変換されます。これにより、ブラウザーでは、不等号が表示され、署名が正しくなります。</span><span class="sxs-lookup"><span data-stu-id="c597e-240">When the characters are HTML encoded, they are converted to the strings `&lt;` and `&gt;`, which causes the browser to display the less than sign and greater than sign correctly.</span></span>  
  
 <span data-ttu-id="c597e-241"><xref:System.Web.HttpServerUtility.HtmlDecode%2A> サーバーに送信されたテキストをデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-241"><xref:System.Web.HttpServerUtility.HtmlDecode%2A> decodes text that has been transmitted to the server.</span></span>  
  
 <span data-ttu-id="c597e-242"><xref:System.Web.HttpServerUtility.HtmlDecode%2A> は、実行時に ASP.NET アプリケーションから <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> メソッドにアクセスするための便利な方法です。</span><span class="sxs-lookup"><span data-stu-id="c597e-242"><xref:System.Web.HttpServerUtility.HtmlDecode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c597e-243">内部的には、<xref:System.Web.HttpServerUtility.HtmlDecode%2A> は <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> を使用して文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-243">Internally, <xref:System.Web.HttpServerUtility.HtmlDecode%2A> uses <xref:System.Web.HttpUtility.HtmlDecode%2A?displayProperty=nameWithType> to decode strings.</span></span>  
  
 <span data-ttu-id="c597e-244"><xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-244">To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-245">次の例では、HTTP 経由の送信用に HTML エンコードされた文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-245">The following example decodes a string that has been HTML-encoded for transmission over HTTP.</span></span> <span data-ttu-id="c597e-246">`EncodedString` という名前の指定された文字列をデコードします。この文字列には、"This is a &lt;Test String&gt;." というテキストが含まれており、これを `DecodedString` という名前の文字列にコピーします (これは \<テスト文字列 > です)。</span><span class="sxs-lookup"><span data-stu-id="c597e-246">It decodes the supplied string named `EncodedString` which contains the text "This is a &lt;Test String&gt;.", and copies it into the string named `DecodedString` as "This is a \<Test String>.".</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.HtmlDecode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.HtmlDecode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlDecode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HtmlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c597e-247">ブラウザーに表示される文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-247">Encodes a string to be displayed in a browser.</span></span>  
  
<span data-ttu-id="c597e-248"><see cref="T:System.Net.WebUtility" /> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-248">To encode or decode values outside of a web application, use the <see cref="T:System.Net.WebUtility" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public string HtmlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string HtmlEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function HtmlEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ HtmlEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : string -&gt; string" Usage="httpServerUtility.HtmlEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c597e-249">エンコードする文字列。</span><span class="sxs-lookup"><span data-stu-id="c597e-249">The text string to encode.</span></span></param>
        <summary><span data-ttu-id="c597e-250">文字列を HTML エンコードし、エンコードされた文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c597e-250">HTML-encodes a string and returns the encoded string.</span></span></summary>
        <returns><span data-ttu-id="c597e-251">HTML エンコードされたテキスト。</span><span class="sxs-lookup"><span data-stu-id="c597e-251">The HTML-encoded text.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-252">HTML エンコードを使用すると、ブラウザーでテキストが正しく表示され、ブラウザーでは HTML として解釈されません。</span><span class="sxs-lookup"><span data-stu-id="c597e-252">HTML encoding makes sure that text is displayed correctly in the browser and not interpreted by the browser as HTML.</span></span> <span data-ttu-id="c597e-253">たとえば、テキスト文字列に不等号 (\<) または不等号 (>) が含まれている場合、ブラウザーはこれらの文字を HTML タグの左または右の角かっことして解釈します。</span><span class="sxs-lookup"><span data-stu-id="c597e-253">For example, if a text string contains a less than sign (\<) or greater than sign (>), the browser would interpret these characters as the opening or closing bracket of an HTML tag.</span></span> <span data-ttu-id="c597e-254">文字が HTML エンコードされている場合、これらの文字は `&lt;` および `&gt;`の文字列に変換されます。これにより、ブラウザーでは、不等号が表示され、署名が正しくなります。</span><span class="sxs-lookup"><span data-stu-id="c597e-254">When the characters are HTML encoded, they are converted to the strings `&lt;` and `&gt;`, which causes the browser to display the less than sign and greater than sign correctly.</span></span>  
  
 <span data-ttu-id="c597e-255">このメソッドは、ASP.NET アプリケーションから実行時に <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> メソッドにアクセスするための便利な方法です。</span><span class="sxs-lookup"><span data-stu-id="c597e-255">This method is a convenient way to access the <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c597e-256">内部的には、このメソッドは <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> を使用して文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-256">Internally, this method uses <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> to encode strings.</span></span>  
  
 <span data-ttu-id="c597e-257">ASP.NET web ページの分離コードファイルで、`Server` プロパティを使用して <xref:System.Web.HttpServerUtility> クラスのインスタンスにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="c597e-257">In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property.</span></span> <span data-ttu-id="c597e-258">分離コードファイルにないクラスでは、`HttpContext.Current.Server` を使用して、<xref:System.Web.HttpServerUtility> クラスのインスタンスにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="c597e-258">In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.</span></span>  
  
 <span data-ttu-id="c597e-259">Web アプリケーションの外部では、<xref:System.Net.WebUtility> クラスを使用して値をエンコードまたはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-259">Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-260">次の例は、安全でないコードをコード化する可能性がある値を HTML エンコードする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c597e-260">The following example shows how to HTML-encode a value that potentially codes unsafe code.</span></span> <span data-ttu-id="c597e-261">このコードは、web ページの分離コードファイルに存在します。</span><span class="sxs-lookup"><span data-stu-id="c597e-261">The code resides in the code-behind file for a web page.</span></span> <span data-ttu-id="c597e-262">エンコードする値は、例を簡略化し、HTML エンコードできる値の型を表示するためだけに、この例でハードコーディングされています。</span><span class="sxs-lookup"><span data-stu-id="c597e-262">The value to encode is hard-coded in this example only to simplify the example and show the type of value you might HTML-encode.</span></span> <span data-ttu-id="c597e-263">通常は、ユーザーまたは要求から受け取った値を HTML エンコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-263">Typically, you would HTML-encode a value that you received from the user or the request.</span></span> <span data-ttu-id="c597e-264">`Result` は `Literal` コントロールを参照します。</span><span class="sxs-lookup"><span data-stu-id="c597e-264">`Result` refers to a `Literal` control.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.HtmlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/vb/default.aspx.vb#1)]  
  
 <span data-ttu-id="c597e-265">次の例は前の例と似ていますが、分離コードファイルに含まれていないクラス内から値を HTML エンコードする方法を示している点が異なります。</span><span class="sxs-lookup"><span data-stu-id="c597e-265">The next example is similar to the previous example except it shows how to HTML-encode a value from within a class that is not in the code-behind file.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.HtmlEncode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.HtmlEncode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.htmlencode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HtmlEncode">
      <MemberSignature Language="C#" Value="public void HtmlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void HtmlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.HtmlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HtmlEncode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HtmlEncode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.HtmlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.HtmlEncode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c597e-266">エンコードする文字列。</span><span class="sxs-lookup"><span data-stu-id="c597e-266">The string to encode.</span></span></param>
        <param name="output"><span data-ttu-id="c597e-267">エンコードされた文字列を格納している <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="c597e-267">The <see cref="T:System.IO.TextWriter" /> output stream that contains the encoded string.</span></span></param>
        <summary><span data-ttu-id="c597e-268">文字列を HTML エンコードし、その結果の出力を <see cref="T:System.IO.TextWriter" /> 出力ストリームに送信します。</span><span class="sxs-lookup"><span data-stu-id="c597e-268">HTML-encodes a string and sends the resulting output to a <see cref="T:System.IO.TextWriter" /> output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-269">HTML エンコードによって、ブラウザーではテキストが正しく表示され、HTML として解釈されません。</span><span class="sxs-lookup"><span data-stu-id="c597e-269">HTML encoding ensures that text will be correctly displayed in the browser, not interpreted by the browser as HTML.</span></span> <span data-ttu-id="c597e-270">たとえば、テキスト文字列に不等号 (\<) または不等号 (>) が含まれている場合、ブラウザーはこれらの文字を HTML タグの左または右の角かっことして解釈します。</span><span class="sxs-lookup"><span data-stu-id="c597e-270">For example, if a text string contains a less than sign (\<) or greater than sign (>), the browser would interpret these characters as an opening or closing bracket of an HTML tag.</span></span> <span data-ttu-id="c597e-271">これら2つの文字の HTML エンコーディングは、それぞれ `&lt;` し、`&gt;`ます。これにより、ブラウザーでは、不等号が表示され、署名が正しくなります。</span><span class="sxs-lookup"><span data-stu-id="c597e-271">The HTML encoding of these two characters is `&lt;` and `&gt;`, respectively, which causes the browser to display the less than sign and greater than sign correctly.</span></span>  
  
 <span data-ttu-id="c597e-272"><xref:System.Web.HttpServerUtility.HtmlEncode%2A> は、実行時に ASP.NET アプリケーションから <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> メソッドにアクセスするための便利な方法です。</span><span class="sxs-lookup"><span data-stu-id="c597e-272"><xref:System.Web.HttpServerUtility.HtmlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c597e-273">内部的には、<xref:System.Web.HttpServerUtility.HtmlEncode%2A> は <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> を使用して文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-273">Internally, <xref:System.Web.HttpServerUtility.HtmlEncode%2A> uses <xref:System.Web.HttpUtility.HtmlEncode%2A?displayProperty=nameWithType> to encode strings.</span></span>  
  
 <span data-ttu-id="c597e-274"><xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-274">To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-275">次の例では、HTTP によって送信されるように文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-275">The following example encodes a string for transmission by HTTP.</span></span> <span data-ttu-id="c597e-276">`TestString`という名前の文字列をエンコードします。これには、"This is a \<Test String >." と `EncodedString` いうテキストが含まれ、"This is a &lt;Test String&gt;." という名前の文字列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="c597e-276">It encodes the string named `TestString`, which contains the text "This is a \<Test String>.", and copies it into the string named `EncodedString` as "This is a &lt;Test String&gt;.".</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.HtmlEncode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlEncode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.HtmlEncode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.HtmlEncode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpServerUtility.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string" Usage="System.Web.HttpServerUtility.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c597e-277">サーバーのコンピューター名を取得します。</span><span class="sxs-lookup"><span data-stu-id="c597e-277">Gets the server's computer name.</span></span></summary>
        <value><span data-ttu-id="c597e-278">ローカル コンピューターの名前。</span><span class="sxs-lookup"><span data-stu-id="c597e-278">The name of the local computer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c597e-279">次の例では、サーバーのコンピューター名を文字列変数として格納します。</span><span class="sxs-lookup"><span data-stu-id="c597e-279">The following example stores the server's computer name as a string variable.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.MachineName Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.MachineName Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.MachineName Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.MachineName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-280">コンピューター名が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="c597e-280">The computer name cannot be found.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public string MapPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MapPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.MapPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapPath (path As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MapPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.MapPath : string -&gt; string" Usage="httpServerUtility.MapPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c597e-281">Web アプリケーション内の仮想パス。</span><span class="sxs-lookup"><span data-stu-id="c597e-281">The virtual path in the Web application.</span></span></param>
        <summary><span data-ttu-id="c597e-282">指定した仮想パスに対応する物理ファイル パスを返します。</span><span class="sxs-lookup"><span data-stu-id="c597e-282">Returns the physical file path that corresponds to the specified virtual path.</span></span></summary>
        <returns><span data-ttu-id="c597e-283"><paramref name="path" /> に対応する、Web サーバー上の物理ファイル パス。</span><span class="sxs-lookup"><span data-stu-id="c597e-283">The physical file path on the Web server that corresponds to <paramref name="path" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-284">`path` が `null`場合、<xref:System.Web.HttpServerUtility.MapPath%2A> メソッドは、パスの現在の要求を含むディレクトリの完全な物理パスを返します。</span><span class="sxs-lookup"><span data-stu-id="c597e-284">If `path` is `null`, the <xref:System.Web.HttpServerUtility.MapPath%2A> method returns the full physical path of the directory that contains the current request for the path.</span></span> <span data-ttu-id="c597e-285">相対パスでは、このメソッドが値を返すための既存のファイルまたはフォルダーを指定する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="c597e-285">The relative path does not need to specify an existing file or folder for this method to return a value.</span></span> <span data-ttu-id="c597e-286">ただし、Web アプリケーションの外部でパスを指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="c597e-286">However, you cannot specify a path outside of the Web application.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c597e-287"><xref:System.Web.HttpServerUtility.MapPath%2A> 方法には、ホスティング環境に関する機密情報が含まれている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-287">The <xref:System.Web.HttpServerUtility.MapPath%2A> method potentially contains sensitive information about the hosting environment.</span></span> <span data-ttu-id="c597e-288">戻り値は、ユーザーに表示されません。</span><span class="sxs-lookup"><span data-stu-id="c597e-288">The return value should not be displayed to users.</span></span>  
  
 <span data-ttu-id="c597e-289">`C:\ExampleSites\TestMapPath` に存在する Web アプリケーションは、次の結果を返します。</span><span class="sxs-lookup"><span data-stu-id="c597e-289">A Web application that resides at `C:\ExampleSites\TestMapPath` would return the following results:</span></span>  
  
|<span data-ttu-id="c597e-290">要求元</span><span class="sxs-lookup"><span data-stu-id="c597e-290">Request from</span></span>|`path`|<span data-ttu-id="c597e-291">戻り値</span><span class="sxs-lookup"><span data-stu-id="c597e-291">Returned value</span></span>|  
|------------------|------------|--------------------|  
|<span data-ttu-id="c597e-292">RootLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c597e-292">RootLevelPage.aspx</span></span>|`null`|<span data-ttu-id="c597e-293">C:\ExampleSites\TestMapPath</span><span class="sxs-lookup"><span data-stu-id="c597e-293">C:\ExampleSites\TestMapPath</span></span>|  
|<span data-ttu-id="c597e-294">RootLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c597e-294">RootLevelPage.aspx</span></span>|<span data-ttu-id="c597e-295">"/DownOneLevel/DownLevelPage.aspx"</span><span class="sxs-lookup"><span data-stu-id="c597e-295">"/DownOneLevel/DownLevelPage.aspx"</span></span>|<span data-ttu-id="c597e-296">C:\ExampleSites\TestMapPath\DownOneLevel\DownLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c597e-296">C:\ExampleSites\TestMapPath\DownOneLevel\DownLevelPage.aspx</span></span>|  
|<span data-ttu-id="c597e-297">RootLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c597e-297">RootLevelPage.aspx</span></span>|<span data-ttu-id="c597e-298">"/NotRealFolder"</span><span class="sxs-lookup"><span data-stu-id="c597e-298">"/NotRealFolder"</span></span>|<span data-ttu-id="c597e-299">C:\ExampleSites\TestMapPath\NotRealFolder</span><span class="sxs-lookup"><span data-stu-id="c597e-299">C:\ExampleSites\TestMapPath\NotRealFolder</span></span>|  
|<span data-ttu-id="c597e-300">RootLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c597e-300">RootLevelPage.aspx</span></span>|<span data-ttu-id="c597e-301">"../Outsideapplication "</span><span class="sxs-lookup"><span data-stu-id="c597e-301">"../OutsideApplication"</span></span>|<xref:System.Web.HttpException>|  
|<span data-ttu-id="c597e-302">/DownOneLevel/DownLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c597e-302">/DownOneLevel/DownLevelPage.aspx</span></span>|`null`|<span data-ttu-id="c597e-303">C:\ExampleSites\TestMapPath\DownOneLevel</span><span class="sxs-lookup"><span data-stu-id="c597e-303">C:\ExampleSites\TestMapPath\DownOneLevel</span></span>|  
|<span data-ttu-id="c597e-304">/DownOneLevel/DownLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c597e-304">/DownOneLevel/DownLevelPage.aspx</span></span>|<span data-ttu-id="c597e-305">"../RootLevelPage.aspx"</span><span class="sxs-lookup"><span data-stu-id="c597e-305">"../RootLevelPage.aspx"</span></span>|<span data-ttu-id="c597e-306">C:\ExampleSites\TestMapPath\RootLevelPage.aspx</span><span class="sxs-lookup"><span data-stu-id="c597e-306">C:\ExampleSites\TestMapPath\RootLevelPage.aspx</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c597e-307">次の例は、相対仮想パスの物理ファイルを取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c597e-307">The following example shows how to retrieve the physical file of a relative virtual path.</span></span> <span data-ttu-id="c597e-308">このコードは、web ページの分離コードファイルに存在し、既定の `Server` オブジェクトを利用します。</span><span class="sxs-lookup"><span data-stu-id="c597e-308">The code resides in the code-behind file for a web page and utilizes the default `Server` object.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.MapPath#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.mappath/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.mappath/vb/default.aspx.vb#1)]  
  
 <span data-ttu-id="c597e-309">次の例は前の例と似ていますが、分離コードファイルに含まれていないクラス内から物理パスを取得する方法を示している点が異なります。</span><span class="sxs-lookup"><span data-stu-id="c597e-309">The next example is similar to the previous example except it shows how to retrieve a physical path from within a class that is not in the code-behind file.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.MapPath#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.mappath/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.MapPath#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.mappath/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-310">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="c597e-310">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.</span></span>
        
<span data-ttu-id="c597e-311">または</span><span class="sxs-lookup"><span data-stu-id="c597e-311">-or-</span></span> 
<span data-ttu-id="c597e-312"><paramref name="path" /> は物理パスです。仮想パスを指定してください。</span><span class="sxs-lookup"><span data-stu-id="c597e-312"><paramref name="path" /> is a physical path, but a virtual path was expected.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ScriptTimeout">
      <MemberSignature Language="C#" Value="public int ScriptTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ScriptTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpServerUtility.ScriptTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ScriptTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ScriptTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ScriptTimeout : int with get, set" Usage="System.Web.HttpServerUtility.ScriptTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c597e-313">要求タイムアウト値を秒単位で取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="c597e-313">Gets or sets the request time-out value in seconds.</span></span></summary>
        <value><span data-ttu-id="c597e-314">要求のタイムアウト値設定。</span><span class="sxs-lookup"><span data-stu-id="c597e-314">The time-out value setting for requests.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-315"><xref:System.Web.HttpServerUtility.ScriptTimeout%2A> プロパティは、 [httpRuntime](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e1f13641(v=vs.100))要素の `executionTimeout` 属性を設定することによって、web.config ファイルで設定できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-315">The <xref:System.Web.HttpServerUtility.ScriptTimeout%2A> property can be set in the Web.config file by setting the `executionTimeout` attribute of the [httpRuntime](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e1f13641(v=vs.100)) element.</span></span> <span data-ttu-id="c597e-316"><xref:System.Web.HttpServerUtility.ScriptTimeout%2A> プロパティを使用してプログラムでタイムアウトを設定することは、web.config の設定よりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-316">Setting the time-out programmatically with the <xref:System.Web.HttpServerUtility.ScriptTimeout%2A> property takes precedence over the Web.config setting.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c597e-317">Web.config ファイルで[httpRuntime](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e1f13641(v=vs.100))要素の `debug` 属性を `true` に設定した場合、<xref:System.Web.HttpServerUtility.ScriptTimeout%2A> の値は無視されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-317">If you set the `debug` attribute of the [httpRuntime](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/e1f13641(v=vs.100)) element to `true` in the Web.config file, the value of <xref:System.Web.HttpServerUtility.ScriptTimeout%2A> will be ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-318">次の例では、要求のタイムアウト期間を60秒に設定します。</span><span class="sxs-lookup"><span data-stu-id="c597e-318">The following example sets the request time-out period to 60 seconds.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.ScriptTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.ScriptTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.ScriptTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.ScriptTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-319">現在の <see cref="T:System.Web.HttpContext" /> が <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="c597e-319">The current <see cref="T:System.Web.HttpContext" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c597e-320">タイムアウト時間が <see langword="null" /> です。または、それ以外の設定ができませんでした。</span><span class="sxs-lookup"><span data-stu-id="c597e-320">The time-out period is <see langword="null" /> or otherwise could not be set.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transfer">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c597e-321">現在のページの実行を終了し、現在の要求に対して新しいページの実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="c597e-321">Terminates execution of the current page and starts execution of a new page for the current request.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Transfer : string -&gt; unit" Usage="httpServerUtility.Transfer path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c597e-322">サーバー上にある、実行する新しいページの URL パス。</span><span class="sxs-lookup"><span data-stu-id="c597e-322">The URL path of the new page on the server to execute.</span></span></param>
        <summary><span data-ttu-id="c597e-323">現在の要求に対して、現在のページの実行を終了し、指定された URL パスを使用して新しいページの実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="c597e-323">For the current request, terminates execution of the current page and starts execution of a new page by using the specified URL path of the page.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-324">に転送されるページは、別の .aspx ページである必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-324">The page transferred to should be another .aspx page.</span></span> <span data-ttu-id="c597e-325">たとえば、.asp または .asmx ページへの転送が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="c597e-325">For instance, a transfer to an .asp or .asmx page is not valid.</span></span> <span data-ttu-id="c597e-326"><xref:System.Web.HttpServerUtility.Transfer%2A> メソッドは、<xref:System.Web.HttpRequest.QueryString%2A> コレクションと <xref:System.Web.HttpRequest.Form%2A> コレクションを保持します。</span><span class="sxs-lookup"><span data-stu-id="c597e-326">The <xref:System.Web.HttpServerUtility.Transfer%2A> method preserves the <xref:System.Web.HttpRequest.QueryString%2A> and <xref:System.Web.HttpRequest.Form%2A> collections.</span></span>  
  
 <span data-ttu-id="c597e-327"><xref:System.Web.HttpServerUtility.Transfer%2A> は <xref:System.Web.HttpResponse.End%2A>を呼び出します。これにより、完了時に <xref:System.Threading.ThreadAbortException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c597e-327"><xref:System.Web.HttpServerUtility.Transfer%2A> calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion.</span></span>  
  
 <span data-ttu-id="c597e-328">ASP.NET は、現在のユーザーが <xref:System.Web.HttpServerUtility.Transfer%2A> メソッドによって配信されたリソースを表示する権限を持っているかどうかを検証しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-328">ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span> <span data-ttu-id="c597e-329">ASP.NET 承認と認証ロジックは、元のリソースハンドラーが呼び出される前に実行されますが、ASP.NET は、<xref:System.Web.HttpServerUtility.Transfer%2A> メソッドによって示されるハンドラーを直接呼び出し、新しいリソースの認証および承認ロジックを再実行しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-329">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the <xref:System.Web.HttpServerUtility.Transfer%2A> method and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c597e-330">アプリケーションのセキュリティポリシーで、クライアントがリソースにアクセスするための適切な承認を要求する必要がある場合、アプリケーションは再認証を強制するか、カスタムのアクセス制御メカニズムを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-330">If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c597e-331"><xref:System.Web.HttpServerUtility.Transfer%2A> メソッドの代わりに <xref:System.Web.HttpResponse.Redirect%2A> メソッドを使用して、強制的に再認証することができます。</span><span class="sxs-lookup"><span data-stu-id="c597e-331">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span> <span data-ttu-id="c597e-332"><xref:System.Web.HttpResponse.Redirect%2A> メソッドは、ブラウザーが新しいリソースを要求するクライアント側のリダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-332">The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c597e-333">このリダイレクトはシステムへの新しい要求であるため、インターネットインフォメーションサービス (IIS) と ASP.NET の両方のセキュリティポリシーのすべての認証と承認のロジックが対象となります。</span><span class="sxs-lookup"><span data-stu-id="c597e-333">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c597e-334">アプリケーションが <xref:System.Web.HttpServerUtility.Transfer%2A> メソッドを呼び出す前に、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> メソッドを使用するカスタム承認メソッドを組み込むことによって、ユーザーがリソースを表示するアクセス許可を持っていることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-334">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Transfer : string * bool -&gt; unit" Usage="httpServerUtility.Transfer (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="preserveForm" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c597e-335">サーバー上にある、実行する新しいページの URL パス。</span><span class="sxs-lookup"><span data-stu-id="c597e-335">The URL path of the new page on the server to execute.</span></span></param>
        <param name="preserveForm"><span data-ttu-id="c597e-336"><see langword="true" /> コレクションおよび <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションを保持する場合は <see cref="P:System.Web.HttpRequest.Form" /> 。 <see langword="false" /> コレクションおよび <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションをクリアする場合は <see cref="P:System.Web.HttpRequest.Form" /> 。</span><span class="sxs-lookup"><span data-stu-id="c597e-336"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></param>
        <summary><span data-ttu-id="c597e-337">現在のページの実行を終了し、指定された URL パスを使用して新しいページの実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="c597e-337">Terminates execution of the current page and starts execution of a new page by using the specified URL path of the page.</span></span> <span data-ttu-id="c597e-338"><see cref="P:System.Web.HttpRequest.QueryString" /> コレクションと <see cref="P:System.Web.HttpRequest.Form" /> コレクションを削除するかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="c597e-338">Specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-339">に転送されるページは、別の .aspx ページである必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-339">The page transferred to should be another .aspx page.</span></span> <span data-ttu-id="c597e-340">たとえば、.asp または .asmx ページへの転送が有効ではありません。</span><span class="sxs-lookup"><span data-stu-id="c597e-340">For instance, a transfer to an .asp or .asmx page is not valid.</span></span>  
  
 <span data-ttu-id="c597e-341"><xref:System.Web.HttpServerUtility.Transfer%2A> は <xref:System.Web.HttpResponse.End%2A>を呼び出します。これにより、完了時に <xref:System.Threading.ThreadAbortException> 例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c597e-341"><xref:System.Web.HttpServerUtility.Transfer%2A> calls <xref:System.Web.HttpResponse.End%2A>, which throws a <xref:System.Threading.ThreadAbortException> exception upon completion.</span></span>  
  
 <span data-ttu-id="c597e-342">`preserveForm` パラメーターを `true`に設定すると、ターゲットページは <xref:System.Web.UI.Page.PreviousPage%2A> プロパティを使用して、前のページのビューステートにアクセスできるようになります。</span><span class="sxs-lookup"><span data-stu-id="c597e-342">If you set the `preserveForm` parameter to `true`, the target page will be able to access the view state of the previous page by using the <xref:System.Web.UI.Page.PreviousPage%2A> property.</span></span>  
  
 <span data-ttu-id="c597e-343">セキュリティ上の理由から、`enableViewStateMac` 属性を `true`に設定しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-343">For security purposes, you should keep the `enableViewStateMac` attribute set to `true`.</span></span> <span data-ttu-id="c597e-344">ASP.NET は、現在のユーザーが <xref:System.Web.HttpServerUtility.Transfer%2A> メソッドによって配信されたリソースを表示する権限を持っているかどうかを検証しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-344">ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span> <span data-ttu-id="c597e-345">ASP.NET 承認と認証ロジックは、元のリソースハンドラーが呼び出される前に実行されますが、ASP.NET は、<xref:System.Web.HttpServerUtility.Transfer%2A> メソッドによって示されるハンドラーを直接呼び出し、新しいリソースの認証および承認ロジックを再実行しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-345">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the <xref:System.Web.HttpServerUtility.Transfer%2A> method and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c597e-346">アプリケーションのセキュリティポリシーで、クライアントがリソースにアクセスするための適切な承認を要求する必要がある場合、アプリケーションは再認証を強制するか、カスタムのアクセス制御メカニズムを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-346">If your application's security policy requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c597e-347"><xref:System.Web.HttpServerUtility.Transfer%2A> メソッドの代わりに <xref:System.Web.HttpResponse.Redirect%2A> メソッドを使用して、強制的に再認証することができます。</span><span class="sxs-lookup"><span data-stu-id="c597e-347">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span> <span data-ttu-id="c597e-348"><xref:System.Web.HttpResponse.Redirect%2A> メソッドは、ブラウザーが新しいリソースを要求するクライアント側のリダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-348">The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c597e-349">このリダイレクトはシステムへの新しい要求であるため、インターネットインフォメーションサービス (IIS) と ASP.NET の両方のセキュリティポリシーのすべての認証と承認のロジックが対象となります。</span><span class="sxs-lookup"><span data-stu-id="c597e-349">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both Internet Information Services (IIS) and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c597e-350">アプリケーションが <xref:System.Web.HttpServerUtility.Transfer%2A> メソッドを呼び出す前に、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> メソッドを使用するカスタム承認メソッドを組み込むことによって、ユーザーがリソースを表示するアクセス許可を持っていることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-350">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-351">次の例では、現在のページと同じディレクトリに新しいページを実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-351">The following example executes a new page in the same directory as the current page.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.Transfer Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.Transfer Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.Transfer Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.Transfer Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="c597e-352">現在のページ要求がコールバックです。</span><span class="sxs-lookup"><span data-stu-id="c597e-352">The current page request is a callback.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Transfer">
      <MemberSignature Language="C#" Value="public void Transfer (System.Web.IHttpHandler handler, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transfer(class System.Web.IHttpHandler handler, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.Transfer(System.Web.IHttpHandler,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transfer (handler As IHttpHandler, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transfer(System::Web::IHttpHandler ^ handler, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.Transfer : System.Web.IHttpHandler * bool -&gt; unit" Usage="httpServerUtility.Transfer (handler, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Web.IHttpHandler" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="c597e-353">現在の要求の転送先となる <see cref="T:System.Web.IHttpHandler" /> を実装する HTTP ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="c597e-353">The HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> to transfer the current request to.</span></span></param>
        <param name="preserveForm"><span data-ttu-id="c597e-354"><see langword="true" /> コレクションおよび <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションを保持する場合は <see cref="P:System.Web.HttpRequest.Form" /> 。 <see langword="false" /> コレクションおよび <see cref="P:System.Web.HttpRequest.QueryString" /> コレクションをクリアする場合は <see cref="P:System.Web.HttpRequest.Form" /> 。</span><span class="sxs-lookup"><span data-stu-id="c597e-354"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></param>
        <summary><span data-ttu-id="c597e-355">現在のページの実行を終了し、カスタム HTTP ハンドラーを使用して新しい要求の実行を開始します。このハンドラーは、<see cref="T:System.Web.IHttpHandler" /> インターフェイスを実装し、<see cref="P:System.Web.HttpRequest.QueryString" /> コレクションおよび <see cref="P:System.Web.HttpRequest.Form" /> コレクションをクリアするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="c597e-355">Terminates execution of the current page and starts execution of a new request by using a custom HTTP handler that implements the <see cref="T:System.Web.IHttpHandler" /> interface and specifies whether to clear the <see cref="P:System.Web.HttpRequest.QueryString" /> and <see cref="P:System.Web.HttpRequest.Form" /> collections.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-356">カスタム HTTP ハンドラーを記述して、共通言語仕様 (CLS) に準拠している任意の言語で、事前に定義された特定の種類の HTTP 要求を処理することができます。</span><span class="sxs-lookup"><span data-stu-id="c597e-356">You can write custom HTTP handlers to process specific, predefined types of HTTP requests in any language that is compliant with the Common Language Specification (CLS).</span></span> <span data-ttu-id="c597e-357">従来の ASP (classic ASP) ページまたは ASP.NET ページではなく、HTTP ハンドラークラスで定義されている実行可能コードは、これらの特定の要求に応答します。</span><span class="sxs-lookup"><span data-stu-id="c597e-357">Executable code that is defined in the HTTP handler classes instead of conventional ASP (also known as classic ASP) pages or ASP.NET pages responds to these specific requests.</span></span> <span data-ttu-id="c597e-358">HTTP ハンドラーを使用すると、インターネットインフォメーションサービス (IIS) を実行している Web サーバーの下位レベルの要求および応答サービスと対話できます。また、ISAPI 拡張に似ていても、より単純なプログラミングモデルを使用する機能が提供されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-358">HTTP handlers allow for interacting with the low-level request and response services of a Web server that is running Internet Information Services (IIS), and they provide functionality that is similar to ISAPI extensions but with a simpler programming model.</span></span>  
  
 <span data-ttu-id="c597e-359">`preserveForm` パラメーターを `true`に設定すると、ターゲットページは <xref:System.Web.UI.Page.PreviousPage%2A> プロパティを使用して、前のページのビューステートにアクセスできるようになります。</span><span class="sxs-lookup"><span data-stu-id="c597e-359">If you set the `preserveForm` parameter to `true`, the target page will be able to access the view state of the previous page by using the <xref:System.Web.UI.Page.PreviousPage%2A> property.</span></span>  
  
 <span data-ttu-id="c597e-360">セキュリティ上の理由から、`enableViewStateMac` 属性を `true`に設定しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-360">For security purposes, you should keep the `enableViewStateMac` attribute set to `true`.</span></span> <span data-ttu-id="c597e-361">ASP.NET は、現在のユーザーが <xref:System.Web.HttpServerUtility.Transfer%2A> メソッドによって配信されたリソースを表示する権限を持っているかどうかを検証しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-361">ASP.NET does not verify that the current user is authorized to view the resource delivered by the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span> <span data-ttu-id="c597e-362">ASP.NET 承認と認証ロジックは、元のリソースハンドラーが呼び出される前に実行されますが、ASP.NET は、<xref:System.Web.HttpServerUtility.Transfer%2A> メソッドによって示されるハンドラーを直接呼び出し、新しいリソースの認証および承認ロジックを再実行しません。</span><span class="sxs-lookup"><span data-stu-id="c597e-362">Although the ASP.NET authorization and authentication logic runs before the original resource handler is called, ASP.NET directly calls the handler indicated by the <xref:System.Web.HttpServerUtility.Transfer%2A> method, and does not rerun authentication and authorization logic for the new resource.</span></span> <span data-ttu-id="c597e-363">アプリケーションのセキュリティポリシーで、リソースにアクセスするための適切な承認をクライアントに要求する場合は、アプリケーションで再認証を強制するか、カスタムのアクセス制御メカニズムを提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-363">If the security policy for your application requires clients to have appropriate authorization to access the resource, the application should force reauthorization or provide a custom access-control mechanism.</span></span>  
  
 <span data-ttu-id="c597e-364"><xref:System.Web.HttpServerUtility.Transfer%2A> メソッドの代わりに <xref:System.Web.HttpResponse.Redirect%2A> メソッドを使用して、強制的に再認証することができます。</span><span class="sxs-lookup"><span data-stu-id="c597e-364">You can force reauthorization by using the <xref:System.Web.HttpResponse.Redirect%2A> method instead of the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span> <span data-ttu-id="c597e-365"><xref:System.Web.HttpResponse.Redirect%2A> メソッドは、ブラウザーが新しいリソースを要求するクライアント側のリダイレクトを実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-365">The <xref:System.Web.HttpResponse.Redirect%2A> method performs a client-side redirect in which the browser requests the new resource.</span></span> <span data-ttu-id="c597e-366">このリダイレクトはシステムへの新しい要求であるため、IIS と ASP.NET の両方のセキュリティポリシーのすべての認証と承認のロジックが対象となります。</span><span class="sxs-lookup"><span data-stu-id="c597e-366">Because this redirect is a new request entering the system, it is subjected to all the authentication and authorization logic of both the IIS and ASP.NET security policy.</span></span>  
  
 <span data-ttu-id="c597e-367">アプリケーションが <xref:System.Web.HttpServerUtility.Transfer%2A> メソッドを呼び出す前に、<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> メソッドを使用するカスタム承認メソッドを組み込むことによって、ユーザーがリソースを表示するアクセス許可を持っていることを確認できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-367">You can verify that the user has permission to view the resource by incorporating a custom authorization method that uses the <xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> method before the application calls the <xref:System.Web.HttpServerUtility.Transfer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ApplicationException"><span data-ttu-id="c597e-368">現在のページ要求がコールバックです。</span><span class="sxs-lookup"><span data-stu-id="c597e-368">The current page request is a callback.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransferRequest">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c597e-369">指定した URL の非同期実行を行います。</span><span class="sxs-lookup"><span data-stu-id="c597e-369">Performs an asynchronous execution of the specified URL.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-370"><xref:System.Web.HttpServerUtility.TransferRequest%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="c597e-370"><xref:System.Web.HttpServerUtility.TransferRequest%2A> was introduced in the .NET Framework version 3.5.</span></span> <span data-ttu-id="c597e-371">.NET Framework の概要については、「[バージョンと依存関係](/dotnet/framework/migration-guide/versions-and-dependencies)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c597e-371">For summary information about the .NET Framework, see [Versions and Dependencies](/dotnet/framework/migration-guide/versions-and-dependencies).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string -&gt; unit" Usage="httpServerUtility.TransferRequest path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c597e-372">サーバー上にある、実行する新しいページの URL パス。</span><span class="sxs-lookup"><span data-stu-id="c597e-372">The URL path of the new page on the server to execute.</span></span></param>
        <summary><span data-ttu-id="c597e-373">指定した URL の非同期実行を行います。</span><span class="sxs-lookup"><span data-stu-id="c597e-373">Performs an asynchronous execution of the specified URL.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-374">このメソッドオーバーロードは、`preserveForm` パラメーターが `false`に設定された <xref:System.Web.HttpServerUtility.TransferRequest%2A> オーバーロードを呼び出し、`method` パラメーターを `null`に設定し、`headers` パラメーターを `null`に設定し、`preserveUser` パラメーターを `true`に設定します。</span><span class="sxs-lookup"><span data-stu-id="c597e-374">This method overload calls the <xref:System.Web.HttpServerUtility.TransferRequest%2A> overload with the `preserveForm` parameter set to `false`, the `method` parameter set to `null`, the `headers` parameter set to `null`, and the `preserveUser` parameter set to `true`.</span></span> <span data-ttu-id="c597e-375">詳細については、「<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29> のオーバーロード」の「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c597e-375">For more information, see the "Remarks" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="c597e-376">この要求には、 [!INCLUDE[iisver](~/includes/iisver-md.md)]の統合パイプライン モードが必要です。</span><span class="sxs-lookup"><span data-stu-id="c597e-376">The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/includes/iisver-md.md)].</span></span></exception>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-377">要求を処理するサーバーが使用できません。</span><span class="sxs-lookup"><span data-stu-id="c597e-377">The server is not available to handle the request.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c597e-378"><paramref name="path" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c597e-378">The <paramref name="path" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c597e-379"><paramref name="path" /> パラメーターが無効です。</span><span class="sxs-lookup"><span data-stu-id="c597e-379">The <paramref name="path" /> parameter is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c597e-380">サーバー上にある、実行する新しいページの URL パス。</span><span class="sxs-lookup"><span data-stu-id="c597e-380">The URL path of the new page on the server to execute.</span></span></param>
        <param name="preserveForm"><span data-ttu-id="c597e-381"><see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は <see langword="true" />、<see cref="P:System.Web.HttpRequest.Form" /> コレクションを消去する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c597e-381"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.Form" /> collection; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.Form" /> collection.</span></span></param>
        <summary><span data-ttu-id="c597e-382">指定した URL の非同期実行を行い、クエリ文字列パラメーターを保持します。</span><span class="sxs-lookup"><span data-stu-id="c597e-382">Performs an asynchronous execution of the specified URL and preserves query string parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-383">このオーバーロードは、`preserveForm` パラメーターが渡された値に設定された <xref:System.Web.HttpServerUtility.TransferRequest%2A> オーバーロードを呼び出し、`method` パラメーターが `null`に設定され、`headers` パラメーターが `null`に設定され、`preserveUser` パラメーターが `true`に設定されています。</span><span class="sxs-lookup"><span data-stu-id="c597e-383">This overload calls the <xref:System.Web.HttpServerUtility.TransferRequest%2A> overload with the `preserveForm` parameter set to the value passed in, the `method` parameter set to `null`, the `headers` parameter set to `null`, and the `preserveUser` parameter set to `true`.</span></span> <span data-ttu-id="c597e-384">詳細については、「<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>」の「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c597e-384">For more information, see the "Remarks" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.</span></span>  
  
 <span data-ttu-id="c597e-385"><xref:System.Web.HttpServerUtility.TransferRequest%2A> は .NET Framework バージョン3.5 で導入されました。</span><span class="sxs-lookup"><span data-stu-id="c597e-385"><xref:System.Web.HttpServerUtility.TransferRequest%2A> is introduced in the .NET Framework version 3.5.</span></span>  <span data-ttu-id="c597e-386">詳細については、「[.NET Framework のバージョンおよび依存関係](/dotnet/framework/migration-guide/versions-and-dependencies)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c597e-386">For more information, see [Versions and Dependencies](/dotnet/framework/migration-guide/versions-and-dependencies).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="c597e-387">この要求には、 [!INCLUDE[iisver](~/includes/iisver-md.md)]の統合パイプライン モードが必要です。</span><span class="sxs-lookup"><span data-stu-id="c597e-387">The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/includes/iisver-md.md)].</span></span></exception>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-388">要求を処理するサーバーが使用できません。</span><span class="sxs-lookup"><span data-stu-id="c597e-388">The server is not available to handle the request.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c597e-389"><paramref name="path" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c597e-389">The <paramref name="path" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c597e-390"><paramref name="path" /> パラメーターが無効です。</span><span class="sxs-lookup"><span data-stu-id="c597e-390">The <paramref name="path" /> parameter is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean, method As String, headers As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ headers);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool * string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm, method, headers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c597e-391">サーバー上にある、実行する新しいページの URL パス。</span><span class="sxs-lookup"><span data-stu-id="c597e-391">The URL path of the new page on the server to execute.</span></span></param>
        <param name="preserveForm"><span data-ttu-id="c597e-392"><see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は <see langword="true" />、<see cref="P:System.Web.HttpRequest.Form" /> コレクションを消去する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c597e-392"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.Form" /> collection; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.Form" /> collection.</span></span></param>
        <param name="method"><span data-ttu-id="c597e-393">新しい要求の実行で使用する HTTP メソッド。</span><span class="sxs-lookup"><span data-stu-id="c597e-393">The HTTP method to use in the execution of the new request.</span></span></param>
        <param name="headers"><span data-ttu-id="c597e-394">新しい要求の要求ヘッダーの <see cref="T:System.Collections.Specialized.NameValueCollection" />。</span><span class="sxs-lookup"><span data-stu-id="c597e-394">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of request headers for the new request.</span></span></param>
        <summary><span data-ttu-id="c597e-395">指定した HTTP メソッドおよびヘッダーを使用して、指定した URL の非同期実行を行います。</span><span class="sxs-lookup"><span data-stu-id="c597e-395">Performs an asynchronous execution of the specified URL using the specified HTTP method and headers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-396">このメソッドは、[!INCLUDE[iisver](~/includes/iisver-md.md)] で統合パイプラインモードを使用してを実行しているときに、正しい要求コンテキストでターゲット要求を実行している間に、要求の処理をあるリソースの種類から別の種類のリソースに転送できるようにするために使用されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-396">This method is used when running with the integrated pipeline mode in [!INCLUDE[iisver](~/includes/iisver-md.md)] to allow request processing to be transferred from one resource type to another while executing the target request with the correct request context.</span></span> <span data-ttu-id="c597e-397">たとえば、<xref:System.Web.HttpServerUtility.TransferRequest%2A> メソッドを使用して、ASPX ページの要求を XML ページの要求に転送できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-397">For example, you can use the <xref:System.Web.HttpServerUtility.TransferRequest%2A> method to transfer a request for an ASPX page to a request for an XML page.</span></span>  
  
 <span data-ttu-id="c597e-398"><xref:System.Web.HttpServerUtility.TransferRequest%2A> メソッドは、指定された URL の非同期の子実行を次の条件で実行します。</span><span class="sxs-lookup"><span data-stu-id="c597e-398">The <xref:System.Web.HttpServerUtility.TransferRequest%2A> method performs an asynchronous child execution of the specified URL with the following conditions:</span></span>  
  
-   <span data-ttu-id="c597e-399">`path` パラメーターでクエリ文字列を指定した場合は、新しいクエリ文字列として使用されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-399">If the `path` parameter specifies a query string, it will be used as the new query string.</span></span> <span data-ttu-id="c597e-400">クエリ文字列が含まれていない場合は、要求のクエリ文字列が再利用されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-400">If no query string is included, the query string of the request will be re-used.</span></span>  
  
-   <span data-ttu-id="c597e-401">`method` パラメーターを指定した場合は、それが使用されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-401">If the `method` parameter is specified, it will be used.</span></span> <span data-ttu-id="c597e-402">`null`されている場合は、元の要求の HTTP メソッドが使用されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-402">If it is `null`, the HTTP method of the original request will be used.</span></span>  
  
-   <span data-ttu-id="c597e-403">`preserveForm` パラメーターが `true`場合は、要求の現在のエンティティ本体をターゲット要求で使用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="c597e-403">If the `preserveForm` parameter is `true`, the current entity body of the request will be available to the target request.</span></span> <span data-ttu-id="c597e-404">これにより、フォームの投稿とアップロードを転送できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-404">This allows form posts and uploads to be transferred.</span></span>  
  
-   <span data-ttu-id="c597e-405">ユーザー id が元の要求に対して現在設定されている場合、id は新しい要求に転送されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-405">If the user identity is currently set on the original request, the identity will be transferred to the new request.</span></span> <span data-ttu-id="c597e-406">これにより、認証された要求は、新しい要求の認証結果を再利用できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-406">This allows authenticated requests to re-use the result of the authentication for the new request.</span></span> <span data-ttu-id="c597e-407">ユーザーが転送されないようにするには、転送する前に、元の要求に対して `null` するようにユーザーを設定します。</span><span class="sxs-lookup"><span data-stu-id="c597e-407">If you do not want the user to be transferred, set the user to `null` on the original request before transferring.</span></span>  
  
-   <span data-ttu-id="c597e-408">`headers` パラメーターを指定すると、指定したヘッダーを使用して新しい要求が実行されます。</span><span class="sxs-lookup"><span data-stu-id="c597e-408">If the `headers` parameter is specified, the new request will execute with the specified headers.</span></span> <span data-ttu-id="c597e-409">これを使用して、新しい要求の要求ヘッダーとクッキーを変更したり、元の要求を受信した場所を指定する特別なヘッダーを追加したりできます。</span><span class="sxs-lookup"><span data-stu-id="c597e-409">This can be used to modify the request headers and cookies for the new request, or add a special header that specifies where the original request was received.</span></span>  
  
     <span data-ttu-id="c597e-410">このメソッドは、`preserveUser` パラメーターを `true`に設定して、<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29> メソッドのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c597e-410">This method calls the <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%2CSystem.Boolean%29> method overload with the `preserveUser` parameter set to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="c597e-411">この要求を実行するには、統合モードで実行している [!INCLUDE[iisver](~/includes/iisver-md.md)] が必要です。</span><span class="sxs-lookup"><span data-stu-id="c597e-411">The request requires [!INCLUDE[iisver](~/includes/iisver-md.md)] running in integrated mode.</span></span></exception>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-412">要求を処理するサーバーが使用できません。</span><span class="sxs-lookup"><span data-stu-id="c597e-412">The server is not available to handle the request.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c597e-413"><paramref name="path" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c597e-413">The <paramref name="path" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c597e-414"><paramref name="path" /> パラメーターが無効です。</span><span class="sxs-lookup"><span data-stu-id="c597e-414">The <paramref name="path" /> parameter is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TransferRequest">
      <MemberSignature Language="C#" Value="public void TransferRequest (string path, bool preserveForm, string method, System.Collections.Specialized.NameValueCollection headers, bool preserveUser);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransferRequest(string path, bool preserveForm, string method, class System.Collections.Specialized.NameValueCollection headers, bool preserveUser) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.TransferRequest(System.String,System.Boolean,System.String,System.Collections.Specialized.NameValueCollection,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransferRequest (path As String, preserveForm As Boolean, method As String, headers As NameValueCollection, preserveUser As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransferRequest(System::String ^ path, bool preserveForm, System::String ^ method, System::Collections::Specialized::NameValueCollection ^ headers, bool preserveUser);" />
      <MemberSignature Language="F#" Value="member this.TransferRequest : string * bool * string * System.Collections.Specialized.NameValueCollection * bool -&gt; unit" Usage="httpServerUtility.TransferRequest (path, preserveForm, method, headers, preserveUser)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveForm" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="method" Type="System.String" Index="2" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="headers" Type="System.Collections.Specialized.NameValueCollection" Index="3" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="preserveUser" Type="System.Boolean" Index="4" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="c597e-415">パス。</span><span class="sxs-lookup"><span data-stu-id="c597e-415">The path.</span></span></param>
        <param name="preserveForm"><span data-ttu-id="c597e-416"><see cref="P:System.Web.HttpRequest.Form" /> コレクションを保持する場合は <see langword="true" />、<see cref="P:System.Web.HttpRequest.Form" /> コレクションを消去する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c597e-416"><see langword="true" /> to preserve the <see cref="P:System.Web.HttpRequest.Form" /> collection; <see langword="false" /> to clear the <see cref="P:System.Web.HttpRequest.Form" /> collection.</span></span></param>
        <param name="method"><span data-ttu-id="c597e-417">新しい要求で使用する HTTP メソッド。</span><span class="sxs-lookup"><span data-stu-id="c597e-417">The HTTP method to use in the new request.</span></span></param>
        <param name="headers"><span data-ttu-id="c597e-418">新しい要求の要求ヘッダーを含む <see cref="T:System.Collections.Specialized.NameValueCollection" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c597e-418">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> object that contains request headers for the new request.</span></span></param>
        <param name="preserveUser"><span data-ttu-id="c597e-419">ユーザー id を保持する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c597e-419"><see langword="true" /> to preserve the user identity; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="c597e-420">このメソッドの他のメソッド オーバーロードは、このパラメーターが <see langword="true" /> に設定された状態でこのオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c597e-420">The other method overloads of this method call this overload with this parameter set to <see langword="true" />.</span></span></param>
        <summary><span data-ttu-id="c597e-421">指定した HTTP メソッド、ヘッダー、およびパスを使用して、指定した URL の非同期実行を実行します。また、任意でユーザー id とフォーム値を保持します。</span><span class="sxs-lookup"><span data-stu-id="c597e-421">Performs an asynchronous execution of the specified URL using the specified HTTP method, headers, and path, and optionally preserves form values and the user identity.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-422">詳細については、「<xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>」の「解説」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c597e-422">For more information, see the "Remarks" section in <xref:System.Web.HttpServerUtility.TransferRequest%28System.String%2CSystem.Boolean%2CSystem.String%2CSystem.Collections.Specialized.NameValueCollection%29>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="c597e-423">この要求には、 [!INCLUDE[iisver](~/includes/iisver-md.md)]の統合パイプライン モードが必要です。</span><span class="sxs-lookup"><span data-stu-id="c597e-423">The request requires the integrated pipeline mode of [!INCLUDE[iisver](~/includes/iisver-md.md)].</span></span></exception>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c597e-424">要求を処理するサーバーが使用できません。</span><span class="sxs-lookup"><span data-stu-id="c597e-424">The server is not available to handle the request.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c597e-425"><paramref name="path" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c597e-425">The <paramref name="path" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c597e-426"><paramref name="path" /> パラメーターが無効です。</span><span class="sxs-lookup"><span data-stu-id="c597e-426">The <paramref name="path" /> parameter is invalid.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlDecode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c597e-427">HTTP 伝送用にエンコードされた文字列をデコードし、URL の形でサーバーに送信します。</span><span class="sxs-lookup"><span data-stu-id="c597e-427">Decodes a string that was encoded for HTTP transmission and then sent to the server in a URL.</span></span>  
  
<span data-ttu-id="c597e-428"><see cref="T:System.Net.WebUtility" /> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-428">To encode or decode values outside of a web application, use the <see cref="T:System.Net.WebUtility" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public string UrlDecode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlDecode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlDecode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlDecode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlDecode : string -&gt; string" Usage="httpServerUtility.UrlDecode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c597e-429">デコードする文字列。</span><span class="sxs-lookup"><span data-stu-id="c597e-429">The text string to decode.</span></span></param>
        <summary><span data-ttu-id="c597e-430">文字列を URL デコードし、デコードされた文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c597e-430">URL-decodes a string and returns the decoded string.</span></span></summary>
        <returns><span data-ttu-id="c597e-431">デコードされたテキスト。</span><span class="sxs-lookup"><span data-stu-id="c597e-431">The decoded text.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-432">URL エンコードによって、すべてのブラウザーが URL 文字列内のテキストを正しく転送できるようになります。</span><span class="sxs-lookup"><span data-stu-id="c597e-432">URL encoding ensures that all browsers will correctly transmit text in URL strings.</span></span> <span data-ttu-id="c597e-433">一部のブラウザーでは、疑問符 (?)、アンパサンド (&)、スラッシュ (/)、スペースなどの文字が切り捨てられたり、破損したりする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-433">Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers.</span></span> <span data-ttu-id="c597e-434">そのため、これらの文字は `<a>` タグまたはクエリ文字列でエンコードして、要求文字列でブラウザーが文字列を再送信できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-434">As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.</span></span>  
  
 <span data-ttu-id="c597e-435">このメソッドは、ASP.NET アプリケーションから実行時に <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> メソッドにアクセスするための便利な方法です。</span><span class="sxs-lookup"><span data-stu-id="c597e-435">This method is a convenient way to access the <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c597e-436">内部的には、このメソッドは <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> を使用して文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-436">Internally, this method uses <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> to decode strings.</span></span>  
  
 <span data-ttu-id="c597e-437">ASP.NET web ページの分離コードファイルで、`Server` プロパティを使用して <xref:System.Web.HttpServerUtility> クラスのインスタンスにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="c597e-437">In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property.</span></span> <span data-ttu-id="c597e-438">分離コードファイルにないクラスでは、`HttpContext.Current.Server` を使用して、<xref:System.Web.HttpServerUtility> クラスのインスタンスにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="c597e-438">In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.</span></span>  
  
 <span data-ttu-id="c597e-439">Web アプリケーションの外部では、<xref:System.Net.WebUtility> クラスを使用して値をエンコードまたはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-439">Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-440">次の例では、クエリ文字列から取得した値を URL デコードする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c597e-440">The following example shows how to URL-decode a value that is retrieved from the query string.</span></span> <span data-ttu-id="c597e-441">このコードは、web ページの分離コードファイルに存在します。</span><span class="sxs-lookup"><span data-stu-id="c597e-441">The code resides in the code-behind file for a web page.</span></span> <span data-ttu-id="c597e-442">`ReturnPage` は `HyperLink` コントロールを参照します。</span><span class="sxs-lookup"><span data-stu-id="c597e-442">`ReturnPage` refers to a `HyperLink` control.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlDecode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/vb/default.aspx.vb#1)]  
  
 <span data-ttu-id="c597e-443">次の例は前の例と似ていますが、分離コードファイルに含まれていないクラス内から値を URL デコードする方法を示している点が異なります。</span><span class="sxs-lookup"><span data-stu-id="c597e-443">The next example is similar to the previous example except it shows how to URL-decode a value from within a class that is not in the code-behind file.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlDecode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.UrlDecode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urldecode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlDecode">
      <MemberSignature Language="C#" Value="public void UrlDecode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlDecode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlDecode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UrlDecode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UrlDecode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.UrlDecode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.UrlDecode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c597e-444">デコードする HTML 文字列。</span><span class="sxs-lookup"><span data-stu-id="c597e-444">The HTML string to decode.</span></span></param>
        <param name="output"><span data-ttu-id="c597e-445">デコードされた文字列を格納する <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="c597e-445">The <see cref="T:System.IO.TextWriter" /> output stream that contains the decoded string.</span></span></param>
        <summary><span data-ttu-id="c597e-446">URL 形式で受け取った HTML 文字列をデコードし、その結果の出力を <see cref="T:System.IO.TextWriter" /> 出力ストリームへ送信します。</span><span class="sxs-lookup"><span data-stu-id="c597e-446">Decodes an HTML string received in a URL and sends the resulting output to a <see cref="T:System.IO.TextWriter" /> output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-447">URL エンコードによって、すべてのブラウザーが URL 文字列内のテキストを正しく転送できるようになります。</span><span class="sxs-lookup"><span data-stu-id="c597e-447">URL encoding ensures that all browsers will correctly transmit text in URL strings.</span></span> <span data-ttu-id="c597e-448">一部のブラウザーでは、疑問符 (?)、アンパサンド (&)、スラッシュ (/)、スペースなどの文字が切り捨てられたり、破損したりする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-448">Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers.</span></span> <span data-ttu-id="c597e-449">そのため、これらの文字は `<a>` タグまたはクエリ文字列でエンコードして、要求文字列でブラウザーが文字列を再送信できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-449">As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.</span></span>  
  
 <span data-ttu-id="c597e-450"><xref:System.Web.HttpServerUtility.UrlDecode%2A> は、実行時に ASP.NET アプリケーションから <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> メソッドにアクセスするための便利な方法です。</span><span class="sxs-lookup"><span data-stu-id="c597e-450"><xref:System.Web.HttpServerUtility.UrlDecode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c597e-451">内部的には、<xref:System.Web.HttpServerUtility.UrlDecode%2A> は <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> を使用して文字列をデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-451">Internally, <xref:System.Web.HttpServerUtility.UrlDecode%2A> uses <xref:System.Web.HttpUtility.UrlDecode%2A?displayProperty=nameWithType> to decode strings.</span></span>  
  
 <span data-ttu-id="c597e-452"><xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-452">To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-453">次の例では、`EncodedString` という名前の文字列 (URL で受信) を `DecodedString`という名前の文字列にデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-453">The following example decodes the string named `EncodedString` (received in a URL) into the string named `DecodedString`.</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.UrlDecode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.UrlDecode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.UrlDecode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.UrlDecode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="UrlEncode">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c597e-454">URL を使用して Web サーバーからクライアントへ信頼性のある HTTP 伝送を行うために、文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-454">Encodes a string for reliable HTTP transmission from the Web server to a client through the URL.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-455"><xref:System.Web.HttpServerUtility.UrlEncode%2A> は、実行時に ASP.NET アプリケーションから <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> メソッドにアクセスするための便利な方法です。</span><span class="sxs-lookup"><span data-stu-id="c597e-455"><xref:System.Web.HttpServerUtility.UrlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c597e-456">内部的には、<xref:System.Web.HttpServerUtility.UrlEncode%2A> は <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> を使用して文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-456">Internally, <xref:System.Web.HttpServerUtility.UrlEncode%2A> uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> to encode strings.</span></span>  
  
 <span data-ttu-id="c597e-457"><xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-457">To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public string UrlEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlEncode : string -&gt; string" Usage="httpServerUtility.UrlEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c597e-458">URL エンコードするテキスト。</span><span class="sxs-lookup"><span data-stu-id="c597e-458">The text to URL-encode.</span></span></param>
        <summary><span data-ttu-id="c597e-459">文字列を URL エンコードし、エンコードされた文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c597e-459">URL-encodes a string and returns the encoded string.</span></span></summary>
        <returns><span data-ttu-id="c597e-460">URL エンコードされたテキスト。</span><span class="sxs-lookup"><span data-stu-id="c597e-460">The URL-encoded text.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-461">URL エンコードによって、すべてのブラウザーが URL 文字列内のテキストを正しく転送できるようになります。</span><span class="sxs-lookup"><span data-stu-id="c597e-461">URL encoding ensures that all browsers will correctly transmit text in URL strings.</span></span> <span data-ttu-id="c597e-462">一部のブラウザーでは、疑問符 (?)、アンパサンド (&)、スラッシュ (/)、スペースなどの文字が切り捨てられたり、破損したりする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-462">Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers.</span></span> <span data-ttu-id="c597e-463">そのため、これらの文字は `<a>` タグまたはクエリ文字列でエンコードして、要求文字列でブラウザーが文字列を再送信できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-463">As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.</span></span>  
  
 <span data-ttu-id="c597e-464">このメソッドは、ASP.NET アプリケーションから実行時に <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> メソッドにアクセスするための便利な方法です。</span><span class="sxs-lookup"><span data-stu-id="c597e-464">This method is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c597e-465">内部的には、このメソッドは <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> を使用して文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-465">Internally, this method uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> to encode strings.</span></span>  
  
 <span data-ttu-id="c597e-466">ASP.NET web ページの分離コードファイルで、`Server` プロパティを使用して <xref:System.Web.HttpServerUtility> クラスのインスタンスにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="c597e-466">In the code-behind file for an ASP.NET web page, access an instance of the <xref:System.Web.HttpServerUtility> class through the `Server` property.</span></span> <span data-ttu-id="c597e-467">分離コードファイルにないクラスでは、`HttpContext.Current.Server` を使用して、<xref:System.Web.HttpServerUtility> クラスのインスタンスにアクセスします。</span><span class="sxs-lookup"><span data-stu-id="c597e-467">In a class that is not in a code-behind file, use `HttpContext.Current.Server` to access an instance of the <xref:System.Web.HttpServerUtility> class.</span></span>  
  
 <span data-ttu-id="c597e-468">Web アプリケーションの外部では、<xref:System.Net.WebUtility> クラスを使用して値をエンコードまたはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-468">Outside of a web application, use the <xref:System.Net.WebUtility> class to encode or decode values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-469">次の例は、ハイパーリンクのクエリ文字列値として使用される値を URL エンコードする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c597e-469">The following example shows how to URL-encode a value that is used as a query string value of a hyperlink.</span></span> <span data-ttu-id="c597e-470">このコードは、web ページの分離コードファイルに存在します。</span><span class="sxs-lookup"><span data-stu-id="c597e-470">The code resides in the code-behind file for a web page.</span></span> <span data-ttu-id="c597e-471">エンコードする値はこの例ではハードコーディングされています。この例では、例を単純化し、URL エンコードする値の型を示しています。</span><span class="sxs-lookup"><span data-stu-id="c597e-471">The value to encode is hard-coded in this example only to simplify the example and show the type of value you might URL-encode.</span></span> <span data-ttu-id="c597e-472">通常は、ユーザーまたは要求から受け取った値を URL エンコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-472">Typically, you would URL-encode a value that you received from the user or the request.</span></span> <span data-ttu-id="c597e-473">`NextPage` は `HyperLink` コントロールを参照します。</span><span class="sxs-lookup"><span data-stu-id="c597e-473">`NextPage` refers to a `HyperLink` control.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlEncode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/cs/default.aspx.cs#1)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/vb/default.aspx.vb#1)]  
  
 <span data-ttu-id="c597e-474">次の例は前の例と似ていますが、分離コードファイルに含まれていないクラス内から値を URL エンコードする方法を示している点が異なります。</span><span class="sxs-lookup"><span data-stu-id="c597e-474">The next example is similar to the previous example except it shows how to URL-encode a value from within a class that is not in the code-behind file.</span></span>  
  
 [!code-csharp[System.Web.HttpServerUtility.UrlEncode#2](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/cs/sampleclass.cs#2)]
 [!code-vb[System.Web.HttpServerUtility.UrlEncode#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.httpserverutility.urlencode/vb/sampleclass.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlEncode">
      <MemberSignature Language="C#" Value="public void UrlEncode (string s, System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UrlEncode(string s, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlEncode(System.String,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UrlEncode (s As String, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UrlEncode(System::String ^ s, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.UrlEncode : string * System.IO.TextWriter -&gt; unit" Usage="httpServerUtility.UrlEncode (s, output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c597e-475">エンコードする文字列。</span><span class="sxs-lookup"><span data-stu-id="c597e-475">The text string to encode.</span></span></param>
        <param name="output"><span data-ttu-id="c597e-476">エンコードされた文字列を格納している <see cref="T:System.IO.TextWriter" /> 出力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="c597e-476">The <see cref="T:System.IO.TextWriter" /> output stream that contains the encoded string.</span></span></param>
        <summary><span data-ttu-id="c597e-477">文字列を URL エンコードし、その結果の出力を <see cref="T:System.IO.TextWriter" /> 出力ストリームに送信します。</span><span class="sxs-lookup"><span data-stu-id="c597e-477">URL-encodes a string and sends the resulting output to a <see cref="T:System.IO.TextWriter" /> output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-478">URL エンコードによって、すべてのブラウザーが URL 文字列内のテキストを正しく転送できるようになります。</span><span class="sxs-lookup"><span data-stu-id="c597e-478">URL encoding ensures that all browsers will correctly transmit text in URL strings.</span></span> <span data-ttu-id="c597e-479">一部のブラウザーでは、疑問符 (?)、アンパサンド (&)、スラッシュ (/)、スペースなどの文字が切り捨てられたり、破損したりする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-479">Characters such as a question mark (?), ampersand (&), slash mark (/), and spaces might be truncated or corrupted by some browsers.</span></span> <span data-ttu-id="c597e-480">そのため、これらの文字は `<a>` タグまたはクエリ文字列でエンコードして、要求文字列でブラウザーが文字列を再送信できるようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="c597e-480">As a result, these characters must be encoded in `<a>` tags or in query strings where the strings can be re-sent by a browser in a request string.</span></span>  
  
 <span data-ttu-id="c597e-481"><xref:System.Web.HttpServerUtility.UrlEncode%2A> は、実行時に ASP.NET アプリケーションから <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> メソッドにアクセスするための便利な方法です。</span><span class="sxs-lookup"><span data-stu-id="c597e-481"><xref:System.Web.HttpServerUtility.UrlEncode%2A> is a convenient way to access the <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> method at run time from an ASP.NET application.</span></span> <span data-ttu-id="c597e-482">内部的には、<xref:System.Web.HttpServerUtility.UrlEncode%2A> は <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> を使用して文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-482">Internally, <xref:System.Web.HttpServerUtility.UrlEncode%2A> uses <xref:System.Web.HttpUtility.UrlEncode%2A?displayProperty=nameWithType> to encode strings.</span></span>  
  
 <span data-ttu-id="c597e-483"><xref:System.Net.WebUtility> クラスを使用して、web アプリケーションの外部の値をエンコード、またはデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-483">To encode or decode values outside of a web application, use the <xref:System.Net.WebUtility> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c597e-484">次の例では、HTTP によって送信されるように文字列をエンコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-484">The following example encodes a string for transmission by HTTP.</span></span> <span data-ttu-id="c597e-485">`TestString`という名前の文字列をエンコードします。これには、"This is a \<Test String >." というテキストが含まれ、"This + is + a +% 3cTest + String% 3e." として `EncodedString` という名前の文字列にコピーされます。</span><span class="sxs-lookup"><span data-stu-id="c597e-485">It encodes the string named `TestString`, which contains the text "This is a \<Test String>.", and copies it into the string named `EncodedString` as "This+is+a+%3cTest+String%3e.".</span></span>  
  
 [!code-csharp[Classic HttpServerUtility.UrlEncode1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpServerUtility.UrlEncode1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpServerUtility.UrlEncode1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpServerUtility.UrlEncode1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlPathEncode">
      <MemberSignature Language="C#" Value="public string UrlPathEncode (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UrlPathEncode(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlPathEncode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UrlPathEncode (s As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ UrlPathEncode(System::String ^ s);" />
      <MemberSignature Language="F#" Value="member this.UrlPathEncode : string -&gt; string" Usage="httpServerUtility.UrlPathEncode s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="c597e-486">URL エンコードするテキスト。</span><span class="sxs-lookup"><span data-stu-id="c597e-486">The text to URL-encode.</span></span></param>
        <summary><span data-ttu-id="c597e-487">使用しないでください。ブラウザーの互換性のためだけのものです。</span><span class="sxs-lookup"><span data-stu-id="c597e-487">Do not use; intended only for browser compatibility.</span></span> <span data-ttu-id="c597e-488"><see cref="M:System.Web.HttpServerUtility.UrlEncode(System.String)" />を使用します。</span><span class="sxs-lookup"><span data-stu-id="c597e-488">Use <see cref="M:System.Web.HttpServerUtility.UrlEncode(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="c597e-489">URL エンコードされたテキスト。</span><span class="sxs-lookup"><span data-stu-id="c597e-489">The URL encoded text.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlTokenDecode">
      <MemberSignature Language="C#" Value="public static byte[] UrlTokenDecode (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] UrlTokenDecode(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlTokenDecode (input As String) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Byte&gt; ^ UrlTokenDecode(System::String ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlTokenDecode : string -&gt; byte[]" Usage="System.Web.HttpServerUtility.UrlTokenDecode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="c597e-490">デコードする URL 文字列トークン。</span><span class="sxs-lookup"><span data-stu-id="c597e-490">The URL string token to decode.</span></span></param>
        <summary><span data-ttu-id="c597e-491">URL 文字列トークンをデコードし、base 64 を使用して等価なバイト配列を作成します。</span><span class="sxs-lookup"><span data-stu-id="c597e-491">Decodes a URL string token to its equivalent byte array using base 64 digits.</span></span></summary>
        <returns><span data-ttu-id="c597e-492">デコードされた URL 文字列トークンが格納されたバイト配列。</span><span class="sxs-lookup"><span data-stu-id="c597e-492">The byte array containing the decoded URL string token.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-493"><xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> メソッドは、バイナリデータを base 64 の数字としてエンコードする URL 文字列トークンを、それと等価なバイト配列表現に変換します。</span><span class="sxs-lookup"><span data-stu-id="c597e-493">The <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> method converts a URL string token, which encodes binary data as base 64 digits, to its equivalent byte array representation.</span></span> <span data-ttu-id="c597e-494"><xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> メソッドを使用して、URL で送信され、<xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>を使用してエンコードされたトークンをデコードします。</span><span class="sxs-lookup"><span data-stu-id="c597e-494">Use the <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> method to decode tokens transmitted on the URL and encoded by using the <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A>.</span></span>  
  
 <span data-ttu-id="c597e-495">`input` パラメーターの長さが1より小さい場合、<xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> メソッドは空のバイト配列を返します。</span><span class="sxs-lookup"><span data-stu-id="c597e-495">The <xref:System.Web.HttpServerUtility.UrlTokenDecode%2A> method will return an empty byte array if the `input` parameter has a length of less than one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c597e-496"><paramref name="input" /> パラメーターの値が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c597e-496">The value of the <paramref name="input" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="UrlTokenEncode">
      <MemberSignature Language="C#" Value="public static string UrlTokenEncode (byte[] input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string UrlTokenEncode(unsigned int8[] input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpServerUtility.UrlTokenEncode(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UrlTokenEncode (input As Byte()) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UrlTokenEncode(cli::array &lt;System::Byte&gt; ^ input);" />
      <MemberSignature Language="F#" Value="static member UrlTokenEncode : byte[] -&gt; string" Usage="System.Web.HttpServerUtility.UrlTokenEncode input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Byte[]" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="input"><span data-ttu-id="c597e-497">エンコードするバイト配列。</span><span class="sxs-lookup"><span data-stu-id="c597e-497">The byte array to encode.</span></span></param>
        <summary><span data-ttu-id="c597e-498">Base64 形式の文字を使用して、バイト配列を等価の文字列表現にエンコードします。この文字列表現は、URL での送信で使用できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-498">Encodes a byte array into its equivalent string representation using base 64 digits, which is usable for transmission on the URL.</span></span></summary>
        <returns><span data-ttu-id="c597e-499">バイト配列の *length* が 2 以上の場合はエンコードされたトークンを格納している文字列。それ以外の場合は空の文字列 ("")。</span><span class="sxs-lookup"><span data-stu-id="c597e-499">The string containing the encoded token if the byte array *length* is greater than one; otherwise, an empty string ("").</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c597e-500"><xref:System.Web.HttpServerUtility.UrlTokenEncode%2A> メソッドは、バイト配列を base 64 の数字でエンコードされた等価の文字列形式に変換します。</span><span class="sxs-lookup"><span data-stu-id="c597e-500">The <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A> method converts a byte array into an equivalent string representation encoded with base 64 digits.</span></span> <span data-ttu-id="c597e-501">生成された文字列トークンは URL で送信できます。</span><span class="sxs-lookup"><span data-stu-id="c597e-501">The resulting string token can be transmitted on the URL.</span></span>  
  
 <span data-ttu-id="c597e-502">`input` パラメーターの長さが1より小さい場合、<xref:System.Web.HttpServerUtility.UrlTokenEncode%2A> は空の文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c597e-502">The <xref:System.Web.HttpServerUtility.UrlTokenEncode%2A> will return an empty string if the `input` parameter has a length of less than one.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c597e-503"><paramref name="input" /> パラメーターの値が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c597e-503">The value of the <paramref name="input" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Convert.ToBase64String(System.Byte[])" />
        <altmember cref="M:System.Web.HttpServerUtility.UrlTokenDecode(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
