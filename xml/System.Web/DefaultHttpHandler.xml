<Type Name="DefaultHttpHandler" FullName="System.Web.DefaultHttpHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5521ea3e40ff815bf51089ba7c923ed2b98372c8" /><Meta Name="ms.sourcegitcommit" Value="f9576bf8c61e3d46834aeeff50f858359f2a99ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/09/2020" /><Meta Name="ms.locfileid" Value="77105693" /></Metadata><TypeSignature Language="C#" Value="public class DefaultHttpHandler : System.Web.IHttpAsyncHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultHttpHandler extends System.Object implements class System.Web.IHttpAsyncHandler, class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.DefaultHttpHandler" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultHttpHandler&#xA;Implements IHttpAsyncHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultHttpHandler : System::Web::IHttpAsyncHandler" />
  <TypeSignature Language="F#" Value="type DefaultHttpHandler = class&#xA;    interface IHttpAsyncHandler&#xA;    interface IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpAsyncHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.IHttpHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>既定の HTTP ハンドラーのプロパティとメソッドを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DefaultHttpHandler> オブジェクトは、要求のインターセプトがインターネットインフォメーションサービス (IIS) 6.0 を使用して構成されていて、要求された拡張機能に明示的なバインドが適用されていない場合に、HTTP パイプライン内の受信要求をインターセプトします。

 要求のインターセプトは、IIS 6.0 で導入されたワイルドカードアプリケーションマッピング機能を使用して設定できます。

 <xref:System.Web.DefaultHttpHandler> クラスは、非同期要求処理を提供するために <xref:System.Web.IHttpAsyncHandler> インターフェイスを実装します。 HTTP ハンドラーに関する一般的な情報については、「 [Http ハンドラーと Http モジュールの概要](https://docs.microsoft.com/previous-versions/aspnet/bb398986(v=vs.100))」を参照してください。 さらに、詳細については、次を参照してください。

-   非同期 HTTP ハンドラーの作成については、「[チュートリアル: 非同期 Http ハンドラーの作成](https://docs.microsoft.com/previous-versions/aspnet/ms227433(v=vs.100))」を参照してください。

-   HTTP ハンドラーの登録については、「[方法: Http ハンドラーを登録する](https://docs.microsoft.com/previous-versions/aspnet/46c5ddfy(v=vs.100))」を参照してください。

 クラスは、<xref:System.Web.DefaultHttpHandler> クラスから派生させ、要求をカスタマイズした処理を提供できます。 <xref:System.Web.DefaultHttpHandler> から派生した非同期 HTTP ハンドラーは、<xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> メソッドをオーバーライドして、要求の処理方法を変更できます。

 <xref:System.Web.DefaultHttpHandler> では、ASP.NET エラーは使用されません。 IIS エラーまたは propriety ISAPI カスタムエラーメカニズムを使用する既存のコンテンツは、変更されずに動作します。



## Examples
 次のコード例は、<xref:System.Web.DefaultHttpHandler> クラスから派生することによって、カスタマイズされた HTTP ハンドラーを実装する方法を示しています。

 [!code-csharp[System.Web.DefaultHttpHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/CS/source.cs#1)]
 [!code-vb[System.Web.DefaultHttpHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.DefaultHttpHandler/VB/source.vb#1)]

 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/46c5ddfy(v=vs.100)">方法: HTTP ハンドラーを登録する</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms227433(v=vs.100)">方法: 非同期 HTTP ハンドラーを作成する</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultHttpHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultHttpHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.DefaultHttpHandler" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginProcessRequest (context As HttpContext, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginProcessRequest(System::Web::HttpContext ^ context, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginProcessRequest : System.Web.HttpContext * AsyncCallback * obj -&gt; IAsyncResult" Usage="defaultHttpHandler.BeginProcessRequest (context, callback, state)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">HTTP 要求を処理するために使用される組み込みサーバー オブジェクトへの参照を提供するオブジェクト。</param>
        <param name="callback">非同期メソッド呼び出しの完了時に呼び出すメソッド。 <paramref name="callback" /> が <see langword="null" /> の場合、このデリゲートは呼び出されません。</param>
        <param name="state">要求を処理するために必要な状態データ。</param>
        <summary>HTTP ハンドラーの非同期呼び出しを開始します。</summary>
        <returns>プロセスの状態に関する情報を格納している <see cref="T:System.IAsyncResult" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 非同期に使用する HTTP ハンドラーを作成する場合は、ASP.NET によって非同期的に呼び出される非同期 <xref:System.Web.DefaultHttpHandler.BeginProcessRequest%2A> および <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> メソッドをハンドラーで実装する必要があります。

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">要求処理の実行前の状態がエラーです。要求されたファイルの拡張子が .asp であるか、または要求が POST を使用して送信されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="protected System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.Context" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.DefaultHttpHandler.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see cref="T:System.Web.DefaultHttpHandler" /> オブジェクトに関連付けられているコンテキストを取得します。</summary>
        <value>現在のコンテキストを格納している <see cref="T:System.Web.HttpContext" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DefaultHttpHandler.Context%2A> プロパティは、派生クラスの現在の <xref:System.Web.HttpContext> オブジェクトへのアクセスを提供します。 <xref:System.Web.HttpContext> オブジェクトを使用すると、要求の組み込みの <xref:System.Web.HttpApplication.Request%2A>、<xref:System.Web.HttpApplication.Response%2A>、および <xref:System.Web.HttpApplication.Server%2A> の各プロパティにアクセスできます。 コンテキスト情報へのアクセスの詳細については、「<xref:System.Web.HttpContext>」を参照してください。

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.EndProcessRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndProcessRequest (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndProcessRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndProcessRequest : IAsyncResult -&gt; unit&#xA;override this.EndProcessRequest : IAsyncResult -&gt; unit" Usage="defaultHttpHandler.EndProcessRequest result" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">プロセスのステータスに関する情報を格納しているオブジェクト。</param>
        <summary>非同期処理の終了メソッドを提供します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DefaultHttpHandler.EndProcessRequest%2A> メソッドを使用して、非同期処理中にキャッチされた例外をスローすることができます。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteUrlHeaders">
      <MemberSignature Language="C#" Value="protected System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ExecuteUrlHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ExecuteUrlHeaders As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Specialized::NameValueCollection ^ ExecuteUrlHeaders { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteUrlHeaders : System.Collections.Specialized.NameValueCollection" Usage="System.Web.DefaultHttpHandler.ExecuteUrlHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要求と共に転送する要求ヘッダーと要求値のコレクションを取得します。</summary>
        <value>要求のヘッダーと値が格納された <see cref="T:System.Collections.Specialized.NameValueCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DefaultHttpHandler.ExecuteUrlHeaders%2A> プロパティは、<xref:System.Web.DefaultHttpHandler> クラスから派生したクラスに値が設定されていない限り、空のコレクションを返します。 追加されたヘッダーは、要求をインターネットインフォメーションサービス (IIS) に渡す前に、要求内のヘッダーのコレクションに追加されます。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.DefaultHttpHandler.IsReusable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsReusable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsReusable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReusable : bool" Usage="System.Web.DefaultHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.IHttpHandler.IsReusable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.DefaultHttpHandler" /> クラスの現在のインスタンスを別の要求が使用できるかどうかを示すブール値を取得します。</summary>
        <value><see langword="true" /> を再利用できる場合は <see cref="T:System.Web.DefaultHttpHandler" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DefaultHttpHandler.IsReusable%2A> プロパティを明示的に `true` または `false`に設定するには、<xref:System.Web.DefaultHttpHandler.IsReusable%2A> プロパティをオーバーライドします。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnExecuteUrlPreconditionFailure">
      <MemberSignature Language="C#" Value="public virtual void OnExecuteUrlPreconditionFailure ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnExecuteUrlPreconditionFailure() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnExecuteUrlPreconditionFailure ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnExecuteUrlPreconditionFailure();" />
      <MemberSignature Language="F#" Value="abstract member OnExecuteUrlPreconditionFailure : unit -&gt; unit&#xA;override this.OnExecuteUrlPreconditionFailure : unit -&gt; unit" Usage="defaultHttpHandler.OnExecuteUrlPreconditionFailure " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>実行前の状態が原因で <see cref="T:System.Web.DefaultHttpHandler" /> オブジェクトが要求を処理できない場合に呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 事前条件は、クライアントによって要求ヘッダーフィールドに指定され、Web サーバーで評価されます。 たとえば、事前条件を使用すると、クライアントは、要求されたメソッド (GET など) が目的のリソース以外のリソースに適用されないようにすることができます。 詳細については、World Wide Web コンソーシアム (W3C) Web サイトの「[ハイパーテキスト転送プロトコル--HTTP/1.1](https://go.microsoft.com/fwlink/?LinkID=73147)仕様」の「ヘッダーフィールド定義」セクション14を参照してください。

 <xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> メソッドは、事前条件によって <xref:System.Web.DefaultHttpHandler> オブジェクトが要求を処理できない場合に呼び出されます。 派生クラスは、<xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> メソッドをオーバーライドして、事前条件が失敗したときに例外をスローすることがあります。 <xref:System.Web.DefaultHttpHandler> は、<xref:System.Web.DefaultHttpHandler.OnExecuteUrlPreconditionFailure%2A> メソッドで例外をスローしません。

 次のいずれかを実行すると、事前条件が失敗します。

-   <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType> の呼び出し。

-   <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType> の呼び出し。

-   <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType> の呼び出し。

-   応答のキャッシュポリシーを変更しています。

-   <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> プロパティにフィルターとして <xref:System.IO.Stream> オブジェクトを追加します。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideExecuteUrlPath">
      <MemberSignature Language="C#" Value="public virtual string OverrideExecuteUrlPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string OverrideExecuteUrlPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OverrideExecuteUrlPath () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ OverrideExecuteUrlPath();" />
      <MemberSignature Language="F#" Value="abstract member OverrideExecuteUrlPath : unit -&gt; string&#xA;override this.OverrideExecuteUrlPath : unit -&gt; string" Usage="defaultHttpHandler.OverrideExecuteUrlPath " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の要求の対象 URL をオーバーライドします。</summary>
        <returns>要求で使用するオーバーライドされた URL。オーバーライドされた URL が指定されない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> メソッドは、<xref:System.Web.DefaultHttpHandler> クラスから派生したクラスでオーバーライドされない限り、`null` を返します。

 <xref:System.Web.DefaultHttpHandler.OverrideExecuteUrlPath%2A> メソッドは、IIS 6.0 で ASP.NET がワーカープロセス分離モードで実行されていて、<xref:System.Web.DefaultHttpHandler> オブジェクトが呼び出される前に応答が変更されていない場合にのみ呼び出されます。 応答は、次のいずれかによって変更されます。

-   <xref:System.Web.HttpResponse.Write%2A?displayProperty=nameWithType> の呼び出し。

-   <xref:System.Web.HttpResponse.AddHeader%2A?displayProperty=nameWithType> の呼び出し。

-   <xref:System.Web.HttpResponse.Flush%2A?displayProperty=nameWithType> の呼び出し。

-   応答のキャッシュポリシーを変更しています。

-   <xref:System.Web.HttpResponse.Filter%2A?displayProperty=nameWithType> プロパティにフィルターとして <xref:System.IO.Stream> オブジェクトを追加します。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessRequest (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessRequest(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ProcessRequest : System.Web.HttpContext -&gt; unit&#xA;override this.ProcessRequest : System.Web.HttpContext -&gt; unit" Usage="defaultHttpHandler.ProcessRequest context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">HTTP 要求を処理するために使用される組み込みサーバー オブジェクトへの参照を提供するオブジェクト。</param>
        <summary><see cref="T:System.Web.DefaultHttpHandler" /> オブジェクトを有効にして、HTTP Web 要求を処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> メソッドを同期的に呼び出すことはできません。 <xref:System.Web.DefaultHttpHandler> クラスから派生したクラスは、<xref:System.Web.DefaultHttpHandler.ProcessRequest%2A> をオーバーライドして、カスタマイズされた要求処理を提供できます。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Web.DefaultHttpHandler.ProcessRequest(System.Web.HttpContext)" /> が同期で呼び出されました。</exception>
        <altmember cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </Docs>
    </Member>
  </Members>
</Type>
