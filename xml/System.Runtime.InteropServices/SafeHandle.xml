<Type Name="SafeHandle" FullName="System.Runtime.InteropServices.SafeHandle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="13010d5de95557b8ecafdd65def1d285e1783788" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75165122" /></Metadata><TypeSignature Language="C#" Value="public abstract class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit SafeHandle extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.SafeHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SafeHandle&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SafeHandle abstract : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="F#" Value="type SafeHandle = class&#xA;    inherit CriticalFinalizerObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Handles</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-1.5;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a0a58-101">オペレーティング システム ハンドルのラッパー クラスを表します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-101">Represents a wrapper class for operating system handles.</span></span> <span data-ttu-id="a0a58-102">このクラスは継承する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-102">This class must be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-103"><xref:System.Runtime.InteropServices.SafeHandle> クラスは、ハンドルリソースの重大な終了処理を提供します。これにより、ガベージコレクションによって処理が途中で解放されるのを防ぎ、Windows によって意図しないアンマネージオブジェクトを参照することができなくなります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-103">The <xref:System.Runtime.InteropServices.SafeHandle> class provides critical finalization of handle resources, preventing handles from being reclaimed prematurely by garbage collection and from being recycled by Windows to reference unintended unmanaged objects.</span></span>  
  
 <span data-ttu-id="a0a58-104">このトピックには、次のセクションがあります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-104">This topic includes the following sections:</span></span>  
  
 <span data-ttu-id="a0a58-105">[SafeHandle の理由](#Why) </span><span class="sxs-lookup"><span data-stu-id="a0a58-105">[Why SafeHandle?](#Why) </span></span>  
 <span data-ttu-id="a0a58-106">[SafeHandle の動作](#Does) </span><span class="sxs-lookup"><span data-stu-id="a0a58-106">[What SafeHandle does](#Does) </span></span>  
 [<span data-ttu-id="a0a58-107">SafeHandle から派生したクラス</span><span class="sxs-lookup"><span data-stu-id="a0a58-107">Classes derived from SafeHandle</span></span>](#Derived)  
  
<a name="Why"></a>   
## <a name="why-safehandle"></a><span data-ttu-id="a0a58-108">SafeHandle の理由</span><span class="sxs-lookup"><span data-stu-id="a0a58-108">Why SafeHandle?</span></span>  
 <span data-ttu-id="a0a58-109">.NET Framework バージョン2.0 より前では、すべてのオペレーティングシステムハンドルを、<xref:System.IntPtr> マネージラッパーオブジェクトにカプセル化することしかできませんでした。</span><span class="sxs-lookup"><span data-stu-id="a0a58-109">Before the .NET Framework version 2.0, all operating system handles could only be encapsulated in the <xref:System.IntPtr> managed wrapper object.</span></span> <span data-ttu-id="a0a58-110">これはネイティブコードとの相互運用に便利な方法ですが、予期しないスレッドの中止やスタックオーバーフローなどの非同期例外によってハンドルがリークする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-110">While this was a convenient way to interoperate with native code, handles could be leaked by asynchronous exceptions, such as a thread aborting unexpectedly or a stack overflow.</span></span> <span data-ttu-id="a0a58-111">これらの非同期例外は、オペレーティングシステムのリソースをクリーンアップするのには問題があり、アプリ内のほぼすべての場所で発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-111">These asynchronous exceptions are an obstacle to cleaning up operating system resources, and they can occur almost anywhere in your app.</span></span>  
  
 <span data-ttu-id="a0a58-112"><xref:System.Object.Finalize%2A?displayProperty=nameWithType> メソッドをオーバーライドすると、オブジェクトがガベージコレクションされるときにアンマネージリソースのクリーンアップが許可されますが、状況によっては、プラットフォーム呼び出し内でメソッドを実行している間に、ファイナライズ可能なオブジェクトがガベージコレクションによって回収されることがあります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-112">Although overrides to the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method allow cleanup of unmanaged resources when an object is being garbage collected, in some circumstances, finalizable objects can be reclaimed by garbage collection while executing a method within a platform invoke call.</span></span> <span data-ttu-id="a0a58-113">ファイナライザーがそのプラットフォーム呼び出しに渡されたハンドルを解放すると、処理が破損する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-113">If a finalizer frees the handle passed to that platform invoke call, it could lead to handle corruption.</span></span> <span data-ttu-id="a0a58-114">また、ファイルの読み取り中など、プラットフォーム呼び出しの間にメソッドがブロックされている間に、ハンドルを再利用することもできます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-114">The handle could also be reclaimed while your method is blocked during a platform invoke call, such as while reading a file.</span></span>  
  
 <span data-ttu-id="a0a58-115">Windows が積極的にハンドルをリサイクルするため、ハンドルがリサイクルされ、機密データが含まれている可能性のある別のリソースを指している可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-115">More critically, because Windows aggressively recycles handles, a handle could be recycled and point to another resource that might contain sensitive data.</span></span> <span data-ttu-id="a0a58-116">これはリサイクル攻撃と呼ばれ、データが破壊され、セキュリティ上の脅威となる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-116">This is known as a recycle attack and can potentially corrupt data and be a security threat.</span></span>  
  
<a name="Does"></a>   
## <a name="what-safehandle-does"></a><span data-ttu-id="a0a58-117">SafeHandle の機能</span><span class="sxs-lookup"><span data-stu-id="a0a58-117">What SafeHandle does</span></span>  
 <span data-ttu-id="a0a58-118"><xref:System.Runtime.InteropServices.SafeHandle> クラスを使用すると、これらのオブジェクトの有効期間の問題のいくつかが簡略化され、オペレーティングシステムのリソースがリークしないように、プラットフォーム呼び出しと統合されます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-118">The <xref:System.Runtime.InteropServices.SafeHandle> class simplifies several of these object lifetime issues, and is integrated with platform invoke so that operating system resources are not leaked.</span></span> <span data-ttu-id="a0a58-119"><xref:System.Runtime.InteropServices.SafeHandle> クラスは、中断せずにハンドルの割り当てと解放を行うことによって、オブジェクトの有効期間の問題を解決します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-119">The <xref:System.Runtime.InteropServices.SafeHandle> class resolves object lifetime issues by assigning and releasing handles without interruption.</span></span> <span data-ttu-id="a0a58-120">これには、プラットフォーム呼び出しが破損したと見なされる場合でも、ハンドルが閉じられ、予期しない <xref:System.AppDomain> アンロード中に確実に実行されることを保証するクリティカルファイナライザーが含まれます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-120">It contains a critical finalizer that ensures that the handle is closed and is guaranteed to run during unexpected <xref:System.AppDomain> unloads, even in cases when the platform invoke call is assumed to be in a corrupted state.</span></span>  
  
 <span data-ttu-id="a0a58-121"><xref:System.Runtime.InteropServices.SafeHandle> は <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>から継承されるため、すべての重要でないファイナライザーは、重要なファイナライザーの前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-121">Because <xref:System.Runtime.InteropServices.SafeHandle> inherits from <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>, all the noncritical finalizers are called before any of the critical finalizers.</span></span> <span data-ttu-id="a0a58-122">ファイナライザーは、同じガベージコレクションパスの間に存在しなくなったオブジェクトに対して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-122">The finalizers are called on objects that are no longer live during the same garbage collection pass.</span></span> <span data-ttu-id="a0a58-123">たとえば、<xref:System.IO.FileStream> オブジェクトは、通常のファイナライザーを実行して、ハンドルがリークまたはリサイクルされることなく、既存のバッファーデータをフラッシュすることができます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-123">For example, a <xref:System.IO.FileStream> object can run a normal finalizer to flush out existing buffered data without the risk of the handle being leaked or recycled.</span></span> <span data-ttu-id="a0a58-124">クリティカルファイナライザーとクリティカルでないファイナライザーとの間の非常に弱い順序は、一般的な使用を目的としたものではありません。</span><span class="sxs-lookup"><span data-stu-id="a0a58-124">This very weak ordering between critical and noncritical finalizers is not intended for general use.</span></span> <span data-ttu-id="a0a58-125">これは主に、既存のライブラリの移行を支援するために存在します。これは、そのライブラリがセマンティクスを変更せずに <xref:System.Runtime.InteropServices.SafeHandle> を使用できるようにするためです。</span><span class="sxs-lookup"><span data-stu-id="a0a58-125">It exists primarily to assist in the migration of existing libraries by allowing those libraries to use <xref:System.Runtime.InteropServices.SafeHandle> without altering their semantics.</span></span> <span data-ttu-id="a0a58-126">さらに、重要なファイナライザーと、それによって呼び出されるすべて (<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType> メソッドなど) は、制約された実行領域に存在する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-126">Additionally, the critical finalizer and anything it calls, such as the <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType> method, must be in a constrained execution region.</span></span> <span data-ttu-id="a0a58-127">これにより、ファイナライザーの呼び出しグラフ内に記述できるコードに制約が課されます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-127">This imposes constraints on what code can be written within the finalizer's call graph.</span></span>  
  
 <span data-ttu-id="a0a58-128">プラットフォーム呼び出し操作は、<xref:System.Runtime.InteropServices.SafeHandle> によってカプセル化されたハンドルの参照カウントを自動的にインクリメントし、完了時にデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="a0a58-128">Platform invoke operations automatically increment the reference count of handles encapsulated by a <xref:System.Runtime.InteropServices.SafeHandle> and decrement them upon completion.</span></span> <span data-ttu-id="a0a58-129">これにより、ハンドルが予期せずリサイクルまたは閉じられることがなくなります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-129">This ensures that the handle will not be recycled or closed unexpectedly.</span></span>  
  
 <span data-ttu-id="a0a58-130"><xref:System.Runtime.InteropServices.SafeHandle> クラスコンストラクターの `ownsHandle` 引数に値を指定することによって <xref:System.Runtime.InteropServices.SafeHandle> オブジェクトを構築するときに、基になるハンドルの所有権を指定できます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-130">You can specify ownership of the underlying handle when constructing <xref:System.Runtime.InteropServices.SafeHandle> objects by supplying a value to the `ownsHandle` argument in the <xref:System.Runtime.InteropServices.SafeHandle> class constructor.</span></span> <span data-ttu-id="a0a58-131">オブジェクトが破棄された後に、<xref:System.Runtime.InteropServices.SafeHandle> オブジェクトがハンドルを解放するかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-131">This controls whether the <xref:System.Runtime.InteropServices.SafeHandle> object will release the handle after the object has been disposed.</span></span>  <span data-ttu-id="a0a58-132">これは、特別な有効期間要件を持つハンドルや、有効期間が他のユーザーによって制御されるハンドルを使用する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="a0a58-132">This is useful for handles with peculiar lifetime requirements or for consuming a handle whose lifetime is controlled by someone else.</span></span>  
  
<a name="Derived"></a>   
## <a name="classes-derived-from-safehandle"></a><span data-ttu-id="a0a58-133">SafeHandle から派生したクラス</span><span class="sxs-lookup"><span data-stu-id="a0a58-133">Classes derived from SafeHandle</span></span>  
 <span data-ttu-id="a0a58-134"><xref:System.Runtime.InteropServices.SafeHandle> は、オペレーティングシステムハンドルの抽象ラッパークラスです。</span><span class="sxs-lookup"><span data-stu-id="a0a58-134"><xref:System.Runtime.InteropServices.SafeHandle> is an abstract wrapper class for operating system handles.</span></span> <span data-ttu-id="a0a58-135">このクラスからの派生は困難です。</span><span class="sxs-lookup"><span data-stu-id="a0a58-135">Deriving from this class is difficult.</span></span> <span data-ttu-id="a0a58-136">代わりに、次のセーフ ハンドルを提供する <xref:Microsoft.Win32.SafeHandles> 名前空間の派生クラスを使用してください。</span><span class="sxs-lookup"><span data-stu-id="a0a58-136">Instead, use the derived classes in the <xref:Microsoft.Win32.SafeHandles> namespace that provide safe handles for the following:</span></span>  
  
-   <span data-ttu-id="a0a58-137">ファイル (<xref:Microsoft.Win32.SafeHandles.SafeFileHandle> クラス)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-137">Files (the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class).</span></span>  
  
-   <span data-ttu-id="a0a58-138">メモリマップトファイル (<xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> クラス)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-138">Memory mapped files (the <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> class).</span></span>  
  
-   <span data-ttu-id="a0a58-139">パイプ (<xref:Microsoft.Win32.SafeHandles.SafePipeHandle> クラス)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-139">Pipes (the <xref:Microsoft.Win32.SafeHandles.SafePipeHandle> class).</span></span>  
  
-   <span data-ttu-id="a0a58-140">メモリビュー (<xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> クラス)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-140">Memory views (the <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> class).</span></span>  
  
-   <span data-ttu-id="a0a58-141">暗号化コンストラクト (<xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>、<xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>、<xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>、および <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> クラス)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-141">Cryptography constructs (the <xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, and <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> classes).</span></span>  
  
-   <span data-ttu-id="a0a58-142">プロセス (<xref:Microsoft.Win32.SafeHandles.SafeProcessHandle> クラス)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-142">Processes (the <xref:Microsoft.Win32.SafeHandles.SafeProcessHandle> class).</span></span>  
  
-   <span data-ttu-id="a0a58-143">レジストリキー (<xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> クラス)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-143">Registry keys (the <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> class).</span></span>  
  
-   <span data-ttu-id="a0a58-144">待機ハンドル (<xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> クラス)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-144">Wait handles (the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0a58-145">次のコード例では、<xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>から派生するオペレーティングシステムファイルハンドルのカスタムセーフハンドルを作成します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-145">The following code example creates a custom safe handle for an operating system file handle, deriving from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>.</span></span> <span data-ttu-id="a0a58-146">ファイルからバイトを読み取り、16進値を表示します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-146">It reads bytes from a file and displays their hexadecimal values.</span></span> <span data-ttu-id="a0a58-147">また、スレッドを中止する障害テストハーネスも含まれていますが、ハンドル値は解放されます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-147">It also contains a fault testing harness that causes the thread to abort, but the handle value is freed.</span></span>  <span data-ttu-id="a0a58-148"><xref:System.IntPtr> を使用してハンドルを表す場合、非同期スレッドの中止によってハンドルがリークすることがあります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-148">When using an <xref:System.IntPtr> to represent handles, the handle is occasionally leaked due to the asynchronous thread abort.</span></span>  
  
 <span data-ttu-id="a0a58-149">コンパイル済みアプリケーションと同じフォルダーにテキストファイルが必要になります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-149">You will need a text file in the same folder as the compiled application.</span></span> <span data-ttu-id="a0a58-150">アプリケーションに "HexViewer" という名前を指定した場合、コマンドラインの使用法は次のようになります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-150">Assuming that you name the application "HexViewer", the command line usage is:</span></span>  
  
 `HexViewer <filename> -Fault`  
  
 <span data-ttu-id="a0a58-151">必要に応じて、特定のウィンドウでスレッドを中止してハンドルのリークを意図的に試みるように `-Fault` を指定します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-151">Optionally specify `-Fault` to intentionally attempt to leak the handle by aborting the thread in a certain window.</span></span> <span data-ttu-id="a0a58-152">Windows Perfmon.exe ツールを使用して、フォールトを挿入するときのハンドル数を監視します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-152">Use the Windows Perfmon.exe tool to monitor handle counts while injecting faults.</span></span>  
  
 [!code-csharp[SafeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="a0a58-153">継承者に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="a0a58-153">for full trust for inheritors.</span></span> <span data-ttu-id="a0a58-154">このメンバーは、部分的に信頼されたコードによって継承することはできません。</span><span class="sxs-lookup"><span data-stu-id="a0a58-154">This member cannot be inherited by partially trusted code.</span></span></permission>
    <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="a0a58-155">直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="a0a58-155">requires full trust for the immediate caller.</span></span> <span data-ttu-id="a0a58-156">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="a0a58-156">This member cannot be used by partially trusted or transparent code.</span></span></permission>
    <block subset="none" type="overrides"><para><span data-ttu-id="a0a58-157"><see cref="T:System.Runtime.InteropServices.SafeHandle" />から派生したクラスを作成するには、オペレーティングシステムハンドルの作成方法と解放方法を把握しておく必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-157">To create a class derived from <see cref="T:System.Runtime.InteropServices.SafeHandle" />, you must know how to create and free an operating system handle.</span></span> <span data-ttu-id="a0a58-158">このプロセスは、 [CloseHandle](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx)関数を使用する場合や、 [Unmapviewoffile に](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx)や[findclose](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx)などのより具体的な関数を使用する場合があるので、ハンドルの種類によって異なります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-158">This process is different for different handle types because some use the [CloseHandle](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx) function, while others use more specific functions such as [UnmapViewOfFile](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx) or [FindClose](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx).</span></span> <span data-ttu-id="a0a58-159">このため、セーフハンドルでラップするオペレーティングシステムハンドルの種類ごとに、<see cref="T:System.Runtime.InteropServices.SafeHandle" /> の派生クラスを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-159">For this reason, you must create a derived class of <see cref="T:System.Runtime.InteropServices.SafeHandle" /> for each operating system handle type that you want to wrap in a safe handle.</span></span>  
  
<span data-ttu-id="a0a58-160"><see cref="T:System.Runtime.InteropServices.SafeHandle" /> から継承する場合は、<see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> メンバーと <see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" /> メンバーをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-160">When you inherit from <see cref="T:System.Runtime.InteropServices.SafeHandle" />, you must override the following members: <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> and <see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />.</span></span>  
  
<span data-ttu-id="a0a58-161">また、無効なハンドル値を表す値を持つ基本コンストラクターを呼び出すパラメーターなしのコンストラクターと、ネイティブハンドルが <see cref="T:System.Runtime.InteropServices.SafeHandle" /> によって所有されているかどうかを示す <see cref="T:System.Boolean" /> 値を指定し、その <see cref="T:System.Runtime.InteropServices.SafeHandle" /> が破棄されたときに解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-161">You should also provide a parameterless constructor that calls the base constructor with a value that represent an invalid handle value, and a <see cref="T:System.Boolean" /> value indicating whether the native handle is owned by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> and consequently should be freed when that <see cref="T:System.Runtime.InteropServices.SafeHandle" /> has been disposed.</span></span></para></block>
    <altmember cref="N:Microsoft.Win32.SafeHandles" />
    <altmember cref="T:System.Runtime.InteropServices.CriticalHandle" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle (IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int invalidHandleValue, bool ownsHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (invalidHandleValue As IntPtr, ownsHandle As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle(IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.SafeHandle : nativeint * bool -&gt; System.Runtime.InteropServices.SafeHandle" Usage="new System.Runtime.InteropServices.SafeHandle (invalidHandleValue, ownsHandle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="invalidHandleValue" Type="System.IntPtr" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidHandleValue"><span data-ttu-id="a0a58-162">無効なハンドルの値 (通常は 0 または -1)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-162">The value of an invalid handle (usually 0 or -1).</span></span>  <span data-ttu-id="a0a58-163"><see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> の実装では、この値に対して <see langword="true" /> を返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-163">Your implementation of <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> should return <see langword="true" /> for this value.</span></span></param>
        <param name="ownsHandle"><span data-ttu-id="a0a58-164">終了処理中に <see langword="true" /> によってハンドルを確実に解放する場合は <see cref="T:System.Runtime.InteropServices.SafeHandle" />。それ以外の場合は <see langword="false" /> (お勧めしません)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-164"><see langword="true" /> to reliably let <see cref="T:System.Runtime.InteropServices.SafeHandle" /> release the handle during the finalization phase; otherwise, <see langword="false" /> (not recommended).</span></span></param>
        <summary><span data-ttu-id="a0a58-165">指定した無効なハンドル値を使用して、<see cref="T:System.Runtime.InteropServices.SafeHandle" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-165">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class with the specified invalid handle value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-166">`ownsHandle` パラメーターが `false`の場合、<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> は呼び出されません。このため、コードがリソースをリークする可能性があるため、このパラメーター値は使用しないことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a0a58-166">If the `ownsHandle` parameter is `false`, <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> is never called; thus, it is not recommended to use this parameter value as your code may leak resources.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="a0a58-167">派生クラスがアンマネージ コードのアクセス許可なしにアセンブリに存在しています。</span><span class="sxs-lookup"><span data-stu-id="a0a58-167">The derived class resides in an assembly without unmanaged code access permission.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="a0a58-168">継承者に対する完全な信頼の場合。</span><span class="sxs-lookup"><span data-stu-id="a0a58-168">for full trust for inheritors.</span></span> <span data-ttu-id="a0a58-169">このメンバーは、部分的に信頼されたコードによって継承することはできません。</span><span class="sxs-lookup"><span data-stu-id="a0a58-169">This member cannot be inherited by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="a0a58-170">直前の呼び出し元に完全信頼が必要です。</span><span class="sxs-lookup"><span data-stu-id="a0a58-170">requires full trust for the immediate caller.</span></span> <span data-ttu-id="a0a58-171">このメンバーは、部分的に信頼されているコードまたは透過的なコードでは使用できません。</span><span class="sxs-lookup"><span data-stu-id="a0a58-171">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="safeHandle.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0;netstandard-1.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a0a58-172">リソースを解放するためのハンドルをマークします。</span><span class="sxs-lookup"><span data-stu-id="a0a58-172">Marks the handle for releasing and freeing resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-173"><xref:System.Runtime.InteropServices.SafeHandle.Close%2A> または <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> メソッドを呼び出すと、リソースを解放できます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-173">Calling the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method allows the resources to be freed.</span></span> <span data-ttu-id="a0a58-174">他のスレッドが同じセーフハンドルオブジェクトを使用している場合、この処理はすぐには行われませんが、その場合はすぐに発生します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-174">This might not happen immediately if other threads are using the same safe handle object, but will happen as soon as that is no longer the case.</span></span> <span data-ttu-id="a0a58-175"><xref:System.Runtime.InteropServices.SafeHandle> クラスを使用するほとんどのクラスはファイナライザーを提供する必要はありませんが、これが必要になることがあります (たとえば、ファイルバッファーをフラッシュする場合や、データをメモリに書き戻す場合など)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-175">Although most classes that use the <xref:System.Runtime.InteropServices.SafeHandle> class do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</span></span> <span data-ttu-id="a0a58-176">この場合、クラスは、<xref:System.Runtime.InteropServices.SafeHandle> クリティカルファイナライザーが実行される前に実行が保証されるファイナライザーを提供できます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-176">In this case, the class can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.SafeHandle> critical finalizer runs.</span></span>  
  
 <span data-ttu-id="a0a58-177"><xref:System.Runtime.InteropServices.SafeHandle> オブジェクトの使用が終了したら、<xref:System.Runtime.InteropServices.SafeHandle.Close%2A> または <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-177">Call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a0a58-178"><xref:System.Runtime.InteropServices.SafeHandle> オブジェクトへの最後の参照を解放する前に、常に <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> または <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="a0a58-178">Always call <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> before you release your last reference to the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="a0a58-179">そうしないと、ガベージ コレクターが <xref:System.Runtime.InteropServices.SafeHandle> オブジェクトの <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="a0a58-179">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.SafeHandle> object's <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a0a58-180">アンマネージコードを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a0a58-180">for permission to call unmanaged code.</span></span> <span data-ttu-id="a0a58-181">セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-181">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="a0a58-182">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a0a58-182">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousAddRef">
      <MemberSignature Language="C#" Value="public void DangerousAddRef (ref bool success);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousAddRef(bool&amp; success) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousAddRef (ByRef success As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousAddRef(bool % success);" />
      <MemberSignature Language="F#" Value="member this.DangerousAddRef : bool -&gt; unit" Usage="safeHandle.DangerousAddRef success" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-1.5;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="success" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="success"><span data-ttu-id="a0a58-183">参照カウンターが正常にインクリメントされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-183"><see langword="true" /> if the reference counter was successfully incremented; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="a0a58-184"><see cref="T:System.Runtime.InteropServices.SafeHandle" /> インスタンスの参照カウンターを手動でインクリメントします。</span><span class="sxs-lookup"><span data-stu-id="a0a58-184">Manually increments the reference counter on <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instances.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-185"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> メソッドは、共通言語ランタイムがハンドルによって使用されるメモリを再利用できないようにします (ランタイムが <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> メソッドを呼び出すと発生します)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-185">The <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> method prevents the common language runtime from reclaiming memory used by a handle (which occurs when the runtime calls the <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method).</span></span> <span data-ttu-id="a0a58-186">このメソッドを使用すると、<xref:System.Runtime.InteropServices.SafeHandle> インスタンスの参照カウントを手動でインクリメントできます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-186">You can use this method to manually increment the reference count on a <xref:System.Runtime.InteropServices.SafeHandle> instance.</span></span> <span data-ttu-id="a0a58-187"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> は、参照カウントが正常にインクリメントされたかどうかを示す `ref` パラメーター (`success`) を使用してブール値を返します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-187"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> returns a Boolean value using a `ref` parameter (`success`) that indicates whether the reference count was incremented successfully.</span></span> <span data-ttu-id="a0a58-188">これにより、エラーが発生した場合にプログラムロジックを戻すことができます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-188">This allows your program logic to back out in case of failure.</span></span> <span data-ttu-id="a0a58-189"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>を呼び出す前に、`success` を `false` に設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-189">You should set `success` to `false` before calling <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span> <span data-ttu-id="a0a58-190">`success` が `true`場合、<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> の呼び出しを <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>への対応する呼び出しと照合することで、リソースリークを回避します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-190">If `success` is `true`, avoid resource leaks by matching the call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> with a corresponding call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a0a58-191">この方法は上級ユーザーを対象としており、常に慎重に使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-191">This method is intended for advanced users and must always be used carefully.</span></span> <span data-ttu-id="a0a58-192">ハンドルリソースがリークしないようにするには、常に、制約された実行領域 (CER) 内でこのメソッドを呼び出します。この場合、スレッドの中止で処理を中断することはできません。</span><span class="sxs-lookup"><span data-stu-id="a0a58-192">To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a0a58-193">アンマネージコードを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a0a58-193">for permission to call unmanaged code.</span></span> <span data-ttu-id="a0a58-194">セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-194">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="a0a58-195">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a0a58-195">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      </Docs>
    </Member>
    <Member MemberName="DangerousGetHandle">
      <MemberSignature Language="C#" Value="public IntPtr DangerousGetHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int DangerousGetHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function DangerousGetHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr DangerousGetHandle();" />
      <MemberSignature Language="F#" Value="member this.DangerousGetHandle : unit -&gt; nativeint" Usage="safeHandle.DangerousGetHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a0a58-196"><see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> フィールドの値を戻します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-196">Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</span></span></summary>
        <returns><span data-ttu-id="a0a58-197"><see langword="IntPtr" /> フィールドの値を表す <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-197">An <see langword="IntPtr" /> representing the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</span></span> <span data-ttu-id="a0a58-198">ハンドルが <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" /> で無効としてマークされている場合にも、このメソッドは元のハンドル値を返すため、返される値が古い値である可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-198">If the handle has been marked invalid with <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />, this method still returns the original handle value, which can be a stale value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-199">このメソッドを使用すると、<xref:System.Runtime.InteropServices.SafeHandle> 派生クラスのインスタンスから実際のハンドル値を取得できます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-199">You can use this method to retrieve the actual handle value from an instance of the <xref:System.Runtime.InteropServices.SafeHandle> derived class.</span></span> <span data-ttu-id="a0a58-200">.NET Framework の多くのプロパティが `IntPtr` ハンドル型を返すため、このメソッドは下位互換性を保つために必要です。</span><span class="sxs-lookup"><span data-stu-id="a0a58-200">This method is needed for backwards compatibility because many properties in the .NET Framework return `IntPtr` handle types.</span></span> <span data-ttu-id="a0a58-201">`IntPtr` ハンドル型は、ポインターまたはハンドルを表すために使用されるプラットフォーム固有の型です。</span><span class="sxs-lookup"><span data-stu-id="a0a58-201">`IntPtr` handle types are platform-specific types used to represent a pointer or a handle.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a0a58-202"><xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> メソッドを使用すると、<xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>でハンドルが無効とマークされている場合でも <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A>、元の古いハンドル値が返されます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-202">Using the <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> method can pose security risks because, if the handle has been marked as invalid with <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>, <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> still returns the original, potentially stale handle value.</span></span> <span data-ttu-id="a0a58-203">返されたハンドルは、どの時点でもリサイクルできます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-203">The returned handle can also be recycled at any point.</span></span> <span data-ttu-id="a0a58-204">つまり、ハンドルが突然動作しなくなる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-204">At best, this means the handle might suddenly stop working.</span></span> <span data-ttu-id="a0a58-205">最悪の場合、ハンドルが表すハンドルまたはリソースが信頼されていないコードに公開されると、再利用または返されたハンドルに対するセキュリティ攻撃のリサイクルが発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-205">At worst, if the handle or the resource that the handle represents is exposed to untrusted code, this can lead to a recycling security attack on the reused or returned handle.</span></span> <span data-ttu-id="a0a58-206">たとえば、信頼されていない呼び出し元は、返されただけのハンドルのデータに対してクエリを実行し、完全に関連のないリソースに関する情報を受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-206">For example, an untrusted caller can query data on the handle just returned and receive information for an entirely unrelated resource.</span></span> <span data-ttu-id="a0a58-207"><xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> methodsafely 安全に使用する方法の詳細については、<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> と <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> の方法に関する説明を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a0a58-207">See the <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> and the <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> methods for more information about using the <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> methodsafely.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a0a58-208">アンマネージコードを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a0a58-208">for permission to call unmanaged code.</span></span> <span data-ttu-id="a0a58-209">セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-209">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="a0a58-210">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a0a58-210">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousRelease">
      <MemberSignature Language="C#" Value="public void DangerousRelease ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousRelease() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousRelease ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousRelease();" />
      <MemberSignature Language="F#" Value="member this.DangerousRelease : unit -&gt; unit" Usage="safeHandle.DangerousRelease " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-1.5;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a0a58-211"><see cref="T:System.Runtime.InteropServices.SafeHandle" /> インスタンスの参照カウンターを手動でデクリメントします。</span><span class="sxs-lookup"><span data-stu-id="a0a58-211">Manually decrements the reference counter on a <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-212"><xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> メソッドは、<xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>に対応するものです。</span><span class="sxs-lookup"><span data-stu-id="a0a58-212">The <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> method is the counterpart to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span> <span data-ttu-id="a0a58-213"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>を正常に呼び出すには、<xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> メソッドの呼び出しを常に一致させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-213">You should always match a call to the <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> method with a successful call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="a0a58-214">この方法は上級ユーザーを対象としており、常に慎重に使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-214">This method is intended for advanced users and must always be used carefully.</span></span> <span data-ttu-id="a0a58-215">ハンドルリソースがリークしないようにするには、常に、制約された実行領域 (CER) 内でこのメソッドを呼び出します。この場合、スレッドの中止で処理を中断することはできません。</span><span class="sxs-lookup"><span data-stu-id="a0a58-215">To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</span></span> <span data-ttu-id="a0a58-216"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> 呼び出しが一致しないと、リソースリークが発生する可能性があります。一致していない <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> 呼び出しによって、無効なハンドル状態が他のスレッドに表示される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-216">In the same way that unmatched <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> calls can cause resource leaks, unmatched <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> calls can cause invalid handle states to become visible to other threads.</span></span> <span data-ttu-id="a0a58-217">信頼されていないコードの呼び出し <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> または <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> 公開しないでください。</span><span class="sxs-lookup"><span data-stu-id="a0a58-217">Do not expose <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> or <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> calls to untrusted code.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a0a58-218">アンマネージコードを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a0a58-218">for permission to call unmanaged code.</span></span> <span data-ttu-id="a0a58-219">セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-219">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="a0a58-220">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a0a58-220">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a0a58-221"><see cref="T:System.Runtime.InteropServices.SafeHandle" /> クラスによって使用されているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-221">Releases the resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="safeHandle.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-1.5;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a0a58-222"><see cref="T:System.Runtime.InteropServices.SafeHandle" /> クラスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-222">Releases all resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-223"><xref:System.Runtime.InteropServices.SafeHandle.Close%2A> または <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> メソッドを呼び出すと、リソースを解放できます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-223">Calling the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method allows the resources to be freed.</span></span> <span data-ttu-id="a0a58-224">他のスレッドがセーフハンドルの同じインスタンスを使用している場合、この動作はすぐには行われませんが、その場合はすぐに発生します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-224">This might not happen immediately if other threads are using the same instance of the safe handle, but will happen as soon as that is no longer the case.</span></span> <span data-ttu-id="a0a58-225"><xref:System.Runtime.InteropServices.SafeHandle> を使用するほとんどのクラスはファイナライザーを提供する必要はありませんが、これが必要になることがあります (たとえば、ファイルバッファーをフラッシュする場合や、データをメモリに書き戻す場合など)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-225">Although most classes using <xref:System.Runtime.InteropServices.SafeHandle> do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</span></span> <span data-ttu-id="a0a58-226">この場合、<xref:System.Runtime.InteropServices.SafeHandle> クリティカルファイナライザーが実行される前に実行が保証されるファイナライザーを提供できます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-226">In this case, they can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.SafeHandle> critical finalizer runs.</span></span>  
  
 <span data-ttu-id="a0a58-227"><xref:System.Runtime.InteropServices.SafeHandle> オブジェクトの使用が終了したら、<xref:System.Runtime.InteropServices.SafeHandle.Close%2A> または <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-227">Call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="a0a58-228"><xref:System.Runtime.InteropServices.SafeHandle.Close%2A> メソッドは、<xref:System.Runtime.InteropServices.SafeHandle> オブジェクトを使用できない状態のままにします。</span><span class="sxs-lookup"><span data-stu-id="a0a58-228">The <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method leaves the <xref:System.Runtime.InteropServices.SafeHandle> object in an unusable state.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a0a58-229"><xref:System.Runtime.InteropServices.SafeHandle> オブジェクトへの最後の参照を解放する前に、常に <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> または <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="a0a58-229">Always call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method before you release your last reference to the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="a0a58-230">そうしないと、ガベージ コレクターが <xref:System.Runtime.InteropServices.SafeHandle> オブジェクトの <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> メソッドを呼び出すまで、使用されているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="a0a58-230">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.SafeHandle> object's <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a0a58-231">アンマネージコードを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a0a58-231">for permission to call unmanaged code.</span></span> <span data-ttu-id="a0a58-232">セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-232">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="a0a58-233">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a0a58-233">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="safeHandle.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-1.5;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="a0a58-234">通常の破棄操作を実行する場合は <see langword="true" />。ハンドルを終了する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-234"><see langword="true" /> for a normal dispose operation; <see langword="false" /> to finalize the handle.</span></span></param>
        <summary><span data-ttu-id="a0a58-235">通常の破棄操作を実行するかどうかを指定して、<see cref="T:System.Runtime.InteropServices.SafeHandle" /> クラスによって使用されているアンマネージ リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-235">Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class specifying whether to perform a normal dispose operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-236">`disposing` パラメーターを `false`に設定して、<xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> メソッドを明示的に呼び出すことは避けてください。</span><span class="sxs-lookup"><span data-stu-id="a0a58-236">You should never explicitly call the <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method with the `disposing` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a0a58-237">アンマネージコードを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a0a58-237">for permission to call unmanaged code.</span></span> <span data-ttu-id="a0a58-238">セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-238">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="a0a58-239">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a0a58-239">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SafeHandle ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="safeHandle.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a0a58-240">ハンドルに関連付けられたすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-240">Frees all resources associated with the handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-241"><xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> メソッドは、<xref:System.Runtime.InteropServices.SafeHandle> クラスのデストラクターです。</span><span class="sxs-lookup"><span data-stu-id="a0a58-241">The <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method is the destructor for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span> <span data-ttu-id="a0a58-242">アプリケーションコードでは、このメソッドを直接呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="a0a58-242">Application code should not call this method directly.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a0a58-243">アンマネージコードを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a0a58-243">for permission to call unmanaged code.</span></span> <span data-ttu-id="a0a58-244">セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-244">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="a0a58-245">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a0a58-245">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="handle">
      <MemberSignature Language="C#" Value="protected IntPtr handle;" />
      <MemberSignature Language="ILAsm" Value=".field family native int handle" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.SafeHandle.handle" />
      <MemberSignature Language="VB.NET" Value="Protected handle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: IntPtr handle;" />
      <MemberSignature Language="F#" Value="val mutable handle : nativeint" Usage="System.Runtime.InteropServices.SafeHandle.handle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a0a58-246">ラップするハンドルを指定します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-246">Specifies the handle to be wrapped.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-247">ハンドルを公開しないでください (つまり、派生クラスの外部)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-247">Do not expose the handle publicly (that is, outside of the derived class).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Runtime.InteropServices.SafeHandle.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a0a58-248">ハンドルが閉じているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-248">Gets a value indicating whether the handle is closed.</span></span></summary>
        <value><span data-ttu-id="a0a58-249">ハンドルが閉じている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-249"><see langword="true" /> if the handle is closed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-250"><xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> メソッドは、<xref:System.Runtime.InteropServices.SafeHandle> オブジェクトのハンドルがネイティブリソースに関連付けられていないかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-250">The <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> method returns a value indicating whether the <xref:System.Runtime.InteropServices.SafeHandle> object's handle is no longer associated with a native resource.</span></span> <span data-ttu-id="a0a58-251">これは、指定されたハンドルが常に無効と見なされるかどうかを計算する <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> プロパティの定義とは異なります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-251">This differs from the definition of the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property, which computes whether a given handle is always considered invalid.</span></span> <span data-ttu-id="a0a58-252"><xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> メソッドは、次の場合に `true` 値を返します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-252">The <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> method returns a `true` value in the following cases:</span></span>  
  
-   <span data-ttu-id="a0a58-253"><xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> メソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="a0a58-253">The <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> method was called.</span></span>  
  
-   <span data-ttu-id="a0a58-254"><xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> メソッドまたは <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> メソッドが呼び出されましたが、他のスレッドの <xref:System.Runtime.InteropServices.SafeHandle> オブジェクトへの参照がありません。</span><span class="sxs-lookup"><span data-stu-id="a0a58-254">The <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method or <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method was called and there are no references to the <xref:System.Runtime.InteropServices.SafeHandle> object on other threads.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a0a58-255">アンマネージコードを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a0a58-255">for permission to call unmanaged code.</span></span> <span data-ttu-id="a0a58-256">セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-256">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="a0a58-257">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a0a58-257">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IsInvalid">
      <MemberSignature Language="C#" Value="public abstract bool IsInvalid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInvalid" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsInvalid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsInvalid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInvalid : bool" Usage="System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a0a58-258">派生クラスでオーバーライドされると、ハンドル値が無効かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-258">When overridden in a derived class, gets a value indicating whether the handle value is invalid.</span></span></summary>
        <value><span data-ttu-id="a0a58-259">ハンドル値が無効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-259"><see langword="true" /> if the handle value is invalid; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-260">派生クラスは、<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> プロパティを実装する必要があります。これにより、重要な終了処理が必要かどうかを共通言語ランタイムが判断できるようになります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-260">Derived classes must implement the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property so that the common language runtime can determine whether critical finalization is required.</span></span> <span data-ttu-id="a0a58-261">派生クラスは、サポートするハンドルの一般的な種類に適した実装を提供する必要があります (0 または-1 は無効です)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-261">Derived classes must provide an implementation that suits the general type of handle they support (0 or -1 is invalid).</span></span> <span data-ttu-id="a0a58-262">これらのクラスは、特定のセーフハンドル型に対してさらに派生させることができます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-262">These classes can then be further derived for specific safe handle types.</span></span>  
  
 <span data-ttu-id="a0a58-263"><xref:System.Runtime.InteropServices.SafeHandle> オブジェクトが基になるハンドルの使用を終了したかどうかを報告する <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> プロパティとは異なり、<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> プロパティは、指定されたハンドル値が常に無効と見なされるかどうかを計算します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-263">Unlike the <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> property, which reports whether the <xref:System.Runtime.InteropServices.SafeHandle> object has finished using the underlying handle, the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property calculates whether the given handle value is always considered invalid.</span></span> <span data-ttu-id="a0a58-264">したがって、<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> プロパティは常に、1つのハンドル値に対して同じ値を返します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-264">Therefore, the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property always returns the same value for any one handle value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0a58-265">次の例では、ファイルが正常に開かれたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-265">The following example checks if a file was opened successfully.</span></span> <span data-ttu-id="a0a58-266">このコード例は、<xref:System.Runtime.InteropServices.SafeHandle> クラス用に用意されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a0a58-266">This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 [!code-csharp[SafeHandle#2](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a0a58-267">アンマネージコードを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a0a58-267">for permission to call unmanaged code.</span></span> <span data-ttu-id="a0a58-268">セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-268">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="a0a58-269">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a0a58-269">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="protected abstract bool ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReleaseHandle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; bool" Usage="safeHandle.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a0a58-270">派生クラスでオーバーライドされると、ハンドルを解放するために必要なコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-270">When overridden in a derived class, executes the code required to free the handle.</span></span></summary>
        <returns><span data-ttu-id="a0a58-271">ハンドルが正常に解放された場合は <see langword="true" />。深刻なエラーが発生した場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-271"><see langword="true" /> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false" />.</span></span> <span data-ttu-id="a0a58-272">この場合、<see href="https://docs.microsoft.com/dotnet/framework/debug-trace-profile/releasehandlefailed-mda">releaseHandleFailed</see> マネージド デバッグ アシスタントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-272">In this case, it generates a <see href="https://docs.microsoft.com/dotnet/framework/debug-trace-profile/releasehandlefailed-mda">releaseHandleFailed</see> Managed Debugging Assistant.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-273"><xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> メソッドは、<xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> プロパティで定義されているとおりにハンドルが有効である場合にのみ、1回だけ呼び出されることが保証されます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-273">The <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method is guaranteed to be called only once and only if the handle is valid as defined by the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property.</span></span> <span data-ttu-id="a0a58-274">このメソッドを <xref:System.Runtime.InteropServices.SafeHandle> の派生クラスに実装して、ハンドルを解放するために必要なすべてのコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-274">Implement this method in your <xref:System.Runtime.InteropServices.SafeHandle> derived classes to execute any code that is required to free the handle.</span></span> <span data-ttu-id="a0a58-275"><xref:System.Runtime.InteropServices.SafeHandle> の関数の1つはリソースリークの防止を保証することであるため、<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> の実装のコードは失敗しないようにする必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-275">Because one of the functions of <xref:System.Runtime.InteropServices.SafeHandle> is to guarantee prevention of resource leaks, the code in your implementation of <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> must never fail.</span></span> <span data-ttu-id="a0a58-276">ガベージコレクターは、同時にガベージコレクションされたオブジェクトに対して通常のファイナライザーを実行した後に <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-276">The garbage collector calls <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> after normal finalizers have been run for objects that were garbage collected at the same time.</span></span> <span data-ttu-id="a0a58-277">ガベージコレクターは、このメソッドを呼び出すためのリソースを保証し、処理中にメソッドが中断されないようにします。</span><span class="sxs-lookup"><span data-stu-id="a0a58-277">The garbage collector guarantees the resources to invoke this method and that the method will not be interrupted while it is in progress.</span></span> <span data-ttu-id="a0a58-278">このメソッドは、インスタンスの構築時に制約された実行領域 (CER) として準備されます (静的な determinable 呼び出しグラフ内のすべてのメソッドと共に)。</span><span class="sxs-lookup"><span data-stu-id="a0a58-278">This method will be prepared as a constrained execution region (CER) at instance construction time (along with all the methods in its statically determinable call graph).</span></span> <span data-ttu-id="a0a58-279">これによってスレッド中止割り込みが発生することはありませんが、オーバーライドされた <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> メソッドにエラーパスを導入しないように注意する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-279">Although this prevents thread abort interrupts, you must still be careful not to introduce any fault paths in your overridden <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method.</span></span> <span data-ttu-id="a0a58-280">特に、<xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>から呼び出すメソッドに <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> 属性を適用します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-280">In particular, apply the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to any methods you call from <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>.</span></span> <span data-ttu-id="a0a58-281">ほとんどの場合、このコードは次のようになります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-281">In most cases this code should be:</span></span>  
  
 `ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)`  
  
 <span data-ttu-id="a0a58-282">また、単純なクリーンアップ (たとえば、ファイルハンドルで Windows API `CloseHandle` を呼び出す) では、単一のプラットフォーム呼び出しの戻り値を確認できます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-282">Additionally, for simple cleanup (for example, calling the Windows API `CloseHandle` on a file handle) you can check the return value for the single platform invoke call.</span></span> <span data-ttu-id="a0a58-283">複雑なクリーンアップでは、多くのプログラムロジックと多くのメソッド呼び出しがあり、その一部が失敗する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-283">For complex cleanup, you may have a lot of program logic and many method calls, some of which might fail.</span></span> <span data-ttu-id="a0a58-284">プログラムロジックにそれぞれのケースのフォールバックコードがあることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-284">You must ensure that your program logic has fallback code for each of those cases.</span></span>  
  
 <span data-ttu-id="a0a58-285">何らかの理由で <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> `false` が返された場合、 [Releasehandlefailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md)マネージデバッグアシスタントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-285">If <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> returns `false` for any reason, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.</span></span>  <span data-ttu-id="a0a58-286">これは、リソースを解放しようとすると失敗するケースを検出するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="a0a58-286">This helps you detect cases where your attempt to release resources fails.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a0a58-287">次のコード例では、ハンドルを解放します。これは <xref:System.Runtime.InteropServices.SafeHandle> クラス用に用意されている大きな例の一部です。</span><span class="sxs-lookup"><span data-stu-id="a0a58-287">The following code example releases the handle and is part of a larger example provided for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 [!code-csharp[SafeHandle#3](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a0a58-288">アンマネージコードを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a0a58-288">for permission to call unmanaged code.</span></span> <span data-ttu-id="a0a58-289">セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-289">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="a0a58-290">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a0a58-290">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/76994ee6-9fa9-4059-b813-26578d24427c"><span data-ttu-id="a0a58-291">マネージデバッグアシスタントによる実行時エラーの診断</span><span class="sxs-lookup"><span data-stu-id="a0a58-291">Diagnosing Run-time Errors with Managed Debugging Assistants</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/44cd98ba-95e5-40a1-874d-e8e163612c51"><span data-ttu-id="a0a58-292">ReleaseHandleFailed</span><span class="sxs-lookup"><span data-stu-id="a0a58-292">ReleaseHandleFailed</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetHandle">
      <MemberSignature Language="C#" Value="protected void SetHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.SetHandle : nativeint -&gt; unit" Usage="safeHandle.SetHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="a0a58-293">使用する既存のハンドル。</span><span class="sxs-lookup"><span data-stu-id="a0a58-293">The pre-existing handle to use.</span></span></param>
        <summary><span data-ttu-id="a0a58-294">ハンドルを指定した既存のハンドルに設定します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-294">Sets the handle to the specified pre-existing handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-295"><xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> メソッドは、既存のハンドルをサポートする必要がある場合にのみ使用します (たとえば、ハンドルが構造体で返された場合)。 .NET Framework COM 相互運用インフラストラクチャでは、構造体の出力ハンドルのマーシャリングがサポートされていないためです。</span><span class="sxs-lookup"><span data-stu-id="a0a58-295">Use the <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> method only if you need to support a pre-existing handle (for example, if the handle is returned in a structure) because the .NET Framework COM interop infrastructure does not support marshaling output handles in a structure.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a0a58-296">アンマネージコードを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a0a58-296">for permission to call unmanaged code.</span></span> <span data-ttu-id="a0a58-297">セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-297">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="a0a58-298">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a0a58-298">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetHandleAsInvalid">
      <MemberSignature Language="C#" Value="public void SetHandleAsInvalid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetHandleAsInvalid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetHandleAsInvalid ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetHandleAsInvalid();" />
      <MemberSignature Language="F#" Value="member this.SetHandleAsInvalid : unit -&gt; unit" Usage="safeHandle.SetHandleAsInvalid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-1.5">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-1.5;netframework-4.8;netcore-2.0;dotnet-uwp-10.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a0a58-299">今後は使用しないものとしてハンドルをマークします。</span><span class="sxs-lookup"><span data-stu-id="a0a58-299">Marks a handle as no longer used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a0a58-300">ハンドルがリソースを参照しなくなったことがわかっている場合にのみ、<xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-300">Call the <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> method only when you know that your handle no longer references a resource.</span></span> <span data-ttu-id="a0a58-301">この操作を行っても、<xref:System.Runtime.InteropServices.SafeHandle.handle> フィールドの値は変更されません。ハンドルを closed としてマークするだけです。</span><span class="sxs-lookup"><span data-stu-id="a0a58-301">Doing so does not change the value of the <xref:System.Runtime.InteropServices.SafeHandle.handle> field; it only marks the handle as closed.</span></span> <span data-ttu-id="a0a58-302">このハンドルには、古くなった可能性のある値が含まれている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a0a58-302">The handle might then contain a potentially stale value.</span></span> <span data-ttu-id="a0a58-303">この呼び出しの結果として、リソースの解放は行われません。</span><span class="sxs-lookup"><span data-stu-id="a0a58-303">The effect of this call is that no attempt is made to free the resources.</span></span>  
  
 <span data-ttu-id="a0a58-304"><xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> メソッドと同様に、既存のハンドルをサポートする必要がある場合にのみ、<xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="a0a58-304">As with the <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> method, use <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> only if you need to support a pre-existing handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="a0a58-305">アンマネージコードを呼び出すためのアクセス許可。</span><span class="sxs-lookup"><span data-stu-id="a0a58-305">for permission to call unmanaged code.</span></span> <span data-ttu-id="a0a58-306">セキュリティアクション: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</span><span class="sxs-lookup"><span data-stu-id="a0a58-306">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="a0a58-307">関連付けられた列挙型: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="a0a58-307">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>
