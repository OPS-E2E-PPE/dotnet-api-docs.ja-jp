<Type Name="DllImportAttribute" FullName="System.Runtime.InteropServices.DllImportAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2ea03f3bce7908bcc35f30b8aa2567f6909f8004" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75087018" /></Metadata><TypeSignature Language="C#" Value="public sealed class DllImportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DllImportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.DllImportAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DllImportAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DllImportAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type DllImportAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="af818-101">属性付きメソッドがアンマネージ ダイナミックリンク ライブラリ (DLL) によって静的エントリ ポイントとして公開されることを示します。</span><span class="sxs-lookup"><span data-stu-id="af818-101">Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af818-102">この属性をメソッドに適用できます。</span><span class="sxs-lookup"><span data-stu-id="af818-102">You can apply this attribute to methods.</span></span>  
  
 <span data-ttu-id="af818-103"><xref:System.Runtime.InteropServices.DllImportAttribute> 属性は、アンマネージ DLL からエクスポートされた関数を呼び出すために必要な情報を提供します。</span><span class="sxs-lookup"><span data-stu-id="af818-103">The <xref:System.Runtime.InteropServices.DllImportAttribute> attribute provides the information needed to call a function exported from an unmanaged DLL.</span></span> <span data-ttu-id="af818-104">最小要件として、エントリポイントを含む DLL の名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="af818-104">As a minimum requirement, you must supply the name of the DLL containing the entry point.</span></span>  
  
 <span data-ttu-id="af818-105">この属性は、およびC# C++メソッドの定義に直接適用します。ただし、`Declare` ステートメントを使用すると、Visual Basic コンパイラによってこの属性が出力されます。</span><span class="sxs-lookup"><span data-stu-id="af818-105">You apply this attribute directly to C# and C++ method definitions; however, the Visual Basic compiler emits this attribute when you use the `Declare` statement.</span></span> <span data-ttu-id="af818-106"><xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>、<xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>、<xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>、<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>、<xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>、または <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> フィールドを含む複雑なメソッド定義の場合は、この属性を Visual Basic メソッド定義に直接適用します。</span><span class="sxs-lookup"><span data-stu-id="af818-106">For complex method definitions that include <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping>, <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention>, <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling>, <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>, <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError>, or <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields, you apply this attribute directly to Visual Basic method definitions.</span></span>  
  
 <span data-ttu-id="af818-107">**メモ**JScript では、この属性はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="af818-107">**Note** JScript does not support this attribute.</span></span> <span data-ttu-id="af818-108">または Visual Basic C#ラッパークラスを使用して、JScript プログラムからアンマネージ API メソッドにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="af818-108">You can use C# or Visual Basic wrapper classes to access unmanaged API methods from JScript programs.</span></span>  
  
 <span data-ttu-id="af818-109">プラットフォーム呼び出しサービスを使用してアンマネージ Dll の関数にアクセスする方法の詳細については、「[アンマネージ Dll 関数](~/docs/framework/interop/consuming-unmanaged-dll-functions.md)の使用」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="af818-109">For additional information about using the platform invoke service to access functions in unmanaged DLLs, see [Consuming Unmanaged DLL Functions](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="af818-110"><xref:System.Runtime.InteropServices.DllImportAttribute> では、ジェネリック型のマーシャリングはサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="af818-110">The <xref:System.Runtime.InteropServices.DllImportAttribute> does not support marshaling of generic types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af818-111">次のコード例は、<xref:System.Runtime.InteropServices.DllImportAttribute> 属性を使用して Win32 `MessageBox` 関数をインポートする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="af818-111">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="af818-112">このコード例では、インポートされたメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="af818-112">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
    <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DllImportAttribute (string dllName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dllName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dllName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DllImportAttribute(System::String ^ dllName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.DllImportAttribute : string -&gt; System.Runtime.InteropServices.DllImportAttribute" Usage="new System.Runtime.InteropServices.DllImportAttribute dllName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dllName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dllName"><span data-ttu-id="af818-113">アンマネージ メソッドを格納する DLL の名前。</span><span class="sxs-lookup"><span data-stu-id="af818-113">The name of the DLL that contains the unmanaged method.</span></span> <span data-ttu-id="af818-114">DLL がアセンブリに含まれている場合、これにはアセンブリの表示名を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="af818-114">This can include an assembly display name, if the DLL is included in an assembly.</span></span></param>
        <summary><span data-ttu-id="af818-115"><see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> クラスの新しいインスタンスを、インポートするメソッドを格納した DLL の名前を使用して初期化します。</span><span class="sxs-lookup"><span data-stu-id="af818-115">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> class with the name of the DLL containing the method to import.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af818-116">たとえば、リンカーまたは `/linkresource` コンパイラオプションを使用して、アンマネージ DLL ファイルがアセンブリに含まれている場合は、`dllName`の一部として、アセンブリの表示名を指定できます。</span><span class="sxs-lookup"><span data-stu-id="af818-116">If an unmanaged DLL file is included in an assembly, for example, by using the linker or the `/linkresource` compiler option, you can specify the assembly display name as part of `dllName`.</span></span> <span data-ttu-id="af818-117">たとえば、`unmanaged.dll` という名前のアンマネージ DLL が `MyAssembly`という名前のマネージアセンブリに含まれている場合、次のコードに示すように、属性が指定されている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="af818-117">For example, if an unmanaged DLL named `unmanaged.dll` is included in a managed assembly named `MyAssembly`, the attribute might be specified as shown in the following code.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="af818-118">次のコード例は、<xref:System.Runtime.InteropServices.DllImportAttribute> 属性を使用して Win32 `MessageBox` 関数をインポートする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="af818-118">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="af818-119">このコード例では、インポートされたメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="af818-119">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BestFitMapping">
      <MemberSignature Language="C#" Value="public bool BestFitMapping;" />
      <MemberSignature Language="ILAsm" Value=".field public bool BestFitMapping" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberSignature Language="VB.NET" Value="Public BestFitMapping As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool BestFitMapping;" />
      <MemberSignature Language="F#" Value="val mutable BestFitMapping : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af818-120">Unicode 文字を ANSI 文字に変換するときの、最適マッピング動作のオン/オフを切り替えます。</span><span class="sxs-lookup"><span data-stu-id="af818-120">Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af818-121">`true`すると、最適マッピング動作が有効になります。それ以外の場合、最適マッピングは無効になります。</span><span class="sxs-lookup"><span data-stu-id="af818-121">If `true`, best-fit mapping behavior is enabled; otherwise, best-fit mapping is disabled.</span></span> <span data-ttu-id="af818-122"><xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> フィールドは、既定では `true` ます。</span><span class="sxs-lookup"><span data-stu-id="af818-122">The <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is `true` by default.</span></span> <span data-ttu-id="af818-123">このフィールドの設定は、<xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> 属性のすべてのレベル設定より優先されます。</span><span class="sxs-lookup"><span data-stu-id="af818-123">Settings for this field override the any level settings for the <xref:System.Runtime.InteropServices.BestFitMappingAttribute?displayProperty=nameWithType> attribute.</span></span>  
  
 <span data-ttu-id="af818-124">共通言語ランタイムは、Windows 98 または Windows Me で実行されているアンマネージメソッドに渡されるすべてのマネージ Unicode 文字を ANSI 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="af818-124">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="af818-125">最適マッピングを使用すると、完全一致が存在しない場合に、相互運用マーシャラーが一致する文字を指定できます。</span><span class="sxs-lookup"><span data-stu-id="af818-125">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="af818-126">たとえば、ANSI 文字を受け入れるアンマネージメソッドの場合、マーシャラーは Unicode の著作権文字を ' c ' に変換します。</span><span class="sxs-lookup"><span data-stu-id="af818-126">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="af818-127">文字によっては、最適な表現がない場合があります。これらの文字は、マップされていないと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="af818-127">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="af818-128">マップできない文字は通常、既定の "?" に変換されます。ANSI 文字。</span><span class="sxs-lookup"><span data-stu-id="af818-128">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="af818-129">特定の Unicode 文字が、誤ってパスを変更する可能性があるバックスラッシュ '\\' 文字などの危険な文字に変換されます。</span><span class="sxs-lookup"><span data-stu-id="af818-129">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="af818-130"><xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> フィールドを `true`に設定すると、例外をスローすることによって、マップされていない文字が呼び出し元に存在することを通知できます。</span><span class="sxs-lookup"><span data-stu-id="af818-130">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="af818-131">要素が ANSI 文字または LPSTRs であるマネージ配列をアンマネージドセーフ配列に渡すときに、<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> および <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> フィールドによって提供される既定値を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="af818-131">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="af818-132">最適マッピングは常に有効になり、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="af818-132">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="af818-133">この組み合わせによってセキュリティモデルが損なわれる可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="af818-133">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af818-134">場合によっては、Visual Basic 開発者が `Declare` ステートメントの代わりに <xref:System.Runtime.InteropServices.DllImportAttribute>を使用して、マネージコードで DLL 関数を定義することがあります。</span><span class="sxs-lookup"><span data-stu-id="af818-134">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="af818-135"><xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> フィールドの設定は、これらのケースの1つです。</span><span class="sxs-lookup"><span data-stu-id="af818-135">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> field is one of those cases.</span></span> <span data-ttu-id="af818-136">次の例では、ANSI 文字セットを指定し、最適なマッピング動作を無効にして、マップされていない Unicode 文字で例外をスローすることによって、プラットフォーム呼び出しメソッドの定義に最も厳格な文字マッピングセキュリティを適用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="af818-136">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/115f7a2f-d422-4605-ab36-13a8dd28142a"><span data-ttu-id="af818-137">相互運用マーシャリング</span><span class="sxs-lookup"><span data-stu-id="af818-137">Interop Marshaling</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CallingConvention">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CallingConvention CallingConvention;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CallingConvention CallingConvention" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberSignature Language="VB.NET" Value="Public CallingConvention As CallingConvention " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CallingConvention CallingConvention;" />
      <MemberSignature Language="F#" Value="val mutable CallingConvention : System.Runtime.InteropServices.CallingConvention" Usage="System.Runtime.InteropServices.DllImportAttribute.CallingConvention" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CallingConvention</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af818-138">エントリ ポイントの呼び出し規約を示します。</span><span class="sxs-lookup"><span data-stu-id="af818-138">Indicates the calling convention of an entry point.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af818-139">このフィールドは、<xref:System.Runtime.InteropServices.CallingConvention> 列挙型のメンバーのいずれかに設定します。</span><span class="sxs-lookup"><span data-stu-id="af818-139">You set this field to one of the <xref:System.Runtime.InteropServices.CallingConvention> enumeration members.</span></span> <span data-ttu-id="af818-140"><xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> フィールドの既定値は <xref:System.Runtime.InteropServices.CallingConvention.Winapi>であり、これは既定で <xref:System.Runtime.InteropServices.CallingConvention.StdCall> 規則に設定されます。</span><span class="sxs-lookup"><span data-stu-id="af818-140">The default value for the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is <xref:System.Runtime.InteropServices.CallingConvention.Winapi>, which in turn defaults to <xref:System.Runtime.InteropServices.CallingConvention.StdCall> convention.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af818-141">場合によっては、Visual Basic 開発者が `Declare` ステートメントの代わりに <xref:System.Runtime.InteropServices.DllImportAttribute>を使用して、マネージコードで DLL 関数を定義することがあります。</span><span class="sxs-lookup"><span data-stu-id="af818-141">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="af818-142"><xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> フィールドの設定は、これらのケースの1つです。</span><span class="sxs-lookup"><span data-stu-id="af818-142">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.CallingConvention> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CallingConvention" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.DllImportAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af818-143">文字列パラメーターをメソッドにマーシャリングし、名前マングルを制御する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="af818-143">Indicates how to marshal string parameters to the method and controls name mangling.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af818-144">このフィールドを <xref:System.Runtime.InteropServices.CharSet> 列挙体のメンバーと共に使用して、文字列パラメーターのマーシャリング動作を指定し、呼び出すエントリポイント名 (指定された正確な名前、または "A" または "W" で終わる名前) を指定します。</span><span class="sxs-lookup"><span data-stu-id="af818-144">Use this field with a member of the <xref:System.Runtime.InteropServices.CharSet> enumeration to specify the marshaling behavior of string parameters and to specify which entry-point name to invoke (the exact name given or a name ending with "A" or "W").</span></span> <span data-ttu-id="af818-145">と Visual Basic のC#既定の列挙体メンバーは `CharSet.Ansi` であり、のC++既定の列挙体メンバーは `CharSet.None`です。これは `CharSet.Ansi`と同じです。</span><span class="sxs-lookup"><span data-stu-id="af818-145">The default enumeration member for C# and Visual Basic is `CharSet.Ansi` and the default enumeration member for C++ is `CharSet.None`, which is equivalent to `CharSet.Ansi`.</span></span> <span data-ttu-id="af818-146">Visual Basic では、`Declare` ステートメントを使用して `CharSet` フィールドを指定します。</span><span class="sxs-lookup"><span data-stu-id="af818-146">In Visual Basic, you use the `Declare` statement to specify the `CharSet` field.</span></span>  
  
 <span data-ttu-id="af818-147"><xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> フィールドは、呼び出すエントリポイント名を決定する際の `CharSet` フィールドの動作に影響します。</span><span class="sxs-lookup"><span data-stu-id="af818-147">The <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field influences the behavior of the `CharSet` field in determining which entry-point name to invoke.</span></span> <span data-ttu-id="af818-148">`CharSet` フィールドに関連付けられている文字列のマーシャリングと名前の一致動作の詳細な説明と例については、「[文字セットの指定](~/docs/framework/interop/specifying-a-character-set.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="af818-148">For a detailed description and examples of the string marshaling and name matching behavior associated with the `CharSet` field, see [Specifying a Character Set](~/docs/framework/interop/specifying-a-character-set.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af818-149">次のコード例は、<xref:System.Runtime.InteropServices.DllImportAttribute> 属性を使用して Win32 `MessageBox` 関数をインポートする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="af818-149">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="af818-150">このコード例では、インポートされたメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="af818-150">The code example then calls the imported method.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.Canonical#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.Canonical/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      </Docs>
    </Member>
    <Member MemberName="EntryPoint">
      <MemberSignature Language="C#" Value="public string EntryPoint;" />
      <MemberSignature Language="ILAsm" Value=".field public string EntryPoint" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberSignature Language="VB.NET" Value="Public EntryPoint As String " />
      <MemberSignature Language="C++ CLI" Value="public: System::String ^ EntryPoint;" />
      <MemberSignature Language="F#" Value="val mutable EntryPoint : string" Usage="System.Runtime.InteropServices.DllImportAttribute.EntryPoint" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af818-151">呼び出す DLL エントリ ポイントの名前または序数を指定します。</span><span class="sxs-lookup"><span data-stu-id="af818-151">Indicates the name or ordinal of the DLL entry point to be called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af818-152">エントリポイント名は、エントリポイントを含む DLL の名前を示す文字列を指定することによって指定できます。また、エントリポイントを序数で識別することもできます。</span><span class="sxs-lookup"><span data-stu-id="af818-152">You can specify the entry-point name by supplying a string indicating the name of the DLL containing the entry point, or you can identify the entry point by its ordinal.</span></span> <span data-ttu-id="af818-153">序数の先頭には、# 記号 (#1 など) が付きます。</span><span class="sxs-lookup"><span data-stu-id="af818-153">Ordinals are prefixed with the # sign, for example, #1.</span></span> <span data-ttu-id="af818-154">このフィールドを省略した場合、共通言語ランタイムは、<xref:System.Runtime.InteropServices.DllImportAttribute>でマークされた the.NET メソッドの名前を使用します。</span><span class="sxs-lookup"><span data-stu-id="af818-154">If you omit this field, the common language runtime uses the name of the.NET method marked with the <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span>  
  
 <span data-ttu-id="af818-155">詳細については、「 [dll 内の関数の識別](~/docs/framework/interop/identifying-functions-in-dlls.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="af818-155">For additional information, see [Identifying Functions in DLLs](~/docs/framework/interop/identifying-functions-in-dlls.md).</span></span> <span data-ttu-id="af818-156"><xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> フィールドの使用方法を示す例については、「[エントリポイントの指定](~/docs/framework/interop/specifying-an-entry-point.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="af818-156">For examples showing how to use the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> field, see [Specifying an Entry Point](~/docs/framework/interop/specifying-an-entry-point.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af818-157">次のコード例は、<xref:System.Runtime.InteropServices.DllImportAttribute> 属性を使用して Win32 `MessageBox` 関数をインポートする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="af818-157">The following code example shows how to use the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to import the Win32 `MessageBox` function.</span></span>  <span data-ttu-id="af818-158">このコード例では、<xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> プロパティを使用してインポートする関数を指定し、名前を `MyNewMessageBoxMethod`に変更します。</span><span class="sxs-lookup"><span data-stu-id="af818-158">The code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute.EntryPoint> property to specify the function to import and then changes the name to `MyNewMessageBoxMethod`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.DllImport.EntryPoint#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.DllImport.EntryPoint/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ExactSpelling">
      <MemberSignature Language="C#" Value="public bool ExactSpelling;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ExactSpelling" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberSignature Language="VB.NET" Value="Public ExactSpelling As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ExactSpelling;" />
      <MemberSignature Language="F#" Value="val mutable ExactSpelling : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ExactSpelling" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af818-159"><see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> フィールドで、指定された名前以外のエントリ ポイント名をアンマネージ DLL から共通言語ランタイムに検索させるかどうかを制御します。</span><span class="sxs-lookup"><span data-stu-id="af818-159">Controls whether the <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af818-160">`false`すると、<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> フィールドが `CharSet.Ansi`に設定されているときに、文字 A と共に追加されたエントリポイント名が呼び出されます。 <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> フィールドが `CharSet.Unicode`に設定されている場合は、W という文字が付いたエントリポイント名が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="af818-160">If `false`, the entry point name appended with the letter A is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to `CharSet.Ansi`, and the entry-point name appended with the letter W is invoked when the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet?displayProperty=nameWithType> field is set to the `CharSet.Unicode`.</span></span> <span data-ttu-id="af818-161">通常、マネージコンパイラはこのフィールドを設定します。</span><span class="sxs-lookup"><span data-stu-id="af818-161">Typically, managed compilers set this field.</span></span>  
  
 <span data-ttu-id="af818-162">次の表は、プログラミング言語によって設定された既定値に基づいて、<xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> フィールドと <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> フィールド間のリレーションシップを示しています。</span><span class="sxs-lookup"><span data-stu-id="af818-162">The following table shows the relationship between the <xref:System.Runtime.InteropServices.DllImportAttribute.CharSet> and <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> fields, based on default values imposed by the programming language.</span></span> <span data-ttu-id="af818-163">既定の設定を上書きすることはできますが、注意してください。</span><span class="sxs-lookup"><span data-stu-id="af818-163">You can override the default setting, but do so with caution.</span></span>  
  
|<span data-ttu-id="af818-164">言語</span><span class="sxs-lookup"><span data-stu-id="af818-164">Language</span></span>|<span data-ttu-id="af818-165">ANSI</span><span class="sxs-lookup"><span data-stu-id="af818-165">ANSI</span></span>|<span data-ttu-id="af818-166">Unicode</span><span class="sxs-lookup"><span data-stu-id="af818-166">Unicode</span></span>|<span data-ttu-id="af818-167">自動</span><span class="sxs-lookup"><span data-stu-id="af818-167">Auto</span></span>|  
|--------------|----------|-------------|----------|  
|<span data-ttu-id="af818-168">Visual Basic</span><span class="sxs-lookup"><span data-stu-id="af818-168">Visual Basic</span></span>|<span data-ttu-id="af818-169">ExactSpelling: = True</span><span class="sxs-lookup"><span data-stu-id="af818-169">ExactSpelling:=True</span></span>|<span data-ttu-id="af818-170">ExactSpelling: = True</span><span class="sxs-lookup"><span data-stu-id="af818-170">ExactSpelling:=True</span></span>|<span data-ttu-id="af818-171">ExactSpelling: = False</span><span class="sxs-lookup"><span data-stu-id="af818-171">ExactSpelling:=False</span></span>|  
|<span data-ttu-id="af818-172">C#</span><span class="sxs-lookup"><span data-stu-id="af818-172">C#</span></span>|<span data-ttu-id="af818-173">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="af818-173">ExactSpelling=false</span></span>|<span data-ttu-id="af818-174">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="af818-174">ExactSpelling=false</span></span>|<span data-ttu-id="af818-175">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="af818-175">ExactSpelling=false</span></span>|  
|<span data-ttu-id="af818-176">C++</span><span class="sxs-lookup"><span data-stu-id="af818-176">C++</span></span>|<span data-ttu-id="af818-177">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="af818-177">ExactSpelling=false</span></span>|<span data-ttu-id="af818-178">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="af818-178">ExactSpelling=false</span></span>|<span data-ttu-id="af818-179">ExactSpelling = false</span><span class="sxs-lookup"><span data-stu-id="af818-179">ExactSpelling=false</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="af818-180">場合によっては、Visual Basic 開発者が `Declare` ステートメントを使用する代わりに <xref:System.Runtime.InteropServices.DllImportAttribute>を使用して、マネージコードで DLL 関数を定義することがあります。</span><span class="sxs-lookup"><span data-stu-id="af818-180">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="af818-181"><xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> フィールドの設定は、これらのケースの1つです。</span><span class="sxs-lookup"><span data-stu-id="af818-181">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreserveSig">
      <MemberSignature Language="C#" Value="public bool PreserveSig;" />
      <MemberSignature Language="ILAsm" Value=".field public bool PreserveSig" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberSignature Language="VB.NET" Value="Public PreserveSig As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool PreserveSig;" />
      <MemberSignature Language="F#" Value="val mutable PreserveSig : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.PreserveSig" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af818-182">戻り値が <see langword="HRESULT" /> または <see langword="retval" /> であるアンマネージ メソッドを直接変換するか、戻り値 <see langword="HRESULT" /> または <see langword="retval" /> を自動的に例外に変換するかを示します。</span><span class="sxs-lookup"><span data-stu-id="af818-182">Indicates whether unmanaged methods that have <see langword="HRESULT" /> or <see langword="retval" /> return values are directly translated or whether <see langword="HRESULT" /> or <see langword="retval" /> return values are automatically converted to exceptions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af818-183">アンマネージシグネチャを `HRESULT` または `retval` 値に直接変換するには、[<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig>] フィールドを `true` に設定します。`HRESULT` または `retval` の値を例外に自動的に変換するには、これを `false` に設定します。</span><span class="sxs-lookup"><span data-stu-id="af818-183">Set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `true` to directly translate unmanaged signatures with `HRESULT` or `retval` values; set it to `false` to automatically convert `HRESULT` or `retval` values to exceptions.</span></span> <span data-ttu-id="af818-184">既定では、<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> フィールドは `true`です。</span><span class="sxs-lookup"><span data-stu-id="af818-184">By default, the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is `true`.</span></span>  
  
 <span data-ttu-id="af818-185">`true`すると、結果として得られるメソッドシグネチャは、`HRESULT` 値を含む整数値を返します。</span><span class="sxs-lookup"><span data-stu-id="af818-185">When `true`, the resulting method signature returns an integer value that contains the `HRESULT` value.</span></span>  <span data-ttu-id="af818-186">この場合、手動で戻り値を検査し、それに応じてアプリケーションで応答する必要があります。</span><span class="sxs-lookup"><span data-stu-id="af818-186">In this case, you must manually inspect the return value and respond accordingly in your application.</span></span>  
  
 <span data-ttu-id="af818-187"><xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> フィールドを `false`に設定すると、結果として得られるメソッドシグネチャには、整数 (`HRESULT`) の戻り値の型ではなく、void の戻り値の型が含まれます。</span><span class="sxs-lookup"><span data-stu-id="af818-187">When you set the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field to `false`, the resulting method signature contains a void return type instead of an integer (`HRESULT`) return type.</span></span>  <span data-ttu-id="af818-188">アンマネージメソッドによって `HRESULT`が生成されると、ランタイムは `S_OK` (または 0) の戻り値を自動的に無視し、例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="af818-188">When the unmanaged method produces an `HRESULT`, the runtime automatically ignores a return value of `S_OK` (or 0) and does not throw an exception.</span></span>  <span data-ttu-id="af818-189">`S_OK`以外の `HRESULT`の場合、ランタイムは `HRESULT`に対応する例外を自動的にスローします。</span><span class="sxs-lookup"><span data-stu-id="af818-189">For `HRESULT`s other than `S_OK`, the runtime automatically throws an exception that corresponds to the `HRESULT`.</span></span>  <span data-ttu-id="af818-190"><xref:System.Runtime.InteropServices.DllImportAttribute> 属性は、`HRESULT`を返すメソッドへの変換のみを実行することに注意してください。</span><span class="sxs-lookup"><span data-stu-id="af818-190">Note that the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute only performs this conversion to methods that return an `HRESULT`.</span></span>  
  
 <span data-ttu-id="af818-191">例外がアプリケーションのエラー報告構造に適している場合は、`HRESULT`s から例外に既定のエラー報告動作を変更することができます。</span><span class="sxs-lookup"><span data-stu-id="af818-191">You might decide to change the default error reporting behavior from `HRESULT`s to exceptions in cases where exceptions better fit the error reporting structure of your application.</span></span>  
  
 <span data-ttu-id="af818-192">このフィールドは <xref:System.Runtime.InteropServices.PreserveSigAttribute>に似ています。ただし、<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> フィールドとは異なり、属性の既定値は `false`ます。</span><span class="sxs-lookup"><span data-stu-id="af818-192">This field is similar to the <xref:System.Runtime.InteropServices.PreserveSigAttribute>; however, in contrast to the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field, the default value for the attribute is `false`.</span></span>  
  
 <span data-ttu-id="af818-193">場合によっては、Visual Basic 開発者が `Declare` ステートメントを使用する代わりに <xref:System.Runtime.InteropServices.DllImportAttribute>を使用して、マネージコードで DLL 関数を定義することがあります。</span><span class="sxs-lookup"><span data-stu-id="af818-193">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="af818-194"><xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> フィールドの設定は、これらのケースの1つです。</span><span class="sxs-lookup"><span data-stu-id="af818-194">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field is one of those cases.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af818-195">次のコード例では、<xref:System.Runtime.InteropServices.DllImportAttribute> を使用して、<xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> フィールドを `true` に、もう一度 <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> フィールドを `false`に設定して、アンマネージ `SHAutoComplete` 関数をインポートします。</span><span class="sxs-lookup"><span data-stu-id="af818-195">The following code example uses the <xref:System.Runtime.InteropServices.DllImportAttribute> to import the unmanaged `SHAutoComplete` function once with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `true` and again with the <xref:System.Runtime.InteropServices.DllImportAttribute.PreserveSig> field set to `false`.</span></span>  <span data-ttu-id="af818-196">このコード例では、`SHAutoComplete` 関数によって、例外が1回だけ発生するエラーと、次の `HRESULT` が生成されます。</span><span class="sxs-lookup"><span data-stu-id="af818-196">This code example causes the `SHAutoComplete` function to generate any errors with an exception one time and an `HRESULT` the next.</span></span>  
  
 [!code-csharp[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.PreserveSigAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.PreserveSigAttribute/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="SetLastError">
      <MemberSignature Language="C#" Value="public bool SetLastError;" />
      <MemberSignature Language="ILAsm" Value=".field public bool SetLastError" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberSignature Language="VB.NET" Value="Public SetLastError As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool SetLastError;" />
      <MemberSignature Language="F#" Value="val mutable SetLastError : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.SetLastError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af818-197">属性付きメソッドから戻る前に、呼び出し先が <see langword="SetLastError" /> Windows API 関数を呼び出すかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="af818-197">Indicates whether the callee calls the <see langword="SetLastError" /> Windows API function before returning from the attributed method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af818-198">呼び出し先が `SetLastError`を呼び出すことを示す `true` ます。それ以外の場合は、`false`ます。</span><span class="sxs-lookup"><span data-stu-id="af818-198">`true` to indicate that the callee will call `SetLastError`; otherwise, `false`.</span></span> <span data-ttu-id="af818-199">既定値は、`false` です。</span><span class="sxs-lookup"><span data-stu-id="af818-199">The default is `false`.</span></span>  
  
 <span data-ttu-id="af818-200">ランタイムマーシャラーは `GetLastError` を呼び出し、返された値をキャッシュして、他の API 呼び出しによって上書きされないようにします。</span><span class="sxs-lookup"><span data-stu-id="af818-200">The runtime marshaler calls `GetLastError` and caches the value returned to prevent it from being overwritten by other API calls.</span></span> <span data-ttu-id="af818-201"><xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>を呼び出すことによって、エラーコードを取得できます。</span><span class="sxs-lookup"><span data-stu-id="af818-201">You can retrieve the error code by calling <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af818-202">場合によっては、Visual Basic 開発者が `Declare` ステートメントを使用する代わりに <xref:System.Runtime.InteropServices.DllImportAttribute>を使用して、マネージコードで DLL 関数を定義することがあります。</span><span class="sxs-lookup"><span data-stu-id="af818-202">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute>, instead of using the `Declare` statement, to define a DLL function in managed code.</span></span> <span data-ttu-id="af818-203"><xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> フィールドの設定は、これらのケースの1つです。</span><span class="sxs-lookup"><span data-stu-id="af818-203">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> field is one of those cases.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      </Docs>
    </Member>
    <Member MemberName="ThrowOnUnmappableChar">
      <MemberSignature Language="C#" Value="public bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="ILAsm" Value=".field public bool ThrowOnUnmappableChar" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberSignature Language="VB.NET" Value="Public ThrowOnUnmappableChar As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: bool ThrowOnUnmappableChar;" />
      <MemberSignature Language="F#" Value="val mutable ThrowOnUnmappableChar : bool" Usage="System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af818-204">マップできない Unicode 文字 (ANSI の "?" に変換される文字) が見つかったときに、例外をスローするかどうかを指定します。</span><span class="sxs-lookup"><span data-stu-id="af818-204">Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI "?" character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af818-205">相互運用マーシャラーがマップされていない文字を変換するたびに例外がスローされることを示す `true` ます。<xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> フィールドが無効であることを示す `false` ます。</span><span class="sxs-lookup"><span data-stu-id="af818-205">`true` to indicate that an exception is thrown each time the interop marshaler converts an unmappable character; `false` to indicate that the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is disabled.</span></span> <span data-ttu-id="af818-206">既定では、このフィールドは `false` ます。</span><span class="sxs-lookup"><span data-stu-id="af818-206">This field is `false` by default.</span></span>  
  
 <span data-ttu-id="af818-207">共通言語ランタイムは、Windows 98 または Windows Me で実行されているアンマネージメソッドに渡されるすべてのマネージ Unicode 文字を ANSI 文字に変換します。</span><span class="sxs-lookup"><span data-stu-id="af818-207">The common language runtime converts to ANSI characters any managed Unicode characters passed to an unmanaged method executing on Windows 98 or Windows Me.</span></span> <span data-ttu-id="af818-208">最適マッピングを使用すると、完全一致が存在しない場合に、相互運用マーシャラーが一致する文字を指定できます。</span><span class="sxs-lookup"><span data-stu-id="af818-208">Best-fit mapping enables the interop marshaler to provide a close-matching character when no exact match exists.</span></span> <span data-ttu-id="af818-209">たとえば、ANSI 文字を受け入れるアンマネージメソッドの場合、マーシャラーは Unicode の著作権文字を ' c ' に変換します。</span><span class="sxs-lookup"><span data-stu-id="af818-209">For example, the marshaler converts the Unicode copyright character to 'c' for unmanaged methods that accept ANSI characters.</span></span> <span data-ttu-id="af818-210">文字によっては、最適な表現がない場合があります。これらの文字は、マップされていないと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="af818-210">Some characters lack a best-fit representation; these characters are called unmappable.</span></span> <span data-ttu-id="af818-211">マップできない文字は通常、既定の "?" に変換されます。ANSI 文字。</span><span class="sxs-lookup"><span data-stu-id="af818-211">Unmappable characters are usually converted to the default '?' ANSI character.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="af818-212">特定の Unicode 文字が、誤ってパスを変更する可能性があるバックスラッシュ '\\' 文字などの危険な文字に変換されます。</span><span class="sxs-lookup"><span data-stu-id="af818-212">Certain Unicode characters are converted to dangerous characters, such as the backslash '\\' character, which can inadvertently change a path.</span></span> <span data-ttu-id="af818-213"><xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> フィールドを `true`に設定すると、例外をスローすることによって、マップされていない文字が呼び出し元に存在することを通知できます。</span><span class="sxs-lookup"><span data-stu-id="af818-213">By setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field to `true`, you can signal the presence of an unmappable character to the caller by throwing an exception.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="af818-214">要素が ANSI 文字または LPSTRs であるマネージ配列をアンマネージドセーフ配列に渡すときに、<xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> および <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> フィールドによって提供される既定値を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="af818-214">You cannot change the default values provided by the <xref:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping> and <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> fields when passing a managed array whose elements are ANSI Chars or LPSTRs to an unmanaged safe array.</span></span> <span data-ttu-id="af818-215">最適マッピングは常に有効になり、例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="af818-215">Best-fit mapping is always enabled and no exception is thrown.</span></span> <span data-ttu-id="af818-216">この組み合わせによってセキュリティモデルが損なわれる可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="af818-216">Be aware that this combination can compromise your security model.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="af818-217">場合によっては、Visual Basic 開発者は、`Declare` ステートメントを使用する代わりに、<xref:System.Runtime.InteropServices.DllImportAttribute> を使用してマネージコードで DLL 関数を定義することがあります。</span><span class="sxs-lookup"><span data-stu-id="af818-217">In some cases, Visual Basic developers use the <xref:System.Runtime.InteropServices.DllImportAttribute> to define a DLL function in managed code, instead of using the `Declare` statement.</span></span> <span data-ttu-id="af818-218"><xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> フィールドの設定は、これらのケースの1つです。</span><span class="sxs-lookup"><span data-stu-id="af818-218">Setting the <xref:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar> field is one of those cases.</span></span> <span data-ttu-id="af818-219">次の例では、ANSI 文字セットを指定し、最適なマッピング動作を無効にして、マップされていない Unicode 文字で例外をスローすることによって、プラットフォーム呼び出しメソッドの定義に最も厳格な文字マッピングセキュリティを適用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="af818-219">The following example shows how to apply the strictest character mapping security to a platform invoke method definitions by specifying the ANSI character set, disabling best fit mapping behavior, and throwing an exception on unmapped Unicode characters.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.DllImportAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.dllimportattribute/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />
        <altmember cref="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping" />
        <related type="Article" href="https://msdn.microsoft.com/library/115f7a2f-d422-4605-ab36-13a8dd28142a"><span data-ttu-id="af818-220">相互運用マーシャリング</span><span class="sxs-lookup"><span data-stu-id="af818-220">Interop Marshaling</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Runtime.InteropServices.DllImportAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="af818-221">エントリ ポイントを含む DLL ファイルの名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="af818-221">Gets the name of the DLL file that contains the entry point.</span></span></summary>
        <value><span data-ttu-id="af818-222">エントリ ポイントを含む DLL ファイルの名前。</span><span class="sxs-lookup"><span data-stu-id="af818-222">The name of the DLL file that contains the entry point.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="af818-223">完全パスまたは相対パスを指定できます。</span><span class="sxs-lookup"><span data-stu-id="af818-223">You can provide a full or relative path.</span></span> <span data-ttu-id="af818-224">パスを指定しない場合、dll が他の方法で読み込まれない限り、DLL は実行時に現在のパスにある必要があります。</span><span class="sxs-lookup"><span data-stu-id="af818-224">If you provide no path, the DLL must be in the current path at run time, unless the DLL is loaded by some other means.</span></span> <span data-ttu-id="af818-225">ただし、DLL を移動する場合は、完全修飾パスを使用すると不正確さが発生する可能性があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="af818-225">Be aware, however, that using a fully qualified path can introduce inaccuracy if the DLL is moved.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
