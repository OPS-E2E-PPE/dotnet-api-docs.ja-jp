<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6e4f17e4bcd3f69dd60e1e69a7f4be397517292" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83482341" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.InteropServices" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="339bb-101">メソッド呼び出しを処理するためのカスタム ラッパーを提供します。</span><span class="sxs-lookup"><span data-stu-id="339bb-101">Provides custom wrappers for handling method calls.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="339bb-102">マーシャラーは、古いインターフェイスと新しいインターフェイスの機能の間にブリッジを提供します。</span><span class="sxs-lookup"><span data-stu-id="339bb-102">A marshaler provides a bridge between the functionality of old and new interfaces.</span></span> <span data-ttu-id="339bb-103">カスタムマーシャリングには、次のような利点があります。</span><span class="sxs-lookup"><span data-stu-id="339bb-103">Custom marshaling provides the following benefits:</span></span>  
  
-   <span data-ttu-id="339bb-104">これにより、古いインターフェイスで動作するように設計されたクライアントアプリケーションは、新しいインターフェイスを実装するサーバーとも連携できるようになります。</span><span class="sxs-lookup"><span data-stu-id="339bb-104">It enables client applications that were designed to work with an old interface to also work with servers that implement a new interface.</span></span>  
  
-   <span data-ttu-id="339bb-105">これにより、新しいインターフェイスで動作するように構築されたクライアントアプリケーションが、古いインターフェイスを実装するサーバーと連携できるようになります。</span><span class="sxs-lookup"><span data-stu-id="339bb-105">It enables client applications built to work with a new interface to work with servers that implement an old interface.</span></span>  
  
 <span data-ttu-id="339bb-106">異なるマーシャリング動作を導入したり、別の方法でコンポーネントオブジェクトモデル (COM) に公開されているインターフェイスがある場合は、相互運用マーシャラーを使用する代わりにカスタムマーシャラーを設計できます。</span><span class="sxs-lookup"><span data-stu-id="339bb-106">If you have an interface that introduces different marshaling behavior or that is exposed to the Component Object Model (COM) in a different way, you can design a custom marshaler instead of using the interop marshaler.</span></span> <span data-ttu-id="339bb-107">カスタムマーシャラーを使用すると、新しい .NET Framework コンポーネントと既存の COM コンポーネントの区別を最小限に抑えることができます。</span><span class="sxs-lookup"><span data-stu-id="339bb-107">By using a custom marshaler, you can minimize the distinction between new .NET Framework components and existing COM components.</span></span>  
  
 <span data-ttu-id="339bb-108">たとえば、`INew`というマネージインターフェイスを開発しているとします。</span><span class="sxs-lookup"><span data-stu-id="339bb-108">For example, suppose that you are developing a managed interface called `INew`.</span></span> <span data-ttu-id="339bb-109">このインターフェイスが標準 COM 呼び出し可能ラッパー (CCW) を介して COM に公開される場合、マネージインターフェイスと同じメソッドを持ち、相互運用マーシャラーに組み込まれているマーシャリング規則を使用します。</span><span class="sxs-lookup"><span data-stu-id="339bb-109">When this interface is exposed to COM through a standard COM callable wrapper (CCW), it has the same methods as the managed interface and uses the marshaling rules built into the interop marshaler.</span></span> <span data-ttu-id="339bb-110">ここで、`IOld` という既知の COM インターフェイスが、`INew` インターフェイスと同じ機能を既に提供しているとします。</span><span class="sxs-lookup"><span data-stu-id="339bb-110">Now suppose that a well-known COM interface called `IOld` already provides the same functionality as the `INew` interface.</span></span> <span data-ttu-id="339bb-111">カスタムマーシャラーを設計することで、`INew` インターフェイスのマネージ実装への呼び出しをデリゲートするだけの `IOld` のアンマネージ実装を提供できます。</span><span class="sxs-lookup"><span data-stu-id="339bb-111">By designing a custom marshaler, you can provide an unmanaged implementation of `IOld` that simply delegates the calls to the managed implementation of the `INew` interface.</span></span> <span data-ttu-id="339bb-112">したがって、カスタムマーシャラーは、マネージインターフェイスとアンマネージインターフェイスの間のブリッジとして機能します。</span><span class="sxs-lookup"><span data-stu-id="339bb-112">Therefore, the custom marshaler acts as a bridge between the managed and unmanaged interfaces.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="339bb-113">ディスパッチ専用インターフェイスでマネージコードからアンマネージコードへの呼び出しを行う場合、カスタムマーシャラーは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="339bb-113">Custom marshalers are not invoked when calling from managed code to unmanaged code on a dispatch-only interface.</span></span>  
  
## <a name="defining-the-marshaling-type"></a><span data-ttu-id="339bb-114">マーシャリング型の定義</span><span class="sxs-lookup"><span data-stu-id="339bb-114">Defining the Marshaling Type</span></span>  
 <span data-ttu-id="339bb-115">カスタムマーシャラーを構築するには、マーシャリングするマネージインターフェイスとアンマネージインターフェイスを定義する必要があります。</span><span class="sxs-lookup"><span data-stu-id="339bb-115">Before you can build a custom marshaler, you must define the managed and unmanaged interfaces that will be marshaled.</span></span> <span data-ttu-id="339bb-116">これらのインターフェイスは、通常、同じ機能を実行しますが、マネージオブジェクトとアンマネージオブジェクトでは異なる方法で公開されます。</span><span class="sxs-lookup"><span data-stu-id="339bb-116">These interfaces commonly perform the same function but are exposed differently to managed and unmanaged objects.</span></span>  
  
 <span data-ttu-id="339bb-117">マネージコンパイラはメタデータからマネージインターフェイスを生成し、結果として得られるインターフェイスは他のマネージインターフェイスのようになります。</span><span class="sxs-lookup"><span data-stu-id="339bb-117">A managed compiler produces a managed interface from metadata, and the resulting interface looks like any other managed interface.</span></span> <span data-ttu-id="339bb-118">一般的なインターフェイスの例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="339bb-118">The following example shows a typical interface.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 <span data-ttu-id="339bb-119">インターフェイス定義言語 (IDL) でアンマネージ型を定義し、Microsoft インターフェイス定義言語 (MIDL) コンパイラを使用してコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="339bb-119">You define the unmanaged type in Interface Definition Language (IDL) and compile it with the Microsoft Interface Definition Language (MIDL) compiler.</span></span> <span data-ttu-id="339bb-120">次の例に示すように、ライブラリステートメント内でインターフェイスを定義し、それに汎用一意識別子 (UUID) 属性を持つインターフェイス ID を割り当てます。</span><span class="sxs-lookup"><span data-stu-id="339bb-120">You define the interface within a library statement and assign it an interface ID with the universal unique identifier (UUID) attribute, as the following example demonstrates.</span></span>  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 <span data-ttu-id="339bb-121">MIDL コンパイラでは、複数の出力ファイルが生成されます。</span><span class="sxs-lookup"><span data-stu-id="339bb-121">The MIDL compiler produces several output files.</span></span> <span data-ttu-id="339bb-122">インターフェイスが古い .idl で定義されている場合、出力ファイル Old_i. c は、次の例に示すように、インターフェイスのインターフェイス識別子 (IID) を使用して `const` 変数を定義します。</span><span class="sxs-lookup"><span data-stu-id="339bb-122">If the interface is defined in Old.idl, the output file Old_i.c defines a `const` variable with the interface identifier (IID) of the interface, as the following example demonstrates.</span></span>  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 <span data-ttu-id="339bb-123">古い .h ファイルも MIDL によって生成されます。</span><span class="sxs-lookup"><span data-stu-id="339bb-123">The Old.h file is also produced by MIDL.</span></span> <span data-ttu-id="339bb-124">これにはC++ 、 C++ソースコードに含めることができるインターフェイスの定義が含まれています。</span><span class="sxs-lookup"><span data-stu-id="339bb-124">It contains a C++ definition of the interface that can be included in your C++ source code.</span></span>  
  
## <a name="implementing-the-icustommarshaler-interface"></a><span data-ttu-id="339bb-125">ICustomMarshaler インターフェイスの実装</span><span class="sxs-lookup"><span data-stu-id="339bb-125">Implementing the ICustomMarshaler Interface</span></span>  
 <span data-ttu-id="339bb-126">カスタムマーシャラーは、適切なラッパーをランタイムに提供するために、<xref:System.Runtime.InteropServices.ICustomMarshaler> インターフェイスを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="339bb-126">Your custom marshaler must implement the <xref:System.Runtime.InteropServices.ICustomMarshaler> interface to provide the appropriate wrappers to the runtime.</span></span>  
  
 <span data-ttu-id="339bb-127">次C#のコードは、すべてのカスタムマーシャラーによって実装される必要がある基本インターフェイスを表示します。</span><span class="sxs-lookup"><span data-stu-id="339bb-127">The following C# code displays the base interface that must be implemented by all custom marshalers.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 <span data-ttu-id="339bb-128"><xref:System.Runtime.InteropServices.ICustomMarshaler> インターフェイスには、変換のサポート、クリーンアップのサポート、およびマーシャリングするデータに関する情報を提供するメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="339bb-128">The <xref:System.Runtime.InteropServices.ICustomMarshaler> interface includes methods that provide conversion support, cleanup support, and information about the data to be marshaled.</span></span>  
  
|<span data-ttu-id="339bb-129">操作の種類</span><span class="sxs-lookup"><span data-stu-id="339bb-129">Type of operation</span></span>|<span data-ttu-id="339bb-130">ICustomMarshaler メソッド</span><span class="sxs-lookup"><span data-stu-id="339bb-130">ICustomMarshaler method</span></span>|<span data-ttu-id="339bb-131">説明</span><span class="sxs-lookup"><span data-stu-id="339bb-131">Description</span></span>|  
|-----------------------|-----------------------------|-----------------|  
|<span data-ttu-id="339bb-132">変換 (ネイティブコードからマネージコードへの)</span><span class="sxs-lookup"><span data-stu-id="339bb-132">Conversion (from native to managed code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|<span data-ttu-id="339bb-133">ネイティブデータへのポインターをマネージオブジェクトにマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="339bb-133">Marshals a pointer to native data into a managed object.</span></span> <span data-ttu-id="339bb-134">このメソッドは、引数として渡されるアンマネージインターフェイスをマーシャリングできるカスタムランタイム呼び出し可能ラッパー (RCW) を返します。</span><span class="sxs-lookup"><span data-stu-id="339bb-134">This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</span></span> <span data-ttu-id="339bb-135">マーシャラーは、その型のカスタム RCW のインスタンスを返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="339bb-135">The marshaler should return an instance of the custom RCW for that type.</span></span>|  
|<span data-ttu-id="339bb-136">変換 (マネージコードからネイティブコードへの)</span><span class="sxs-lookup"><span data-stu-id="339bb-136">Conversion (from managed to native code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|<span data-ttu-id="339bb-137">マネージオブジェクトをネイティブデータへのポインターにマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="339bb-137">Marshals a managed object into a pointer to native data.</span></span> <span data-ttu-id="339bb-138">このメソッドは、引数として渡されるマネージインターフェイスをマーシャリングできるカスタム COM 呼び出し可能ラッパー (CCW) を返します。</span><span class="sxs-lookup"><span data-stu-id="339bb-138">This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</span></span> <span data-ttu-id="339bb-139">マーシャラーは、その型のカスタム CCW のインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="339bb-139">The marshaler should return an instance of the custom CCW for that type.</span></span>|  
|<span data-ttu-id="339bb-140">クリーンアップ (ネイティブコード)</span><span class="sxs-lookup"><span data-stu-id="339bb-140">Cleanup (of native code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|<span data-ttu-id="339bb-141">マーシャラーが、<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> メソッドによって返されるネイティブデータ (CCW) をクリーンアップできるようにします。</span><span class="sxs-lookup"><span data-stu-id="339bb-141">Enables the marshaler to clean up the native data (the CCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> method.</span></span>|  
|<span data-ttu-id="339bb-142">クリーンアップ (マネージコードの)</span><span class="sxs-lookup"><span data-stu-id="339bb-142">Cleanup (of managed code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|<span data-ttu-id="339bb-143">マーシャラーが、<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> メソッドによって返されるマネージデータ (RCW) をクリーンアップできるようにします。</span><span class="sxs-lookup"><span data-stu-id="339bb-143">Enables the marshaler to clean up the managed data (the RCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> method.</span></span>|  
|<span data-ttu-id="339bb-144">情報 (ネイティブコードについて)</span><span class="sxs-lookup"><span data-stu-id="339bb-144">Information (about native code)</span></span>|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|<span data-ttu-id="339bb-145">マーシャリングするアンマネージデータのサイズを返します。</span><span class="sxs-lookup"><span data-stu-id="339bb-145">Returns the size of the unmanaged data to be marshaled.</span></span>|  
  
### <a name="conversion"></a><span data-ttu-id="339bb-146">変換</span><span class="sxs-lookup"><span data-stu-id="339bb-146">Conversion</span></span>  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="339bb-147">ネイティブデータへのポインターをマネージオブジェクトにマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="339bb-147">Marshals a pointer to native data into a managed object.</span></span> <span data-ttu-id="339bb-148">このメソッドは、引数として渡されるアンマネージインターフェイスをマーシャリングできるカスタムランタイム呼び出し可能ラッパー (RCW) を返します。</span><span class="sxs-lookup"><span data-stu-id="339bb-148">This method returns a custom runtime callable wrapper (RCW) that can marshal the unmanaged interface that is passed as an argument.</span></span> <span data-ttu-id="339bb-149">マーシャラーは、その型のカスタム RCW のインスタンスを返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="339bb-149">The marshaler should return an instance of the custom RCW for that type.</span></span>  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="339bb-150">マネージオブジェクトをネイティブデータへのポインターにマーシャリングします。</span><span class="sxs-lookup"><span data-stu-id="339bb-150">Marshals a managed object into a pointer to native data.</span></span> <span data-ttu-id="339bb-151">このメソッドは、引数として渡されるマネージインターフェイスをマーシャリングできるカスタム COM 呼び出し可能ラッパー (CCW) を返します。</span><span class="sxs-lookup"><span data-stu-id="339bb-151">This method returns a custom COM callable wrapper (CCW) that can marshal the managed interface that is passed as an argument.</span></span> <span data-ttu-id="339bb-152">マーシャラーは、その型のカスタム CCW のインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="339bb-152">The marshaler should return an instance of the custom CCW for that type.</span></span>  
  
### <a name="cleanup"></a><span data-ttu-id="339bb-153">クリーンアップ</span><span class="sxs-lookup"><span data-stu-id="339bb-153">Cleanup</span></span>  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="339bb-154">マーシャラーが、<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> メソッドによって返されるネイティブデータ (CCW) をクリーンアップできるようにします。</span><span class="sxs-lookup"><span data-stu-id="339bb-154">Enables the marshaler to clean up the native data (the CCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> method.</span></span>  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="339bb-155">マーシャラーが、<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> メソッドによって返されるマネージデータ (RCW) をクリーンアップできるようにします。</span><span class="sxs-lookup"><span data-stu-id="339bb-155">Enables the marshaler to clean up the managed data (the RCW) that is returned by the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> method.</span></span>  
  
### <a name="size-information"></a><span data-ttu-id="339bb-156">サイズ情報</span><span class="sxs-lookup"><span data-stu-id="339bb-156">Size Information</span></span>  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="339bb-157">マーシャリングするアンマネージデータのサイズを返します。</span><span class="sxs-lookup"><span data-stu-id="339bb-157">Returns the size of the unmanaged data to be marshaled.</span></span>  
  
## <a name="implementing-the-getinstance-method"></a><span data-ttu-id="339bb-158">GetInstance メソッドの実装</span><span class="sxs-lookup"><span data-stu-id="339bb-158">Implementing the GetInstance Method</span></span>  
 <span data-ttu-id="339bb-159"><xref:System.Runtime.InteropServices.ICustomMarshaler> インターフェイスの実装に加えて、カスタムマーシャラーは、<xref:System.String> をパラメーターとして受け取り、戻り値の型 <xref:System.Runtime.InteropServices.ICustomMarshaler>を持つ `GetInstance` と呼ばれる `static` メソッドを実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="339bb-159">In addition to implementing the <xref:System.Runtime.InteropServices.ICustomMarshaler> interface, custom marshalers must implement a `static` method called `GetInstance` that accepts a <xref:System.String> as a parameter and has a return type of <xref:System.Runtime.InteropServices.ICustomMarshaler>.</span></span> <span data-ttu-id="339bb-160">この `static` メソッドは、カスタムマーシャラーのインスタンスをインスタンス化するために、共通言語ランタイムの COM 相互運用層によって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="339bb-160">This `static` method is called by the common language runtime's COM interop layer to instantiate an instance of the custom marshaler.</span></span> <span data-ttu-id="339bb-161">`GetInstance` に渡される文字列は、返されたカスタムマーシャラーをカスタマイズするためにメソッドが使用できる cookie です。</span><span class="sxs-lookup"><span data-stu-id="339bb-161">The string that is passed to `GetInstance` is a cookie that the method can use to customize the returned custom marshaler.</span></span>  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a><span data-ttu-id="339bb-162">MarshalAsAttribute の適用</span><span class="sxs-lookup"><span data-stu-id="339bb-162">Applying MarshalAsAttribute</span></span>  
 <span data-ttu-id="339bb-163">カスタムマーシャラーを使用するには、マーシャリングするパラメーターまたはフィールドに <xref:System.Runtime.InteropServices.MarshalAsAttribute> 属性を適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="339bb-163">To use a custom marshaler, you must apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute to the parameter or field that is being marshaled.</span></span>  
  
 <span data-ttu-id="339bb-164">また、<xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> 列挙値を <xref:System.Runtime.InteropServices.MarshalAsAttribute> コンストラクターに渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="339bb-164">You must also pass the <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> enumeration value to the <xref:System.Runtime.InteropServices.MarshalAsAttribute> constructor.</span></span> <span data-ttu-id="339bb-165">さらに、次のいずれかの名前付きパラメーターを使用して <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> フィールドを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="339bb-165">In addition, you must specify the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> field with one of the following named parameters:</span></span>  
  
-   <span data-ttu-id="339bb-166"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (必須): カスタムマーシャラーのアセンブリ修飾名。</span><span class="sxs-lookup"><span data-stu-id="339bb-166"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (required): The assembly-qualified name of the custom marshaler.</span></span> <span data-ttu-id="339bb-167">名前には、カスタムマーシャラーの名前空間とクラスが含まれている必要があります。</span><span class="sxs-lookup"><span data-stu-id="339bb-167">The name should include the namespace and class of the custom marshaler.</span></span> <span data-ttu-id="339bb-168">カスタムマーシャラーがで使用されるアセンブリに定義されていない場合は、定義されているアセンブリの名前を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="339bb-168">If the custom marshaler is not defined in the assembly it is used in, you must specify the name of the assembly in which it is defined.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="339bb-169">[<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>] フィールドの代わりに、[<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>] フィールドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="339bb-169">You can use the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> field instead of the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> field.</span></span> <span data-ttu-id="339bb-170"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> は、より簡単に指定できる型を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="339bb-170"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> takes a type that is easier to specify.</span></span>  
  
-   <span data-ttu-id="339bb-171"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (省略可能): カスタムマーシャラーに渡されるクッキー。</span><span class="sxs-lookup"><span data-stu-id="339bb-171"><xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (optional): A cookie that is passed to the custom marshaler.</span></span> <span data-ttu-id="339bb-172">Cookie を使用して、マーシャラーに追加情報を提供できます。</span><span class="sxs-lookup"><span data-stu-id="339bb-172">You can use the cookie to provide additional information to the marshaler.</span></span> <span data-ttu-id="339bb-173">たとえば、同じマーシャラーを使用して複数のラッパーを指定する場合、cookie は特定のラッパーを識別します。</span><span class="sxs-lookup"><span data-stu-id="339bb-173">For example, if the same marshaler is used to provide a number of wrappers, the cookie identifies a specific wrapper.</span></span> <span data-ttu-id="339bb-174">クッキーは、マーシャラーの `GetInstance` メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="339bb-174">The cookie is passed to the `GetInstance` method of the marshaler.</span></span>  
  
 <span data-ttu-id="339bb-175"><xref:System.Runtime.InteropServices.MarshalAsAttribute> 属性は、適切なラッパーをアクティブ化できるように、カスタムマーシャラーを識別します。</span><span class="sxs-lookup"><span data-stu-id="339bb-175">The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute identifies the custom marshaler so it can activate the appropriate wrapper.</span></span> <span data-ttu-id="339bb-176">次に、共通言語ランタイムの相互運用サービスは、属性を調べて、引数 (パラメーターまたはフィールド) をマーシャリングする必要があるときにカスタムマーシャラーを作成します。</span><span class="sxs-lookup"><span data-stu-id="339bb-176">The common language runtime's interop service then examines the attribute and creates the custom marshaler the first time the argument (parameter or field) needs to be marshaled.</span></span>  
  
 <span data-ttu-id="339bb-177">次に、ランタイムは、カスタムマーシャラーの <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> および <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> メソッドを呼び出して、呼び出しを処理する適切なラッパーをアクティブ化します。</span><span class="sxs-lookup"><span data-stu-id="339bb-177">The runtime then calls the <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> and <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> methods on the custom marshaler to activate the correct wrapper to handle the call.</span></span>  
  
## <a name="using-a-custom-marshaler"></a><span data-ttu-id="339bb-178">カスタムマーシャラーの使用</span><span class="sxs-lookup"><span data-stu-id="339bb-178">Using a Custom Marshaler</span></span>  
 <span data-ttu-id="339bb-179">カスタムマーシャラーが完成したら、それを特定の型のカスタムラッパーとして使用できます。</span><span class="sxs-lookup"><span data-stu-id="339bb-179">When the custom marshaler is complete, you can use it as a custom wrapper for a particular type.</span></span> <span data-ttu-id="339bb-180">次の例は、`IUserData` マネージインターフェイスの定義を示しています。</span><span class="sxs-lookup"><span data-stu-id="339bb-180">The following example shows the definition of the `IUserData` managed interface:</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 <span data-ttu-id="339bb-181">次の例では、`IUserData` インターフェイスが `NewOldMarshaler` カスタムマーシャラーを使用して、アンマネージクライアントアプリケーションが `IOld` インターフェイスを `DoSomeStuff` メソッドに渡すことができるようにします。</span><span class="sxs-lookup"><span data-stu-id="339bb-181">In the following example, the `IUserData` interface uses the `NewOldMarshaler` custom marshaler to enable unmanaged client applications to pass an `IOld` interface to the `DoSomeStuff` method.</span></span> <span data-ttu-id="339bb-182">次の例に示すように、`DoSomeStuff` メソッドのマネージ記述は、前の例に示すように `INew` インターフェイスを受け取ります。一方、`DoSomeStuff` のアンマネージバージョンは `IOld` インターフェイスポインターを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="339bb-182">The managed description of the `DoSomeStuff` method takes an `INew` interface, as shown in the previous example, whereas the unmanaged version of `DoSomeStuff` takes an `IOld` interface pointer, as shown in the following example.</span></span>  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 <span data-ttu-id="339bb-183">`IUserData` のマネージ定義をエクスポートして生成されたタイプライブラリは、標準定義ではなく、この例で示したアンマネージ定義を生成します。</span><span class="sxs-lookup"><span data-stu-id="339bb-183">The type library that is generated by exporting the managed definition of `IUserData` yields the unmanaged definition shown in this example instead of the standard definition.</span></span> <span data-ttu-id="339bb-184">`DoSomeStuff` メソッドのマネージ定義の `INew` 引数に適用される <xref:System.Runtime.InteropServices.MarshalAsAttribute> 属性は、次の例に示すように、引数がカスタムマーシャラーを使用することを示します。</span><span class="sxs-lookup"><span data-stu-id="339bb-184">The <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute applied to the `INew` argument in the managed definition of the `DoSomeStuff` method indicates that the argument uses a custom marshaler, as the following example shows.</span></span>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 <span data-ttu-id="339bb-185">前の例では、<xref:System.Runtime.InteropServices.MarshalAsAttribute> 属性に指定された最初のパラメーターは `UnmanagedType.CustomMarshaler`<xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> 列挙値です。</span><span class="sxs-lookup"><span data-stu-id="339bb-185">In the previous examples, the first parameter provided to the <xref:System.Runtime.InteropServices.MarshalAsAttribute> attribute is the <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> enumeration value `UnmanagedType.CustomMarshaler`.</span></span>  
  
 <span data-ttu-id="339bb-186">2番目のパラメーターは、カスタムマーシャラーのアセンブリ修飾名を提供する <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> フィールドです。</span><span class="sxs-lookup"><span data-stu-id="339bb-186">The second parameter is the <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> field, which provides the assembly-qualified name of the custom marshaler.</span></span> <span data-ttu-id="339bb-187">この名前は、カスタムマーシャラー (`MarshalType="MyCompany.NewOldMarshaler"`) の名前空間とクラスで構成されます。</span><span class="sxs-lookup"><span data-stu-id="339bb-187">This name consists of the namespace and class of the custom marshaler (`MarshalType="MyCompany.NewOldMarshaler"`).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj"><span data-ttu-id="339bb-188">破棄するマネージド オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="339bb-188">The managed object to be destroyed.</span></span></param>
        <summary><span data-ttu-id="339bb-189">不要になったときに、マネージド データの必要なクリーンアップを実行します。</span><span class="sxs-lookup"><span data-stu-id="339bb-189">Performs necessary cleanup of the managed data when it is no longer needed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData"><span data-ttu-id="339bb-190">破棄するアンマネージ データを指すポインター。</span><span class="sxs-lookup"><span data-stu-id="339bb-190">A pointer to the unmanaged data to be destroyed.</span></span></param>
        <summary><span data-ttu-id="339bb-191">不要になったときに、アンマネージ データの必要なクリーンアップを実行します。</span><span class="sxs-lookup"><span data-stu-id="339bb-191">Performs necessary cleanup of the unmanaged data when it is no longer needed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="339bb-192">マーシャリングするネイティブ データのサイズを返します。</span><span class="sxs-lookup"><span data-stu-id="339bb-192">Returns the size of the native data to be marshaled.</span></span></summary>
        <returns><span data-ttu-id="339bb-193">ネイティブ データのバイト単位のサイズ。</span><span class="sxs-lookup"><span data-stu-id="339bb-193">The size, in bytes, of the native data.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj"><span data-ttu-id="339bb-194">変換されるマネージド オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="339bb-194">The managed object to be converted.</span></span></param>
        <summary><span data-ttu-id="339bb-195">マネージド データをアンマネージド データに変換します。</span><span class="sxs-lookup"><span data-stu-id="339bb-195">Converts the managed data to unmanaged data.</span></span></summary>
        <returns><span data-ttu-id="339bb-196">マネージド オブジェクトの COM ビューへのポインター。</span><span class="sxs-lookup"><span data-stu-id="339bb-196">A pointer to the COM view of the managed object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData"><span data-ttu-id="339bb-197">ラップするアンマネージ データを指すポインター。</span><span class="sxs-lookup"><span data-stu-id="339bb-197">A pointer to the unmanaged data to be wrapped.</span></span></param>
        <summary><span data-ttu-id="339bb-198">アンマネージド データをマネージド データに変換します。</span><span class="sxs-lookup"><span data-stu-id="339bb-198">Converts the unmanaged data to managed data.</span></span></summary>
        <returns><span data-ttu-id="339bb-199">COM データのマネージド ビューを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="339bb-199">An object that represents the managed view of the COM data.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
