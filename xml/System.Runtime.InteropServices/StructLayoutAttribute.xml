<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d7d6a08876c3bd7aa185e8059b1f99bca9003e54" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82477717" /></Metadata><TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="b0eba-101">メモリ内のクラスまたは構造体のデータ フィールドの物理的なレイアウトを制御できます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-101">Lets you control the physical layout of the data fields of a class or structure in memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0eba-102">この属性は、クラスまたは構造体に適用できます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-102">You can apply this attribute to classes or structures.</span></span>  
  
 <span data-ttu-id="b0eba-103">共通言語ランタイムは、マネージメモリ内のクラスまたは構造体のデータフィールドの物理的なレイアウトを制御します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-103">The common language runtime controls the physical layout of the data fields of a class or structure in managed memory.</span></span> <span data-ttu-id="b0eba-104">ただし、型をアンマネージコードに渡す場合は、<xref:System.Runtime.InteropServices.StructLayoutAttribute> 属性を使用して、型のアンマネージレイアウトを制御できます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-104">However, if you want to pass the type to unmanaged code, you can use the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute to control the unmanaged layout of the type.</span></span> <span data-ttu-id="b0eba-105">属性を <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> と共に使用して、メンバーが表示される順序で順番に配置されるようにします。</span><span class="sxs-lookup"><span data-stu-id="b0eba-105">Use the attribute with <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> to force the members to be laid out sequentially in the order they appear.</span></span> <span data-ttu-id="b0eba-106">Blittable 型の場合、<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> はマネージメモリ内のレイアウトとアンマネージメモリ内のレイアウトの両方を制御します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-106">For blittable types, <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> controls both the layout in managed memory and the layout in unmanaged memory.</span></span> <span data-ttu-id="b0eba-107">非 blittable 型の場合は、クラスまたは構造体がアンマネージコードにマーシャリングされるときにレイアウトを制御しますが、マネージメモリ内のレイアウトは制御しません。</span><span class="sxs-lookup"><span data-stu-id="b0eba-107">For non-blittable types, it controls the layout when the class or structure is marshaled to unmanaged code, but does not control the layout in managed memory.</span></span> <span data-ttu-id="b0eba-108">各データメンバーの正確な位置を制御するには、<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> で属性を使用します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-108">Use the attribute with <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> to control the precise position of each data member.</span></span> <span data-ttu-id="b0eba-109">これは、blittable 型と非 blittable 型の両方について、マネージレイアウトとアンマネージレイアウトの両方に影響します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-109">This affects both managed and unmanaged layout, for both blittable and non-blittable types.</span></span> <span data-ttu-id="b0eba-110"><xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> を使用するには、<xref:System.Runtime.InteropServices.FieldOffsetAttribute> 属性を使用して、型内の各フィールドの位置を示す必要があります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-110">Using <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> requires that you use the <xref:System.Runtime.InteropServices.FieldOffsetAttribute> attribute to indicate the position of each field within the type.</span></span>  
  
 <span data-ttu-id="b0eba-111">C#、Visual Basic、およびC++コンパイラは、既定で <xref:System.Runtime.InteropServices.LayoutKind.Sequential> レイアウト値を構造体に適用します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-111">C#, Visual Basic, and C++ compilers apply the <xref:System.Runtime.InteropServices.LayoutKind.Sequential> layout value to structures by default.</span></span> <span data-ttu-id="b0eba-112">クラスの場合は、<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> 値を明示的に適用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-112">For classes, you must apply the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> value explicitly.</span></span> <span data-ttu-id="b0eba-113">[Tlbimp.exe (タイプライブラリインポーター)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)では、<xref:System.Runtime.InteropServices.StructLayoutAttribute> 属性も適用されます。<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> 値は、常にタイプライブラリをインポートするときに適用されます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-113">The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) also applies the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute; it always applies the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> value when it imports a type library.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b0eba-114">次の例では、`GetSystemTime` 関数のマネージ宣言を示し、<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> レイアウトで `MySystemTime` クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-114">The following example demonstrates a managed declaration of the `GetSystemTime` function and defines `MySystemTime` class with <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> layout.</span></span> <span data-ttu-id="b0eba-115">`GetSystemTime` によってシステム時刻が取得され、コンソールに出力されます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-115">`GetSystemTime` gets the system time and prints to the console.</span></span>  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md"><span data-ttu-id="b0eba-116">Tlbimp.exe (タイプ ライブラリ インポーター)</span><span class="sxs-lookup"><span data-stu-id="b0eba-116">Tlbimp.exe (Type Library Importer)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b0eba-117"><see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-117">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="layoutKind"><span data-ttu-id="b0eba-118">クラスまたは構造体を整列する方法を指定する <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 値の 1 つを表す 16 ビット整数。</span><span class="sxs-lookup"><span data-stu-id="b0eba-118">A 16-bit integer that represents one of the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> values that specifies how the class or structure should be arranged.</span></span></param>
        <summary><span data-ttu-id="b0eba-119">指定した <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.LayoutKind" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-119">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> enumeration member.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0eba-120">このコンストラクターは、各 <xref:System.Runtime.InteropServices.LayoutKind> 列挙体メンバーを表す、基になる16ビット整数を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-120">This constructor takes an underlying 16-bit integer that represents each <xref:System.Runtime.InteropServices.LayoutKind> enumeration member.</span></span> <span data-ttu-id="b0eba-121">[Tlbimp.exe (タイプライブラリインポーター)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)は、このコンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-121">The [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) uses this constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
        <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md"><span data-ttu-id="b0eba-122">Tlbimp.exe (タイプ ライブラリ インポーター)</span><span class="sxs-lookup"><span data-stu-id="b0eba-122">Tlbimp.exe (Type Library Importer)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind"><span data-ttu-id="b0eba-123">クラスまたは構造体を整列させる方法を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="b0eba-123">One of the enumeration values that specifies how the class or structure should be arranged.</span></span></param>
        <summary><span data-ttu-id="b0eba-124">指定した <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.LayoutKind" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-124">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> class with the specified <see cref="T:System.Runtime.InteropServices.LayoutKind" /> enumeration member.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0eba-125">エラーが発生しにくい読み取り可能なコードの場合は、常にこのコンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-125">For readable code that is less prone to error, always use this constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0eba-126">クラス内の文字列データ フィールドを既定で <see langword="LPWSTR" /> または <see langword="LPSTR" /> としてマーシャリングするかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-126">Indicates whether string data fields within the class should be marshaled as <see langword="LPWSTR" /> or <see langword="LPSTR" /> by default.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0eba-127">`CharSet` フィールドが <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>に設定されている場合、アンマネージ実装に渡される前に、すべての文字列引数が Unicode 文字 (`LPWSTR`) に変換されます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-127">If the `CharSet` field is set to <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>, all string arguments are converted to Unicode characters (`LPWSTR`) before they are passed to the unmanaged implementation.</span></span> <span data-ttu-id="b0eba-128">フィールドが <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>に設定されている場合、文字列は ANSI 文字列 (`LPSTR`) に変換されます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-128">If the field is set to <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>, the strings are converted to ANSI strings (`LPSTR`).</span></span> <span data-ttu-id="b0eba-129">`CharSet` フィールドが <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>に設定されている場合、変換はプラットフォームに依存します (Windows 98 および Windows Me では ANSI、以降のバージョンでは Unicode)。</span><span class="sxs-lookup"><span data-stu-id="b0eba-129">If the `CharSet` field is set to <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>, the conversion is platform-dependent (ANSI on Windows 98 and Windows Me, and Unicode on later versions).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0eba-130">メモリ内のクラスまたは構造体のデータ フィールドのアライメントを制御します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-130">Controls the alignment of data fields of a class or structure in memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0eba-131"><xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> フィールドは、メモリ内の型のフィールドの配置を制御します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-131">The <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> field controls the alignment of a type's fields in memory.</span></span>  <span data-ttu-id="b0eba-132"><xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> と <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>の両方に影響します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-132">It affects both <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>.</span></span> <span data-ttu-id="b0eba-133">既定では、値は0です。これは、現在のプラットフォームの既定のパッキングサイズを示します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-133">By default, the value is 0, indicating the default packing size for the current platform.</span></span> <span data-ttu-id="b0eba-134"><xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> の値は、0、1、2、4、8、16、32、64、128のいずれかである必要があります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-134">The value of <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> must be 0, 1, 2, 4, 8, 16, 32, 64, or 128:</span></span>  
  
 <span data-ttu-id="b0eba-135">型インスタンスのフィールドは、次の規則に従ってアラインされます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-135">The fields of a type instance are aligned by using the following rules:</span></span>  
  
-   <span data-ttu-id="b0eba-136">型のアラインメントは、最大の要素 (1、2、4、8など) のサイズ、または指定されたパッキングサイズのいずれか小さい方になります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-136">The alignment of the type is the size of its largest element (1, 2, 4, 8, etc., bytes) or the specified packing size, whichever is smaller.</span></span>  
  
-   <span data-ttu-id="b0eba-137">各フィールドは、独自のサイズ (1、2、4、8など) のフィールド、または型のアラインメントのいずれか小さい方に揃える必要があります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-137">Each field must align with fields of its own size (1, 2, 4, 8, etc., bytes) or the alignment of the type, whichever is smaller.</span></span>  <span data-ttu-id="b0eba-138">型の既定のアラインメントは、それ以外のすべてのフィールド長と同じかそれ以上の要素のサイズであるため、通常はフィールドがそのサイズに合わせて配置されます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-138">Because the default alignment of the type is the size of its largest element, which is greater than or equal to all other field lengths, this usually means that fields are aligned by their size.</span></span> <span data-ttu-id="b0eba-139">たとえば、型の最大のフィールドが64ビット (8 バイト) の整数、またはパックのフィールドが8に設定されている場合、<xref:System.Byte> フィールドは1バイトの境界に配置され、<xref:System.Int16> フィールドは2バイトの境界に配置され <xref:System.Int32> フィールドは4バイトの境界に沿って配置されます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-139">For example, even if the largest field in a type is a 64-bit (8-byte) integer or the Pack field is set to 8, <xref:System.Byte> fields align on 1-byte boundaries, <xref:System.Int16> fields align on 2-byte boundaries, and <xref:System.Int32> fields align on 4-byte boundaries.</span></span>  
  
-   <span data-ttu-id="b0eba-140">配置要件を満たすために、フィールドの間に埋め込みが追加されます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-140">Padding is added between fields to satisfy the alignment requirements.</span></span>  
  
 <span data-ttu-id="b0eba-141">たとえば、次の構造を考えてみます。これは、2つの <xref:System.Byte> フィールドと1つの <xref:System.Int32> フィールドで構成され、<xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> フィールドのさまざまな値と共に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-141">For example, consider the following structure, which consists of two <xref:System.Byte> fields and one <xref:System.Int32> field, when it is used with various values for the <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> field.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="b0eba-142">これらのC#例を正常にコンパイルするには、`/unsafe` コンパイラスイッチを指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-142">To successfully compile the C# examples, you must specify the `/unsafe` compiler switch.</span></span>  
  
 <span data-ttu-id="b0eba-143">既定のパッキングサイズを指定した場合、構造体のサイズは8バイトになります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-143">If you specify the default packing size, the size of the structure is 8 bytes.</span></span> <span data-ttu-id="b0eba-144">バイトは1バイトの境界に合わせて配置する必要があるため、2バイトは最初の2バイトのメモリを占有します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-144">The two bytes occupy the first two bytes of memory, because bytes must align on one-byte boundaries.</span></span> <span data-ttu-id="b0eba-145">型の既定のアラインメントは4バイトであり、最大のフィールドのサイズは `i3`であるため、2バイトのパディングの後に整数フィールドが続きます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-145">Because the default alignment of the type is 4 bytes, which is the size of its largest fields, `i3`, there are two bytes of padding followed by the integer field.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 <span data-ttu-id="b0eba-146"><xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> が2に設定されている場合、構造体のサイズは6バイトになります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-146">If <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> is set to 2, the size of the structure is 6 bytes.</span></span> <span data-ttu-id="b0eba-147">前と同様に、2バイトは最初の2バイトのメモリを占有します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-147">As before, the two bytes occupy the first two bytes of memory.</span></span> <span data-ttu-id="b0eba-148">フィールドが2バイトの境界に配置されるようになったため、2番目のバイトと整数の間には余白がありません。</span><span class="sxs-lookup"><span data-stu-id="b0eba-148">Because fields now align on 2-byte boundaries, there is no padding between the second byte and the integer.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 <span data-ttu-id="b0eba-149"><xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> が4に設定されている場合、構造体のサイズは既定のケースと同じになります。この場合、型のアラインメントは、最大のフィールドのサイズ (`i3`4) によって定義されています。</span><span class="sxs-lookup"><span data-stu-id="b0eba-149">If <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> is set to 4, the size of the structure is the same as in the default case, where the type's alignment was defined by the size of its largest field, `i3`, which is 4.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 <span data-ttu-id="b0eba-150"><xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> が8に設定されている場合、構造体のサイズは、既定の場合と同じです。これは、`i3` フィールドが、パックフィールドで指定される8バイト境界より小さい4バイトの境界に配置されるためです。</span><span class="sxs-lookup"><span data-stu-id="b0eba-150">If <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> is set to 8, the size of the structure is the still same as in the default case, because the `i3` field aligns on a 4-byte boundary, which is smaller than the 8-byte boundary specified by the Pack field.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 <span data-ttu-id="b0eba-151">別の例を使用するには、次の構造を考えてみます。これは、2つのバイトフィールド、1 32 ビット符号付き整数フィールド、1つの単一要素のバイト配列、および10進数の値で構成されています。</span><span class="sxs-lookup"><span data-stu-id="b0eba-151">To take another example, consider the following structure, which consists of two byte fields, one 32-bit signed integer field, one single-element byte array, and a decimal value.</span></span> <span data-ttu-id="b0eba-152">既定のパッキングサイズでは、構造体のサイズは28バイトになります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-152">With the default packing size, the size of the structure is 28 bytes.</span></span> <span data-ttu-id="b0eba-153">2バイトは、最初の2バイトのメモリを占有し、次に2バイトのパディングを続け、その後に整数を配置します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-153">The two bytes occupy the first two bytes of memory, followed by two bytes of padding, followed by the integer.</span></span> <span data-ttu-id="b0eba-154">次は1バイト配列で、その後に3バイトの余白が続きます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-154">Next is the one-byte array, followed by three bytes of padding.</span></span> <span data-ttu-id="b0eba-155">最後に、<xref:System.Decimal> フィールド d5 は4バイトの境界に配置されます。これは、10進値が4つの <xref:System.Int32> フィールドで構成されているため、配置は <xref:System.Decimal> 構造体全体のサイズではなく、フィールドの最大サイズに基づいているためです。</span><span class="sxs-lookup"><span data-stu-id="b0eba-155">Finally, the <xref:System.Decimal> field, d5, aligns on a 4-byte boundary because a decimal value consists of four <xref:System.Int32> fields, so its alignment is based on the size of the largest of its fields rather than on the size of the <xref:System.Decimal> structure as a whole.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 <span data-ttu-id="b0eba-156"><xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> が2に設定されている場合、構造体のサイズは24バイトになります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-156">If <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> is set to 2, the size of the structure is 24 bytes.</span></span> <span data-ttu-id="b0eba-157">既定の配置と比較すると、2バイトと整数の間の2バイトの埋め込みが削除されました。これは、型のアラインメントが2ではなく4になったためです。</span><span class="sxs-lookup"><span data-stu-id="b0eba-157">In comparison with the default alignment, the two bytes of padding between the two bytes and the integer have been removed because the type's alignment is now 4 rather than 2.</span></span> <span data-ttu-id="b0eba-158">`a4` 後の3バイトの埋め込みは、`d5` が4バイト境界ではなく2バイト境界に配置されるようになったため、1バイトのパディングに置き換えられました。</span><span class="sxs-lookup"><span data-stu-id="b0eba-158">And the three bytes of padding after `a4` have been replaced by one byte of padding, since `d5` now aligns on a 2-byte boundary rather than a 4-byte boundary.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 <span data-ttu-id="b0eba-159"><xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> が8に設定されている場合、この構造体のすべてのアラインメント要件が8未満であるため、構造体のサイズは既定の場合と同じになります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-159">If <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> is set to 8, the size of the structure is the same as in the default case, because all the alignment requirements in this structure are less than 8.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 <span data-ttu-id="b0eba-160"><xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> フィールドは、ディスクおよびネットワークの書き込み操作中に構造がエクスポートされるときに頻繁に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-160">The <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> field is frequently used when structures are exported during disk and network write operations.</span></span> <span data-ttu-id="b0eba-161">また、このフィールドは、プラットフォーム呼び出しと相互運用操作中に頻繁に使用されます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-161">The field is also frequently used during platform invoke and interop operations.</span></span>  
  
 <span data-ttu-id="b0eba-162">場合によっては、より厳密なパッキングサイズを生成することによって、メモリ要件を減らすためにフィールドが使用されることがあります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-162">Occasionally, the field is used to reduce memory requirements by producing a tighter packing size.</span></span> <span data-ttu-id="b0eba-163">ただし、この使用には実際のハードウェアの制約を慎重に検討する必要があり、実際にはパフォーマンスが低下する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-163">However, this usage requires careful consideration of actual hardware constraints, and may actually degrade performance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0eba-164">クラスまたは構造体の絶対サイズを示します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-164">Indicates the absolute size of the class or structure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b0eba-165">このフィールドは、クラスまたは構造体のメンバーの合計サイズ (バイト単位) 以上である必要があります。</span><span class="sxs-lookup"><span data-stu-id="b0eba-165">This field must be equal or greater than the total size, in bytes, of the members of the class or structure.</span></span> <span data-ttu-id="b0eba-166">このフィールドは、主に、直接のアンマネージアクセスの構造体によって占有されているメモリを拡張するコンパイラライターのためのものです。</span><span class="sxs-lookup"><span data-stu-id="b0eba-166">This field is primarily for compiler writers who want to extend the memory occupied by a structure for direct, unmanaged access.</span></span> <span data-ttu-id="b0eba-167">たとえば、メタデータで直接表現されていない共用体を操作するときに、このフィールドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="b0eba-167">For example, you can use this field when working with unions that are not represented in metadata directly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b0eba-168">クラスまたは構造体を整列する方法を指定する <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="b0eba-168">Gets the <see cref="T:System.Runtime.InteropServices.LayoutKind" /> value that specifies how the class or structure is arranged.</span></span></summary>
        <value><span data-ttu-id="b0eba-169">クラスまたは構造体を整列する方法を指定する列挙値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="b0eba-169">One of the enumeration values that specifies how the class or structure is arranged.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
