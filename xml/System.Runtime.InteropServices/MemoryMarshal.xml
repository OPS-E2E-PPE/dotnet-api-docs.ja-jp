<Type Name="MemoryMarshal" FullName="System.Runtime.InteropServices.MemoryMarshal">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d8b6946de0ec5e11b45fcf49363217e77588bb4" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75086134" /></Metadata><TypeSignature Language="C#" Value="public static class MemoryMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MemoryMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.MemoryMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class MemoryMarshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryMarshal abstract sealed" />
  <TypeSignature Language="F#" Value="type MemoryMarshal = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="17914-101"><see cref="T:System.Memory`1" />、<see cref="T:System.ReadOnlyMemory`1" />、<see cref="T:System.Span`1" />、<see cref="T:System.ReadOnlySpan`1" /> と相互運用するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="17914-101">Provides methods to interoperate with <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />,  <see cref="T:System.Span`1" />, and  <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; AsBytes&lt;T&gt; (ReadOnlySpan&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As ReadOnlySpan(Of T)) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static ReadOnlySpan&lt;System::Byte&gt; AsBytes(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; ReadOnlySpan&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-102">読み取り専用スパン内の項目の種類。</span><span class="sxs-lookup"><span data-stu-id="17914-102">The type of items in the read-only span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="17914-103">変換するソース スライス。</span><span class="sxs-lookup"><span data-stu-id="17914-103">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="17914-104">1 つのプリミティブ型 (<see cref="T:System.ReadOnlySpan`1" />) の <paramref name="T" /> を、<see langword="ReadOnlySpan&lt;Byte&gt;" /> にキャストします。</span><span class="sxs-lookup"><span data-stu-id="17914-104">Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type, <paramref name="T" />, to a <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="17914-105"><see cref="T:System.Byte" /> 型の読み取り専用スパン。</span><span class="sxs-lookup"><span data-stu-id="17914-105">A read-only span of type <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-106">`T` には、ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-106">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="17914-107">型の安全性を維持するために、`T` は実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="17914-107">`T` is checked at runtime in order to preserve type safety.</span></span>  

      ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17914-108"><paramref name="T" /> には参照またはポインターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="17914-108"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="17914-109">新しい <see cref="P:System.ReadOnlySpan`1.Length" /> の <see cref="T:System.ReadOnlySpan`1" /> プロパティは <see cref="F:System.Int32.MaxValue" /> を超えます</span><span class="sxs-lookup"><span data-stu-id="17914-109">The <see cref="P:System.ReadOnlySpan`1.Length" /> property of the new <see cref="T:System.ReadOnlySpan`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;byte&gt; AsBytes&lt;T&gt; (Span&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As Span(Of T)) As Span(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static Span&lt;System::Byte&gt; AsBytes(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : Span&lt;'T (requires 'T : struct)&gt; -&gt; Span&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-110">スパン内の項目の種類。</span><span class="sxs-lookup"><span data-stu-id="17914-110">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="17914-111">変換するソース スライス。</span><span class="sxs-lookup"><span data-stu-id="17914-111">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="17914-112">1 つのプリミティブ型 (<see cref="T:System.Span`1" />) の <paramref name="T" /> を、<see langword="Span&lt;Byte&gt;" /> にキャストします。</span><span class="sxs-lookup"><span data-stu-id="17914-112">Casts a <see cref="T:System.Span`1" /> of one primitive type, <paramref name="T" />, to a <see langword="Span&lt;Byte&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="17914-113"><see cref="T:System.Byte" /> 型のスパン。</span><span class="sxs-lookup"><span data-stu-id="17914-113">A span of type <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-114">`T` には、ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-114">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="17914-115">型の安全性を維持するために、`T` は実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="17914-115">`T` is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17914-116"><paramref name="T" /> には参照またはポインターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="17914-116"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="17914-117">新しい <see cref="P:System.Span`1.Length" /> の <see cref="T:System.Span`1" /> プロパティは <see cref="F:System.Int32.MaxValue" /> を超えます</span><span class="sxs-lookup"><span data-stu-id="17914-117">The <see cref="P:System.Span`1.Length" /> property of the new <see cref="T:System.Span`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsMemory(Of T) (memory As ReadOnlyMemory(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; AsMemory(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ReadOnlyMemory&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.AsMemory memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-118">読み取り専用メモリバッファー内の項目の型。</span><span class="sxs-lookup"><span data-stu-id="17914-118">The type of items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="17914-119">読み取り専用メモリ バッファー。</span><span class="sxs-lookup"><span data-stu-id="17914-119">The read-only memory buffer.</span></span></param>
        <summary><span data-ttu-id="17914-120"><see cref="T:System.Memory`1" /> から <see cref="T:System.ReadOnlyMemory`1" /> インスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="17914-120">Creates a <see cref="T:System.Memory`1" /> instance from a <see cref="T:System.ReadOnlyMemory`1" />.</span></span></summary>
        <returns><span data-ttu-id="17914-121"><see cref="T:System.ReadOnlyMemory`1" /> と同じメモリを表すメモリ ブロック。</span><span class="sxs-lookup"><span data-stu-id="17914-121">A memory block that represents the same memory as the <see cref="T:System.ReadOnlyMemory`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-122">このメソッドは、細心の注意を払って使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17914-122">This method must be used with extreme caution.</span></span> <span data-ttu-id="17914-123"><xref:System.ReadOnlyMemory%601> は、変更できないデータや、書き込み先ではないその他のメモリを表すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="17914-123"><xref:System.ReadOnlyMemory%601> is used to represent immutable data and other memory that is not meant to be written to.</span></span> <span data-ttu-id="17914-124">このメソッドによって作成された <xref:System.Memory%601> インスタンスをに書き込むことはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-124"><xref:System.Memory%601> instances created by this method should not be written to.</span></span> <span data-ttu-id="17914-125">このメソッドの目的は、<xref:System.Memory%601> として型指定された変数を許可することですが、読み取り専用で <xref:System.ReadOnlyMemory%601>を格納することです。</span><span class="sxs-lookup"><span data-stu-id="17914-125">The purpose of this method is to allow variables typed as <xref:System.Memory%601> but only used for reading to store a <xref:System.ReadOnlyMemory%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref readonly T AsRef&lt;T&gt; (ReadOnlySpan&lt;byte&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T As Structure) (span As ReadOnlySpan(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T&amp; ^ AsRef(ReadOnlySpan&lt;System::Byte&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsRef : ReadOnlySpan&lt;byte&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsRef span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-3.0">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-126">返された参照の型。</span><span class="sxs-lookup"><span data-stu-id="17914-126">The type of the returned reference.</span></span></typeparam>
        <param name="span"><span data-ttu-id="17914-127">再解釈する読み取り専用スパン。</span><span class="sxs-lookup"><span data-stu-id="17914-127">The read-only span to reinterpret.</span></span></param>
        <summary><span data-ttu-id="17914-128">読み取り専用スパンのバイトを、<paramref name="T" /> 型の構造体への読み取り専用参照として再解釈します。</span><span class="sxs-lookup"><span data-stu-id="17914-128">Reinterprets a read-only span of bytes as a read-only reference to the structure of type <paramref name="T" />.</span></span></summary>
        <returns><span data-ttu-id="17914-129"><paramref name="T" /> 型の構造体への読み取り専用参照。</span><span class="sxs-lookup"><span data-stu-id="17914-129">The read-only reference to the structure of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-130">`T` には、ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-130">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="17914-131">型の安全性を維持するために、実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="17914-131">It is checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="17914-132">このメソッドは、メモリアクセスの不整合をサポートするプラットフォームでのみサポートされています。また、メモリブロックが他の方法でアラインされている場合にのみサポートされます。</span><span class="sxs-lookup"><span data-stu-id="17914-132">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T AsRef&lt;T&gt; (Span&lt;byte&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T As Structure) (span As Span(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T % AsRef(Span&lt;System::Byte&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsRef : Span&lt;byte&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsRef span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-133">返された参照の型。</span><span class="sxs-lookup"><span data-stu-id="17914-133">The type of the returned reference.</span></span></typeparam>
        <param name="span"><span data-ttu-id="17914-134">再解釈するスパン。</span><span class="sxs-lookup"><span data-stu-id="17914-134">The span to reinterpret.</span></span></param>
        <summary><span data-ttu-id="17914-135">スパンのバイトを、<paramref name="T" /> 型の構造体への参照として再解釈します。</span><span class="sxs-lookup"><span data-stu-id="17914-135">Reinterprets a span of bytes as a reference to the structure of type <paramref name="T" />.</span></span></summary>
        <returns><span data-ttu-id="17914-136"><paramref name="T" /> 型の構造体への参照。</span><span class="sxs-lookup"><span data-stu-id="17914-136">The reference to the structure of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-137">`T` には、ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-137">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="17914-138">型の安全性を維持するために、実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="17914-138">It is checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="17914-139">このメソッドは、メモリアクセスの不整合をサポートするプラットフォームでのみサポートされています。また、メモリブロックが他の方法でアラインされている場合にのみサポートされます。</span><span class="sxs-lookup"><span data-stu-id="17914-139">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (ReadOnlySpan&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.ReadOnlySpan`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As ReadOnlySpan(Of TFrom)) As ReadOnlySpan(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static ReadOnlySpan&lt;TTo&gt; Cast(ReadOnlySpan&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : ReadOnlySpan&lt;'From (requires 'From : struct)&gt; -&gt; ReadOnlySpan&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="17914-140">ソーススパンの種類。</span><span class="sxs-lookup"><span data-stu-id="17914-140">The type of the source span.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="17914-141">ターゲットスパンの種類。</span><span class="sxs-lookup"><span data-stu-id="17914-141">The type of the target span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="17914-142">変換するソース スライス。</span><span class="sxs-lookup"><span data-stu-id="17914-142">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="17914-143">1 つのプリミティブ型の読み取り専用スパンを、別のプリミティブ型の読み取り専用スパンにキャストします。</span><span class="sxs-lookup"><span data-stu-id="17914-143">Casts a read-only span of one primitive type to a read-only span of another primitive type.</span></span></summary>
        <returns><span data-ttu-id="17914-144">変換された読み取り専用スパン。</span><span class="sxs-lookup"><span data-stu-id="17914-144">The converted read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-145">`TFrom` も `TTo` にも、ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-145">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="17914-146">型の安全性を維持するために、`TFrom` と `TTo` は実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="17914-146">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="17914-147">このメソッドは、メモリアクセスの不整合をサポートするプラットフォームでのみサポートされています。また、メモリブロックが他の方法でアラインされている場合にのみサポートされます。</span><span class="sxs-lookup"><span data-stu-id="17914-147">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17914-148"><paramref name="TFrom" /> または <paramref name="TTo" /> には参照またはポインターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="17914-148"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (Span&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.Span`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As Span(Of TFrom)) As Span(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static Span&lt;TTo&gt; Cast(Span&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : Span&lt;'From (requires 'From : struct)&gt; -&gt; Span&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="17914-149">ソーススパンの種類。</span><span class="sxs-lookup"><span data-stu-id="17914-149">The type of the source span.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="17914-150">ターゲットスパンの種類。</span><span class="sxs-lookup"><span data-stu-id="17914-150">The type of the target span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="17914-151">変換するソース スライス。</span><span class="sxs-lookup"><span data-stu-id="17914-151">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="17914-152">1 つのプリミティブ型のスパンを、別のプリミティブ型のスパンにキャストします。</span><span class="sxs-lookup"><span data-stu-id="17914-152">Casts a span of one primitive type to a span of another primitive type.</span></span></summary>
        <returns><span data-ttu-id="17914-153">変換されたスパン。</span><span class="sxs-lookup"><span data-stu-id="17914-153">The converted span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-154">`TFrom` も `TTo` にも、ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-154">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="17914-155">型の安全性を維持するために、`TFrom` と `TTo` は実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="17914-155">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="17914-156">2つの型のサイズが異なる場合、キャストは値を結合または分割して、長さの変化につながります。</span><span class="sxs-lookup"><span data-stu-id="17914-156">If the sizes of the two types are different, the cast combines or splits values, which leads to a change in length.</span></span>

<span data-ttu-id="17914-157">たとえば、`TFrom` が <xref:System.Int64>の場合、`ReadOnlySpan<Int64>` には1つの値0x0100001111110F0F が含まれ、`TTo` は <xref:System.Int32>、結果として得られる `ReadOnlySpan<Int32>` には2つの値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17914-157">For example, if `TFrom` is <xref:System.Int64>, the `ReadOnlySpan<Int64>` contains a single value, 0x0100001111110F0F, and `TTo` is <xref:System.Int32>, the resulting `ReadOnlySpan<Int32>` contains two values.</span></span> <span data-ttu-id="17914-158">値は、x86 など、リトルエンディアンアーキテクチャの0x11110F0F および0x01000011 です。</span><span class="sxs-lookup"><span data-stu-id="17914-158">The values are 0x11110F0F and 0x01000011 on a little-endian architecture, such as x86.</span></span> <span data-ttu-id="17914-159">ビッグエンディアンアーキテクチャでは、2つの値の順序が逆になります。つまり、0x01000011 の後に0x11110F0F が続きます。</span><span class="sxs-lookup"><span data-stu-id="17914-159">On a big-endian architecture, the order of the two values is reversed, i.e. 0x01000011, followed by 0x11110F0F.</span></span>

<span data-ttu-id="17914-160">もう1つの例として、`TFrom` が <xref:System.Int32>、`ReadOnlySpan<Int32>` に1、2、3の値が含まれており、`TTo` が <xref:System.Int64>の場合、結果の `ReadOnlySpan<Int64>` には、リトルエンディアンアーキテクチャでは0x0000000200000001、ビッグエンディアンアーキテクチャでは0x0000000100000002 という単一の値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="17914-160">As another example, if `TFrom` is <xref:System.Int32>, the `ReadOnlySpan<Int32>` contains the values of 1, 2 and 3, and `TTo` is <xref:System.Int64>, the resulting `ReadOnlySpan<Int64>` contains a single value: 0x0000000200000001 on a little-endian architecture and 0x0000000100000002 on a big-endian architecture.</span></span>

<span data-ttu-id="17914-161">このメソッドは、メモリアクセスの不整合をサポートするプラットフォームでのみサポートされています。また、メモリブロックが他の方法でアラインされている場合にのみサポートされます。</span><span class="sxs-lookup"><span data-stu-id="17914-161">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17914-162"><paramref name="TFrom" /> または <paramref name="TTo" /> には参照またはポインターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="17914-162"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromPinnedArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; CreateFromPinnedArray&lt;T&gt; (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; CreateFromPinnedArray&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromPinnedArray(Of T) (array As T(), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; CreateFromPinnedArray(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member CreateFromPinnedArray : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-163">配列の型。</span><span class="sxs-lookup"><span data-stu-id="17914-163">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="17914-164">事前にピン留めされたソース配列。</span><span class="sxs-lookup"><span data-stu-id="17914-164">The pre-pinned source array.</span></span></param>
        <param name="start"><span data-ttu-id="17914-165">メモリ ブロックの開始位置を示す <paramref name="array" /> のインデックス。</span><span class="sxs-lookup"><span data-stu-id="17914-165">The index of <paramref name="array" /> at which to begin the memory block.</span></span></param>
        <param name="length"><span data-ttu-id="17914-166">メモリ ブロックに含める項目の数。</span><span class="sxs-lookup"><span data-stu-id="17914-166">The number of items to include in the memory block.</span></span></param>
        <summary><span data-ttu-id="17914-167"><paramref name="start" /> インデックスで始まり <paramref name="length" /> 個の項目で構成される、事前にピン留めされたターゲット配列の一部に対する、新しいメモリ バッファーを作成します。</span><span class="sxs-lookup"><span data-stu-id="17914-167">Creates a new memory buffer over the portion of the pre-pinned target array beginning at the <paramref name="start" /> index and consisting of <paramref name="length" /> items.</span></span></summary>
        <returns><span data-ttu-id="17914-168">指定した <paramref name="array" /> の要素に対するメモリのブロック。</span><span class="sxs-lookup"><span data-stu-id="17914-168">A block of memory over the specified elements of <paramref name="array" />.</span></span> <span data-ttu-id="17914-169"><paramref name="array" /> が <see langword="null" /> の場合、または <paramref name="start" /> と <paramref name="length" /> が 0 である場合、メソッドは <see cref="T:System.Memory`1" /> 0 のインスタンス <see cref="P:System.Memory`1.Length" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="17914-169">If <paramref name="array" /> is <see langword="null" />, or if <paramref name="start" /> and <paramref name="length" /> are 0, the method returns a <see cref="T:System.Memory`1" /> instance of <see cref="P:System.Memory`1.Length" /> zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-170">配列は、このメソッドが呼び出される前に既にピン留めされている必要があります。また、返された <xref:System.Memory%601> バッファーがまだ使用されている間、その配列の固定を解除することはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-170">The array must already be pinned before this method is called, and that array must not be unpinned while the <xref:System.Memory%601> buffer that it returns is still in use.</span></span> <span data-ttu-id="17914-171">固定解除された配列に対してこのメソッドを呼び出すと、メモリが破損する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="17914-171">Calling this method on an unpinned array could result in memory corruption.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="17914-172"><paramref name="array" /> は共変であり、<paramref name="array" /> の型は <paramref name="T[]" /> とまったく同じではありません。</span><span class="sxs-lookup"><span data-stu-id="17914-172"><paramref name="array" /> is covariant, and the type of <paramref name="array" /> is not exactly <paramref name="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17914-173"><paramref name="start" /> または終了インデックスは、0 から <see cref="P:System.Array.Length" /> までの範囲に含まれません。</span><span class="sxs-lookup"><span data-stu-id="17914-173">The <paramref name="start" /> or the end index is not in the range of 0 to <see cref="P:System.Array.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReadOnlySpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; CreateReadOnlySpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateReadOnlySpan(Of T) (ByRef reference As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateReadOnlySpan : 'T * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-174">データ項目の型。</span><span class="sxs-lookup"><span data-stu-id="17914-174">The type of the data items.</span></span></typeparam>
        <param name="reference"><span data-ttu-id="17914-175">データへの参照。</span><span class="sxs-lookup"><span data-stu-id="17914-175">A reference to data.</span></span></param>
        <param name="length"><span data-ttu-id="17914-176"><paramref name="T" /> に含まれる <paramref name="reference" /> 要素の数。</span><span class="sxs-lookup"><span data-stu-id="17914-176">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span></span></param>
        <summary><span data-ttu-id="17914-177">定期的なマネージド オブジェクトの一部に対する新しい読み取り専用スパンを作成します。</span><span class="sxs-lookup"><span data-stu-id="17914-177">Creates a new read-only span over a portion of a regular managed object.</span></span></summary>
        <returns><span data-ttu-id="17914-178">読み取り専用スパン。</span><span class="sxs-lookup"><span data-stu-id="17914-178">A read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-179">このメソッドは、マネージオブジェクトの一部が固定配列を表す場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="17914-179">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="17914-180">このメソッドは、注意して使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17914-180">This method should be used with caution.</span></span> <span data-ttu-id="17914-181">`length` の引数がチェックされないため、これは危険です。</span><span class="sxs-lookup"><span data-stu-id="17914-181">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="17914-182">さらに、スパンを認識する言語によって、返されるスパンの有効期間の安全性が検証されません。</span><span class="sxs-lookup"><span data-stu-id="17914-182">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; CreateSpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; CreateSpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpan(Of T) (ByRef reference As T, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Span&lt;T&gt; CreateSpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateSpan : 'T * int -&gt; Span&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateSpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-183">データ項目の型。</span><span class="sxs-lookup"><span data-stu-id="17914-183">The type of the data items.</span></span></typeparam>
        <param name="reference"><span data-ttu-id="17914-184">データへの参照。</span><span class="sxs-lookup"><span data-stu-id="17914-184">A reference to data.</span></span></param>
        <param name="length"><span data-ttu-id="17914-185"><paramref name="T" /> に含まれる <paramref name="reference" /> 要素の数。</span><span class="sxs-lookup"><span data-stu-id="17914-185">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span></span></param>
        <summary><span data-ttu-id="17914-186">定期的なマネージド オブジェクトの一部に対する新しいスパンを作成します。</span><span class="sxs-lookup"><span data-stu-id="17914-186">Creates a new span over a portion of a regular managed object.</span></span></summary>
        <returns><span data-ttu-id="17914-187">スパン。</span><span class="sxs-lookup"><span data-stu-id="17914-187">A span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-188">このメソッドは、マネージオブジェクトの一部が固定配列を表す場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="17914-188">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="17914-189">このメソッドは、注意して使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="17914-189">This method should be used with caution.</span></span> <span data-ttu-id="17914-190">`length` の引数がチェックされないため、これは危険です。</span><span class="sxs-lookup"><span data-stu-id="17914-190">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="17914-191">さらに、スパンを認識する言語によって、返されるスパンの有効期間の安全性が検証されません。</span><span class="sxs-lookup"><span data-stu-id="17914-191">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T GetReference&lt;T&gt; (ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As ReadOnlySpan(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : ReadOnlySpan&lt;'T&gt; -&gt; 'T" Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-192">スパン内の項目の種類。</span><span class="sxs-lookup"><span data-stu-id="17914-192">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="17914-193">参照の取得元となる読み取り専用スパン。</span><span class="sxs-lookup"><span data-stu-id="17914-193">The read-only span from which the reference is retrieved.</span></span></param>
        <summary><span data-ttu-id="17914-194">インデックス 0 にある読み取り専用スパンの要素の参照を返します。</span><span class="sxs-lookup"><span data-stu-id="17914-194">Returns a reference to the element of the read-only span at index 0.</span></span></summary>
        <returns><span data-ttu-id="17914-195">インデックス 0 にある要素の参照。</span><span class="sxs-lookup"><span data-stu-id="17914-195">A reference to the element at index 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-196">読み取り専用スパンが空の場合、このメソッドは、インデックス0の要素が格納されている場所への参照を返します。</span><span class="sxs-lookup"><span data-stu-id="17914-196">If the read-only span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="17914-197">このような参照は、または `null`ない場合があります。</span><span class="sxs-lookup"><span data-stu-id="17914-197">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="17914-198">返された参照はピン留めに使用できますが、逆参照することはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-198">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T GetReference&lt;T&gt; (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As Span(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : Span&lt;'T&gt; -&gt; 'T" Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-199">スパン内の項目の種類。</span><span class="sxs-lookup"><span data-stu-id="17914-199">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="17914-200">参照の取得元となるスパン。</span><span class="sxs-lookup"><span data-stu-id="17914-200">The span from which the reference is retrieved.</span></span></param>
        <summary><span data-ttu-id="17914-201">インデックス 0 にあるスパンの要素の参照を返します。</span><span class="sxs-lookup"><span data-stu-id="17914-201">Returns a reference to the element of the span at index 0.</span></span></summary>
        <returns><span data-ttu-id="17914-202">インデックス 0 にある要素の参照。</span><span class="sxs-lookup"><span data-stu-id="17914-202">A reference to the element at index 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-203">Span が空の場合、このメソッドは、インデックス0の要素が格納されている場所への参照を返します。</span><span class="sxs-lookup"><span data-stu-id="17914-203">If the span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="17914-204">このような参照は、または `null`ない場合があります。</span><span class="sxs-lookup"><span data-stu-id="17914-204">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="17914-205">返された参照はピン留めに使用できますが、逆参照することはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-205">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Structure) (source As ReadOnlySpan(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Read(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member Read : ReadOnlySpan&lt;byte&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-206">読み取り専用スパンから取得する項目の型。</span><span class="sxs-lookup"><span data-stu-id="17914-206">The type of the item to retrieve from the read-only span.</span></span></typeparam>
        <param name="source"><span data-ttu-id="17914-207">読み取り専用スパン。</span><span class="sxs-lookup"><span data-stu-id="17914-207">A read-only span.</span></span></param>
        <summary><span data-ttu-id="17914-208">型の構造体を読み取ります</span><span class="sxs-lookup"><span data-stu-id="17914-208">Reads a structure of type</span></span> <param name="T" /> <span data-ttu-id="17914-209">バイト型の読み取り専用スパンから。</span><span class="sxs-lookup"><span data-stu-id="17914-209">out of a read-only span of bytes.</span></span></summary>
        <returns><span data-ttu-id="17914-210">読み取り専用スパンから取得される構造体。</span><span class="sxs-lookup"><span data-stu-id="17914-210">The structure retrieved from the read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-211">`T` には、ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-211">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="17914-212">型の安全性を維持するために、実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="17914-212">It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17914-213"><paramref name="T" /> には参照またはポインターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="17914-213"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17914-214"><paramref name="source" /> が <paramref name="T" /> より小さい値になっています。</span><span class="sxs-lookup"><span data-stu-id="17914-214"><paramref name="source" /> is smaller than <paramref name="T" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToEnumerable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; ToEnumerable&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; ToEnumerable&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToEnumerable(Of T) (memory As ReadOnlyMemory(Of T)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ ToEnumerable(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member ToEnumerable : ReadOnlyMemory&lt;'T&gt; -&gt; seq&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.ToEnumerable memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-215">読み取り専用メモリバッファー内の項目の型。</span><span class="sxs-lookup"><span data-stu-id="17914-215">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="17914-216">読み取り専用メモリ バッファー。</span><span class="sxs-lookup"><span data-stu-id="17914-216">A read-only memory buffer.</span></span></param>
        <summary><span data-ttu-id="17914-217">指定した読み取り専用メモリ バッファーの <see cref="T:System.Collections.Generic.IEnumerable`1" /> ビューを作成します。</span><span class="sxs-lookup"><span data-stu-id="17914-217">Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> view of the given read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="17914-218"><paramref name="memory" /> の列挙可能なビュー。</span><span class="sxs-lookup"><span data-stu-id="17914-218">An enumerable view of <paramref name="memory" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-219">このメソッドは、<xref:System.Collections.Generic.IEnumerable%601>型のパラメーターを必要とする既存の Api で、読み取り専用のメモリバッファーを使用できるようにします。</span><span class="sxs-lookup"><span data-stu-id="17914-219">This method allows a read-only memory buffer to be used in existing APIs that require a parameter of type <xref:System.Collections.Generic.IEnumerable%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetArray&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, out ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetArray&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] valuetype System.ArraySegment`1&lt;!!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetArray(Of T) (memory As ReadOnlyMemory(Of T), ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetArray(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="static member TryGetArray : ReadOnlyMemory&lt;'T&gt; * ArraySegment -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetArray (memory, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-220">読み取り専用メモリバッファー内の項目の型。</span><span class="sxs-lookup"><span data-stu-id="17914-220">The type of items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="17914-221">読み取り専用メモリ バッファー。</span><span class="sxs-lookup"><span data-stu-id="17914-221">A read-only memory buffer.</span></span></param>
        <param name="segment"><span data-ttu-id="17914-222">このメソッドが戻ると、基になる読み取り専用メモリ バッファーから取得した配列セグメントが含まれています。</span><span class="sxs-lookup"><span data-stu-id="17914-222">When this method returns, contains the array segment retrieved from the underlying read-only memory buffer.</span></span> <span data-ttu-id="17914-223">メソッドが失敗した場合、メソッドは既定の配列セグメントを返します。</span><span class="sxs-lookup"><span data-stu-id="17914-223">If the method fails, the method returns a default array segment.</span></span></param>
        <summary><span data-ttu-id="17914-224">基になるメモリ バッファーから配列セグメントの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="17914-224">Tries to get an array segment from the underlying memory buffer.</span></span> <span data-ttu-id="17914-225">戻り値は、操作の成功を示します。</span><span class="sxs-lookup"><span data-stu-id="17914-225">The return value indicates the success of the operation.</span></span></summary>
        <returns><span data-ttu-id="17914-226">メソッドの呼び出しが成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="17914-226"><see langword="true" /> if the method call succeeds; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; * 'Manager -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-227">読み取り専用メモリバッファー内の項目の型。</span><span class="sxs-lookup"><span data-stu-id="17914-227">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <typeparam name="TManager"><span data-ttu-id="17914-228">取得する <see cref="T:System.Buffers.MemoryManager`1" /> の型。</span><span class="sxs-lookup"><span data-stu-id="17914-228">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="17914-229">メモリ マネージャーを取得する対象の読み取り専用メモリ バッファー。</span><span class="sxs-lookup"><span data-stu-id="17914-229">The read-only memory buffer for which to get the memory manager.</span></span></param>
        <param name="manager"><span data-ttu-id="17914-230">メソッドから戻るときは、<paramref name="memory" /> のマネージャー。</span><span class="sxs-lookup"><span data-stu-id="17914-230">When the method returns, the manager of <paramref name="memory" />.</span></span></param>
        <summary><span data-ttu-id="17914-231">基になる読み取り専用メモリ バッファーから <see cref="T:System.Buffers.MemoryManager`1" /> の取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="17914-231">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" /> from the underlying read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="17914-232">メソッドがメモリ マネージャーを取得した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="17914-232"><see langword="true" /> if the method retrieved the memory manager; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager, out int start, out int length) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; * 'Manager * int * int -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-233">読み取り専用メモリバッファー内の項目の型。</span><span class="sxs-lookup"><span data-stu-id="17914-233">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <typeparam name="TManager"><span data-ttu-id="17914-234">取得する <see cref="T:System.Buffers.MemoryManager`1" /> の型。</span><span class="sxs-lookup"><span data-stu-id="17914-234">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="17914-235">メモリ マネージャーを取得する対象の読み取り専用メモリ バッファー。</span><span class="sxs-lookup"><span data-stu-id="17914-235">The read-only memory buffer for which to get the memory manager.</span></span></param>
        <param name="manager"><span data-ttu-id="17914-236">メソッドから戻るときは、<paramref name="memory" /> のマネージャー。</span><span class="sxs-lookup"><span data-stu-id="17914-236">When the method returns, the manager of <paramref name="memory" />.</span></span></param>
        <param name="start"><span data-ttu-id="17914-237">メソッドから戻るときは、<paramref name="manager" /> が表す <paramref name="memory" /> の先頭からのオフセット。</span><span class="sxs-lookup"><span data-stu-id="17914-237">When the method returns, the offset from the start of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span></span></param>
        <param name="length"><span data-ttu-id="17914-238">メソッドから戻るときは、<paramref name="manager" /> が表す <paramref name="memory" /> の長さ。</span><span class="sxs-lookup"><span data-stu-id="17914-238">When the method returns, the length of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span></span></param>
        <summary><span data-ttu-id="17914-239">基になる読み取り専用メモリ バッファーから、<see cref="T:System.Buffers.MemoryManager`1" />、開始インデックス、長さの取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="17914-239">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" />, start index, and length from the underlying read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="17914-240">メソッドが成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="17914-240"><see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetString">
      <MemberSignature Language="C#" Value="public static bool TryGetString (ReadOnlyMemory&lt;char&gt; memory, out string text, out int start, out int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetString(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, [out] string&amp; text, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetString (memory As ReadOnlyMemory(Of Char), ByRef text As String, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetString(ReadOnlyMemory&lt;char&gt; memory, [Runtime::InteropServices::Out] System::String ^ % text, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetString : ReadOnlyMemory&lt;char&gt; * string * int * int -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetString (memory, text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="text" Type="System.String" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="17914-241">文字のブロックを含む読み取り専用メモリ。</span><span class="sxs-lookup"><span data-stu-id="17914-241">Read-only memory containing a block of characters.</span></span></param>
        <param name="text"><span data-ttu-id="17914-242">メソッドが戻ると、文字列はメモリ バッファーに含まれています。</span><span class="sxs-lookup"><span data-stu-id="17914-242">When the method returns, the string contained in the memory buffer.</span></span></param>
        <param name="start"><span data-ttu-id="17914-243"><paramref name="text" /> の開始位置。</span><span class="sxs-lookup"><span data-stu-id="17914-243">The starting location in <paramref name="text" />.</span></span></param>
        <param name="length"><span data-ttu-id="17914-244"><paramref name="text" /> の文字数。</span><span class="sxs-lookup"><span data-stu-id="17914-244">The number of characters in <paramref name="text" />.</span></span></param>
        <summary><span data-ttu-id="17914-245"><see langword="System.ReadOnlyMemory&lt;Char&gt;" /> から基になる文字列の取得を試みます。</span><span class="sxs-lookup"><span data-stu-id="17914-245">Tries to get the underlying string from a <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="17914-246">メソッドが基になる文字列の取得に成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="17914-246"><see langword="true" /> if the method successfully retrieves the underlying string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source, out T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRead(Of T As Structure) (source As ReadOnlySpan(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryRead(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryRead : ReadOnlySpan&lt;byte&gt; * 'T -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryRead (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-247">取得する構造体の型。</span><span class="sxs-lookup"><span data-stu-id="17914-247">The type of the structure to retrieve.</span></span></typeparam>
        <param name="source"><span data-ttu-id="17914-248">バイト型の読み取り専用スパン。</span><span class="sxs-lookup"><span data-stu-id="17914-248">A read-only span of bytes.</span></span></param>
        <param name="value"><span data-ttu-id="17914-249">メソッドから戻るときは、<paramref name="T" /> のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="17914-249">When the method returns, an instance of <paramref name="T" />.</span></span></param>
        <summary><span data-ttu-id="17914-250">バイト型の読み取り専用スパンから <paramref name="T" /> 型の構造体の読み取りを試みます。</span><span class="sxs-lookup"><span data-stu-id="17914-250">Tries to read a structure of type <paramref name="T" /> from a read-only span of bytes.</span></span></summary>
        <returns><span data-ttu-id="17914-251">メソッドが構造体のインスタンスの取得に成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="17914-251"><see langword="true" /> if the method succeeds in retrieving an instance of the structure; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-252">`T` には、ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-252">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="17914-253">型の安全性を維持するために、実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="17914-253">It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17914-254"><paramref name="T" /> には参照またはポインターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="17914-254"><paramref name="T" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryWrite&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryWrite&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite(Of T As Structure) (destination As Span(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryWrite(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member TryWrite : Span&lt;byte&gt; * 'T -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryWrite (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-255">構造体の型。</span><span class="sxs-lookup"><span data-stu-id="17914-255">The type of the structure.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="17914-256">構造体を含むバイト型のスパン。</span><span class="sxs-lookup"><span data-stu-id="17914-256">The span of bytes to contain the structure.</span></span></param>
        <param name="value"><span data-ttu-id="17914-257">スパンに書き込まれる構造体。</span><span class="sxs-lookup"><span data-stu-id="17914-257">The structure to be written to the span.</span></span></param>
        <summary><span data-ttu-id="17914-258">バイト型のスパンに <paramref name="T" /> 型の構造体の書き込みを試みます。</span><span class="sxs-lookup"><span data-stu-id="17914-258">Tries to write a structure of type <paramref name="T" /> into a span of bytes.</span></span></summary>
        <returns><span data-ttu-id="17914-259">書き込み操作が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="17914-259"><see langword="true" /> if the write operation succeeded; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="17914-260"><see langword="false" /> を格納するにはスパンが小さすぎる場合、メソッドは <paramref name="T" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="17914-260">The method returns <see langword="false" /> if the span is too small to contain <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-261">`T` には、ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-261">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="17914-262">型の安全性を維持するために、実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="17914-262">It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17914-263"><paramref name="T" /> には参照またはポインターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="17914-263"><paramref name="T" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Structure) (destination As Span(Of Byte), ByRef value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static void Write(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member Write : Span&lt;byte&gt; * 'T -&gt; unit (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="17914-264">構造体の型。</span><span class="sxs-lookup"><span data-stu-id="17914-264">The type of the structure.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="17914-265">構造体を含むバイト型のスパン。</span><span class="sxs-lookup"><span data-stu-id="17914-265">The span of bytes to contain the structure.</span></span></param>
        <param name="value"><span data-ttu-id="17914-266">スパンに書き込まれる構造体。</span><span class="sxs-lookup"><span data-stu-id="17914-266">The structure to be written to the span.</span></span></param>
        <summary><span data-ttu-id="17914-267">バイト型のスパンに <paramref name="T" /> 型の構造体を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="17914-267">Writes a structure of type <paramref name="T" /> into a span of bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="17914-268">`T` には、ポインターまたは参照を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="17914-268">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="17914-269">型の安全性を維持するために、実行時にチェックされます。</span><span class="sxs-lookup"><span data-stu-id="17914-269">It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="17914-270"><paramref name="T" /> には参照またはポインターが含まれています。</span><span class="sxs-lookup"><span data-stu-id="17914-270"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="17914-271"><paramref name="destination" /> は <paramref name="value" /> を含めるには小さすぎます。</span><span class="sxs-lookup"><span data-stu-id="17914-271"><paramref name="destination" /> is too small to contain <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
