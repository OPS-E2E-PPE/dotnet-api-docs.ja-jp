<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata><Meta Name="ms.openlocfilehash" Value="60187e767665ebbb77a1b00118f6732fa11bff7c" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77243304" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecureString = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="b8dc5-101">不要になったときにコンピューターのメモリから削除するなどして機密を保持する必要があるテキストを表します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-101">Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed.</span></span> <span data-ttu-id="b8dc5-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
>  <span data-ttu-id="b8dc5-103">新しい開発には `SecureString` クラスを使用しないことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-103">We don't recommend that you use the `SecureString` class for new development.</span></span> <span data-ttu-id="b8dc5-104">詳細については、GitHub で[SecureString を使用しない](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md)でください。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-104">For more information, see [SecureString shouldn't be used](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md) on GitHub.</span></span>

 <span data-ttu-id="b8dc5-105"><xref:System.Security.SecureString> は、セキュリティの手段を提供する文字列型です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-105"><xref:System.Security.SecureString> is a string type that provides a measure of security.</span></span> <span data-ttu-id="b8dc5-106">これは、処理メモリ内の機密性の高い文字列をプレーンテキストとして保存しないようにしようとします。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-106">It tries to avoid storing potentially sensitive strings in process memory as plain text.</span></span>  <span data-ttu-id="b8dc5-107">(ただし、制限については、「 [How to secure Is SecureString?](#HowSecure) 」セクションを参照してください)。インスタンスが初期化されたとき、または値が変更されたときに、基になるプラットフォームでサポートされる機構を使用して、<xref:System.Security.SecureString> のインスタンスの値が自動的に保護されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-107">(For limitations, however, see the [How secure is SecureString?](#HowSecure) section.) The value of an instance of <xref:System.Security.SecureString> is automatically protected using a mechanism supported by the underlying platform when the instance is initialized or when the value is modified.</span></span> <span data-ttu-id="b8dc5-108">アプリケーションでインスタンスを変更不可として表示し、<xref:System.Security.SecureString.MakeReadOnly%2A> メソッドを呼び出すことによってさらに変更を防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-108">Your application can render the instance immutable and prevent further modification by invoking the <xref:System.Security.SecureString.MakeReadOnly%2A> method.</span></span>  
  
 <span data-ttu-id="b8dc5-109"><xref:System.Security.SecureString> インスタンスの最大長は65536文字です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-109">The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b8dc5-110">この型は <xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-110">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="b8dc5-111">型のインスタンスの使用が完了したら、直接または間接的に破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-111">When you have finished using an instance of the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="b8dc5-112">直接的に型を破棄するには、<xref:System.IDisposable.Dispose%2A>`try`/ ブロック内で `catch` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-112">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="b8dc5-113">間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-113">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="b8dc5-114">詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-114">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="b8dc5-115"><xref:System.Security.SecureString> クラスとそのメンバーは、COM からは参照できません。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-115">The <xref:System.Security.SecureString> class and its members are not visible to COM.</span></span> <span data-ttu-id="b8dc5-116">詳細については、<xref:System.Runtime.InteropServices.ComVisibleAttribute> を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-116">For more information, see <xref:System.Runtime.InteropServices.ComVisibleAttribute>.</span></span>  
  
 <span data-ttu-id="b8dc5-117">このセクションの内容は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-117">In this section:</span></span>  
  
 <span data-ttu-id="b8dc5-118">[文字列と SecureString](#vsString) </span><span class="sxs-lookup"><span data-stu-id="b8dc5-118">[String vs. SecureString](#vsString) </span></span>  
 <span data-ttu-id="b8dc5-119">[SecureString 操作](#Ops) </span><span class="sxs-lookup"><span data-stu-id="b8dc5-119">[SecureString operations](#Ops) </span></span>  
 <span data-ttu-id="b8dc5-120">[SecureString と相互運用](#interop) </span><span class="sxs-lookup"><span data-stu-id="b8dc5-120">[SecureString and interop](#interop) </span></span>  
 [<span data-ttu-id="b8dc5-121">SecureString はどのようにセキュリティで保護されていますか。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-121">How secure is  SecureString?</span></span>](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a><span data-ttu-id="b8dc5-122">String と SecureString</span><span class="sxs-lookup"><span data-stu-id="b8dc5-122">String versus SecureString</span></span>  
 <span data-ttu-id="b8dc5-123"><xref:System.String?displayProperty=nameWithType> クラスのインスタンスはどちらも不変であり、不要になったときに、プログラムによってガベージコレクションのスケジュールを設定することはできません。つまり、インスタンスは作成された後は読み取り専用であり、コンピューターのメモリからインスタンスが削除されるタイミングを予測することはできません。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-123">An instance of the <xref:System.String?displayProperty=nameWithType> class is both immutable and, when no longer needed, cannot be programmatically scheduled for garbage collection; that is, the instance is read-only after it is created, and it is not possible to predict when the instance will be deleted from computer memory.</span></span> <span data-ttu-id="b8dc5-124"><xref:System.String?displayProperty=nameWithType> インスタンスは不変であるため、既存のインスタンスを変更するように見える操作は、実際にはそのコピーを作成して操作します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-124">Because <xref:System.String?displayProperty=nameWithType> instances are immutable, operations that appear to modify an existing instance  actually create a copy of it to manipulate.</span></span> <span data-ttu-id="b8dc5-125">その結果、<xref:System.String> オブジェクトにパスワード、クレジットカード番号、個人データなどの機密情報が含まれている場合、アプリケーションはコンピューターのメモリからデータを削除できないため、使用後に情報が漏洩するリスクがあります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-125">Consequently, if a <xref:System.String> object contains sensitive information such as a password, credit card number, or personal data, there is a risk the information could be revealed after it is used because your application cannot delete the data from computer memory.</span></span>  
  
 <span data-ttu-id="b8dc5-126"><xref:System.Security.SecureString> オブジェクトは、テキスト値があるという点で、<xref:System.String> オブジェクトに似ています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-126">A <xref:System.Security.SecureString> object is similar to a <xref:System.String> object in that it has a text value.</span></span> <span data-ttu-id="b8dc5-127">ただし、<xref:System.Security.SecureString> オブジェクトの値はメモリに固定されており、基になるオペレーティングシステムによって提供される暗号化などの保護メカニズムを使用して、アプリケーションが読み取り専用としてマークするまで変更できます。また、アプリケーションが <xref:System.Security.SecureString.Dispose%2A> メソッドまたは .NET Framework ガベージコレクターを呼び出してコンピューターメモリから削除することもできます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-127">However, the value of a <xref:System.Security.SecureString> object is pinned in memory, may use a protection mechanism, such as encryption, provided by the underlying operating system, can be modified until your application marks it as read-only, and can be deleted from computer memory either by your application calling the <xref:System.Security.SecureString.Dispose%2A> method  or by the .NET Framework garbage collector.</span></span>  
  
 <span data-ttu-id="b8dc5-128"><xref:System.Security.SecureString> クラスの制限事項については、「 [How to secure Is SecureString?](#HowSecure) 」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-128">For a discussion of the limitations of the <xref:System.Security.SecureString> class, see the [How secure is  SecureString?](#HowSecure) section.</span></span>  
  
 [<span data-ttu-id="b8dc5-129">先頭に戻る</span><span class="sxs-lookup"><span data-stu-id="b8dc5-129">Back to top</span></span>](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a><span data-ttu-id="b8dc5-130">SecureString 操作</span><span class="sxs-lookup"><span data-stu-id="b8dc5-130">SecureString operations</span></span>  
 <span data-ttu-id="b8dc5-131"><xref:System.Security.SecureString> クラスには、次の操作を実行できるメンバーが含まれています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-131">The <xref:System.Security.SecureString> class includes members that allow you to do the following:</span></span>  
  
 <span data-ttu-id="b8dc5-132"><xref:System.Security.SecureString> オブジェクトのインスタンス化</span><span class="sxs-lookup"><span data-stu-id="b8dc5-132">Instantiate a <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="b8dc5-133">パラメーターなしのコンストラクターを呼び出すことによって、<xref:System.Security.SecureString> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-133">You instantiate a <xref:System.Security.SecureString> object by calling its parameterless constructor.</span></span>  
  
 <span data-ttu-id="b8dc5-134"><xref:System.Security.SecureString> オブジェクトに文字を追加する</span><span class="sxs-lookup"><span data-stu-id="b8dc5-134">Add characters to a <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="b8dc5-135"><xref:System.Security.SecureString.AppendChar%2A> または <xref:System.Security.SecureString.InsertAt%2A> メソッドを呼び出すことによって、<xref:System.Security.SecureString> オブジェクトに一度に1つの文字を追加できます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-135">You can add a single character at a time to a <xref:System.Security.SecureString> object  by calling its <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.InsertAt%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="b8dc5-136"><xref:System.Security.SecureString> オブジェクトを <xref:System.String>から構築することはできません。これは、機微なデータが、変更できない <xref:System.String> クラスのメモリの永続化によって既に影響を受けるためです。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-136">A <xref:System.Security.SecureString> object should never be constructed from a <xref:System.String>, because the sensitive data is already subject to the memory persistence consequences of the immutable <xref:System.String> class.</span></span> <span data-ttu-id="b8dc5-137"><xref:System.Security.SecureString> オブジェクトを構築する最善の方法は、<xref:System.Console.ReadKey%2A?displayProperty=nameWithType> メソッドなど、1回限りのアンマネージソースからです。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-137">The best way to construct a <xref:System.Security.SecureString> object is from a character-at-a-time unmanaged source, such as the <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="b8dc5-138"><xref:System.Security.SecureString> オブジェクトから文字を削除する</span><span class="sxs-lookup"><span data-stu-id="b8dc5-138">Remove characters from a <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="b8dc5-139">個々の文字を置換するには、<xref:System.Security.SecureString.SetAt%2A> メソッドを呼び出すか、<xref:System.Security.SecureString.RemoveAt%2A> メソッドを呼び出して個々の文字を削除するか、<xref:System.Security.SecureString.Clear%2A> メソッドを呼び出して <xref:System.Security.SecureString> インスタンスからすべての文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-139">You can replace an individual character by calling the <xref:System.Security.SecureString.SetAt%2A> method, remove an individual character by calling the <xref:System.Security.SecureString.RemoveAt%2A> method, or remove all characters from the <xref:System.Security.SecureString> instance by calling the  <xref:System.Security.SecureString.Clear%2A> method.</span></span>  
  
 <span data-ttu-id="b8dc5-140"><xref:System.Security.SecureString> オブジェクトを読み取り専用にする</span><span class="sxs-lookup"><span data-stu-id="b8dc5-140">Make the <xref:System.Security.SecureString> object read-only</span></span>  
 <span data-ttu-id="b8dc5-141"><xref:System.Security.SecureString> オブジェクトが表す文字列を定義したら、その <xref:System.Security.SecureString.MakeReadOnly%2A> メソッドを呼び出して、文字列を読み取り専用にします。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-141">Once you have defined the string that the <xref:System.Security.SecureString> object represents, you call its  <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the string read-only.</span></span>  
  
 <span data-ttu-id="b8dc5-142"><xref:System.Security.SecureString> オブジェクトに関する情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-142">Get information about the <xref:System.Security.SecureString> object</span></span>  
 <span data-ttu-id="b8dc5-143"><xref:System.Security.SecureString> クラスには、文字列に関する情報を提供する2つのメンバー (<xref:System.Security.SecureString.Length%2A> プロパティ) があります。このプロパティは、文字列に含まれる UTF16 でエンコードされたコード単位の数を示します。インスタンスが読み取り専用かどうかを示す <xref:System.Security.SecureString.IsReadOnly%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-143">The <xref:System.Security.SecureString> class has only two members that provide information about the string: its <xref:System.Security.SecureString.Length%2A> property, which indicates the number of UTF16-encoded code units in the string; and the <xref:System.Security.SecureString.IsReadOnly%2A>, method, which indicates whether the instance is read-only.</span></span>  
  
 <span data-ttu-id="b8dc5-144"><xref:System.Security.SecureString> インスタンスに割り当てられたメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-144">Release the memory allocated to the <xref:System.Security.SecureString> instance</span></span>  
 <span data-ttu-id="b8dc5-145"><xref:System.Security.SecureString> は <xref:System.IDisposable> インターフェイスを実装するため、<xref:System.Security.SecureString.Dispose%2A> メソッドを呼び出してメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-145">Because <xref:System.Security.SecureString> implements the <xref:System.IDisposable> interface, you release its memory by calling the <xref:System.Security.SecureString.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="b8dc5-146"><xref:System.Security.SecureString> クラスには、<xref:System.Security.SecureString>の値を検査、比較、または変換するメンバーがありません。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-146">The <xref:System.Security.SecureString> class has no members that inspect, compare, or convert the value of a <xref:System.Security.SecureString>.</span></span> <span data-ttu-id="b8dc5-147">このようなメンバーがないため、インスタンスの値が誤って、または意図的に公開されることを未然に防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-147">The absence of such members helps protect the value of the instance from accidental or malicious exposure.</span></span> <span data-ttu-id="b8dc5-148"><xref:System.Security.SecureString> オブジェクトの値を操作するには、<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> メソッドなどの <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> クラスの適切なメンバーを使用します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-148">Use appropriate members of the <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> class, such as the <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> method, to manipulate the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 <span data-ttu-id="b8dc5-149">.NET Framework クラスライブラリは、通常、次の方法で <xref:System.Security.SecureString> インスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-149">The .NET Framework Class Library commonly uses <xref:System.Security.SecureString> instances in the following ways:</span></span>  
  
-   <span data-ttu-id="b8dc5-150"><xref:System.Diagnostics.ProcessStartInfo> 構造体を使用するか、<xref:System.Security.SecureString>型のパラメーターを持つ <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> メソッドのオーバーロードを呼び出すことによって、プロセスにパスワード情報を提供すること。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-150">To provide password information to a process by using the <xref:System.Diagnostics.ProcessStartInfo> structure or by calling an overload of the <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> method that has a parameter of type <xref:System.Security.SecureString>.</span></span>  
  
-   <span data-ttu-id="b8dc5-151"><xref:System.Security.SecureString> 型のパラメーターを持つ <xref:System.Net.NetworkCredential> クラスコンストラクターを呼び出すことによって、または <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> プロパティを使用して、ネットワークパスワード情報を提供する場合は。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-151">To provide network password information by calling a <xref:System.Net.NetworkCredential> class constructor that has a parameter of type <xref:System.Security.SecureString> or by using the <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="b8dc5-152"><xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> コンストラクターを呼び出すか、<xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> プロパティの値を取得することによって SQL Server 認証のパスワード情報を提供する場合は。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-152">To provide password information for SQL Server Authentication by calling the <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> constructor or retrieving the value of the <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> property.</span></span>  
  
-   <span data-ttu-id="b8dc5-153">アンマネージコードに文字列を渡す場合は。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-153">To pass a string to unmanaged code.</span></span> <span data-ttu-id="b8dc5-154">詳細については、「 [SecureString and interop](#interop) 」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-154">For more information, see the [SecureString and interop](#interop) section.</span></span>  
  
 [<span data-ttu-id="b8dc5-155">先頭に戻る</span><span class="sxs-lookup"><span data-stu-id="b8dc5-155">Back to top</span></span>](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a><span data-ttu-id="b8dc5-156">SecureString と相互運用</span><span class="sxs-lookup"><span data-stu-id="b8dc5-156">SecureString and interop</span></span>  
 <span data-ttu-id="b8dc5-157">オペレーティングシステムでは <xref:System.Security.SecureString>が直接サポートされないため、文字列をネイティブメソッドに渡す前に、<xref:System.Security.SecureString> オブジェクトの値を必要な文字列型に変換する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-157">Because the operating system does not  directly support <xref:System.Security.SecureString>, you must convert the value of the <xref:System.Security.SecureString> object to the required string type before passing the string to a native method.</span></span>  <span data-ttu-id="b8dc5-158"><xref:System.Runtime.InteropServices.Marshal> クラスには、次の5つのメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-158">The <xref:System.Runtime.InteropServices.Marshal> class has five methods that do this:</span></span>  
  
-   <span data-ttu-id="b8dc5-159"><xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>。この <xref:System.Security.SecureString> 文字列値を、COM によって認識されるバイナリ文字列 (BSTR) に変換します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-159"><xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>, which converts the <xref:System.Security.SecureString> string value to a binary string (BSTR) recognized by COM.</span></span>  
  
-   <span data-ttu-id="b8dc5-160"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> および <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>。アンマネージメモリ内の ANSI 文字列に <xref:System.Security.SecureString> 文字列値をコピーします。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-160"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>, which copy the <xref:System.Security.SecureString> string value to an ANSI string in unmanaged memory.</span></span>  
  
-   <span data-ttu-id="b8dc5-161"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> および <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>。アンマネージメモリ内の Unicode 文字列に <xref:System.Security.SecureString> 文字列値をコピーします。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-161"><xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> and <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>, which copy the <xref:System.Security.SecureString> string value to a Unicode string in unmanaged memory.</span></span>  
  
 <span data-ttu-id="b8dc5-162">これらの各メソッドは、アンマネージメモリ内にクリアテキスト文字列を作成します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-162">Each of these methods creates a clear-text string in unmanaged memory.</span></span> <span data-ttu-id="b8dc5-163">開発者は、不要になったらすぐにそのメモリをゼロにして解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-163">It is the responsibility of the developer to zero out and free that memory as soon as it is no longer needed.</span></span> <span data-ttu-id="b8dc5-164">文字列変換とメモリ割り当ての各メソッドには、対応するメソッドがあります。このメソッドは、ゼロアウトし、割り当てられたメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-164">Each of the string conversion and memory allocation methods has a corresponding method to zero out and free the allocated memory:</span></span>  
  
|<span data-ttu-id="b8dc5-165">割り当てと変換の方法</span><span class="sxs-lookup"><span data-stu-id="b8dc5-165">Allocation and conversion method</span></span>|<span data-ttu-id="b8dc5-166">Zero および free メソッド</span><span class="sxs-lookup"><span data-stu-id="b8dc5-166">Zero and free method</span></span>|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [<span data-ttu-id="b8dc5-167">先頭に戻る</span><span class="sxs-lookup"><span data-stu-id="b8dc5-167">Back to top</span></span>](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a><span data-ttu-id="b8dc5-168">SecureString はどのようにセキュリティで保護されていますか。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-168">How secure is SecureString?</span></span>  
 <span data-ttu-id="b8dc5-169"><xref:System.Security.SecureString> インスタンスは、適切に作成されると、<xref:System.String>よりも多くのデータ保護を提供します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-169">When created properly, a <xref:System.Security.SecureString> instance provides more data protection than a <xref:System.String>.</span></span> <span data-ttu-id="b8dc5-170">文字単位のソースから文字列を作成する場合、<xref:System.String> は複数の中間メモリを作成し、<xref:System.Security.SecureString> は1つのインスタンスだけを作成します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-170">When creating a string from a character-at-a-time source, <xref:System.String> creates multiple intermediate in memory, whereas  <xref:System.Security.SecureString> creates just a single instance.</span></span>  <span data-ttu-id="b8dc5-171"><xref:System.String> オブジェクトのガベージコレクションは非決定的です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-171">Garbage collection of <xref:System.String> objects  is non-deterministic.</span></span> <span data-ttu-id="b8dc5-172">また、メモリが固定されていないため、メモリを移動および圧縮するときに、ガベージコレクターによって <xref:System.String> 値の追加のコピーが作成されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-172">In addition, because its memory is not pinned, the garbage collector will make additional copies of <xref:System.String> values when moving and compacting memory.</span></span> <span data-ttu-id="b8dc5-173">これに対して、<xref:System.Security.SecureString> オブジェクトに割り当てられたメモリは固定され、<xref:System.Security.SecureString.Dispose%2A> メソッドを呼び出すことによって、メモリを解放できます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-173">In contrast, the memory allocated to a <xref:System.Security.SecureString> object is pinned,  and that memory can be freed by calling the <xref:System.Security.SecureString.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="b8dc5-174"><xref:System.Security.SecureString> インスタンスに格納されているデータは、<xref:System.String> インスタンスに格納されているデータよりも安全性が高くなりますが、<xref:System.Security.SecureString> インスタンスをセキュリティで保護する方法には大きな制限があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-174">Although data stored in a <xref:System.Security.SecureString> instance is more secure than data stored in a <xref:System.String> instance, there are significant limitations on how secure a <xref:System.Security.SecureString> instance is.</span></span> <span data-ttu-id="b8dc5-175">チェックの内容は次のとおりです</span><span class="sxs-lookup"><span data-stu-id="b8dc5-175">These include:</span></span>  
  
 <span data-ttu-id="b8dc5-176">プラットフォーム</span><span class="sxs-lookup"><span data-stu-id="b8dc5-176">Platform</span></span>  
 <span data-ttu-id="b8dc5-177">Windows オペレーティングシステムでは、<xref:System.Security.SecureString> インスタンスの内部文字配列の内容が暗号化されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-177">On the Windows operating system, the contents of a <xref:System.Security.SecureString> instance's internal character array are encrypted.</span></span> <span data-ttu-id="b8dc5-178">ただし、Api が不足しているか、キー管理の問題であるかにかかわらず、暗号化はすべてのプラットフォームで使用できるわけではありません。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-178">However, whether because of missing APIs or key management issues,  encryption is not available on all platforms.</span></span> <span data-ttu-id="b8dc5-179">このプラットフォームの依存関係のため、<xref:System.Security.SecureString> では、Windows 以外のプラットフォームの内部記憶域は暗号化されません。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-179">Because of this platform dependency, <xref:System.Security.SecureString> does not encrypt the internal storage on non-Windows platform.</span></span> <span data-ttu-id="b8dc5-180">その他の手法は、追加の保護を提供するために、これらのプラットフォームで使用されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-180">Other techniques are used on those platforms to provide additional protection.</span></span>
  
 <span data-ttu-id="b8dc5-181">Duration</span><span class="sxs-lookup"><span data-stu-id="b8dc5-181">Duration</span></span>  
 <span data-ttu-id="b8dc5-182"><xref:System.Security.SecureString> の実装で暗号化を利用できる場合でも、<xref:System.Security.SecureString> インスタンスに割り当てられたプレーンテキストは、さまざまなタイミングで公開される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-182">Even if the <xref:System.Security.SecureString> implementation is able to take advantage of encryption, the plain text assigned to the <xref:System.Security.SecureString> instance may be exposed at various times:</span></span>  
  
-   <span data-ttu-id="b8dc5-183">Windows では、オペレーティングシステムレベルでセキュリティで保護された文字列の実装が提供されないため、.NET Framework は、セキュリティで保護された文字列の値をプレーンテキスト形式に変換して使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-183">Because Windows doesn't offer a secure string implementation at the operating system level, the .NET Framework still has to convert the secure string value to its plain text representation in order to use it.</span></span>  
  
-   <span data-ttu-id="b8dc5-184">セキュリティで保護された文字列の値が <xref:System.Security.SecureString.AppendChar%2A> や <xref:System.Security.SecureString.RemoveAt%2A>などのメソッドによって変更されるたびに、暗号化を解除し (プレーンテキストに変換)、変更してから再度暗号化する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-184">Whenever the value of the secure string is modified by methods such as <xref:System.Security.SecureString.AppendChar%2A> or <xref:System.Security.SecureString.RemoveAt%2A>, it must be decrypted (that is, converted back to plain text), modified, and then encrypted again.</span></span>  
  
-   <span data-ttu-id="b8dc5-185">相互運用呼び出しでセキュリティで保護された文字列を使用する場合は、ANSI 文字列、Unicode 文字列、またはバイナリ文字列 (BSTR) に変換する必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-185">If the secure string is used in an interop call, it must be converted to an ANSI string, a Unicode string, or a binary string (BSTR).</span></span> <span data-ttu-id="b8dc5-186">詳細については、「 [SecureString and interop](#interop) 」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-186">For more information, see the [SecureString and interop](#interop) section.</span></span>  
  
 <span data-ttu-id="b8dc5-187"><xref:System.Security.SecureString> インスタンスの値が公開される時間間隔は、<xref:System.String> クラスと比較して短縮されるだけです。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-187">The time interval for which the <xref:System.Security.SecureString> instance's value is exposed  is merely shortened in comparison to the <xref:System.String> class.</span></span>  
  
 <span data-ttu-id="b8dc5-188">ストレージと使用量</span><span class="sxs-lookup"><span data-stu-id="b8dc5-188">Storage versus usage</span></span>  
 <span data-ttu-id="b8dc5-189">一般に、<xref:System.Security.SecureString> クラスは、機密情報を保護または保持する必要がある文字列値のストレージ機構を定義します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-189">More generally, the <xref:System.Security.SecureString> class defines a storage mechanism for string values that should be protected or kept confidential.</span></span> <span data-ttu-id="b8dc5-190">ただし、.NET Framework 自体の外部では、<xref:System.Security.SecureString>をサポートする使用方法はありません。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-190">However, outside of the .NET Framework itself, no usage mechanism supports <xref:System.Security.SecureString>.</span></span> <span data-ttu-id="b8dc5-191">つまり、セキュリティで保護された文字列は、ターゲットによって認識される使用可能な形式 (通常はクリアテキスト形式) に変換する必要があり、ユーザー領域で復号化と変換を行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-191">This means that the secure string must be converted to a usable form (typically a clear text form) that can be recognized by its target, and     that decryption and conversion must occur in user space.</span></span>  
  
 <span data-ttu-id="b8dc5-192">全体として、機密性の高い文字列データの漏えいを制限するため、<xref:System.Security.SecureString> は <xref:System.String> よりも安全性が高くなります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-192">Overall, <xref:System.Security.SecureString> is more secure than <xref:System.String> because it limits the exposure of sensitive string data.</span></span> <span data-ttu-id="b8dc5-193">ただし、これらの文字列は、ホストコンピューター上で実行されている悪意のあるプロセス、プロセスダンプ、ユーザーが表示可能なスワップファイルなど、生メモリにアクセスできるすべてのプロセスまたは操作に公開される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-193">However, those strings may still be exposed to any process or operation that has access to raw memory, such as a malicious process running on the host computer, a process dump, or a user-viewable swap file.</span></span> <span data-ttu-id="b8dc5-194"><xref:System.Security.SecureString> を使用してパスワードを保護するのではなく、プロセスの外部に格納されている資格情報に対して不透明なハンドルを使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-194">Instead of using <xref:System.Security.SecureString> to protect passwords, the recommended alternative is to use an opaque handle to credentials that are stored outside of the process.</span></span>  
  
 [<span data-ttu-id="b8dc5-195">先頭に戻る</span><span class="sxs-lookup"><span data-stu-id="b8dc5-195">Back to top</span></span>](#top)  
  
   
  
## Examples  
 <span data-ttu-id="b8dc5-196">次の例では、<xref:System.Security.SecureString> を使用して、新しいプロセスを開始するための資格情報として使用するユーザーのパスワードをセキュリティで保護する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-196">The following example demonstrates how to use a <xref:System.Security.SecureString> to secure a user's password for use as a credential to start a new process.</span></span>  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="b8dc5-197"><see cref="T:System.Security.SecureString" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-197">Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8dc5-198"><see cref="T:System.Security.SecureString" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-198">Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b8dc5-199">次の例では、既定の (またはパラメーターなしの) コンストラクターを使用して、新しい <xref:System.Security.SecureString> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-199">The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object.</span></span> <span data-ttu-id="b8dc5-200">次に、<xref:System.Security.SecureString.AppendChar%2A> メソッドを呼び出して、文字の配列を追加します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-200">It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.</span></span>  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 <span data-ttu-id="b8dc5-201">次の例では、<xref:System.String> オブジェクトの値から <xref:System.Security.SecureString> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-201">The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.</span></span>  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="b8dc5-202">このインスタンスの値を暗号化または復号化するときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-202">An error occurred while protecting or unprotecting the value of this instance.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b8dc5-203">この操作は、このプラットフォームではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-203">This operation is not supported on this platform.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberSignature Language="F#" Value="new System.Security.SecureString : nativeptr&lt;char&gt; * int -&gt; System.Security.SecureString" Usage="new System.Security.SecureString (value, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="b8dc5-204"><see cref="T:System.Char" /> オブジェクトの配列へのポインター。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-204">A pointer to an array of <see cref="T:System.Char" /> objects.</span></span></param>
        <param name="length"><span data-ttu-id="b8dc5-205">新しいインスタンスに含める <paramref name="value" /> の要素の数。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-205">The number of elements of <paramref name="value" /> to include in the new instance.</span></span></param>
        <summary><span data-ttu-id="b8dc5-206"><see cref="T:System.Security.SecureString" /> オブジェクトのサブ配列から <see cref="T:System.Char" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-206">Initializes a new instance of the <see cref="T:System.Security.SecureString" /> class from a subarray of <see cref="T:System.Char" /> objects.</span></span>  
  
<span data-ttu-id="b8dc5-207">このコンストラクターは、CLS に準拠していません。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-207">This constructor is not CLS-compliant.</span></span> <span data-ttu-id="b8dc5-208">CLS 準拠の代わりとして <see cref="M:System.Security.SecureString.#ctor" /> を使用できます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-208">The CLS-compliant alternative is <see cref="M:System.Security.SecureString.#ctor" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dc5-209">このコンストラクターは、新しい <xref:System.Security.SecureString> オブジェクトを、`length`によって指定された `value` の文字数に初期化します。その後、インスタンスの値が暗号化されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-209">This constructor initializes the new <xref:System.Security.SecureString> object to the number of characters in `value` specified by `length`; the value of the instance is then encrypted.</span></span>  
  
 <span data-ttu-id="b8dc5-210">でC#は、このコンストラクターはアンセーフコードのコンテキストでのみ定義されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-210">In C#, this constructor is defined only in the context of unsafe code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8dc5-211">次の例では、コンストラクターに文字配列へのポインターを渡すことによって、新しい <xref:System.Security.SecureString> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-211">The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.</span></span>  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="b8dc5-212"><paramref name="value" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-212"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b8dc5-213"><paramref name="length" /> が 0 未満か、65,536 を超えています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-213"><paramref name="length" /> is less than zero or greater than 65,536.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="b8dc5-214">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-214">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="b8dc5-215">この操作は、このプラットフォームではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-215">This operation is not supported on this platform.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberSignature Language="F#" Value="member this.AppendChar : char -&gt; unit" Usage="secureString.AppendChar c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="b8dc5-216">このセキュリティ文字列に追加される文字。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-216">A character to append to this secure string.</span></span></param>
        <summary><span data-ttu-id="b8dc5-217">現在のセキュリティ文字列の末尾に、文字を 1 つ追加します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-217">Appends a character to the end of the current secure string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dc5-218">実装で暗号化などの保護メカニズムが使用されている場合、このセキュリティ文字列の値 (存在する場合) は保護されません。`c` が追加されます。次に、セキュリティで保護された文字列の新しい値が再保護されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-218">If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; `c` is appended; then the new value of the secure string is re-protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8dc5-219">次の例は、<xref:System.Security.SecureString.AppendChar%2A>、<xref:System.Security.SecureString.InsertAt%2A>、<xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>、および <xref:System.Security.SecureString.Clear%2A> の各メソッドが <xref:System.Security.SecureString> オブジェクトの値にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-219">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 <span data-ttu-id="b8dc5-220">次の例は、<xref:System.Security.SecureString.AppendChar%2A> および <xref:System.Security.SecureString.RemoveAt%2A> メソッドを使用して、パスワードの文字を収集する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-220">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.</span></span>  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b8dc5-221">このセキュリティ文字列は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-221">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8dc5-222">このセキュリティ文字列は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-222">This secure string is read-only.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b8dc5-223">この操作を実行すると、このセキュリティ文字列の長さが 65,536 文字を超えます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-223">Performing this operation would make the length of this secure string greater than 65,536 characters.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="b8dc5-224">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-224">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="secureString.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8dc5-225">現在のセキュリティ文字列の値を削除します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-225">Deletes the value of the current secure string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dc5-226">このセキュリティ文字列の値を格納しているコンピューターのメモリはゼロになり、このセキュリティ文字列の値の長さは0に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-226">The computer memory that contains the value of this secure string is zeroed, then the length of the value of this secure string is set to zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8dc5-227">次の例は、<xref:System.Security.SecureString.AppendChar%2A>、<xref:System.Security.SecureString.InsertAt%2A>、<xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>、および <xref:System.Security.SecureString.Clear%2A> の各メソッドが <xref:System.Security.SecureString> オブジェクトの値にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-227">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b8dc5-228">このセキュリティ文字列は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-228">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8dc5-229">このセキュリティ文字列は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-229">This secure string is read-only.</span></span></exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Security.SecureString" Usage="secureString.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8dc5-230">現在のセキュリティ文字列のコピーを作成します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-230">Creates a copy of the current secure string.</span></span></summary>
        <returns><span data-ttu-id="b8dc5-231">このセキュリティ文字列の複製。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-231">A duplicate of this secure string.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dc5-232"><xref:System.Security.SecureString> のインスタンスが読み取り専用に設定されている場合、そのインスタンスのコピーは読み取り専用になりません。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-232">If an instance of a <xref:System.Security.SecureString> is marked read-only, the copy of that instance will not be read-only.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b8dc5-233">このセキュリティ文字列は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-233">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="b8dc5-234">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-234">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secureString.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8dc5-235">現在の <see cref="T:System.Security.SecureString" /> オブジェクトによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-235">Releases all resources used by the current <see cref="T:System.Security.SecureString" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dc5-236"><xref:System.Security.SecureString.Dispose%2A> メソッドは、この <xref:System.Security.SecureString> オブジェクトの値を含む割り当てられたメモリにバイナリゼロを書き込み、割り当てられたメモリを解放します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-236">The <xref:System.Security.SecureString.Dispose%2A> method writes binary zeroes to the allocated memory that contains the value of this <xref:System.Security.SecureString> object, then frees the allocated memory.</span></span>  
  
 <span data-ttu-id="b8dc5-237">詳細については、「[ガベージコレクション](~/docs/standard/garbage-collection/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-237">For more information, see [Garbage Collection](~/docs/standard/garbage-collection/index.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.InsertAt : int * char -&gt; unit" Usage="secureString.InsertAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b8dc5-238">パラメーター <paramref name="c" /> が挿入されるインデックス位置。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-238">The index position where parameter <paramref name="c" /> is inserted.</span></span></param>
        <param name="c"><span data-ttu-id="b8dc5-239">挿入する文字。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-239">The character to insert.</span></span></param>
        <summary><span data-ttu-id="b8dc5-240">このセキュリティ文字列の指定したインデックス位置に文字を挿入します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-240">Inserts a character in this secure string at the specified index position.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dc5-241">インデックスは0から始まります。このセキュリティ文字列の最初の文字は、インデックス位置0にあります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-241">The index is zero-based; the first character in this secure string is at index position zero.</span></span>  
  
 <span data-ttu-id="b8dc5-242">実装で暗号化などの保護メカニズムが使用されている場合、セキュリティで保護された文字列の値 (存在する場合) は保護されません。`c` は、指定されたインデックス位置に挿入されます。その後、新しい値が再保護されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-242">If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is inserted at the specified index position; then the new value is re-protected.</span></span> <span data-ttu-id="b8dc5-243"><xref:System.Security.SecureString.InsertAt%2A> メソッドは、<xref:System.Security.SecureString.InsertAt%2A> の `index` パラメーターがこのインスタンスの長さに設定されている場合に、セキュリティで保護された文字列の末尾に文字を挿入する <xref:System.Security.SecureString.AppendChar%2A> メソッドと同じ結果を生成します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-243">The <xref:System.Security.SecureString.InsertAt%2A> method yields the same results as the <xref:System.Security.SecureString.AppendChar%2A> method, which inserts a character at the end of a secure string, if the `index` parameter of <xref:System.Security.SecureString.InsertAt%2A> is set to the length of this instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8dc5-244">次の例は、<xref:System.Security.SecureString.AppendChar%2A>、<xref:System.Security.SecureString.InsertAt%2A>、<xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>、および <xref:System.Security.SecureString.Clear%2A> の各メソッドが <xref:System.Security.SecureString> オブジェクトの値にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-244">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b8dc5-245">このセキュリティ文字列は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-245">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8dc5-246">このセキュリティ文字列は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-246">This secure string is read-only.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b8dc5-247"><paramref name="index" /> が、0 未満か、このセキュリティ文字列の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-247"><paramref name="index" /> is less than zero, or greater than the length of this secure string.</span></span>  
  
<span data-ttu-id="b8dc5-248">または</span><span class="sxs-lookup"><span data-stu-id="b8dc5-248">-or-</span></span> 
<span data-ttu-id="b8dc5-249">この操作を実行すると、このセキュリティ文字列の長さが 65,536 文字を超えます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-249">Performing this operation would make the length of this secure string greater than 65,536 characters.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="b8dc5-250">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-250">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : unit -&gt; bool" Usage="secureString.IsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8dc5-251">このセキュリティ文字列が読み取り専用としてマークされているかどうかを示します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-251">Indicates whether this secure string is marked read-only.</span></span></summary>
        <returns><span data-ttu-id="b8dc5-252">このセキュリティ文字列が読み取り専用にマークされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-252"><see langword="true" /> if this secure string is marked read-only; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dc5-253"><xref:System.Security.SecureString.MakeReadOnly%2A> メソッドによって <xref:System.Security.SecureString> のインスタンスが読み取り専用としてマークされた後、インスタンスの値を変更しようとすると、<xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-253">After an instance of <xref:System.Security.SecureString> is marked read-only by the <xref:System.Security.SecureString.MakeReadOnly%2A> method, any attempt to modify the value of the instance throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="b8dc5-254"><xref:System.Security.SecureString.IsReadOnly%2A> メソッドを使用して、<xref:System.Security.SecureString> が読み取り専用かどうかをテストしてから、変更を試みます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-254">Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether a <xref:System.Security.SecureString> is read-only before attempting to modify it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b8dc5-255">このセキュリティ文字列は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-255">This secure string has already been disposed.</span></span></exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Security.SecureString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="b8dc5-256">現在のセキュリティ文字列内の文字数を取得します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-256">Gets the number of characters in the current secure string.</span></span></summary>
        <value><span data-ttu-id="b8dc5-257">このセキュリティ文字列に含まれる <see cref="T:System.Char" /> オブジェクトの数。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-257">The number of <see cref="T:System.Char" /> objects in this secure string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dc5-258"><xref:System.Security.SecureString.Length%2A> プロパティは、Unicode 文字の数ではなく、このインスタンス内の <xref:System.Char> オブジェクトの数を返します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-258">The <xref:System.Security.SecureString.Length%2A> property returns the number of <xref:System.Char> objects in this instance, not the number of Unicode characters.</span></span> <span data-ttu-id="b8dc5-259">Unicode 文字は、複数の <xref:System.Char> オブジェクトで表すことができます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-259">A Unicode character might be represented by more than one <xref:System.Char> object.</span></span>  
  
 <span data-ttu-id="b8dc5-260"><xref:System.Security.SecureString> インスタンスの最大長は65536文字です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-260">The maximum length of a <xref:System.Security.SecureString> instance is 65,536 characters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b8dc5-261">このセキュリティ文字列は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-261">This secure string has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="member this.MakeReadOnly : unit -&gt; unit" Usage="secureString.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="b8dc5-262">このセキュリティ文字列のテキスト値を読み取り専用にします。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-262">Makes the text value of this secure string read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dc5-263"><xref:System.Security.SecureString.%23ctor%2A> コンストラクターを使用して <xref:System.Security.SecureString> クラスのインスタンスのテキスト値を初期化し、<xref:System.Security.SecureString.Clear%2A>、<xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>、<xref:System.Security.SecureString.InsertAt%2A>、および <xref:System.Security.SecureString.AppendChar%2A> メソッドで値を変更します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-263">Initialize the text value of an instance of the <xref:System.Security.SecureString> class with the <xref:System.Security.SecureString.%23ctor%2A> constructors, and modify the value with the <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, and <xref:System.Security.SecureString.AppendChar%2A> methods.</span></span>  
  
 <span data-ttu-id="b8dc5-264">最終的な変更を行ったら、<xref:System.Security.SecureString.MakeReadOnly%2A> メソッドを使用して、インスタンスの値を変更できないようにします (読み取り専用)。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-264">After you have made your final modifications, use the <xref:System.Security.SecureString.MakeReadOnly%2A> method to make the value of the instance immutable (read-only).</span></span> <span data-ttu-id="b8dc5-265">値が読み取り専用としてマークされた後、それを変更しようとすると、<xref:System.InvalidOperationException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-265">After the value is marked as read-only, any further attempt to modify it throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="b8dc5-266"><xref:System.Security.SecureString> クラスはセキュリティで保護された文字列を再度変更可能にする手段を提供しないため、<xref:System.Security.SecureString.MakeReadOnly%2A> を呼び出す効果は永続的です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-266">The effect of invoking <xref:System.Security.SecureString.MakeReadOnly%2A> is permanent because the <xref:System.Security.SecureString> class provides no means to make the secure string modifiable again.</span></span> <span data-ttu-id="b8dc5-267"><xref:System.Security.SecureString.IsReadOnly%2A> メソッドを使用して、<xref:System.Security.SecureString> のインスタンスが読み取り専用かどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-267">Use the <xref:System.Security.SecureString.IsReadOnly%2A> method to test whether an instance of <xref:System.Security.SecureString> is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8dc5-268">次の例は、<xref:System.Security.SecureString.AppendChar%2A> および <xref:System.Security.SecureString.RemoveAt%2A> メソッドを使用して、パスワードの文字を収集する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-268">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.</span></span> <span data-ttu-id="b8dc5-269">パスワードが収集されると、読み取り専用になります。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-269">After the password is collected, it is made read-only.</span></span>  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b8dc5-270">このセキュリティ文字列は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-270">This secure string has already been disposed.</span></span></exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="secureString.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b8dc5-271">このセキュリティ文字列に含まれる文字のインデックス位置。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-271">The index position of a character in this secure string.</span></span></param>
        <summary><span data-ttu-id="b8dc5-272">このセキュリティ文字列の指定されたインデックス位置にある文字を削除します。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-272">Removes the character at the specified index position from this secure string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dc5-273">インデックスは0から始まります。このインスタンスの最初の文字のインデックス位置は0です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-273">The index is zero-based; the first character in this instance is at index position zero.</span></span>  
  
 <span data-ttu-id="b8dc5-274">実装で暗号化などの保護メカニズムが使用されている場合、このセキュリティ文字列の値 (存在する場合) は保護されません。指定したインデックス位置にある文字が削除されます。その後、新しい値が再保護されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-274">If the implementation uses a protection mechanism, such as encryption, the value of this secure string, if any, is unprotected; the character at the specified index position is removed; then the new value is re-protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8dc5-275">次の例は、<xref:System.Security.SecureString.AppendChar%2A>、<xref:System.Security.SecureString.InsertAt%2A>、<xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>、および <xref:System.Security.SecureString.Clear%2A> の各メソッドが <xref:System.Security.SecureString> オブジェクトの値にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-275">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 <span data-ttu-id="b8dc5-276">次の例は、<xref:System.Security.SecureString.AppendChar%2A> および <xref:System.Security.SecureString.RemoveAt%2A> メソッドを使用して、パスワードの文字を収集する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-276">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.</span></span>  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b8dc5-277">このセキュリティ文字列は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-277">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8dc5-278">このセキュリティ文字列は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-278">This secure string is read-only.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b8dc5-279"><paramref name="index" /> が、0 未満か、このセキュリティ文字列の長さ以上です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-279"><paramref name="index" /> is less than zero, or greater than or equal to the length of this secure string.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="b8dc5-280">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-280">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * char -&gt; unit" Usage="secureString.SetAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="b8dc5-281">このセキュリティ文字列に含まれる既存の文字のインデックス位置。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-281">The index position of an existing character in this secure string</span></span></param>
        <param name="c"><span data-ttu-id="b8dc5-282">既存の文字を置換する文字。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-282">A character that replaces the existing character.</span></span></param>
        <summary><span data-ttu-id="b8dc5-283">指定されたインデックス位置にある既存の文字を別の文字に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-283">Replaces the existing character at the specified index position with another character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b8dc5-284">インデックスは0から始まります。このインスタンスの最初の文字のインデックス位置は0です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-284">The index is zero-based; the first character in this instance is at index position zero.</span></span>  
  
 <span data-ttu-id="b8dc5-285">実装で暗号化などの保護メカニズムが使用されている場合、セキュリティで保護された文字列の値 (存在する場合) は保護されません。`c` は、指定されたインデックス位置に割り当てられます。その後、新しい値が再保護されます。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-285">If the implementation uses a protection mechanism, such as encryption, the value of the secure string, if any, is unprotected; `c` is assigned to the specified index position; then the new value is re-protected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b8dc5-286">次の例は、<xref:System.Security.SecureString.AppendChar%2A>、<xref:System.Security.SecureString.InsertAt%2A>、<xref:System.Security.SecureString.RemoveAt%2A>、<xref:System.Security.SecureString.SetAt%2A>、および <xref:System.Security.SecureString.Clear%2A> の各メソッドが <xref:System.Security.SecureString> オブジェクトの値にどのように影響するかを示しています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-286">The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.</span></span>  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="b8dc5-287">このセキュリティ文字列は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-287">This secure string has already been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="b8dc5-288">このセキュリティ文字列は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-288">This secure string is read-only.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="b8dc5-289"><paramref name="index" /> が、0 未満か、このセキュリティ文字列の長さ以上です。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-289"><paramref name="index" /> is less than zero, or greater than or equal to the length of this secure string.</span></span></exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException"><span data-ttu-id="b8dc5-290">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="b8dc5-290">An error occurred while protecting or unprotecting the value of this secure string.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
