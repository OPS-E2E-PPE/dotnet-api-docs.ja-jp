<Type Name="Clock" FullName="System.Windows.Media.Animation.Clock">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9444dff0275add94c37b58cef0148841c2a18c33" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82296120" /></Metadata><TypeSignature Language="C#" Value="public class Clock : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Clock extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.Clock" />
  <TypeSignature Language="VB.NET" Value="Public Class Clock&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class Clock : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type Clock = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="d650e-101"><see cref="T:System.Windows.Media.Animation.Timeline" /> の実行時のタイミング状態を維持します。</span><span class="sxs-lookup"><span data-stu-id="d650e-101">Maintains run-time timing state for a <see cref="T:System.Windows.Media.Animation.Timeline" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-102"><xref:System.Windows.Media.Animation.Timeline>では、時間のセグメントを記述する以外に、実際には何も実行しません。</span><span class="sxs-lookup"><span data-stu-id="d650e-102">A <xref:System.Windows.Media.Animation.Timeline>, by itself, doesn't actually do anything other than describe a segment of time.</span></span> <span data-ttu-id="d650e-103">実際の作業を行うタイムラインの <xref:System.Windows.Media.Animation.Clock> オブジェクトです。タイムラインのタイミングに関連する実行時の状態を保持します。</span><span class="sxs-lookup"><span data-stu-id="d650e-103">It's the timeline's <xref:System.Windows.Media.Animation.Clock> object that does the real work: it maintains timing-related run-time state for the timeline.</span></span>  
  
 <span data-ttu-id="d650e-104">ほとんどの場合、タイムラインに対してクロックが自動的に作成されます。</span><span class="sxs-lookup"><span data-stu-id="d650e-104">In most cases, a clock is created automatically for your timeline.</span></span> <span data-ttu-id="d650e-105"><xref:System.Windows.Media.Animation.Storyboard> または <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A> メソッドを使用してアニメーションを行うと、タイムラインとアニメーションに対して時計が自動的に作成され、対象のプロパティに適用されます。</span><span class="sxs-lookup"><span data-stu-id="d650e-105">When you animate by using a <xref:System.Windows.Media.Animation.Storyboard> or the <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%2A> method, clocks are automatically created for your timelines and animations and applied to their targeted properties.</span></span> <span data-ttu-id="d650e-106">例については、「[方法: ストーリーボードを使用してプロパティをアニメーション化](~/docs/framework/wpf/graphics-multimedia/how-to-animate-a-property-by-using-a-storyboard.md)する」および「[方法: ストーリーボードを使用せずにプロパティをアニメーション化](~/docs/framework/wpf/graphics-multimedia/how-to-animate-a-property-without-using-a-storyboard.md)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d650e-106">For examples, see [How to: Animate a Property by Using a Storyboard](~/docs/framework/wpf/graphics-multimedia/how-to-animate-a-property-by-using-a-storyboard.md) and [How to: Animate a Property Without Using a Storyboard](~/docs/framework/wpf/graphics-multimedia/how-to-animate-a-property-without-using-a-storyboard.md).</span></span>  
  
 <span data-ttu-id="d650e-107"><xref:System.Windows.Media.Animation.Timeline.CreateClock%2A> メソッドを使用して <xref:System.Windows.Media.Animation.Clock> を明示的に作成することもできます。</span><span class="sxs-lookup"><span data-stu-id="d650e-107">You can also create a <xref:System.Windows.Media.Animation.Clock> explicitly by using the <xref:System.Windows.Media.Animation.Timeline.CreateClock%2A> method.</span></span> <span data-ttu-id="d650e-108">多数の類似オブジェクトをアニメーション化するなど、パフォーマンスが集中的に使用されるシナリオでは、独自の <xref:System.Windows.Media.Animation.Clock> の使用を管理すると、パフォーマンス上の利点が得られます。</span><span class="sxs-lookup"><span data-stu-id="d650e-108">In performance-intensive scenarios, such as animating large numbers of similar objects, managing your own <xref:System.Windows.Media.Animation.Clock> use can provide performance benefits.</span></span>  
  
 <span data-ttu-id="d650e-109">クロックは、作成元の <xref:System.Windows.Media.Animation.Timeline> オブジェクトツリーの構造に一致するツリーに配置されます。</span><span class="sxs-lookup"><span data-stu-id="d650e-109">Clocks are arranged in trees that match the structure of the <xref:System.Windows.Media.Animation.Timeline> objects tree from which they are created.</span></span> <span data-ttu-id="d650e-110">このようなタイミングツリーのルートクロックは、その <xref:System.Windows.Media.Animation.Clock.Controller%2A>を取得することによって、対話的に操作 (一時停止、再開、停止など) することができます。</span><span class="sxs-lookup"><span data-stu-id="d650e-110">The root clock of such a timing tree can be interactively manipulated (paused, resumed, stopped, and so on) by retrieving its <xref:System.Windows.Media.Animation.Clock.Controller%2A>.</span></span> <span data-ttu-id="d650e-111">非ルートクロックを直接制御することはできません。</span><span class="sxs-lookup"><span data-stu-id="d650e-111">Non-root clocks cannot be directly controlled.</span></span>  
  
 <span data-ttu-id="d650e-112">作成された時計は変更できません (操作することはできます)。</span><span class="sxs-lookup"><span data-stu-id="d650e-112">Once created, a clock cannot be modified (but it can be manipulated).</span></span>  
  
## <a name="using-a-timeline-as-a-timer"></a><span data-ttu-id="d650e-113">タイムラインをタイマーとして使用する</span><span class="sxs-lookup"><span data-stu-id="d650e-113">Using a Timeline as a Timer</span></span>  
 <span data-ttu-id="d650e-114">タイムラインのクロックは、関連付けられているイベントハンドラーがある場合、または (<xref:System.Windows.Media.Animation.AnimationClock> オブジェクトの場合) プロパティに関連付けられている場合にのみ実行されます。</span><span class="sxs-lookup"><span data-stu-id="d650e-114">A timeline's clock will only progress when there's an event handler associated with it or (in the case of an <xref:System.Windows.Media.Animation.AnimationClock> object) it is associated with a property.</span></span> <span data-ttu-id="d650e-115">そのため、<xref:System.Windows.Media.Animation.Timeline> をタイマーとして使用することはお勧めしません。</span><span class="sxs-lookup"><span data-stu-id="d650e-115">For this reason (and others), it's not recommended that you use a <xref:System.Windows.Media.Animation.Timeline> as a timer.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="d650e-116">このクロックの時間フローを変更する場合は、派生クラスで <see cref="M:System.Windows.Media.Animation.Clock.GetCurrentTimeCore" /> を実装する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d650e-116">Derived classes should implement <see cref="M:System.Windows.Media.Animation.Clock.GetCurrentTimeCore" /> if they want to modify how time flows for this clock.</span></span> <span data-ttu-id="d650e-117"><see cref="M:System.Windows.Media.Animation.Clock.DiscontinuousTimeMovement" />、<see cref="M:System.Windows.Media.Animation.Clock.SpeedChanged" />、および <see cref="M:System.Windows.Media.Animation.Clock.Stopped" /> メソッドをオーバーライドすることによって、クロックの繰り返し、スキップ、シーク、開始、一時停止、再開、または停止時に、追加の作業を行うために派生クラスを作成できます。</span><span class="sxs-lookup"><span data-stu-id="d650e-117">Derived classes can be made to do additional work when the clock repeats, skips, seeks, begins, pauses, resumes, or stops by overriding the <see cref="M:System.Windows.Media.Animation.Clock.DiscontinuousTimeMovement" />, <see cref="M:System.Windows.Media.Animation.Clock.SpeedChanged" />, and <see cref="M:System.Windows.Media.Animation.Clock.Stopped" /> methods.</span></span></para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal Clock (System.Windows.Media.Animation.Timeline timeline);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Media.Animation.Timeline timeline) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.#ctor(System.Windows.Media.Animation.Timeline)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (timeline As Timeline)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; Clock(System::Windows::Media::Animation::Timeline ^ timeline);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.Animation.Clock : System.Windows.Media.Animation.Timeline -&gt; System.Windows.Media.Animation.Clock" Usage="new System.Windows.Media.Animation.Clock timeline" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="timeline" Type="System.Windows.Media.Animation.Timeline" />
      </Parameters>
      <Docs>
        <param name="timeline"><span data-ttu-id="d650e-118">このクロックの構築元となる <see cref="P:System.Windows.Media.Animation.Clock.Timeline" />。</span><span class="sxs-lookup"><span data-stu-id="d650e-118">The <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> from which this clock should be constructed.</span></span> <span data-ttu-id="d650e-119">子の <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> オブジェクトが存在する場合でも、子オブジェクトのクロックは作成されません。</span><span class="sxs-lookup"><span data-stu-id="d650e-119">Clocks are not created for any child <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> objects, if they exist.</span></span></param>
        <summary><span data-ttu-id="d650e-120">指定した <see cref="T:System.Windows.Media.Animation.Clock" /> をテンプレートとして使用して、<see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="d650e-120">Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Clock" /> class, using the specified <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> as a template.</span></span> <span data-ttu-id="d650e-121">新しい <see cref="T:System.Windows.Media.Animation.Clock" /> オブジェクトには、子がありません。</span><span class="sxs-lookup"><span data-stu-id="d650e-121">The new <see cref="T:System.Windows.Media.Animation.Clock" /> object has no children.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event EventHandler Completed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Completed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.Completed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Completed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Completed;" />
      <MemberSignature Language="F#" Value="member this.Completed : EventHandler " Usage="member this.Completed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-122">クロックの再生が完全に終了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="d650e-122">Occurs when this clock has completely finished playing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-123">このクロックがクロックツリーのルートクロックである場合、アクティブな継続時間 (繰り返しを含む) の最後に到達し、すべての子がアクティブな期間の終了に達した後に再生が完了します。</span><span class="sxs-lookup"><span data-stu-id="d650e-123">If this clock is the root clock of a clock tree, it has completed playing after it reaches the end of its active duration (which includes repeats) and all its children have reached the end of their active durations.</span></span> <span data-ttu-id="d650e-124">このクロックが子クロックの場合は、そのクロックツリーが属するクロックツリーのルートクロックがアクティブな期間の終わりに達し、すべての子クロックが再生を終了したときに、再生が完全に完了したと見なされます。</span><span class="sxs-lookup"><span data-stu-id="d650e-124">If this clock is a child clock, it is considered to have completely finished playing when the root clock of the clock tree to which it belongs reaches the end of its active duration and all its child clocks have finished playing.</span></span>  
  
 <span data-ttu-id="d650e-125">クロックを停止しても完了イベントはトリガーされませんが、塗りつぶし期間に進められます。</span><span class="sxs-lookup"><span data-stu-id="d650e-125">Stopping a clock does not trigger its completed event, but advancing it to its fill period does.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Controller">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockController Controller { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.ClockController Controller" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.Controller" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Controller As ClockController" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::ClockController ^ Controller { System::Windows::Media::Animation::ClockController ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Controller : System.Windows.Media.Animation.ClockController" Usage="System.Windows.Media.Animation.Clock.Controller" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-126">この <see cref="T:System.Windows.Media.Animation.ClockController" /> を開始、一時停止、再開、シーク、スキップ、停止、削除するために使用できる <see cref="T:System.Windows.Media.Animation.Clock" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-126">Gets a <see cref="T:System.Windows.Media.Animation.ClockController" /> that can be used to start, pause, resume, seek, skip, stop, or remove this <see cref="T:System.Windows.Media.Animation.Clock" />.</span></span></summary>
        <value><span data-ttu-id="d650e-127">これがルート クロックである場合は <see cref="T:System.Windows.Media.Animation.ClockController" />。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d650e-127">A <see cref="T:System.Windows.Media.Animation.ClockController" /> if this is a root clock; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-128">対話的に制御できるのは、ルートクロックだけです。</span><span class="sxs-lookup"><span data-stu-id="d650e-128">Only root clocks can be interactively controlled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Begin" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Resume" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Seek(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick(System.TimeSpan,System.Windows.Media.Animation.TimeSeekOrigin)" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.SkipToFill" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Stop" />
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Remove" />
      </Docs>
    </Member>
    <Member MemberName="CurrentGlobalSpeed">
      <MemberSignature Language="C#" Value="public double? CurrentGlobalSpeed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;float64&gt; CurrentGlobalSpeed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentGlobalSpeed As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;double&gt; CurrentGlobalSpeed { Nullable&lt;double&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentGlobalSpeed : Nullable&lt;double&gt;" Usage="System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-129">現実世界の時間と比較したときの、クロックの時間が現在進行しているレートを取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-129">Gets the rate at which the clock's time is currently progressing, compared to real-world time.</span></span></summary>
        <value><span data-ttu-id="d650e-130">現実世界の時間と比較したときの、クロックの時間が現在進行しているレート。</span><span class="sxs-lookup"><span data-stu-id="d650e-130">The rate at which this clock's time is current progressing, compared to real-world time.</span></span> <span data-ttu-id="d650e-131">クロックが停止している場合、このプロパティは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="d650e-131">If the clock is stopped, this property returns <see langword="null" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentGlobalSpeedInvalidated">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentGlobalSpeedInvalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentGlobalSpeedInvalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.CurrentGlobalSpeedInvalidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CurrentGlobalSpeedInvalidated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CurrentGlobalSpeedInvalidated;" />
      <MemberSignature Language="F#" Value="member this.CurrentGlobalSpeedInvalidated : EventHandler " Usage="member this.CurrentGlobalSpeedInvalidated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-132">クロックの速度が更新されると発生します。</span><span class="sxs-lookup"><span data-stu-id="d650e-132">Occurs when the clock's speed is updated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-133"><xref:System.Windows.Media.Animation.ClockController> を使用してクロックの対話速度を一時停止、再開、反転、加速、減速、シーク、停止、または変更すると、このイベントがトリガーされます。</span><span class="sxs-lookup"><span data-stu-id="d650e-133">Pausing, resuming, reversing, accelerating, decelerating, seeking, stopping, or changing a clock's interactive speed using a <xref:System.Windows.Media.Animation.ClockController> triggers this event.</span></span>  
  
 <span data-ttu-id="d650e-134">このイベントは <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A> プロパティが無効になると発生しますが、プロパティが変更されたことを意味するわけではありません。</span><span class="sxs-lookup"><span data-stu-id="d650e-134">Although this event occurs when the <xref:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed%2A> property becomes invalid, that doesn't necessarily mean the property changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
        <altmember cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" />
        <altmember cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" />
        <altmember cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio" />
        <altmember cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio" />
      </Docs>
    </Member>
    <Member MemberName="CurrentGlobalTime">
      <MemberSignature Language="C#" Value="protected TimeSpan CurrentGlobalTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan CurrentGlobalTime" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentGlobalTime" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CurrentGlobalTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property TimeSpan CurrentGlobalTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentGlobalTime : TimeSpan" Usage="System.Windows.Media.Animation.Clock.CurrentGlobalTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-135">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] タイミング システムによって確立される、現在のグローバル時刻を取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-135">Gets the current global time, as established by the [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] timing system.</span></span></summary>
        <value><span data-ttu-id="d650e-136">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] タイミング システムでの現在のグローバル時刻。</span><span class="sxs-lookup"><span data-stu-id="d650e-136">The current global time for the [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] timing system.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentIteration">
      <MemberSignature Language="C#" Value="public int? CurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; CurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentIteration As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;int&gt; CurrentIteration { Nullable&lt;int&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentIteration : Nullable&lt;int&gt;" Usage="System.Windows.Media.Animation.Clock.CurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-137">このクロックの現在の反復を取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-137">Get the current iteration of this clock.</span></span></summary>
        <value><span data-ttu-id="d650e-138">現在のアクティブな期間内の、このクロックの現在の反復。このクロックが停止している場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d650e-138">This clock's current iteration within its current active period, or <see langword="null" /> if this clock is stopped.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-139">クロックの最初の反復処理の値は1です。</span><span class="sxs-lookup"><span data-stu-id="d650e-139">A clock's first iteration has a value of 1.</span></span>  
  
 <span data-ttu-id="d650e-140">このクロックのタイムラインに `true`の <xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A> 設定が含まれている場合、完全なイテレーションは、これらのセグメントのいずれかではなく、前方逆のペアで構成されます。</span><span class="sxs-lookup"><span data-stu-id="d650e-140">If this clock's timeline has an <xref:System.Windows.Media.Animation.Timeline.AutoReverse%2A> setting of `true`, a full iteration consists of a forward-reverse pair, not just one of these segments.</span></span>  
  
 <span data-ttu-id="d650e-141">現在のイテレーションに関係なく、クロックをシークすると現在のイテレーションが1に戻ります。</span><span class="sxs-lookup"><span data-stu-id="d650e-141">Regardless of its current iteration, seeking a clock returns its current iteration to 1.</span></span> <span data-ttu-id="d650e-142">クロックを再起動すると、現在のイテレーションも1に戻ります。</span><span class="sxs-lookup"><span data-stu-id="d650e-142">Restarting a clock also returns its current iteration to 1.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" />
      </Docs>
    </Member>
    <Member MemberName="CurrentProgress">
      <MemberSignature Language="C#" Value="public double? CurrentProgress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;float64&gt; CurrentProgress" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentProgress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentProgress As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;double&gt; CurrentProgress { Nullable&lt;double&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentProgress : Nullable&lt;double&gt;" Usage="System.Windows.Media.Animation.Clock.CurrentProgress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-143">現在の反復におけるこの <see cref="T:System.Windows.Media.Animation.Clock" /> の進行状況を取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-143">Gets the current progress of this <see cref="T:System.Windows.Media.Animation.Clock" /> within its current iteration.</span></span></summary>
        <value><span data-ttu-id="d650e-144">このクロックが <see langword="null" /> の場合は <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />、またはこのクロックがアクティブであり、その <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> の <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> が <see cref="P:System.Windows.Duration.Forever" /> の場合は 0.0。それ以外の場合は、現在の反復におけるこの Clock の現在の進行状況を示す 0.0 ～ 1.0 の値。</span><span class="sxs-lookup"><span data-stu-id="d650e-144"><see langword="null" /> if this clock is <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />, or 0.0 if this clock is active and its <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> has a <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> of <see cref="P:System.Windows.Duration.Forever" />; otherwise, a value between 0.0 and 1.0 that indicates the current progress of this Clock within its current iteration.</span></span> <span data-ttu-id="d650e-145">値 0.0 はまったく進行していないことを示し、値 1.0 はクロックが現在の反復の最後にあることを示します。</span><span class="sxs-lookup"><span data-stu-id="d650e-145">A value of 0.0 indicates no progress, and a value of 1.0 indicates that the clock is at the end of its current iteration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-146">このプロパティの値は、このクロックの <xref:System.Windows.Media.Animation.Clock.Timeline%2A>の <xref:System.Windows.Media.Animation.Timeline.Duration%2A> によって正規化された <xref:System.Windows.Media.Animation.Clock.CurrentTime%2A> を示します。</span><span class="sxs-lookup"><span data-stu-id="d650e-146">The value of this property indicates the <xref:System.Windows.Media.Animation.Clock.CurrentTime%2A> normalized by the <xref:System.Windows.Media.Animation.Timeline.Duration%2A> of this clock's <xref:System.Windows.Media.Animation.Clock.Timeline%2A>.</span></span>  
  
 <span data-ttu-id="d650e-147"><xref:System.Windows.Media.Animation.ClockState.Filling> のクロックの <xref:System.Windows.Media.Animation.Clock.CurrentProgress%2A> は1.0 です。</span><span class="sxs-lookup"><span data-stu-id="d650e-147">A clock that is <xref:System.Windows.Media.Animation.ClockState.Filling> has a <xref:System.Windows.Media.Animation.Clock.CurrentProgress%2A> of 1.0.</span></span>  
  
## <a name="using-a-timeline-as-a-timer"></a><span data-ttu-id="d650e-148">タイムラインをタイマーとして使用する</span><span class="sxs-lookup"><span data-stu-id="d650e-148">Using a Timeline as a Timer</span></span>  
 <span data-ttu-id="d650e-149">タイムラインのクロックは、関連付けられているイベントハンドラーがある場合、または (<xref:System.Windows.Media.Animation.AnimationClock> オブジェクトの場合) プロパティに関連付けられている場合にのみ実行されます。</span><span class="sxs-lookup"><span data-stu-id="d650e-149">A timeline's clock will only progress when there's an event handler associated with it or (in the case of an <xref:System.Windows.Media.Animation.AnimationClock> object) it is associated with a property.</span></span> <span data-ttu-id="d650e-150">そのため、<xref:System.Windows.Media.Animation.Timeline> をタイマーとして使用することはお勧めしません。</span><span class="sxs-lookup"><span data-stu-id="d650e-150">For this reason (and others), it's not recommended that you use a <xref:System.Windows.Media.Animation.Timeline> as a timer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.ClockState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Animation.ClockState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As ClockState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::ClockState CurrentState { System::Windows::Media::Animation::ClockState get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Windows.Media.Animation.ClockState" Usage="System.Windows.Media.Animation.Clock.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.ClockState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-151">クロックが現在 <see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" />、または <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" /> であるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-151">Gets a value indicating whether the clock is currently <see cref="F:System.Windows.Media.Animation.ClockState.Active" />, <see cref="F:System.Windows.Media.Animation.ClockState.Filling" />, or <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />.</span></span></summary>
        <value><span data-ttu-id="d650e-152">クロックの現在の状態。<see cref="F:System.Windows.Media.Animation.ClockState.Active" />、<see cref="F:System.Windows.Media.Animation.ClockState.Filling" />、または <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />です。</span><span class="sxs-lookup"><span data-stu-id="d650e-152">The current state of the clock: <see cref="F:System.Windows.Media.Animation.ClockState.Active" />, <see cref="F:System.Windows.Media.Animation.ClockState.Filling" />, or <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-153">時計の <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> プロパティは、一時停止されているかどうかを知らないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d650e-153">Note the clock's <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> property doesn't tell you whether it's paused.</span></span> <span data-ttu-id="d650e-154">クロックが一時停止されているかどうかを確認するには、<xref:System.Windows.Media.Animation.Clock.IsPaused%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="d650e-154">To determine whether a clock is paused, use the <xref:System.Windows.Media.Animation.Clock.IsPaused%2A> property.</span></span>  
  
 <span data-ttu-id="d650e-155">このプロパティの値が変更されるたびに、<xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> が発生します。</span><span class="sxs-lookup"><span data-stu-id="d650e-155">The <xref:System.Windows.Media.Animation.Clock.CurrentStateInvalidated> occurs whenever the value of this property changes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Media.Animation.Clock.CurrentStateInvalidated" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalSpeed" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentGlobalTime" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentIteration" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
        <altmember cref="P:System.Windows.Media.Animation.Clock.IsPaused" />
      </Docs>
    </Member>
    <Member MemberName="CurrentStateInvalidated">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentStateInvalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentStateInvalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.CurrentStateInvalidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CurrentStateInvalidated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CurrentStateInvalidated;" />
      <MemberSignature Language="F#" Value="member this.CurrentStateInvalidated : EventHandler " Usage="member this.CurrentStateInvalidated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-156">クロックの <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> プロパティが更新されると発生します。</span><span class="sxs-lookup"><span data-stu-id="d650e-156">Occurs when the clock's <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> property is updated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-157"><xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> イベントは、クロックの開始、停止、または塗りつぶしが行われたときに通知を受け取る場合に使用します。</span><span class="sxs-lookup"><span data-stu-id="d650e-157">Use the <xref:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated> event when you want to be notified if when the clock starts, stops, or fills.</span></span> <span data-ttu-id="d650e-158"><xref:System.EventHandler> イベントハンドラーの <xref:System.Object> パラメーターは、状態が無効になった <xref:System.Windows.Media.Animation.Clock> です。</span><span class="sxs-lookup"><span data-stu-id="d650e-158">The <xref:System.Object> parameter of the <xref:System.EventHandler> event handler is the <xref:System.Windows.Media.Animation.Clock> whose state was invalidated.</span></span>  
  
 <span data-ttu-id="d650e-159"><xref:System.Windows.Media.Animation.Clock> を一時停止しても、<xref:System.Windows.Media.Animation.Clock.CurrentState%2A>は変更されません。</span><span class="sxs-lookup"><span data-stu-id="d650e-159">Pausing a <xref:System.Windows.Media.Animation.Clock> does not change its <xref:System.Windows.Media.Animation.Clock.CurrentState%2A>.</span></span> <span data-ttu-id="d650e-160">クロックが一時停止状態になったときに通知を受け取るには、<xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> イベントを使用します。</span><span class="sxs-lookup"><span data-stu-id="d650e-160">To be notified when a clock becomes paused, use the <xref:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated> event.</span></span>  
  
 <span data-ttu-id="d650e-161">このイベントは <xref:System.Windows.Media.Animation.ClockState> が無効になったときに発生しますが、<xref:System.Windows.Media.Animation.ClockState> 変更されたことを意味するわけではありません。 <xref:System.Windows.Media.Animation.ClockState.Active> から <xref:System.Windows.Media.Animation.ClockState.Filling> に切り替え、同じティックで <xref:System.Windows.Media.Animation.ClockState.Active> に戻る <xref:System.Windows.Media.Animation.Clock> は、このイベントが発生しますが、その <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> プロパティは実際には変更されません。</span><span class="sxs-lookup"><span data-stu-id="d650e-161">Although this event occurs when the <xref:System.Windows.Media.Animation.ClockState> becomes invalid, that doesn't necessarily mean the <xref:System.Windows.Media.Animation.ClockState> changed: a <xref:System.Windows.Media.Animation.Clock> that switches from <xref:System.Windows.Media.Animation.ClockState.Active> to <xref:System.Windows.Media.Animation.ClockState.Filling> and then back to <xref:System.Windows.Media.Animation.ClockState.Active> in the same tick will cause this event to fire, but its <xref:System.Windows.Media.Animation.Clock.CurrentState%2A> property won't actually change.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentState" />
        <altmember cref="T:System.Windows.Media.Animation.ClockState" />
        <altmember cref="E:System.Windows.Media.Animation.Clock.CurrentTimeInvalidated" />
      </Docs>
    </Member>
    <Member MemberName="CurrentTime">
      <MemberSignature Language="C#" Value="public TimeSpan? CurrentTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt; CurrentTime" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentTime As Nullable(Of TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;TimeSpan&gt; CurrentTime { Nullable&lt;TimeSpan&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentTime : Nullable&lt;TimeSpan&gt;" Usage="System.Windows.Media.Animation.Clock.CurrentTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.TimeSpan&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-162">このクロックの現在の反復における現在の時刻を取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-162">Gets this clock's current time within its current iteration.</span></span></summary>
        <value><span data-ttu-id="d650e-163">このクロックが <see langword="null" /> の場合は <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />。それ以外の場合は、このクロックの現在の時刻。</span><span class="sxs-lookup"><span data-stu-id="d650e-163"><see langword="null" /> if this clock is <see cref="F:System.Windows.Media.Animation.ClockState.Stopped" />; otherwise, the current time of this clock.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="using-a-timeline-as-a-timer"></a><span data-ttu-id="d650e-164">タイムラインをタイマーとして使用する</span><span class="sxs-lookup"><span data-stu-id="d650e-164">Using a Timeline as a Timer</span></span>  
 <span data-ttu-id="d650e-165">タイムラインのクロックは、関連付けられているイベントハンドラーがある場合、または (<xref:System.Windows.Media.Animation.AnimationClock> オブジェクトの場合) プロパティに関連付けられている場合にのみ実行されます。</span><span class="sxs-lookup"><span data-stu-id="d650e-165">A timeline's clock will only progress when there's an event handler associated with it or (in the case of an <xref:System.Windows.Media.Animation.AnimationClock> object) it is associated with a property.</span></span> <span data-ttu-id="d650e-166">そのため、<xref:System.Windows.Media.Animation.Timeline> をタイマーとして使用することはお勧めしません。</span><span class="sxs-lookup"><span data-stu-id="d650e-166">For this reason (and others), it's not recommended that you use a <xref:System.Windows.Media.Animation.Timeline> as a timer.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" />
      </Docs>
    </Member>
    <Member MemberName="CurrentTimeInvalidated">
      <MemberSignature Language="C#" Value="public event EventHandler CurrentTimeInvalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CurrentTimeInvalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.CurrentTimeInvalidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CurrentTimeInvalidated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CurrentTimeInvalidated;" />
      <MemberSignature Language="F#" Value="member this.CurrentTimeInvalidated : EventHandler " Usage="member this.CurrentTimeInvalidated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-167">このクロックの <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> が無効になると発生します。</span><span class="sxs-lookup"><span data-stu-id="d650e-167">Occurs when this clock's <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> becomes invalid.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-168">時計の <xref:System.Windows.Media.Animation.Clock.CurrentTime%2A> は、クロックの進行時に無効になります。</span><span class="sxs-lookup"><span data-stu-id="d650e-168">A clock's <xref:System.Windows.Media.Animation.Clock.CurrentTime%2A> becomes invalid when the clock progresses.</span></span> <span data-ttu-id="d650e-169">次の対話型操作では、<xref:System.Windows.Media.Animation.ClockController.Begin%2A>、<xref:System.Windows.Media.Animation.ClockController.SkipToFill%2A>、<xref:System.Windows.Media.Animation.ClockController.Seek%2A>、<xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>、および <xref:System.Windows.Media.Animation.ClockController.Stop%2A>の CurrentTimeInvalidated イベントもトリガーされます。</span><span class="sxs-lookup"><span data-stu-id="d650e-169">The following interactive operations also trigger the CurrentTimeInvalidated event: <xref:System.Windows.Media.Animation.ClockController.Begin%2A>, <xref:System.Windows.Media.Animation.ClockController.SkipToFill%2A>, <xref:System.Windows.Media.Animation.ClockController.Seek%2A>, <xref:System.Windows.Media.Animation.ClockController.SeekAlignedToLastTick%2A>, and <xref:System.Windows.Media.Animation.ClockController.Stop%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscontinuousTimeMovement">
      <MemberSignature Language="C#" Value="protected virtual void DiscontinuousTimeMovement ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DiscontinuousTimeMovement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.DiscontinuousTimeMovement" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DiscontinuousTimeMovement ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DiscontinuousTimeMovement();" />
      <MemberSignature Language="F#" Value="abstract member DiscontinuousTimeMovement : unit -&gt; unit&#xA;override this.DiscontinuousTimeMovement : unit -&gt; unit" Usage="clock.DiscontinuousTimeMovement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d650e-170">派生クラスで実装された場合、クロックを反復、スキップ、シークするたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d650e-170">When implemented in a derived class, will be invoked whenever a clock repeats, skips, or seeks.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCanSlip">
      <MemberSignature Language="C#" Value="protected virtual bool GetCanSlip ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool GetCanSlip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.GetCanSlip" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetCanSlip () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool GetCanSlip();" />
      <MemberSignature Language="F#" Value="abstract member GetCanSlip : unit -&gt; bool&#xA;override this.GetCanSlip : unit -&gt; bool" Usage="clock.GetCanSlip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d650e-171"><see cref="T:System.Windows.Media.Animation.Clock" /> に、タイミング システムとの同期を必要とする可能性がある専用の外部タイム ソースがあるかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="d650e-171">Returns whether the <see cref="T:System.Windows.Media.Animation.Clock" /> has its own external time source, which may require synchronization with the timing system.</span></span></summary>
        <returns><span data-ttu-id="d650e-172"><see langword="true" /> に、タイミング システムとの同期を必要とする可能性がある専用の外部タイム ソースがある場合は <see cref="T:System.Windows.Media.Animation.Clock" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d650e-172">Returns <see langword="true" /> if the <see cref="T:System.Windows.Media.Animation.Clock" /> has its own external source for time, which may require synchronization with the timing system; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-173"><xref:System.Windows.Media.Animation.Storyboard> 内の <xref:System.Windows.Media.MediaTimeline> を使用して再生されるメディアは、<xref:System.Windows.Media.Animation.Storyboard>内の他のタイムラインとの同期を必要とする可能性のある外部タイムソース (たとえばビデオクリップ) を持つ <xref:System.Windows.Media.Animation.Clock> を作成する例です。</span><span class="sxs-lookup"><span data-stu-id="d650e-173">Media being played using <xref:System.Windows.Media.MediaTimeline> within a <xref:System.Windows.Media.Animation.Storyboard> is an example of creating a <xref:System.Windows.Media.Animation.Clock> that would have an external time source (a video clip for example) which may require synchronization with other timelines within the <xref:System.Windows.Media.Animation.Storyboard>.</span></span> <span data-ttu-id="d650e-174">詳細については、「 <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> 」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d650e-174">See <xref:System.Windows.Media.Animation.ParallelTimeline.SlipBehavior%2A> for more information.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentTimeCore">
      <MemberSignature Language="C#" Value="protected virtual TimeSpan GetCurrentTimeCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TimeSpan GetCurrentTimeCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.GetCurrentTimeCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetCurrentTimeCore () As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TimeSpan GetCurrentTimeCore();" />
      <MemberSignature Language="F#" Value="abstract member GetCurrentTimeCore : unit -&gt; TimeSpan&#xA;override this.GetCurrentTimeCore : unit -&gt; TimeSpan" Usage="clock.GetCurrentTimeCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d650e-175">このクロックの現在の反復における現在の時刻を取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-175">Gets this clock's current time within its current iteration.</span></span></summary>
        <returns><span data-ttu-id="d650e-176">このクロックがアクティブな場合や保留されている場合は、クロックの現在の時刻。それ以外の場合は <see cref="F:System.TimeSpan.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="d650e-176">The current time of this clock if it is active or filling; otherwise, <see cref="F:System.TimeSpan.Zero" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-177">このメソッドは、<xref:System.Windows.Media.Animation.Clock.CurrentTime%2A> メソッドの実装で使用されます。コードから直接呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="d650e-177">This method is used in the implementation of the <xref:System.Windows.Media.Animation.Clock.CurrentTime%2A> method and should not be called directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="d650e-178">派生クラスで現在の時刻を決定する方法を変更する場合は、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="d650e-178">Derived classes should override this method if they want to modify how they determine the current time.</span></span></para></block>
        <altmember cref="P:System.Windows.Media.Animation.Clock.CurrentTime" />
      </Docs>
    </Member>
    <Member MemberName="HasControllableRoot">
      <MemberSignature Language="C#" Value="public bool HasControllableRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasControllableRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.HasControllableRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasControllableRoot As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasControllableRoot { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasControllableRoot : bool" Usage="System.Windows.Media.Animation.Clock.HasControllableRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-179">この <see cref="T:System.Windows.Media.Animation.Clock" /> が制御可能なクロック ツリーの一部かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-179">Gets a value that indicates whether this <see cref="T:System.Windows.Media.Animation.Clock" /> is part of a controllable clock tree.</span></span></summary>
        <value><span data-ttu-id="d650e-180">ルート クロックを制御可能なクロック ツリーにこのクロックが含まれる場合や、このクロック自体が制御可能なルート クロックである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d650e-180"><see langword="true" /> if this clock belongs to a clock tree with a controllable root clock or if this clock is itself a controllable root; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.IsPaused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPaused : bool" Usage="System.Windows.Media.Animation.Clock.IsPaused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-181">この <see cref="T:System.Windows.Media.Animation.Clock" /> または親が一時停止しているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-181">Gets a value that indicates whether this <see cref="T:System.Windows.Media.Animation.Clock" />, or any of its parents, is paused.</span></span></summary>
        <value><span data-ttu-id="d650e-182">この <see langword="true" /> または親が一時停止している場合は <see cref="T:System.Windows.Media.Animation.Clock" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d650e-182"><see langword="true" /> if this <see cref="T:System.Windows.Media.Animation.Clock" /> or any of its parents is paused; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Media.Animation.ClockController.Pause" />
      </Docs>
    </Member>
    <Member MemberName="NaturalDuration">
      <MemberSignature Language="C#" Value="public System.Windows.Duration NaturalDuration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Duration NaturalDuration" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.NaturalDuration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NaturalDuration As Duration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Duration NaturalDuration { System::Windows::Duration get(); };" />
      <MemberSignature Language="F#" Value="member this.NaturalDuration : System.Windows.Duration" Usage="System.Windows.Media.Animation.Clock.NaturalDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Duration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-183">このクロックの <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> の自然な継続時間を取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-183">Gets the natural duration of this clock's <see cref="P:System.Windows.Media.Animation.Clock.Timeline" />.</span></span></summary>
        <value><span data-ttu-id="d650e-184">このクロックの自然な継続時間。クロックの <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> によって決まります。</span><span class="sxs-lookup"><span data-stu-id="d650e-184">The natural duration of this clock, as determined by its <see cref="P:System.Windows.Media.Animation.Clock.Timeline" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-185">自然な継続時間の詳細については、<xref:System.Windows.Media.Animation.Timeline.GetNaturalDuration%2A?displayProperty=nameWithType> メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d650e-185">For more information about natural duration, see the <xref:System.Windows.Media.Animation.Timeline.GetNaturalDuration%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Media.Animation.Timeline.GetNaturalDuration(System.Windows.Media.Animation.Clock)" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Clock Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Clock Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Clock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Clock ^ Parent { System::Windows::Media::Animation::Clock ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Media.Animation.Clock" Usage="System.Windows.Media.Animation.Clock.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Clock</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-186">このクロックの親であるクロックを取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-186">Gets the clock that is the parent of this clock.</span></span></summary>
        <value><span data-ttu-id="d650e-187">このクロックの親、またはこのクロックがルートの場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d650e-187">The parent of this clock or <see langword="null" /> if this clock is a root.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRequested">
      <MemberSignature Language="C#" Value="public event EventHandler RemoveRequested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RemoveRequested" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Media.Animation.Clock.RemoveRequested" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RemoveRequested As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RemoveRequested;" />
      <MemberSignature Language="F#" Value="member this.RemoveRequested : EventHandler " Usage="member this.RemoveRequested : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-188">この <see cref="M:System.Windows.Media.Animation.ClockController.Remove" /> または親クロックのいずれかで <see cref="T:System.Windows.Media.Animation.Clock" /> メソッドが呼び出されると発生します。</span><span class="sxs-lookup"><span data-stu-id="d650e-188">Occurs when the <see cref="M:System.Windows.Media.Animation.ClockController.Remove" /> method is called on this <see cref="T:System.Windows.Media.Animation.Clock" /> or one of its parent clocks.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeedChanged">
      <MemberSignature Language="C#" Value="protected virtual void SpeedChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SpeedChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.SpeedChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SpeedChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SpeedChanged();" />
      <MemberSignature Language="F#" Value="abstract member SpeedChanged : unit -&gt; unit&#xA;override this.SpeedChanged : unit -&gt; unit" Usage="clock.SpeedChanged " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d650e-189">派生クラスで実装された場合、クロックを開始、スキップ、一時停止、再開するか、クロックの <see cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" /> を変更するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d650e-189">When implemented in a derived class, will be invoked whenever a clock begins, skips, pauses, resumes, or when the clock's <see cref="P:System.Windows.Media.Animation.ClockController.SpeedRatio" /> is modified.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="protected virtual void Stopped ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Stopped() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.Clock.Stopped" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Stopped ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Stopped();" />
      <MemberSignature Language="F#" Value="abstract member Stopped : unit -&gt; unit&#xA;override this.Stopped : unit -&gt; unit" Usage="clock.Stopped " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d650e-190">派生クラスで実装された場合、<see cref="M:System.Windows.Media.Animation.ClockController.Stop" /> メソッドを使用してクロックを停止するたびに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d650e-190">When implemented in a derived class, will be invoked whenever a clock is stopped using the <see cref="M:System.Windows.Media.Animation.ClockController.Stop" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeline">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Timeline Timeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Timeline Timeline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.Clock.Timeline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Timeline As Timeline" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Timeline ^ Timeline { System::Windows::Media::Animation::Timeline ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Timeline : System.Windows.Media.Animation.Timeline" Usage="System.Windows.Media.Animation.Clock.Timeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Timeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d650e-191">この <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> の作成元である <see cref="T:System.Windows.Media.Animation.Clock" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="d650e-191">Gets the <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> from which this <see cref="T:System.Windows.Media.Animation.Clock" /> was created.</span></span></summary>
        <value><span data-ttu-id="d650e-192">この <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> の作成元である <see cref="T:System.Windows.Media.Animation.Clock" />。</span><span class="sxs-lookup"><span data-stu-id="d650e-192">The <see cref="P:System.Windows.Media.Animation.Clock.Timeline" /> from which this <see cref="T:System.Windows.Media.Animation.Clock" /> was created.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d650e-193">時計の <xref:System.Windows.Media.MediaTimeline> を変更しても、時計は更新されません。変更された <xref:System.Windows.Media.Animation.Timeline>から新しいクロックを作成する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d650e-193">Modifying a clock's <xref:System.Windows.Media.MediaTimeline> does not update the clock; a new clock must be created from the modified <xref:System.Windows.Media.Animation.Timeline>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
