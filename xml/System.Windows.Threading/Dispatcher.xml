<Type Name="Dispatcher" FullName="System.Windows.Threading.Dispatcher">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b59956e2fc95a3f161b2f47961286704ce56662a" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73331302" /></Metadata><TypeSignature Language="C#" Value="public sealed class Dispatcher" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Dispatcher extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Threading.Dispatcher" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Dispatcher" />
  <TypeSignature Language="C++ CLI" Value="public ref class Dispatcher sealed" />
  <TypeSignature Language="F#" Value="type Dispatcher = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f5a0e-101">スレッドの作業項目のキューを管理するためのサービスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-101">Provides services for managing the queue of work items for a thread.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-102"><xref:System.Windows.Threading.Dispatcher> は、特定のスレッドの作業項目の優先キューを保持します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-102">The <xref:System.Windows.Threading.Dispatcher> maintains a prioritized queue of work items for a specific thread.</span></span>  
  
 <span data-ttu-id="f5a0e-103"><xref:System.Windows.Threading.Dispatcher> がスレッドで作成されると、<xref:System.Windows.Threading.Dispatcher> がシャットダウンされた場合でも、スレッドに関連付けることができる唯一の <xref:System.Windows.Threading.Dispatcher> になります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-103">When a <xref:System.Windows.Threading.Dispatcher> is created on a thread, it becomes the only <xref:System.Windows.Threading.Dispatcher> that can be associated with the thread, even if the <xref:System.Windows.Threading.Dispatcher> is shut down.</span></span>  
  
 <span data-ttu-id="f5a0e-104">現在のスレッドの <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> を取得しようとしたときに、<xref:System.Windows.Threading.Dispatcher> がスレッドに関連付けられていない場合は、<xref:System.Windows.Threading.Dispatcher> が作成されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-104">If you attempt to get the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> for the current thread and a <xref:System.Windows.Threading.Dispatcher> is not associated with the thread, a <xref:System.Windows.Threading.Dispatcher> will be created.</span></span> <span data-ttu-id="f5a0e-105"><xref:System.Windows.Threading.Dispatcher> は、<xref:System.Windows.Threading.DispatcherObject>を作成するときにも作成されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-105">A <xref:System.Windows.Threading.Dispatcher> is also created when you create a <xref:System.Windows.Threading.DispatcherObject>.</span></span> <span data-ttu-id="f5a0e-106">バックグラウンドスレッドで <xref:System.Windows.Threading.Dispatcher> を作成する場合は、スレッドを終了する前にディスパッチャーをシャットダウンしてください。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-106">If you create a <xref:System.Windows.Threading.Dispatcher> on a background thread, be sure to shut down the dispatcher before exiting the thread.</span></span>  
  
 <span data-ttu-id="f5a0e-107"><xref:System.Windows.Threading.Dispatcher> がシャットダウンされた場合、再起動することはできません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-107">If a <xref:System.Windows.Threading.Dispatcher> is shut down, it cannot be restarted.</span></span>  
  
 <span data-ttu-id="f5a0e-108">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> には、関連付けられている <xref:System.Windows.Threading.Dispatcher> によってのみアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-108">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], a <xref:System.Windows.Threading.DispatcherObject> can only be accessed by the <xref:System.Windows.Threading.Dispatcher> it is associated with.</span></span>  <span data-ttu-id="f5a0e-109">たとえば、バックグラウンドスレッドは、[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] スレッドで <xref:System.Windows.Threading.Dispatcher> に関連付けられている <xref:System.Windows.Controls.Button> の内容を更新することはできません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-109">For example, a background thread cannot update the contents of a <xref:System.Windows.Controls.Button> that is associated with the <xref:System.Windows.Threading.Dispatcher> on the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="f5a0e-110">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の <xref:System.Windows.Controls.ContentControl.Content%2A> プロパティにアクセスできるようにするには、バックグラウンドスレッドが [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-110">In order for the background thread to access the <xref:System.Windows.Controls.ContentControl.Content%2A> property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] thread.</span></span>  <span data-ttu-id="f5a0e-111">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-111">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f5a0e-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-112"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f5a0e-113">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-113">The operation is added to the queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-114">シャットダウンした <xref:System.Windows.Threading.Dispatcher> に対して <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> が呼び出された場合、返された <xref:System.Windows.Threading.DispatcherOperation> の status プロパティは <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-114">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 <span data-ttu-id="f5a0e-115"><xref:System.Windows.Threading.Dispatcher>のメソッドはすべて、<xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>を除き、フリースレッドです。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-115">All of the methods on <xref:System.Windows.Threading.Dispatcher>, with the exception of <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A>, are free-threaded.</span></span>  
  
 <span data-ttu-id="f5a0e-116"><xref:System.Windows.Threading.DispatcherObject> から派生したオブジェクトには、スレッドアフィニティがあります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-116">Objects that derive from <xref:System.Windows.Threading.DispatcherObject> have thread affinity.</span></span>  
  
 <span data-ttu-id="f5a0e-117"><xref:System.Windows.Freezable> から派生したオブジェクトは、固定されている場合はフリースレッドです。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-117">Objects that derive from <xref:System.Windows.Freezable> are free-threaded when they are frozen.</span></span>  <span data-ttu-id="f5a0e-118">詳細については、「[Freezable オブジェクトの概要](~/docs/framework/wpf/advanced/freezable-objects-overview.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-118">For more information, see [Freezable Objects Overview](~/docs/framework/wpf/advanced/freezable-objects-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5a0e-119">次の例では、<xref:System.Windows.Threading.Dispatcher>に操作を配置する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-119">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="f5a0e-120">この例の完全なソースコードについては、「[実行時間の長い計算サンプルを使用したシングルスレッドアプリケーション](https://go.microsoft.com/fwlink/?LinkID=160038)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-120">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="f5a0e-121">最初に、引数を受け取らないデリゲートが作成されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-121">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="f5a0e-122">次に、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-122">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="f5a0e-123">この <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> の呼び出しでは、<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>に設定されている priority と、デリゲート `NextPrimeDelegate`のインスタンスを介して渡されるコールバックという2つのパラメーターを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-123">This call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="f5a0e-124">実行時間の長い計算サンプルを使用したシングルスレッドアプリケーション</span><span class="sxs-lookup"><span data-stu-id="f5a0e-124">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5a0e-125"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、デリゲートを非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-125">Executes a delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-126">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-126">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f5a0e-127">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-127">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f5a0e-128">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-128">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f5a0e-129">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-129">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f5a0e-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-130"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f5a0e-131">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-131">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。そのため、呼び出された後、呼び出し元のオブジェクトに制御が直ちに戻ります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-132"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="f5a0e-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は、デリゲートがイベントキューにあるときにデリゲートと対話するために使用できる <xref:System.Windows.Threading.DispatcherOperation> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-133"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="f5a0e-134"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> によって返される <xref:System.Windows.Threading.DispatcherOperation> オブジェクトは、次のように、指定されたデリゲートと対話するいくつかの方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-134">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="f5a0e-135">イベントキューで実行が保留中であるために、デリゲートの <xref:System.Windows.Threading.DispatcherPriority> を変更します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-135">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="f5a0e-136">イベントキューからデリゲートを削除しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-136">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="f5a0e-137">デリゲートが返されるのを待機しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-137">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="f5a0e-138">実行後にデリゲートが返す値を取得しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-138">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="f5a0e-139">同じ <xref:System.Windows.Threading.DispatcherPriority>で複数の <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 呼び出しが行われた場合は、呼び出しが行われた順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-139">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="f5a0e-140">シャットダウンした <xref:System.Windows.Threading.Dispatcher> に対して <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> が呼び出された場合、返された <xref:System.Windows.Threading.DispatcherOperation> の status プロパティは <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-140">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f5a0e-141"><paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-141">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="f5a0e-142">特定のメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-142">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="f5a0e-143"><see langword="null" /> の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-143">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f5a0e-144"><see cref="T:System.Windows.Threading.Dispatcher" /> が作成されたスレッドで、指定した引数で指定したデリゲートを非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-144">Executes the specified delegate asynchronously with the specified arguments on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-145"><see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-145">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-146"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> によって返される <xref:System.Windows.Threading.DispatcherOperation> オブジェクトは、次のように、指定されたデリゲートと対話するいくつかの方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-146">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="f5a0e-147">イベントキューで実行が保留中であるために、デリゲートの <xref:System.Windows.Threading.DispatcherPriority> を変更します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-147">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="f5a0e-148">イベントキューからデリゲートを削除しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-148">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="f5a0e-149">デリゲートが返されるのを待機しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-149">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="f5a0e-150">実行後にデリゲートが返す値を取得しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-150">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="f5a0e-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。そのため、呼び出された後、呼び出し元のオブジェクトに制御が直ちに戻ります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-151"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="f5a0e-152">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-152">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="f5a0e-153">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-153">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="f5a0e-154">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-154">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="f5a0e-155">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-155">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f5a0e-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-156"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="f5a0e-157">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-157">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-158">シャットダウンした <xref:System.Windows.Threading.Dispatcher> に対して <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> が呼び出された場合、返された <xref:System.Windows.Threading.DispatcherOperation> の status プロパティは <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-158">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f5a0e-159">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-159">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="f5a0e-160">引数を受け取らないメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-160">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="f5a0e-161"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定したデリゲートを指定した優先順位で非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-161">Executes the specified delegate asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-162"><see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-162">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-163">同じ <xref:System.Windows.Threading.DispatcherPriority>で複数の <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 呼び出しが行われた場合は、呼び出しが行われた順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-163">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="f5a0e-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は、デリゲートがイベントキューにあるときにデリゲートと対話するために使用できる <xref:System.Windows.Threading.DispatcherOperation> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-164"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="f5a0e-165"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> によって返される <xref:System.Windows.Threading.DispatcherOperation> オブジェクトは、次のように、指定されたデリゲートと対話するいくつかの方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-165">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="f5a0e-166">イベントキューで実行が保留中であるために、デリゲートの <xref:System.Windows.Threading.DispatcherPriority> を変更します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-166">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="f5a0e-167">イベントキューからデリゲートを削除しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-167">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="f5a0e-168">デリゲートが返されるのを待機しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-168">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="f5a0e-169">実行後にデリゲートが返す値を取得しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-169">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="f5a0e-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。そのため、呼び出された後、呼び出し元のオブジェクトに制御が直ちに戻ります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-170"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="f5a0e-171">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-171">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f5a0e-172">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-172">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f5a0e-173">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-173">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f5a0e-174">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-174">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f5a0e-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-175"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f5a0e-176">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-176">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-177">シャットダウンした <xref:System.Windows.Threading.Dispatcher> に対して <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> が呼び出された場合、返された <xref:System.Windows.Threading.DispatcherOperation> の status プロパティは <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-177">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5a0e-178">次の例では、<xref:System.Windows.Threading.Dispatcher>に操作を配置する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-178">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="f5a0e-179">この例の完全なソースコードについては、「[実行時間の長い計算サンプルを使用したシングルスレッドアプリケーション](https://go.microsoft.com/fwlink/?LinkID=160038)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-179">For the full source code of this example, see [Single-Threaded Application with Long-Running Calculation Sample](https://go.microsoft.com/fwlink/?LinkID=160038).</span></span>  
  
 <span data-ttu-id="f5a0e-180">最初に、引数を受け取らないデリゲートが作成されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-180">First, a delegate is created that accepts no arguments.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberinit)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberinit)]   
  
 <span data-ttu-id="f5a0e-181">次に、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-181">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> is called.</span></span>  <span data-ttu-id="f5a0e-182">すべての <xref:System.Windows.Threading.DispatcherObject> には、関連付けられている <xref:System.Windows.Threading.Dispatcher> を返すプロパティがあるため、必要な <xref:System.Windows.Threading.Dispatcher> を取得するには、<xref:System.Windows.Threading.DispatcherObject>に対してクエリを実行します。この場合、<xref:System.Windows.Controls.Button> という名前の `startStopButton`です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-182">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Button> named `startStopButton`.</span></span>   <span data-ttu-id="f5a0e-183"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> の呼び出しでは、<xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>に設定されている priority と、デリゲート `NextPrimeDelegate`のインスタンスを介して渡されるコールバックという2つのパラメーターを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-183">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%29> takes two parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>, and the callback, which is passed in through an instance of the delegate `NextPrimeDelegate`.</span></span>  
  
 [!code-csharp[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingPrimeNumbers/CSharp/Window1.xaml.cs#threadingprimenumberbegininvoke)] 
 [!code-vb[ThreadingPrimeNumbers#ThreadingPrimeNumberBeginInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingPrimeNumbers/visualbasic/mainwindow.xaml.vb#threadingprimenumberbegininvoke)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f5a0e-184"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-184"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f5a0e-185"><paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-185"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="f5a0e-186">実行時間の長い計算サンプルを使用したシングルスレッドアプリケーション</span><span class="sxs-lookup"><span data-stu-id="f5a0e-186">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f5a0e-187"><paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-187">The delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-188">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-188">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="f5a0e-189">特定のメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-189">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="f5a0e-190"><see langword="null" /> の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-190">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f5a0e-191"><see cref="T:System.Windows.Threading.Dispatcher" /> が作成されたスレッドで、指定した引数を使用して指定したデリゲートを、指定した優先順位で非同期に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-191">Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the <see cref="T:System.Windows.Threading.Dispatcher" /> was created on.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-192"><see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-192">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-193"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> によって返される <xref:System.Windows.Threading.DispatcherOperation> オブジェクトは、次のように、指定されたデリゲートと対話するいくつかの方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-193">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="f5a0e-194">イベントキューで実行が保留中であるために、デリゲートの <xref:System.Windows.Threading.DispatcherPriority> を変更します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-194">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="f5a0e-195">イベントキューからデリゲートを削除しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-195">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="f5a0e-196">デリゲートが返されるのを待機しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-196">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="f5a0e-197">実行後にデリゲートが返す値を取得しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-197">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="f5a0e-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。そのため、呼び出された後、呼び出し元のオブジェクトに制御が直ちに戻ります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-198"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="f5a0e-199">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-199">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="f5a0e-200">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-200">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="f5a0e-201">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-201">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="f5a0e-202">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-202">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f5a0e-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-203"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="f5a0e-204">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-204">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-205">シャットダウンした <xref:System.Windows.Threading.Dispatcher> に対して <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> が呼び出された場合、返された <xref:System.Windows.Threading.DispatcherOperation> の status プロパティは <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-205">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f5a0e-206">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-206">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="f5a0e-207">引数を 1 つ受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-207">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="f5a0e-208">指定したメソッドに引数として渡すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-208">The object to pass as an argument to the specified method.</span></span></param>
        <summary><span data-ttu-id="f5a0e-209"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-209">Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-210"><see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-210">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-211">引数が不要な場合は、`Arg` を `null` できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-211">`Arg` can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="f5a0e-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は、デリゲートがイベントキューにあるときにデリゲートと対話するために使用できる <xref:System.Windows.Threading.DispatcherOperation> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-212"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="f5a0e-213"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> によって返される <xref:System.Windows.Threading.DispatcherOperation> オブジェクトは、次のように、指定されたデリゲートと対話するいくつかの方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-213">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="f5a0e-214">イベントキューで実行が保留中であるために、デリゲートの <xref:System.Windows.Threading.DispatcherPriority> を変更します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-214">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="f5a0e-215">イベントキューからデリゲートを削除しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-215">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="f5a0e-216">デリゲートが返されるのを待機しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-216">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="f5a0e-217">実行後にデリゲートが返す値を取得しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-217">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="f5a0e-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。そのため、呼び出された後、呼び出し元のオブジェクトに制御が直ちに戻ります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-218"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="f5a0e-219">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-219">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f5a0e-220">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-220">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f5a0e-221">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-221">In order for the background thread to access the content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f5a0e-222">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-222">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f5a0e-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-223"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f5a0e-224">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-224">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-225">同じ <xref:System.Windows.Threading.DispatcherPriority>で複数の <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 呼び出しが行われた場合は、呼び出しが行われた順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-225">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="f5a0e-226">シャットダウンした <xref:System.Windows.Threading.Dispatcher> に対して <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> が呼び出された場合、返された <xref:System.Windows.Threading.DispatcherOperation> の status プロパティは <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-226">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5a0e-227">次の例では、<xref:System.Windows.Threading.Dispatcher>に操作を配置する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-227">The following example shows how to place an operation onto a <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="f5a0e-228">まず、1つの引数 (この場合は文字列) を受け入れるデリゲートが作成されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-228">First, a delegate is created that accepts one argument, in this case a string.</span></span>  
  
 [!code-csharp[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdelegates)]
 [!code-vb[ThreadingWeatherForecast#ThreadingWeatherDelegates](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdelegates)]  
  
 <span data-ttu-id="f5a0e-229">次に、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-229">Next, <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> is called.</span></span>  <span data-ttu-id="f5a0e-230">すべての <xref:System.Windows.Threading.DispatcherObject> には、関連付けられている <xref:System.Windows.Threading.Dispatcher> を返すプロパティがあるため、必要な <xref:System.Windows.Threading.Dispatcher> を取得するには、<xref:System.Windows.Threading.DispatcherObject>に対してクエリを実行します。この場合、<xref:System.Windows.Controls.Grid> という名前の `tomorrowsWeather`です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-230">Because every <xref:System.Windows.Threading.DispatcherObject> has a property that returns the <xref:System.Windows.Threading.Dispatcher> it is associated with, the desired <xref:System.Windows.Threading.Dispatcher> is obtained by querying the <xref:System.Windows.Threading.DispatcherObject>, in this case a <xref:System.Windows.Controls.Grid> named `tomorrowsWeather`.</span></span> <span data-ttu-id="f5a0e-231"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> の呼び出しでは、3つのパラメーター (priority) が使用されます。これは <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>に設定されます。デリゲートのインスタンスを介して渡されるコールバック `OneArgDelegate`;および `weather`という名前の文字列。これは、コールバックの引数です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-231">The call to <xref:System.Windows.Threading.Dispatcher.BeginInvoke%28System.Windows.Threading.DispatcherPriority%2CSystem.Delegate%2CSystem.Object%29> takes three parameters: the priority, which is set to <xref:System.Windows.Threading.DispatcherPriority.Normal?displayProperty=nameWithType>; the callback, which is passed in through an instance of the delegate `OneArgDelegate`; and a string named `weather`, which is the argument for the callback.</span></span>  
  
 [!code-csharp[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/csharp/VS_Snippets_Wpf/ThreadingWeatherForecast/CSharp/Window1.xaml.cs#threadingweatherdispatcheronearge)]
 [!code-vb[threadingweatherforecast#ThreadingWeatherDispatcherOneArge](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ThreadingWeatherForecast/visualbasic/window1.xaml.vb#threadingweatherdispatcheronearge)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f5a0e-232"><paramref name="method" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-232"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f5a0e-233"><paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-233"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="f5a0e-234">実行時間の長い計算サンプルを使用したシングルスレッドアプリケーション</span><span class="sxs-lookup"><span data-stu-id="f5a0e-234">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation BeginInvoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation BeginInvoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ BeginInvoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.BeginInvoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f5a0e-235">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-235">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="f5a0e-236">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-236">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="f5a0e-237">指定したメソッドに引数として渡すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-237">The object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="f5a0e-238">指定したメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-238">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="f5a0e-239"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した一連の引数を使用して、指定したデリゲートを指定した優先順位で非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-239">Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-240"><see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、<see cref="T:System.Windows.Threading.Dispatcher" /> キューで実行が保留になっているデリゲートと対話できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-240">An object, which is returned immediately after <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> is called, that can be used to interact with the delegate as it is pending execution in the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-241">引数が不要な場合は、`arg` パラメーターを `null` できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-241">The `arg` parameter can be `null` if no arguments are needed.</span></span>  
  
 <span data-ttu-id="f5a0e-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は、デリゲートがイベントキューにあるときにデリゲートと対話するために使用できる <xref:System.Windows.Threading.DispatcherOperation> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-242"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> returns a <xref:System.Windows.Threading.DispatcherOperation> object that can be used to interact with the delegate when the delegate is in the event queue.</span></span>  
  
 <span data-ttu-id="f5a0e-243"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> によって返される <xref:System.Windows.Threading.DispatcherOperation> オブジェクトは、次のように、指定されたデリゲートと対話するいくつかの方法で使用できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-243">The <xref:System.Windows.Threading.DispatcherOperation> object returned by <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> can be used in several ways to interact with the specified delegate, such as:</span></span>  
  
-   <span data-ttu-id="f5a0e-244">イベントキューで実行が保留中であるために、デリゲートの <xref:System.Windows.Threading.DispatcherPriority> を変更します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-244">Changing the <xref:System.Windows.Threading.DispatcherPriority> of the delegate as it is pending execution in the event queue.</span></span>  
  
-   <span data-ttu-id="f5a0e-245">イベントキューからデリゲートを削除しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-245">Removing the delegate from the event queue.</span></span>  
  
-   <span data-ttu-id="f5a0e-246">デリゲートが返されるのを待機しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-246">Waiting for the delegate to return.</span></span>  
  
-   <span data-ttu-id="f5a0e-247">実行後にデリゲートが返す値を取得しています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-247">Obtaining the value that the delegate returns after it is executed.</span></span>  
  
 <span data-ttu-id="f5a0e-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。そのため、呼び出された後、呼び出し元のオブジェクトに制御が直ちに戻ります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-248"><xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous; therefore, control returns immediately to the calling object after it is called.</span></span>  
  
 <span data-ttu-id="f5a0e-249">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-249">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f5a0e-250">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-250">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f5a0e-251">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-251">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f5a0e-252">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-252">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f5a0e-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-253"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f5a0e-254">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-254">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-255">同じ <xref:System.Windows.Threading.DispatcherPriority>で複数の <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> 呼び出しが行われた場合は、呼び出しが行われた順序で実行されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-255">If multiple <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> calls are made at the same <xref:System.Windows.Threading.DispatcherPriority>, they will be executed in the order the calls were made.</span></span>  
  
 <span data-ttu-id="f5a0e-256">シャットダウンした <xref:System.Windows.Threading.Dispatcher> に対して <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> が呼び出された場合、返された <xref:System.Windows.Threading.DispatcherOperation> の status プロパティは <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-256">If <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is called on a <xref:System.Windows.Threading.Dispatcher> that has shut down, the status property of the returned <xref:System.Windows.Threading.DispatcherOperation> is set to <xref:System.Windows.Threading.DispatcherOperationStatus.Aborted>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f5a0e-257"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-257"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f5a0e-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> が有効な優先順位ではありません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-258"><see cref="T:System.Windows.Threading.DispatcherPriority" /> is not a valid priority.</span></span></exception>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160038"><span data-ttu-id="f5a0e-259">実行時間の長い計算サンプルを使用したシングルスレッドアプリケーション</span><span class="sxs-lookup"><span data-stu-id="f5a0e-259">Single-Threaded Application with Long-Running Calculation Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInvokeShutdown">
      <MemberSignature Language="C#" Value="public void BeginInvokeShutdown (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginInvokeShutdown(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInvokeShutdown (priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginInvokeShutdown(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.BeginInvokeShutdown : System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.BeginInvokeShutdown priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f5a0e-260">ディスパッチャーのシャットダウンを開始する優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-260">The priority at which to begin shutting down the dispatcher.</span></span></param>
        <summary><span data-ttu-id="f5a0e-261"><see cref="T:System.Windows.Threading.Dispatcher" /> のシャットダウンを非同期的に開始します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-261">Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> は、無制限の UI アクセス許可を要求します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-262"><xref:System.Windows.Threading.Dispatcher.BeginInvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="f5a0e-263"><xref:System.Windows.Threading.Dispatcher> のシャットダウンが開始されると、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted> イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> が `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-263">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="f5a0e-264">イベントキューがアンワインドされるまで、<xref:System.Windows.Threading.Dispatcher> は完全にはシャットダウンされません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-264">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="f5a0e-265">ディスパッチャーがシャットダウンを終了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished> イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> プロパティが `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-265">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="f5a0e-266">シャットダウンプロセスが開始されると、キュー内のすべての保留中の作業項目が中止されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-266">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f5a0e-267">ディスパッチャーをシャットダウンします。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-267">for shutting down the dispatcher.</span></span>  <span data-ttu-id="f5a0e-268">関連付けられた列挙型: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="f5a0e-268">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public bool CheckAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CheckAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckAccess () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CheckAccess();" />
      <MemberSignature Language="F#" Value="member this.CheckAccess : unit -&gt; bool" Usage="dispatcher.CheckAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5a0e-269">呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられたスレッドであるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-269">Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-270">呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられたスレッドである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-270"><see langword="true" /> if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-271"><xref:System.Windows.Threading.DispatcherObject> が作成された <xref:System.Windows.Threading.Dispatcher> だけがオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-271">Only the <xref:System.Windows.Threading.Dispatcher> that a <xref:System.Windows.Threading.DispatcherObject> is created on may access the object.</span></span>  <span data-ttu-id="f5a0e-272">別のスレッドからオブジェクトにアクセスするには、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> を使用します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-272">Use <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> to access the object from a different thread.</span></span>  
  
 <span data-ttu-id="f5a0e-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> は、任意のスレッドから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-273"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> can be called from any thread.</span></span>  
  
 <span data-ttu-id="f5a0e-274"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> と <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> の違いは <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> は、呼び出し元のスレッドが <xref:System.Windows.Threading.Dispatcher> にアクセスできるかどうかを示すブール値を返し、<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> が例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-274">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean indicating whether the calling thread has access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5a0e-275">次の例では、<xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> を使用して、スレッドが <xref:System.Windows.Controls.Button>にアクセスできるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-275">The following example uses <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> to determine whether a thread has access to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="f5a0e-276"><xref:System.Windows.Controls.Button> に関連付けられている <xref:System.Windows.Threading.Dispatcher> の <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> メソッドを呼び出して、スレッドへのアクセスを確認します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-276">The <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> associated with the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  <span data-ttu-id="f5a0e-277">呼び出し元のスレッドが <xref:System.Windows.Threading.Dispatcher>にアクセスできる場合、<xref:System.Windows.Controls.Button> は <xref:System.Windows.Controls.Button>のメンバーにアクセスすることによって更新されます。それ以外の場合は、引数として <xref:System.Windows.Controls.Button> を受け取るデリゲートが <xref:System.Windows.Threading.Dispatcher>に配置されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-277">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by accessing the members of the <xref:System.Windows.Controls.Button>; otherwise, a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, is placed onto the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="f5a0e-278"><xref:System.Windows.Threading.Dispatcher> は、<xref:System.Windows.Controls.Button>の更新作業を委任します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-278">The <xref:System.Windows.Threading.Dispatcher> will delegate the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccesscheckaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessCheckAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccesscheckaccess)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDispatcher">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher CurrentDispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Threading.Dispatcher CurrentDispatcher" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDispatcher As Dispatcher" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Threading::Dispatcher ^ CurrentDispatcher { System::Windows::Threading::Dispatcher ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDispatcher : System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.CurrentDispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5a0e-279">現在実行中のスレッドの <see cref="T:System.Windows.Threading.Dispatcher" /> を取得します。そのスレッドにディスパッチャーが関連付けられていない場合は、新しい <see cref="T:System.Windows.Threading.Dispatcher" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-279">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the thread currently executing and creates a new <see cref="T:System.Windows.Threading.Dispatcher" /> if one is not already associated with the thread.</span></span></summary>
        <value><span data-ttu-id="f5a0e-280">現在のスレッドに関連付けられているディスパッチャー。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-280">The dispatcher associated with the current thread.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-281"><xref:System.Windows.Threading.Dispatcher> が現在のスレッドに関連付けられていない場合は、新しい <xref:System.Windows.Threading.Dispatcher> が作成されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-281">If a <xref:System.Windows.Threading.Dispatcher> is not associated with the current thread, a new <xref:System.Windows.Threading.Dispatcher> will be created.</span></span>  <span data-ttu-id="f5a0e-282">これは、<xref:System.Windows.Threading.Dispatcher.FromThread%2A> メソッドには該当しません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-282">This is not the case with the <xref:System.Windows.Threading.Dispatcher.FromThread%2A> method.</span></span>  <span data-ttu-id="f5a0e-283">指定されたスレッドに関連付けられているディスパッチャーがない場合、<xref:System.Windows.Threading.Dispatcher.FromThread%2A> は `null` を返します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-283"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> will return `null` if there is not a dispatcher associated with the specified thread.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableProcessing">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Threading.DispatcherProcessingDisabled DisableProcessing() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.DisableProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Function DisableProcessing () As DispatcherProcessingDisabled" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherProcessingDisabled DisableProcessing();" />
      <MemberSignature Language="F#" Value="member this.DisableProcessing : unit -&gt; System.Windows.Threading.DispatcherProcessingDisabled" Usage="dispatcher.DisableProcessing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherProcessingDisabled</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5a0e-284"><see cref="T:System.Windows.Threading.Dispatcher" /> キューの処理を無効にします。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-284">Disables processing of the <see cref="T:System.Windows.Threading.Dispatcher" /> queue.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-285">ディスパッチャー処理を再度有効にするために使用される構造体。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-285">A structure used to re-enable dispatcher processing.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-286">ディスパッチャー処理の無効化は、関連性のない再入の可能性を排除することを目的とした高度な手法です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-286">Disabling dispatcher processing is an advanced method that is intended to eliminate the chance of unrelated reentrancy.</span></span>  
  
 <span data-ttu-id="f5a0e-287">処理を無効にした場合の影響は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-287">The effects of disabling processing are as follows:</span></span>  
  
-   <span data-ttu-id="f5a0e-288">CLR ロックは、内部的にメッセージをポンプしません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-288">CLR locks will not pump messages internally.</span></span>  
  
-   <span data-ttu-id="f5a0e-289"><xref:System.Windows.Threading.DispatcherFrame> オブジェクトのプッシュは許可されていません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-289"><xref:System.Windows.Threading.DispatcherFrame> objects are not allowed to be pushed.</span></span>  
  
-   <span data-ttu-id="f5a0e-290">メッセージ処理は許可されていません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-290">Message processing is not permitted.</span></span>  
  
 <span data-ttu-id="f5a0e-291">を呼び出したときに返さ <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> <xref:System.Windows.Threading.DispatcherProcessingDisabled> 構造を使用して、ディスパッチャーの処理を再度有効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-291">The <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that <xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns when it is called can be used to re-enable dispatcher processing.</span></span>  <span data-ttu-id="f5a0e-292"><xref:System.Windows.Threading.DispatcherProcessingDisabled> 構造体で <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> を呼び出すと、処理が再度有効になります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-292">Calling <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure re-enables processing.</span></span>  
  
 <span data-ttu-id="f5a0e-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> は、<xref:System.Windows.Threading.Dispatcher> が関連付けられているスレッドでのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-293"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> can only be called on the thread the <xref:System.Windows.Threading.Dispatcher> is associated with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5a0e-294">次の例では、ディスパッチャー処理を無効にして、ディスパッチャー処理を再度有効にする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-294">The following example shows how to disable dispatcher processing and re-enable dispatcher processing.</span></span>  <span data-ttu-id="f5a0e-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> は、 **using**ステートメントで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-295"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> is called in a **using** statement.</span></span>  <span data-ttu-id="f5a0e-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> は、 **using**ブロックが終了したときに破棄されるオブジェクトとして使用される <xref:System.Windows.Threading.DispatcherProcessingDisabled> 構造体を返します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-296"><xref:System.Windows.Threading.Dispatcher.DisableProcessing%2A> returns a <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure that is used as the object to be disposed when the **using** block finishes.</span></span>  <span data-ttu-id="f5a0e-297"><xref:System.Windows.Threading.DispatcherProcessingDisabled> 構造で <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> が呼び出されると、ディスパッチャーの処理が再度有効になります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-297">When <xref:System.Windows.Threading.DispatcherProcessingDisabled.Dispose%2A> is called on the <xref:System.Windows.Threading.DispatcherProcessingDisabled> structure, dispatcher processing is re-enabled.</span></span>  
  
 [!code-csharp[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdisableprocessing)]
 [!code-vb[DispatcherSnippets#DispatcherDisableProcessing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdisableprocessing)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExitAllFrames">
      <MemberSignature Language="C#" Value="public static void ExitAllFrames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitAllFrames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitAllFrames ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitAllFrames();" />
      <MemberSignature Language="F#" Value="static member ExitAllFrames : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ExitAllFrames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5a0e-298">入れ子になったフレームを含むすべてのフレームを閉じるように要求します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-298">Requests that all frames exit, including nested frames.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f5a0e-299">このメソッドを呼び出す場合は。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-299">for calling this method.</span></span> <span data-ttu-id="f5a0e-300">関連付けられた列挙型: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="f5a0e-300">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
        <altmember cref="T:System.Windows.Threading.DispatcherFrame" />
      </Docs>
    </Member>
    <Member MemberName="FromThread">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.Dispatcher FromThread (System.Threading.Thread thread);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Threading.Dispatcher FromThread(class System.Threading.Thread thread) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::Dispatcher ^ FromThread(System::Threading::Thread ^ thread);" />
      <MemberSignature Language="F#" Value="static member FromThread : System.Threading.Thread -&gt; System.Windows.Threading.Dispatcher" Usage="System.Windows.Threading.Dispatcher.FromThread thread" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.Dispatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thread" Type="System.Threading.Thread" />
      </Parameters>
      <Docs>
        <param name="thread"><span data-ttu-id="f5a0e-301"><see cref="T:System.Windows.Threading.Dispatcher" /> の取得元のスレッド。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-301">The thread to obtain the <see cref="T:System.Windows.Threading.Dispatcher" /> from.</span></span></param>
        <summary><span data-ttu-id="f5a0e-302">指定したスレッドの <see cref="T:System.Windows.Threading.Dispatcher" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-302">Gets the <see cref="T:System.Windows.Threading.Dispatcher" /> for the specified thread.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-303"><paramref name="thread" /> のディスパッチャー。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-303">The dispatcher for <paramref name="thread" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-304">指定されたスレッドでディスパッチャーが使用できない場合は、`null` が返されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-304">If a dispatcher is not available for the specified thread, `null` will be returned.</span></span>  
  
 <span data-ttu-id="f5a0e-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> は、<xref:System.Windows.Threading.Dispatcher>を持たないスレッドで <xref:System.Windows.Threading.Dispatcher> を作成しません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-305"><xref:System.Windows.Threading.Dispatcher.FromThread%2A> does not create a <xref:System.Windows.Threading.Dispatcher> on a thread that does not have a <xref:System.Windows.Threading.Dispatcher>.</span></span>   <span data-ttu-id="f5a0e-306"><xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> プロパティを使用して <xref:System.Windows.Threading.Dispatcher> を取得しようとすると、まだ <xref:System.Windows.Threading.Dispatcher> がないスレッドに新しい <xref:System.Windows.Threading.Dispatcher> が作成されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-306">A new <xref:System.Windows.Threading.Dispatcher> is created on a thread that does not already have a <xref:System.Windows.Threading.Dispatcher> when attempting to get the <xref:System.Windows.Threading.Dispatcher> by using the <xref:System.Windows.Threading.Dispatcher.CurrentDispatcher%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownFinished">
      <MemberSignature Language="C#" Value="public bool HasShutdownFinished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownFinished" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownFinished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownFinished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownFinished : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownFinished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5a0e-307"><see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを完了したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-307">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> has finished shutting down.</span></span></summary>
        <value><span data-ttu-id="f5a0e-308">ディスパッチャーがシャットダウンを完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-308"><see langword="true" /> if the dispatcher has finished shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-309"><xref:System.Windows.Threading.Dispatcher> のシャットダウンが開始されると、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted> イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> が `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-309">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="f5a0e-310">イベントキューがアンワインドされるまで、<xref:System.Windows.Threading.Dispatcher> は完全にシャットダウンされません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-310">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="f5a0e-311">ディスパッチャーがシャットダウンを終了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished> イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> プロパティが `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-311">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="f5a0e-312">シャットダウンプロセスが開始されると、キュー内のすべての保留中の作業項目が中止されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-312">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasShutdownStarted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasShutdownStarted : bool" Usage="System.Windows.Threading.Dispatcher.HasShutdownStarted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5a0e-313"><see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンしているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-313">Determines whether the <see cref="T:System.Windows.Threading.Dispatcher" /> is shutting down.</span></span></summary>
        <value><span data-ttu-id="f5a0e-314"><see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを開始した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-314"><see langword="true" /> if the <see cref="T:System.Windows.Threading.Dispatcher" /> has started shutting down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-315"><xref:System.Windows.Threading.Dispatcher> のシャットダウンが開始されると、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted> イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> が `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-315">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="f5a0e-316">イベントキューがアンワインドされるまで、<xref:System.Windows.Threading.Dispatcher> は完全にはシャットダウンされません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-316">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="f5a0e-317">ディスパッチャーがシャットダウンを終了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished> イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> プロパティが `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-317">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="f5a0e-318">シャットダウンプロセスが開始されると、キュー内のすべての保留中の作業項目が中止されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-318">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hooks">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherHooks Hooks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Threading.DispatcherHooks Hooks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Hooks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Hooks As DispatcherHooks" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Threading::DispatcherHooks ^ Hooks { System::Windows::Threading::DispatcherHooks ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Hooks : System.Windows.Threading.DispatcherHooks" Usage="System.Windows.Threading.Dispatcher.Hooks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherHooks</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5a0e-319"><see cref="T:System.Windows.Threading.Dispatcher" /> に関する追加イベント情報を提供するフックのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-319">Gets the collection of hooks that provide additional event information about the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <value><span data-ttu-id="f5a0e-320">この <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられたフック。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-320">The hooks associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-321"><xref:System.Windows.Threading.DispatcherHooks> クラスは、<xref:System.Windows.Threading.Dispatcher>に関する追加のイベント情報を提供します。たとえば、<xref:System.Windows.Threading.Dispatcher> が非アクティブな場合や、操作が発生した場合などです。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-321">The <xref:System.Windows.Threading.DispatcherHooks> class provides additional event information about the <xref:System.Windows.Threading.Dispatcher>, such as when the <xref:System.Windows.Threading.Dispatcher> is inactive or when an operation has competed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f5a0e-322">このプロパティを取得する場合は。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-322">for getting this property.</span></span>  <span data-ttu-id="f5a0e-323">関連付けられた列挙型: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="f5a0e-323">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5a0e-324"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定したデリゲートを同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-324">Executes the specified delegate synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-325">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-325">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f5a0e-326">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-326">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f5a0e-327">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-327">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f5a0e-328">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-328">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f5a0e-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-329"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f5a0e-330">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-330">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期操作です。そのため、コールバックが戻るまで、コントロールは呼び出し元のオブジェクトに戻りません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-331"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5a0e-332">次の例では、<xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用して <xref:System.Windows.Threading.DispatcherPriority.Normal> の <xref:System.Windows.Threading.Dispatcher> にデリゲートを配置します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-332">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action -&gt; unit" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f5a0e-333">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-333">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="f5a0e-334"><see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-334">Executes the specified <see cref="T:System.Action" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (callback As Action, priority As DispatcherPriority)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority -&gt; unit" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f5a0e-335">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-335">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-336"><see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-336">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="f5a0e-337"><see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-337">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f5a0e-338"><paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-338">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="args"><span data-ttu-id="f5a0e-339">特定のメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-339">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="f5a0e-340"><see langword="null" /> の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-340">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f5a0e-341"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-341">Executes the specified delegate with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-342">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-342">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-343">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-343">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="f5a0e-344">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-344">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="f5a0e-345">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-345">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="f5a0e-346">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-346">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f5a0e-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-347"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="f5a0e-348">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-348">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期操作です。そのため、コールバックが戻るまで、コントロールは呼び出し元のオブジェクトに戻りません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-349"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f5a0e-350">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-350">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="f5a0e-351">引数を受け取らないメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-351">A delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="f5a0e-352"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定したデリゲートを指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-352">Executes the specified delegate synchronously at the specified priority on the thread on which the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-353">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-353">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-354">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-354">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f5a0e-355">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-355">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f5a0e-356">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-356">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f5a0e-357">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-357">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f5a0e-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-358"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f5a0e-359">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-359">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期操作です。そのため、コールバックが戻るまで、コントロールは呼び出し元のオブジェクトに戻りません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-360"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5a0e-361">次の例では、<xref:System.Windows.Threading.Dispatcher.Invoke%2A>を使用して <xref:System.Windows.Threading.DispatcherPriority.Normal> の <xref:System.Windows.Threading.Dispatcher> にデリゲートを配置します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-361">The following example places a delegate onto a <xref:System.Windows.Threading.Dispatcher> at <xref:System.Windows.Threading.DispatcherPriority.Normal> using <xref:System.Windows.Threading.Dispatcher.Invoke%2A>.</span></span>  
  
 [!code-csharp[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/CSharp/Window1.xaml.cs#systemtimerdispatcherinvoke)]
 [!code-vb[invalidaterequerywithsystemtimer#SystemTimerDispatcherInvoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithSystemTimer/visualbasic/window1.xaml.vb#systemtimerdispatcherinvoke)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f5a0e-362"><paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-362"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f5a0e-363"><paramref name="priority" /> が有効な優先順位ではありません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-363"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f5a0e-364"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-364"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f5a0e-365">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-365">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-366"><see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-366">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f5a0e-367">アクションをキャンセルするかどうかを示すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-367">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="f5a0e-368"><see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-368">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f5a0e-369"><paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-369">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="f5a0e-370">操作が完了するまでの最大待機時間。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-370">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="args"><span data-ttu-id="f5a0e-371">特定のメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-371">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="f5a0e-372"><see langword="null" /> の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-372">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f5a0e-373"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で、指定した期間内に同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-373">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-374">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-374">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-375">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-375">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="f5a0e-376">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-376">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="f5a0e-377">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-377">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="f5a0e-378">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-378">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f5a0e-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-379"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="f5a0e-380">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-380">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期操作です。そのため、コールバックが戻るまで、コントロールは呼び出し元のオブジェクトに戻りません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-381"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f5a0e-382"><paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-382">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-383">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-383">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="f5a0e-384">特定のメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-384">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="f5a0e-385"><see langword="null" /> の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-385">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f5a0e-386"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-386">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-387">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-387">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-388">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-388">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="f5a0e-389">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-389">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="f5a0e-390">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-390">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="f5a0e-391">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-391">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f5a0e-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-392"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="f5a0e-393">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-393">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期操作です。そのため、コールバックが戻るまで、コントロールは呼び出し元のオブジェクトに戻りません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-394"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f5a0e-395">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-395">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="f5a0e-396">引数を 1 つ受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-396">A delegate to a method that takes one argument, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="f5a0e-397">指定したメソッドに引数として渡すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-397">An object to pass as an argument to the given method.</span></span></param>
        <summary><span data-ttu-id="f5a0e-398"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-398">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-399">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-399">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-400">引数が不要な場合は `Arg` を `null` ことができます</span><span class="sxs-lookup"><span data-stu-id="f5a0e-400">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="f5a0e-401">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-401">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f5a0e-402">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-402">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f5a0e-403">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-403">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f5a0e-404">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-404">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f5a0e-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-405"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f5a0e-406">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-406">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期操作です。そのため、コールバックが戻るまで、コントロールは呼び出し元のオブジェクトに戻りません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-407"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f5a0e-408"><paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-408"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f5a0e-409"><paramref name="priority" /> が有効な優先順位ではありません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-409"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f5a0e-410"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-410"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f5a0e-411">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-411">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="f5a0e-412">操作が完了するまでの最大待機時間。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-412">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="f5a0e-413">引数を受け取らないメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-413">The delegate to a method that takes no arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <summary><span data-ttu-id="f5a0e-414"><see cref="T:System.Windows.Threading.Dispatcher" /> が作成されたスレッドで、指定したタイムアウトの値を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-414">Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> was created.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-415">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-415">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-416">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-416">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f5a0e-417">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-417">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f5a0e-418">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-418">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f5a0e-419">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-419">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f5a0e-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-420"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f5a0e-421">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-421">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期操作です。そのため、コールバックが戻るまで、コントロールは呼び出し元のオブジェクトに戻りません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-422"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invoke(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; unit" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f5a0e-423">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-423">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-424"><see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-424">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f5a0e-425">アクションをキャンセルするかどうかを示すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-425">An object that indicates whether to cancel the action.</span></span></param>
        <param name="timeout"><span data-ttu-id="f5a0e-426">操作が開始されるまでの最小待機時間。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-426">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="f5a0e-427"><see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-427">Executes the specified <see cref="T:System.Action" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, TimeSpan timeout, System.Windows.Threading.DispatcherPriority priority, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method, valuetype System.TimeSpan timeout, valuetype System.Windows.Threading.DispatcherPriority priority, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, timeout As TimeSpan, priority As DispatcherPriority, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method, TimeSpan timeout, System::Windows::Threading::DispatcherPriority priority, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate * TimeSpan * System.Windows.Threading.DispatcherPriority * obj[] -&gt; obj" Usage="dispatcher.Invoke (method, timeout, priority, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f5a0e-428"><paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-428">A delegate to a method that takes parameters specified in <paramref name="args" />, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="timeout"><span data-ttu-id="f5a0e-429">操作が完了するまでの最大待機時間。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-429">The maximum amount of time to wait for the operation to complete.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-430">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-430">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="args"><span data-ttu-id="f5a0e-431">特定のメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-431">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="f5a0e-432"><see langword="null" /> の可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-432">Can be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="f5a0e-433"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で、指定した期間内に同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-433">Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-434">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-434">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-435">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-435">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span> <span data-ttu-id="f5a0e-436">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-436">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span> <span data-ttu-id="f5a0e-437">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-437">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span> <span data-ttu-id="f5a0e-438">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-438">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span> <span data-ttu-id="f5a0e-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-439"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span> <span data-ttu-id="f5a0e-440">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-440">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期操作です。そのため、コールバックが戻るまで、コントロールは呼び出し元のオブジェクトに戻りません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-441"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f5a0e-442">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-442">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="method"><span data-ttu-id="f5a0e-443">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-443">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="f5a0e-444">指定したメソッドに引数として渡すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-444">An object to pass as an argument to the given method.</span></span></param>
        <param name="args"><span data-ttu-id="f5a0e-445">特定のメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-445">An array of objects to pass as arguments to the given method.</span></span></param>
        <summary><span data-ttu-id="f5a0e-446"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-446">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-447">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-447">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-448">引数が不要な場合は `Arg` を `null` ことができます</span><span class="sxs-lookup"><span data-stu-id="f5a0e-448">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="f5a0e-449">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-449">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f5a0e-450">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-450">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f5a0e-451">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-451">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f5a0e-452">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-452">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f5a0e-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-453"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f5a0e-454">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-454">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期操作です。そのため、コールバックが戻るまで、コントロールは呼び出し元のオブジェクトに戻りません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-455"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f5a0e-456"><paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-456"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f5a0e-457"><paramref name="priority" /> が有効な優先順位ではありません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-457"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f5a0e-458"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-458"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f5a0e-459">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-459">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="f5a0e-460">操作が完了するまでの最大待機時間。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-460">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="f5a0e-461">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-461">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="f5a0e-462">指定したメソッドに引数として渡すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-462">An object to pass as an argument to the given method.</span></span> <span data-ttu-id="f5a0e-463">引数が必要ない場合は、<see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-463">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="f5a0e-464"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-464">Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-465">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-465">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-466">引数が不要な場合は `Arg` を `null` ことができます</span><span class="sxs-lookup"><span data-stu-id="f5a0e-466">`Arg` can be `null` if an argument is not needed</span></span>  
  
 <span data-ttu-id="f5a0e-467">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-467">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f5a0e-468">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-468">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f5a0e-469">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-469">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f5a0e-470">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-470">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f5a0e-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-471"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f5a0e-472">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-472">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期操作です。そのため、コールバックが戻るまで、コントロールは呼び出し元のオブジェクトに戻りません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-473"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f5a0e-474"><paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-474"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f5a0e-475"><paramref name="priority" /> が有効な優先順位ではありません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-475"><paramref name="priority" /> is not a valid priority.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f5a0e-476"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-476"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (System.Windows.Threading.DispatcherPriority priority, TimeSpan timeout, Delegate method, object arg, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.TimeSpan timeout, class System.Delegate method, object arg, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (priority As DispatcherPriority, timeout As TimeSpan, method As Delegate, arg As Object, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(System::Windows::Threading::DispatcherPriority priority, TimeSpan timeout, Delegate ^ method, System::Object ^ arg, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Windows.Threading.DispatcherPriority * TimeSpan * Delegate * obj * obj[] -&gt; obj" Usage="dispatcher.Invoke (priority, timeout, method, arg, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f5a0e-477">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-477">The priority, relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue, the specified method is invoked.</span></span></param>
        <param name="timeout"><span data-ttu-id="f5a0e-478">操作が完了するまでの最大待機時間。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-478">The maximum time to wait for the operation to finish.</span></span></param>
        <param name="method"><span data-ttu-id="f5a0e-479">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-479">A delegate to a method that takes multiple arguments, which is pushed onto the <see cref="T:System.Windows.Threading.Dispatcher" /> event queue.</span></span></param>
        <param name="arg"><span data-ttu-id="f5a0e-480">指定したメソッドに引数として渡すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-480">An object to pass as an argument to the specified method.</span></span></param>
        <param name="args"><span data-ttu-id="f5a0e-481">指定したメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-481">An array of objects to pass as arguments to the specified method.</span></span></param>
        <summary><span data-ttu-id="f5a0e-482"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-482">Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-483">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-483">The return value from the delegate being invoked or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-484">引数が不要な場合は、`Arg` を `null` できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-484">`Arg` can be `null` if an argument is not needed.</span></span>  
  
 <span data-ttu-id="f5a0e-485">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]では、<xref:System.Windows.Threading.DispatcherObject> を作成したスレッドだけがそのオブジェクトにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-485">In [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], only the thread that created a <xref:System.Windows.Threading.DispatcherObject> may access that object.</span></span>  <span data-ttu-id="f5a0e-486">たとえば、メイン UI スレッドからスピンオフされたバックグラウンドスレッドは、UI スレッドで作成された <xref:System.Windows.Controls.Button> の内容を更新できません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-486">For example, a background thread that is spun off from the main UI thread cannot update the contents of a <xref:System.Windows.Controls.Button> that was created on the UI thread.</span></span>  <span data-ttu-id="f5a0e-487">バックグラウンドスレッドが <xref:System.Windows.Controls.Button>の Content プロパティにアクセスするためには、UI スレッドに関連付けられている <xref:System.Windows.Threading.Dispatcher> に作業を委任する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-487">In order for the background thread to access the Content property of the <xref:System.Windows.Controls.Button>, the background thread must delegate the work to the <xref:System.Windows.Threading.Dispatcher> associated with the UI thread.</span></span>  <span data-ttu-id="f5a0e-488">これは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>のいずれかを使用して実現されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-488">This is accomplished by using either <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A>.</span></span>  <span data-ttu-id="f5a0e-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期的であり、<xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> は非同期です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-489"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is synchronous and <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is asynchronous.</span></span>  <span data-ttu-id="f5a0e-490">操作は、指定された <xref:System.Windows.Threading.DispatcherPriority>にある <xref:System.Windows.Threading.Dispatcher> のイベントキューに追加されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-490">The operation is added to the event queue of the <xref:System.Windows.Threading.Dispatcher> at the specified <xref:System.Windows.Threading.DispatcherPriority>.</span></span>  
  
 <span data-ttu-id="f5a0e-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> は同期操作です。そのため、コールバックが戻るまで、コントロールは呼び出し元のオブジェクトに戻りません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-491"><xref:System.Windows.Threading.Dispatcher.Invoke%2A> is a synchronous operation; therefore, control will not return to the calling object until after the callback returns.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f5a0e-492"><paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-492"><paramref name="priority" /> is equal to <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f5a0e-493"><paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-493"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f5a0e-494"><paramref name="method" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-494"><paramref name="method" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; -&gt; 'Result" Usage="dispatcher.Invoke callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f5a0e-495">指定されたデリゲートの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-495">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f5a0e-496">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-496">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="f5a0e-497"><see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-497">Executes the specified <see cref="T:System.Func`1" /> synchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-498">`callback`によって返される値。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-498">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f5a0e-499">指定されたデリゲートの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-499">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f5a0e-500">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-500">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-501"><see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-501">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="f5a0e-502"><see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-502">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-503">`callback`によって返される値。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-503">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f5a0e-504">指定されたデリゲートの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-504">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f5a0e-505">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-505">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-506"><see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-506">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f5a0e-507">操作をキャンセルするかどうかを示すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-507">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="f5a0e-508"><see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-508">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-509">`callback`によって返される値。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-509">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public TResult Invoke&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TResult Invoke&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; TResult Invoke(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken * TimeSpan -&gt; 'Result" Usage="dispatcher.Invoke (callback, priority, cancellationToken, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="timeout" Type="System.TimeSpan" Index="3" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f5a0e-510">指定されたデリゲートの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-510">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f5a0e-511">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-511">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-512"><see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-512">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f5a0e-513">操作をキャンセルするかどうかを示すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-513">An object that indicates whether to cancel the operation.</span></span></param>
        <param name="timeout"><span data-ttu-id="f5a0e-514">操作が開始されるまでの最小待機時間。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-514">The minimum amount of time to wait for the operation to start.</span></span></param>
        <summary><span data-ttu-id="f5a0e-515"><see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-515">Executes the specified <see cref="T:System.Func`1" /> synchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-516">`callback`によって返される値。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-516">The value returned by `callback`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5a0e-517"><see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定したデリゲートを非同期に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-517">Executes the specified delegate asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f5a0e-518">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-518">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="f5a0e-519"><see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を非同期に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-519">Executes the specified <see cref="T:System.Action" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-520"><see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-520">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync (callback As Action, priority As DispatcherPriority) As DispatcherOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f5a0e-521">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-521">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-522"><see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-522">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="f5a0e-523"><see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-523">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-524"><see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-524">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation InvokeAsync (Action callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation InvokeAsync(class System.Action callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Threading::DispatcherOperation ^ InvokeAsync(Action ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Action * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Action" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="f5a0e-525">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-525">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-526"><see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-526">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f5a0e-527">アクションをキャンセルするかどうかを示すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-527">An object that indicates whether to cancel the action.</span></span></param>
        <summary><span data-ttu-id="f5a0e-528"><see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-528">Executes the specified <see cref="T:System.Action" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-529"><see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-529">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult)) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f5a0e-530">指定されたデリゲートの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-530">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f5a0e-531">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-531">A delegate to invoke through the dispatcher.</span></span></param>
        <summary><span data-ttu-id="f5a0e-532"><see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を非同期に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-532">Executes the specified <see cref="T:System.Func`1" /> asynchronously on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-533"><see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-533">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of TResult) (callback As Func(Of TResult), priority As DispatcherPriority) As DispatcherOperation(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f5a0e-534">指定されたデリゲートの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-534">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f5a0e-535">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-535">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-536"><see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-536">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <summary><span data-ttu-id="f5a0e-537"><see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-537">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-538"><see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-538">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Windows.Threading.DispatcherOperation&lt;TResult&gt; InvokeAsync&lt;TResult&gt; (Func&lt;TResult&gt; callback, System.Windows.Threading.DispatcherPriority priority, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Threading.DispatcherOperation`1&lt;!!TResult&gt; InvokeAsync&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; callback, valuetype System.Windows.Threading.DispatcherPriority priority, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Windows::Threading::DispatcherOperation&lt;TResult&gt; ^ InvokeAsync(Func&lt;TResult&gt; ^ callback, System::Windows::Threading::DispatcherPriority priority, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : Func&lt;'Result&gt; * System.Windows.Threading.DispatcherPriority * System.Threading.CancellationToken -&gt; System.Windows.Threading.DispatcherOperation&lt;'Result&gt;" Usage="dispatcher.InvokeAsync (callback, priority, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherOperation&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="f5a0e-539">指定されたデリゲートの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-539">The return value type of the specified delegate.</span></span></typeparam>
        <param name="callback"><span data-ttu-id="f5a0e-540">ディスパッチャーを通じて呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-540">A delegate to invoke through the dispatcher.</span></span></param>
        <param name="priority"><span data-ttu-id="f5a0e-541"><see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-541">The priority that determines in what order the specified callback is invoked relative to the other pending operations in the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="f5a0e-542">操作をキャンセルするかどうかを示すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-542">An object that indicates whether to cancel the operation.</span></span></param>
        <summary><span data-ttu-id="f5a0e-543"><see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-543">Executes the specified <see cref="T:System.Func`1" /> asynchronously at the specified priority on the thread the <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-544"><see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-544">An object, which is returned immediately after <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> is called, that can be used to interact with the delegate as it is pending execution in the event queue.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeShutdown">
      <MemberSignature Language="C#" Value="public void InvokeShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeShutdown();" />
      <MemberSignature Language="F#" Value="member this.InvokeShutdown : unit -&gt; unit" Usage="dispatcher.InvokeShutdown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5a0e-545"><see cref="T:System.Windows.Threading.Dispatcher" /> のシャットダウン プロセスを同期的に開始します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-545">Initiates the shutdown process of the <see cref="T:System.Windows.Threading.Dispatcher" /> synchronously.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> は、無制限の UI アクセス許可を要求します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-546"><xref:System.Windows.Threading.Dispatcher.InvokeShutdown%2A> demands unrestricted UI Permissions.</span></span>  
  
 <span data-ttu-id="f5a0e-547"><xref:System.Windows.Threading.Dispatcher> のシャットダウンが開始されると、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted> イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> が `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-547">When the <xref:System.Windows.Threading.Dispatcher> starts to shut down, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="f5a0e-548">イベントキューがアンワインドされるまで、<xref:System.Windows.Threading.Dispatcher> は完全にはシャットダウンされません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-548">The <xref:System.Windows.Threading.Dispatcher> does not shut down completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="f5a0e-549">ディスパッチャーがシャットダウンを終了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished> イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> プロパティが `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-549">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="f5a0e-550">シャットダウンプロセスが開始されると、キュー内のすべての保留中の作業項目が中止されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-550">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f5a0e-551">ディスパッチャーをシャットダウンします。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-551">for shutting down the dispatcher.</span></span>  <span data-ttu-id="f5a0e-552">関連付けられた列挙型: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="f5a0e-552">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PushFrame">
      <MemberSignature Language="C#" Value="public static void PushFrame (System.Windows.Threading.DispatcherFrame frame);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushFrame(class System.Windows.Threading.DispatcherFrame frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub PushFrame (frame As DispatcherFrame)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PushFrame(System::Windows::Threading::DispatcherFrame ^ frame);" />
      <MemberSignature Language="F#" Value="static member PushFrame : System.Windows.Threading.DispatcherFrame -&gt; unit" Usage="System.Windows.Threading.Dispatcher.PushFrame frame" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frame" Type="System.Windows.Threading.DispatcherFrame" />
      </Parameters>
      <Docs>
        <param name="frame"><span data-ttu-id="f5a0e-553">ディスパッチャーが処理するフレーム。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-553">The frame for the dispatcher to process.</span></span></param>
        <summary><span data-ttu-id="f5a0e-554">実行ループに入ります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-554">Enters an execute loop.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-555"><xref:System.Windows.Threading.DispatcherFrame> は、保留中の作業項目を処理するループを表します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-555">A <xref:System.Windows.Threading.DispatcherFrame> represents a loop that processes pending work items.</span></span>  
  
 <span data-ttu-id="f5a0e-556">ディスパッチャーは、ループ内の作業項目キューを処理します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-556">The Dispatcher processes the work item queue in a loop.</span></span>  <span data-ttu-id="f5a0e-557">ループはフレームと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-557">The loop is referred to as a frame.</span></span>  <span data-ttu-id="f5a0e-558">最初のループは、通常、<xref:System.Windows.Threading.Dispatcher.Run%2A>を呼び出すことによってアプリケーションによって開始されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-558">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="f5a0e-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> パラメーター `frame`によって表されるループに入ります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-559"><xref:System.Windows.Threading.Dispatcher.PushFrame%2A> enters a loop represented by the parameter `frame`.</span></span>  <span data-ttu-id="f5a0e-560">ループが反復処理されるたびに、<xref:System.Windows.Threading.Dispatcher> は <xref:System.Windows.Threading.DispatcherFrame> クラスの <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> プロパティをチェックして、ループを続行するかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-560">At each iteration of the loop, the <xref:System.Windows.Threading.Dispatcher> will check the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property on the <xref:System.Windows.Threading.DispatcherFrame> class to determine whether the loop should continue or if it should stop.</span></span>  
  
 <span data-ttu-id="f5a0e-561"><xref:System.Windows.Threading.DispatcherFrame> を使用すると、<xref:System.Windows.Threading.DispatcherFrame.Continue%2A> プロパティを明示的に設定し、<xref:System.Windows.Threading.Dispatcher>の <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> プロパティを尊重できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-561"><xref:System.Windows.Threading.DispatcherFrame> allows for the <xref:System.Windows.Threading.DispatcherFrame.Continue%2A> property to be set explicitly and it respects the <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> property on the <xref:System.Windows.Threading.Dispatcher>.</span></span>  <span data-ttu-id="f5a0e-562">つまり、<xref:System.Windows.Threading.Dispatcher> のシャットダウンが開始されると、既定の <xref:System.Windows.Threading.DispatcherFrame> 実装を使用するフレームは終了します。これにより、入れ子になったすべてのフレームを終了できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-562">This means when the <xref:System.Windows.Threading.Dispatcher> starts to shut down, frames that use the default <xref:System.Windows.Threading.DispatcherFrame> implementation will exit, which enables all nested frames to exit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5a0e-563">次の例では、<xref:System.Windows.Threading.DispatcherFrame> を使用して、[!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> メソッドと同様の結果を得る方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-563">The following example shows how to use a <xref:System.Windows.Threading.DispatcherFrame> to achieve similar results as the [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span>  
  
 [!code-csharp[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherSnippets/CSharp/Window1.xaml.cs#dispatcherdispatcherframedoevents)]
 [!code-vb[dispatchersnippets#DispatcherDispatcherFrameDoEvents](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherSnippets/visualbasic/window1.xaml.vb#dispatcherdispatcherframedoevents)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="f5a0e-564"><paramref name="frame" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-564"><paramref name="frame" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f5a0e-565"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> は <see langword="true" /> です</span><span class="sxs-lookup"><span data-stu-id="f5a0e-565"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> is <see langword="true" /></span></span>  
  
<span data-ttu-id="f5a0e-566">- または -</span><span class="sxs-lookup"><span data-stu-id="f5a0e-566">-or-</span></span> 
 <span data-ttu-id="f5a0e-567"><paramref name="frame" /> が別の <see cref="T:System.Windows.Threading.Dispatcher" /> で実行されています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-567"><paramref name="frame" /> is running on a different <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span>  
  
<span data-ttu-id="f5a0e-568">- または -</span><span class="sxs-lookup"><span data-stu-id="f5a0e-568">-or-</span></span> 
<span data-ttu-id="f5a0e-569">ディスパッチャー処理が無効になっています。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-569">Dispatcher processing has been disabled.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f5a0e-570">実行フレームをプッシュするために使用します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-570">for pushing an execution frame.</span></span>  <span data-ttu-id="f5a0e-571">関連付けられた列挙型: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="f5a0e-571">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Windows.Threading.Dispatcher.ExitAllFrames" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Threading.Dispatcher.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5a0e-572">メイン実行フレームを <see cref="T:System.Windows.Threading.Dispatcher" /> のイベント キューにプッシュします。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-572">Pushes the main execution frame on the event queue of the <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-573"><xref:System.Windows.Threading.Dispatcher> は、ループ内のイベントキューを処理します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-573">The <xref:System.Windows.Threading.Dispatcher> processes the event queue in a loop.</span></span>  <span data-ttu-id="f5a0e-574">ループはフレームと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-574">The loop is referred to as a frame.</span></span>  <span data-ttu-id="f5a0e-575">最初のループは、通常、<xref:System.Windows.Threading.Dispatcher.Run%2A>を呼び出すことによってアプリケーションによって開始されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-575">The initial loop is typically initiated by the application by calling <xref:System.Windows.Threading.Dispatcher.Run%2A>.</span></span>  
  
 <span data-ttu-id="f5a0e-576">メインの実行フレームは、<xref:System.Windows.Threading.Dispatcher> がシャットダウンされるまで続行されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-576">The main execution frame will continue until the <xref:System.Windows.Threading.Dispatcher> is shutdown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownFinished">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownFinished" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownFinished As EventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownFinished;" />
      <MemberSignature Language="F#" Value="member this.ShutdownFinished : EventHandler " Usage="member this.ShutdownFinished : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownFinished As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5a0e-577"><see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを完了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-577">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> finishes shutting down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-578"><xref:System.Windows.Threading.Dispatcher> のシャットダウンプロセスが開始されると、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted> イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> が `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-578">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="f5a0e-579">イベントキューがアンワインドされるまで、<xref:System.Windows.Threading.Dispatcher> は完全にシャットダウンされません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-579">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="f5a0e-580">ディスパッチャーがシャットダウンを終了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished> イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> プロパティが `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-580">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="f5a0e-581">シャットダウンプロセスが開始されると、キュー内のすべての保留中の作業項目が中止されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-581">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStarted">
      <MemberSignature Language="C#" Value="public event EventHandler ShutdownStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ShutdownStarted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.ShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ShutdownStarted As EventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ShutdownStarted;" />
      <MemberSignature Language="F#" Value="member this.ShutdownStarted : EventHandler " Usage="member this.ShutdownStarted : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event ShutdownStarted As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5a0e-582"><see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを開始すると発生します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-582">Occurs when the <see cref="T:System.Windows.Threading.Dispatcher" /> begins to shut down.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-583"><xref:System.Windows.Threading.Dispatcher> のシャットダウンプロセスが開始されると、<xref:System.Windows.Threading.Dispatcher.ShutdownStarted> イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> が `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-583">When the shutdown process of a <xref:System.Windows.Threading.Dispatcher> is started, the <xref:System.Windows.Threading.Dispatcher.ShutdownStarted> event is raised and <xref:System.Windows.Threading.Dispatcher.HasShutdownStarted%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="f5a0e-584">イベントキューがアンワインドされるまで、<xref:System.Windows.Threading.Dispatcher> は完全にシャットダウンされません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-584">The <xref:System.Windows.Threading.Dispatcher> does not shutdown completely until the event queue unwinds.</span></span>  
  
 <span data-ttu-id="f5a0e-585">ディスパッチャーがシャットダウンを終了すると、<xref:System.Windows.Threading.Dispatcher.ShutdownFinished> イベントが発生し、<xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> プロパティが `true`に設定されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-585">When the Dispatcher finishes shutting down, the <xref:System.Windows.Threading.Dispatcher.ShutdownFinished> event is raised and the <xref:System.Windows.Threading.Dispatcher.HasShutdownFinished%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="f5a0e-586">シャットダウンプロセスが開始されると、キュー内のすべての保留中の作業項目が中止されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-586">Once the shutdown process begins, all pending work items in the queue are aborted.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Threading.Dispatcher.HasShutdownStarted" />
        <altmember cref="E:System.Windows.Threading.Dispatcher.ShutdownFinished" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" />
        <altmember cref="M:System.Windows.Threading.Dispatcher.InvokeShutdown" />
      </Docs>
    </Member>
    <Member MemberName="Thread">
      <MemberSignature Language="C#" Value="public System.Threading.Thread Thread { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Thread Thread" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Threading.Dispatcher.Thread" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Thread As Thread" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Thread ^ Thread { System::Threading::Thread ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Thread : System.Threading.Thread" Usage="System.Windows.Threading.Dispatcher.Thread" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5a0e-587">この <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-587">Gets the thread this <see cref="T:System.Windows.Threading.Dispatcher" /> is associated with.</span></span></summary>
        <value><span data-ttu-id="f5a0e-588">スレッド。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-588">The thread.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netcore-3.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.Windows.Threading.DispatcherUnhandledExceptionEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event UnhandledException As DispatcherUnhandledExceptionEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5a0e-589"><see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> または <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> を使用したデリゲートの実行中にスローされたスレッドの例外をキャッチできないときに発生します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-589">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-590">このイベントは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> によるデリゲートの実行中にスローされた例外がキャッチされない場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-590">This event is raised when an exception that was thrown during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> is uncaught.</span></span>  
  
 <span data-ttu-id="f5a0e-591">ハンドラーは例外を処理済みとしてマークできます。これにより、内部例外ハンドラーが呼び出されなくなります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-591">A handler can mark the exception as handled, which will prevent the internal exception handler from being called.</span></span>  
  
 <span data-ttu-id="f5a0e-592">このイベントのイベントハンドラーは、セカンダリ例外を作成せず、発生したものをキャッチするために注意して記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-592">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span> <span data-ttu-id="f5a0e-593">ハンドラーでメモリを割り当てたり、リソースを大量に消費する操作を実行したりしないようにすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-593">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="f5a0e-594"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> イベントは、<xref:System.Windows.Threading.Dispatcher.UnhandledException> イベントを発生させない手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-594">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="f5a0e-595">最初に <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> イベントが発生し、<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> の <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> が `false`に設定されている場合、<xref:System.Windows.Threading.Dispatcher.UnhandledException> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-595">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledExceptionFilter">
      <MemberSignature Language="C#" Value="public event System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler UnhandledExceptionFilter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledExceptionFilter As DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Threading::DispatcherUnhandledExceptionFilterEventHandler ^ UnhandledExceptionFilter;" />
      <MemberSignature Language="F#" Value="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " Usage="member this.UnhandledExceptionFilter : System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f5a0e-596">フィルター段階で <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> または <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> を使用したデリゲートの実行中にスローされたスレッドの例外をキャッチできないときに発生します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-596">Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> or <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> when in the filter stage.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-597">このイベントは、<xref:System.Windows.Threading.Dispatcher.Invoke%2A> または <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> によるデリゲートの実行中に発生し、キャッチされない例外のフィルター段階で発生します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-597">This event is raised during the filter stage for an exception that is raised during execution of a delegate by way of <xref:System.Windows.Threading.Dispatcher.Invoke%2A> or <xref:System.Windows.Threading.Dispatcher.BeginInvoke%2A> and is uncaught.</span></span>  
  
 <span data-ttu-id="f5a0e-598">この時点では、呼び出し履歴はアンワインドされません (初回例外)。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-598">The call stack is not unwound at this point (first-chance exception).</span></span>  
  
 <span data-ttu-id="f5a0e-599">このイベントのイベントハンドラーは、セカンダリ例外を作成せず、発生したものをキャッチするために注意して記述する必要があります。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-599">Event handlers for this event must be written with care to avoid creating secondary exceptions and to catch any that occur.</span></span>  <span data-ttu-id="f5a0e-600">ハンドラーでメモリを割り当てたり、リソースを大量に消費する操作を実行したりしないようにすることをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-600">It is recommended to avoid allocating memory or doing any resource intensive operations in the handler.</span></span>  
  
 <span data-ttu-id="f5a0e-601"><xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> イベントは、<xref:System.Windows.Threading.Dispatcher.UnhandledException> イベントを発生させない手段を提供します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-601">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event provides a means to not raise the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event.</span></span>  <span data-ttu-id="f5a0e-602">最初に <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> イベントが発生し、<xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> の <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> が `false`に設定されている場合、<xref:System.Windows.Threading.Dispatcher.UnhandledException> イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-602">The <xref:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter> event is raised first, and If <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch%2A> on the <xref:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs> is set to `false`, the <xref:System.Windows.Threading.Dispatcher.UnhandledException> event will not be raised.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="f5a0e-603">このイベントのハンドラーを追加または削除します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-603">for adding or removing a handler for this event.</span></span>  <span data-ttu-id="f5a0e-604">関連付けられた列挙型: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="f5a0e-604">Associated enumerations:  <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler" />
        <altmember cref="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ValidatePriority">
      <MemberSignature Language="C#" Value="public static void ValidatePriority (System.Windows.Threading.DispatcherPriority priority, string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidatePriority(valuetype System.Windows.Threading.DispatcherPriority priority, string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ValidatePriority (priority As DispatcherPriority, parameterName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ValidatePriority(System::Windows::Threading::DispatcherPriority priority, System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="static member ValidatePriority : System.Windows.Threading.DispatcherPriority * string -&gt; unit" Usage="System.Windows.Threading.Dispatcher.ValidatePriority (priority, parameterName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" />
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f5a0e-605">確認する対象の優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-605">The priority to check.</span></span></param>
        <param name="parameterName"><span data-ttu-id="f5a0e-606">優先順位が無効な場合に発生する例外によって返される文字列。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-606">A string that will be returned by the exception that occurs if the priority is invalid.</span></span></param>
        <summary><span data-ttu-id="f5a0e-607">指定した <see cref="T:System.Windows.Threading.DispatcherPriority" /> が有効な優先順位かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-607">Determines whether the specified <see cref="T:System.Windows.Threading.DispatcherPriority" /> is a valid priority.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="f5a0e-608"><paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-608"><paramref name="priority" /> is not a valid <see cref="T:System.Windows.Threading.DispatcherPriority" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="VerifyAccess">
      <MemberSignature Language="C#" Value="public void VerifyAccess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyAccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.VerifyAccess" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyAccess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyAccess();" />
      <MemberSignature Language="F#" Value="member this.VerifyAccess : unit -&gt; unit" Usage="dispatcher.VerifyAccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5a0e-609">呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.Dispatcher" /> にアクセスできるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-609">Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-610"><xref:System.Windows.Threading.Dispatcher>にアクセスできるのは、<xref:System.Windows.Threading.Dispatcher> が作成されたスレッドだけです。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-610">Only the thread the <xref:System.Windows.Threading.Dispatcher> is created on may access the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="f5a0e-611">このメソッドはパブリックです。したがって、どのスレッドも、<xref:System.Windows.Threading.Dispatcher>にアクセスできるかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-611">This method is public; therefore, any thread can check to see whether it has access to the <xref:System.Windows.Threading.Dispatcher>.</span></span>  
  
 <span data-ttu-id="f5a0e-612"><xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> と <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> の違いは <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> は、呼び出し元のスレッドが <xref:System.Windows.Threading.Dispatcher> にアクセスできず、<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> が例外をスローした場合にブール値を返します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-612">The difference between <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> is <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A> returns a Boolean if the calling thread does not have access to the <xref:System.Windows.Threading.Dispatcher> and <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f5a0e-613">次の例では、<xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> を使用して、<xref:System.Windows.Controls.Button> が作成されたスレッドにスレッドがアクセスできるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-613">The following example uses <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> to determine whether a thread has access to the thread that a <xref:System.Windows.Controls.Button> was created on.</span></span>  <span data-ttu-id="f5a0e-614">メソッドは、オブジェクトを引数として受け取ります。これは <xref:System.Windows.Controls.Button>にキャストされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-614">The method takes an object as an argument, which is cast to a <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="f5a0e-615"><xref:System.Windows.Controls.Button> の <xref:System.Windows.Threading.Dispatcher> の <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> メソッドを呼び出して、スレッドへのアクセスを確認します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-615">The <xref:System.Windows.Threading.Dispatcher.VerifyAccess%2A> method on the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button> is called to verify access to the thread.</span></span>  
  
 <span data-ttu-id="f5a0e-616">呼び出し元のスレッドが <xref:System.Windows.Threading.Dispatcher>にアクセスできる場合、<xref:System.Windows.Controls.Button> は <xref:System.Windows.Controls.Button>のメンバーにアクセスするだけで更新されます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-616">If the calling thread has access to the <xref:System.Windows.Threading.Dispatcher>, the <xref:System.Windows.Controls.Button> is updated by just accessing the members of the <xref:System.Windows.Controls.Button>.</span></span>  
  
 <span data-ttu-id="f5a0e-617">呼び出し元のスレッドにアクセス権がない場合は、<xref:System.InvalidOperationException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-617">If the calling thread does not have access, an <xref:System.InvalidOperationException> is thrown.</span></span>  <span data-ttu-id="f5a0e-618">この例では、例外をキャッチし、<xref:System.Windows.Controls.Button> を引数として受け取るデリゲートを <xref:System.Windows.Controls.Button>の <xref:System.Windows.Threading.Dispatcher> にプッシュします。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-618">This example catches the exception and pushes a delegate, which accepts a <xref:System.Windows.Controls.Button> as an argument, onto the <xref:System.Windows.Threading.Dispatcher> of the <xref:System.Windows.Controls.Button>.</span></span>  <span data-ttu-id="f5a0e-619">この <xref:System.Windows.Threading.Dispatcher> は、<xref:System.Windows.Controls.Button>の更新作業を行います。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-619">This <xref:System.Windows.Threading.Dispatcher> will do the work of updating the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-csharp[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/csharp/VS_Snippets_Wpf/DispatcherAccessSample/CSharp/Window1.xaml.cs#dispatcheraccessverifyaccess)]
 [!code-vb[DispatcherAccessSample#DispatcherAccessVerifyAccess](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DispatcherAccessSample/visualbasic/window1.xaml.vb#dispatcheraccessverifyaccess)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f5a0e-620">呼び出し元のスレッドは、この <see cref="T:System.Windows.Threading.Dispatcher" /> にアクセスできません。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-620">The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.</span></span></exception>
        <altmember cref="M:System.Windows.Threading.Dispatcher.CheckAccess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Yield">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f5a0e-621">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-621">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f5a0e-622">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-622">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-623">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-623">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-624">このメソッドは、他の処理 (他のイベントの処理など) を実行できるように、現在のディスパッチャーに対して実行コントロールを一時的に解放する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-624">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="f5a0e-625">戻り値に対する `await`、または Visual Basic 演算子の `Await` を使用して、現在のディスパッチャーに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-625">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="f5a0e-626">アプリが UI スレッドで大量の作業を行っている間に、アプリでイベントを処理できるようにするには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-626">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="f5a0e-627">たとえば、このメソッドは、コントロールを更新する実行時間の長いループで使用できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-627">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 <span data-ttu-id="f5a0e-628">このメソッドは、<xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> メソッドを呼び出し、<xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>を渡すことと同じです。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-628">This method is equivalent to calling the <xref:System.Windows.Threading.Dispatcher.Yield%28System.Windows.Threading.DispatcherPriority%29> method and passing in <xref:System.Windows.Threading.DispatcherPriority.Background?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Windows.Threading.DispatcherPriorityAwaitable Yield (System.Windows.Threading.DispatcherPriority priority);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Threading.DispatcherPriorityAwaitable Yield(valuetype System.Windows.Threading.DispatcherPriority priority) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield (priority As DispatcherPriority) As DispatcherPriorityAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Threading::DispatcherPriorityAwaitable Yield(System::Windows::Threading::DispatcherPriority priority);" />
      <MemberSignature Language="F#" Value="static member Yield : System.Windows.Threading.DispatcherPriority -&gt; System.Windows.Threading.DispatcherPriorityAwaitable" Usage="System.Windows.Threading.Dispatcher.Yield priority" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Threading.DispatcherPriorityAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="priority" Type="System.Windows.Threading.DispatcherPriority" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="priority"><span data-ttu-id="f5a0e-629">継続をスケジュールする優先順位。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-629">The priority at which to schedule the continuation.</span></span></param>
        <summary><span data-ttu-id="f5a0e-630">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-630">Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span>  <span data-ttu-id="f5a0e-631">このメソッドの結果を待機するコードにコントロールが戻り、指定された優先度がスケジュールされたときに実行される処理。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-631">The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.</span></span></summary>
        <returns><span data-ttu-id="f5a0e-632">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-632">An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f5a0e-633">このメソッドは、他の処理 (他のイベントの処理など) を実行できるように、現在のディスパッチャーに対して実行コントロールを一時的に解放する方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-633">This method provides a way for you to temporarily release execution control to the current dispatcher so it can do other work, such as process other events.</span></span> <span data-ttu-id="f5a0e-634">戻り値に対する `await`、または Visual Basic 演算子の `Await` を使用して、現在のディスパッチャーに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-634">Use the `await`, or `Await` in Visual Basic, operator on the return value to return control to the current dispatcher.</span></span> <span data-ttu-id="f5a0e-635">アプリが UI スレッドで大量の作業を行っている間に、アプリでイベントを処理できるようにするには、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-635">Use this method if want to give your app a chance to process events while you app is doing a lot of work on the UI thread.</span></span> <span data-ttu-id="f5a0e-636">たとえば、このメソッドは、コントロールを更新する実行時間の長いループで使用できます。</span><span class="sxs-lookup"><span data-stu-id="f5a0e-636">For example, you can use this method in a long-running loop that updates a control.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
