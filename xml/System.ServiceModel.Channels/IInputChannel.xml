<Type Name="IInputChannel" FullName="System.ServiceModel.Channels.IInputChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df475694ef5740d753b57726bde12769082523cd" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83974843" /></Metadata><TypeSignature Language="C#" Value="public interface IInputChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInputChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IInputChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInputChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInputChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IInputChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.6.0.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.7.0.0" FrameworkAlternate="dotnet-plat-ext-3.1;dotnet-plat-ext-5.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c3617-101">チャネルがメッセージを受信するために実装する必要があるインターフェイスを定義します。</span><span class="sxs-lookup"><span data-stu-id="c3617-101">Defines the interface that a channel must implement to receive a message.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="c3617-102"><xref:System.ServiceModel.Channels.IInputChannel> コントラクトには、受信、受信試行、およびメッセージ待機の各機能の同期と非同期のバリエーションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="c3617-102">The <xref:System.ServiceModel.Channels.IInputChannel> contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="c3617-103"><xref:System.ServiceModel.Channels.IInputChannel> では、通常、メッセージを受信するためにプル モデルを使用します。<xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> を呼び出して (チャネルからメッセージを "プル" して)、メッセージが到着するのを待ちます。</span><span class="sxs-lookup"><span data-stu-id="c3617-103">The pull model is used typically with an <xref:System.ServiceModel.Channels.IInputChannel> to receive messages: you call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> (to "pull" a message out of the channel) and then wait for a message to arrive.</span></span> <span data-ttu-id="c3617-104">もう 1 つの使用パターンは、<xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> または <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> を呼び出した後、<xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29> を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c3617-104">An alternative usage pattern is to call <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> or <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29>, and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%28System.TimeSpan%29>.</span></span> <span data-ttu-id="c3617-105">この方法は、<xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> と <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> の呼び出しの間でトランザクションを開始するトランザクション使用に共通です。</span><span class="sxs-lookup"><span data-stu-id="c3617-105">This approach is common for transactional usages where you start the transaction between the calls to <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> and <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="c3617-106"><xref:System.ServiceModel.Channels.IInputChannel> は、必ずしも単一の送信元にバインドされているとは限りません。</span><span class="sxs-lookup"><span data-stu-id="c3617-106">An <xref:System.ServiceModel.Channels.IInputChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="c3617-107">他のチャネルおよびチャネル インターフェイスが特定の送信元と <xref:System.ServiceModel.Channels.IInputChannel> の間の相関関係を提供できますが、基本コントラクトにはそのような制限はありません。</span><span class="sxs-lookup"><span data-stu-id="c3617-107">Other channels and channel interfaces can provide a correlation between particular senders and an <xref:System.ServiceModel.Channels.IInputChannel>, but the base contract makes no such restriction.</span></span> <span data-ttu-id="c3617-108">実装では、メッセージごとに新しい <xref:System.ServiceModel.Channels.IInputChannel> を作成することも、複数のメッセージと送信元に対して同じ <xref:System.ServiceModel.Channels.IInputChannel> を再利用することもできます。</span><span class="sxs-lookup"><span data-stu-id="c3617-108">An implementation can create a new <xref:System.ServiceModel.Channels.IInputChannel> for each message or reuse the same <xref:System.ServiceModel.Channels.IInputChannel> for multiple messages and senders.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c3617-109">非同期の受信操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="c3617-109">Begins an asynchronous receive operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3617-110">要求の受信を待たずにアプリケーションの処理を継続する場合は、非同期の <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-110">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="c3617-111">要求メッセージを受信するか、`timeout` で指定された時間が経過するまで、現在のスレッドがブロックされてもかまわない場合は、同期 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-111">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="c3617-112">非同期操作は、明示的なタイムアウトの指定の有無にかかわらず、使用できます。</span><span class="sxs-lookup"><span data-stu-id="c3617-112">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="c3617-113">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="c3617-113">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="c3617-114">非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="c3617-114">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c3617-115">状態オブジェクトが関連付けられているメッセージを受信するための非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="c3617-115">Begins an asynchronous operation to receive a message that has a state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="c3617-116">非同期メッセージ受信を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-116">The <see cref="T:System.IAsyncResult" /> that references the asynchronous message reception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3617-117">要求の受信を待たずにアプリケーションの処理を継続する場合は、非同期の <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-117">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="c3617-118">要求メッセージを受信するか、`timeout` で指定された時間が経過するまで、現在のスレッドがブロックされてもかまわない場合は、同期 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-118">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="c3617-119">非同期操作は、明示的なタイムアウトの指定の有無にかかわらず、使用できます。</span><span class="sxs-lookup"><span data-stu-id="c3617-119">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c3617-120">このメソッドは、コールバックを通じて操作のイベント ハンドラー ID の通知を受信します。</span><span class="sxs-lookup"><span data-stu-id="c3617-120">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="c3617-121">操作は、チャネルのメッセージが利用可能になるまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="c3617-121">The operation is not complete until a message becomes available in the channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3617-122">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="c3617-122">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#15](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c3617-123">メッセージが利用可能になるまでの待機時間を指定する <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-123">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="c3617-124">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="c3617-124">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="c3617-125">非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="c3617-125">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c3617-126">タイムアウトが指定され、状態オブジェクトが関連付けられているメッセージを受信するための、非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="c3617-126">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="c3617-127">非同期受信の操作を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-127">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3617-128">要求の受信を待たずにアプリケーションの処理を継続する場合は、非同期の <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-128">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span> <span data-ttu-id="c3617-129">要求メッセージを受信するか、`timeout` で指定された時間が経過するまで、現在のスレッドがブロックされてもかまわない場合は、同期 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-129">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until the request message is received or the interval of time specified by the `timeout` has been exceeded.</span></span> <span data-ttu-id="c3617-130">非同期操作は、明示的なタイムアウトの指定の有無にかかわらず、使用できます。</span><span class="sxs-lookup"><span data-stu-id="c3617-130">The asynchronous operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c3617-131">この操作は、チャネルでメッセージを使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="c3617-131">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3617-132">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="c3617-132">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#16](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c3617-133">操作が完了する前に、指定した <paramref name="timeout" /> が経過しました。</span><span class="sxs-lookup"><span data-stu-id="c3617-133">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3617-134">指定したタイムアウトの値が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="c3617-134">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3617-135">操作が完了する前に指定の <see cref="T:System.TimeoutException" /> を超えた場合に、<paramref name="timeout" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="c3617-135">The operation throws a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before it completes.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceive">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceive (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceive(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceive (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceive(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceive : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginTryReceive (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c3617-136">メッセージが利用可能になるまでの待機時間を指定する <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-136">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="c3617-137">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="c3617-137">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="c3617-138">非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="c3617-138">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c3617-139">タイムアウトが指定され、状態オブジェクトが関連付けられているメッセージを受信するための、非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="c3617-139">Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="c3617-140">非同期受信の操作を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-140">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3617-141">待機せずにアプリケーションの処理を継続する必要がある場合は、非同期の <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-141">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you want the application processing to continue without waiting.</span></span> <span data-ttu-id="c3617-142">要求メッセージに応答している間、またはタイムアウト期間が経過するまで、現在のスレッドがブロックされてもかまわない場合は、同期 <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-142">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> method when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="c3617-143">この操作は、チャネルでメッセージを使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="c3617-143">The operation is not complete until either a message becomes available in the channel or the timeout occurs.</span></span>  
  
 <span data-ttu-id="c3617-144">単に <xref:System.TimeoutException> を際スローまたはラップするのではなく、タイムアウトを処理する場合は、<xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> ではなく <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="c3617-144">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.BeginTryReceive%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>.</span></span>  
  
 <span data-ttu-id="c3617-145">タイムアウトの特別な処理を行わない場合は、単に <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> を呼び出します。そうしないと、エラー情報が失われます。</span><span class="sxs-lookup"><span data-stu-id="c3617-145">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A>, otherwise you lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3617-146">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="c3617-146">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#19](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c3617-147">操作が完了する前に、指定した <paramref name="timeout" /> が経過しました。</span><span class="sxs-lookup"><span data-stu-id="c3617-147">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3617-148">指定したタイムアウトの値が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="c3617-148">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3617-149">指定した <see langword="false" /> が経過した場合、操作は <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> から <paramref name="timeout" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="c3617-149">The operation returns <see langword="false" /> from <see cref="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForMessage">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForMessage (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForMessage(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForMessage (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForMessage(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForMessage : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iInputChannel.BeginWaitForMessage (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c3617-150">メッセージが利用可能になるまでの待機時間を指定する <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-150">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for a message to become available.</span></span></param>
        <param name="callback"><span data-ttu-id="c3617-151">非同期操作の完了通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="c3617-151">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous operation completion.</span></span></param>
        <param name="state"><span data-ttu-id="c3617-152">非同期操作に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="c3617-152">An object, specified by the application, that contains state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="c3617-153">タイムアウトが指定され、状態オブジェクトが関連付けられている、非同期メッセージ受信待機操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="c3617-153">Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="c3617-154">メッセージが到着するのを待機するための非同期操作を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-154">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a message to arrive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3617-155">メッセージの到着を待たずにアプリケーションの処理を継続する必要がある場合は、非同期の <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-155">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method if you need the application processing to continue without waiting for the message to arrive.</span></span> <span data-ttu-id="c3617-156">メッセージのキューへの到達を待機している間に、現在のスレッドがブロックされてもかまわない場合は、同期の <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-156">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="c3617-157">スレッドは、指定した `timeout` までブロックされます。</span><span class="sxs-lookup"><span data-stu-id="c3617-157">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="c3617-158">このメソッドは、コールバックを通じて操作のイベント ハンドラー ID の通知を受信します。</span><span class="sxs-lookup"><span data-stu-id="c3617-158">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="c3617-159">この操作は、チャネルでメッセージを使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="c3617-159">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3617-160">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="c3617-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#22](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c3617-161">操作が完了する前に、指定した <paramref name="timeout" /> が経過しました。</span><span class="sxs-lookup"><span data-stu-id="c3617-161">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3617-162">指定したタイムアウトの値が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="c3617-162">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3617-163">指定した <see langword="false" /> が経過した場合、操作は、タイムアウト例外ではなく <paramref name="timeout" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="c3617-163">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndReceive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message EndReceive (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message EndReceive(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceive (result As IAsyncResult) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ EndReceive(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceive : IAsyncResult -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.EndReceive result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="c3617-164">いずれかの <see cref="T:System.IAsyncResult" /> メソッドへの呼び出しで返された <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-164">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span></span></param>
        <summary><span data-ttu-id="c3617-165">メッセージを受信するための非同期操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="c3617-165">Completes an asynchronous operation to receive a message.</span></span></summary>
        <returns><span data-ttu-id="c3617-166">受信した <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-166">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3617-167">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="c3617-167">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#17](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceive">
      <MemberSignature Language="C#" Value="public bool EndTryReceive (IAsyncResult result, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceive(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceive (result As IAsyncResult, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceive(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceive : IAsyncResult * Message -&gt; bool" Usage="iInputChannel.EndTryReceive (result, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="c3617-168"><see cref="T:System.IAsyncResult" /> メソッドの呼び出しで返された <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-168">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <param name="message"><span data-ttu-id="c3617-169">受信した <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-169">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></param>
        <summary><span data-ttu-id="c3617-170">メッセージを受信するための指定した非同期操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="c3617-170">Completes the specified asynchronous operation to receive a message.</span></span></summary>
        <returns><span data-ttu-id="c3617-171">指定した期間が経過する前にメッセージを受信する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-171"><see langword="true" /> if a message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3617-172">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="c3617-172">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#20](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForMessage">
      <MemberSignature Language="C#" Value="public bool EndWaitForMessage (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForMessage(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForMessage (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForMessage(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForMessage : IAsyncResult -&gt; bool" Usage="iInputChannel.EndWaitForMessage result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="c3617-173"><see cref="T:System.IAsyncResult" /> 操作が完了したことを識別して、それから最終結果を取得する <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-173">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="c3617-174">指定した非同期のメッセージ待機操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="c3617-174">Completes the specified asynchronous wait-for-a-message operation.</span></span></summary>
        <returns><span data-ttu-id="c3617-175"><see langword="true" /> が経過する前にメッセージを受信した場合は <paramref name="timeout" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-175"><see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c3617-176">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="c3617-176">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#23](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IInputChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c3617-177">入力チャネルがメッセージを受信するアドレスを取得します。</span><span class="sxs-lookup"><span data-stu-id="c3617-177">Gets the address on which the input channel receives messages.</span></span></summary>
        <value><span data-ttu-id="c3617-178">入力チャネルがメッセージを受信する <see cref="T:System.ServiceModel.EndpointAddress" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-178">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which the input channel receives messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3617-179">この入力チャネルがスタンドアロン アドレスを持っていない場合 (たとえば、クライアントが開始する TCP チャネルの入力側)、このプロパティは `null` です。</span><span class="sxs-lookup"><span data-stu-id="c3617-179">If this input channel does not have a standalone address (for example, it is the input-side of a client-initiated TCP channel), then this property is `null`.</span></span>  
  
 <span data-ttu-id="c3617-180">上位レベルのチャネルは、このプロパティを使用して相関できます。</span><span class="sxs-lookup"><span data-stu-id="c3617-180">This property can be used by higher-level channels for correlation purposes.</span></span> <span data-ttu-id="c3617-181">たとえば、上位レベルのチャネルが <xref:System.ServiceModel.Channels.IDuplexChannel> の上に要求/応答を実装している場合は、WS-Addressing の ReplyTo ヘッダーで <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> プロパティを使用できます。</span><span class="sxs-lookup"><span data-stu-id="c3617-181">For example, if a higher-level channel implements request-reply on top of a <xref:System.ServiceModel.Channels.IDuplexChannel>, it can use the <xref:System.ServiceModel.Channels.IInputChannel.LocalAddress%2A> property in the WS-Addressing ReplyTo header.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3617-182">このプロパティを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="c3617-182">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#12](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Receive">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.ServiceProcess.TimeoutException"><span data-ttu-id="c3617-183">タイムアウト期間内に操作が完了しませんでした。</span><span class="sxs-lookup"><span data-stu-id="c3617-183">The operation did not complete with the timeout interval.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationException"><span data-ttu-id="c3617-184">入力チャネルでエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="c3617-184">The input channel failed.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectAbortedException"><span data-ttu-id="c3617-185">入力チャネルは中止されました。</span><span class="sxs-lookup"><span data-stu-id="c3617-185">The input channel has been aborted.</span></span></exception>
        <exception cref="T:System.ServiceModel.CommunicationObjectFaultedException"><span data-ttu-id="c3617-186">入力チャネルでエラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="c3617-186">The input channel faulted.</span></span></exception>
        <summary><span data-ttu-id="c3617-187">明示的または暗黙的に定義されている期間内で利用できるメッセージがある場合、チャネルで受信されたメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="c3617-187">Returns a message received by the input channel, if one is available with an interval of time that is explicitly or implicitly defined.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3617-188">要求メッセージを受信するか、`timeout` で指定された期間が経過するまで、現在のスレッドがブロックされてもかまわない場合は、同期 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-188">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="c3617-189">要求の受信を待たずにアプリケーションの処理を継続する必要がある場合は、非同期の <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-189">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you need the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="c3617-190">同期 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 操作は、明示的なタイムアウトの指定の有無にかかわらず、使用できます。</span><span class="sxs-lookup"><span data-stu-id="c3617-190">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c3617-191">メッセージが利用できない場合は、いずれかのメッセージが利用可能になるか、タイムアウトが経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="c3617-191">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive();" />
      <MemberSignature Language="F#" Value="abstract member Receive : unit -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c3617-192">利用できるメッセージがある場合、受信したメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="c3617-192">Returns the message received, if one is available.</span></span> <span data-ttu-id="c3617-193">メッセージが利用できない場合は、既定の時間が経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="c3617-193">If a message is not available, blocks for a default interval of time.</span></span></summary>
        <returns><span data-ttu-id="c3617-194">受信した <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-194">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3617-195">要求メッセージを受信するか、`timeout` で指定された期間が経過するまで、現在のスレッドがブロックされてもかまわない場合は、同期 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-195">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="c3617-196">要求の受信を待たずにアプリケーションの処理を継続する場合は、非同期の <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-196">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="c3617-197">同期 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 操作は、明示的なタイムアウトの指定の有無にかかわらず、使用できます。</span><span class="sxs-lookup"><span data-stu-id="c3617-197">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c3617-198">メッセージが利用できない場合は、いずれかのメッセージが利用可能になるか、タイムアウトが経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="c3617-198">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="c3617-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> は、複数回または同時に呼び出しできます。</span><span class="sxs-lookup"><span data-stu-id="c3617-199"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="c3617-200">受信したメッセージごとに、<xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 呼び出しを 1 つだけ完了できます。</span><span class="sxs-lookup"><span data-stu-id="c3617-200">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3617-201">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="c3617-201">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#13](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.Message Receive (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.Message Receive(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Receive (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::Message ^ Receive(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Receive : TimeSpan -&gt; System.ServiceModel.Channels.Message" Usage="iInputChannel.Receive timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c3617-202">受信操作を完了する必要がある制限時間を指定する <see cref="T:System.TimeSpan" />。この時間を経過すると、タイムアウトして <see cref="T:System.TimeoutException" /> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="c3617-202">The <see cref="T:System.TimeSpan" /> that specifies how long the receive operation has to complete before timing out and throwing a <see cref="T:System.TimeoutException" />.</span></span></param>
        <summary><span data-ttu-id="c3617-203">利用できるメッセージがある場合、受信したメッセージを返します。</span><span class="sxs-lookup"><span data-stu-id="c3617-203">Returns the message received, if one is available.</span></span> <span data-ttu-id="c3617-204">メッセージが利用できない場合は、指定した時間が経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="c3617-204">If a message is not available, blocks for a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="c3617-205">受信した <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-205">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3617-206">要求メッセージを受信するか、`timeout` で指定された期間が経過するまで、現在のスレッドがブロックされてもかまわない場合は、同期 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-206">Use the synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> method when it is acceptable for the current thread to be blocked until it receives the request message or exceeds the interval of time specified by `timeout`.</span></span> <span data-ttu-id="c3617-207">要求の受信を待たずにアプリケーションの処理を継続する場合は、非同期の <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-207">Use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginReceive%2A> method when you want the application processing to continue without waiting for the request to be received.</span></span>  
  
 <span data-ttu-id="c3617-208">同期 <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 操作は、明示的なタイムアウトの指定の有無にかかわらず、使用できます。</span><span class="sxs-lookup"><span data-stu-id="c3617-208">The synchronous <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> operation is available with or without an explicit timeout.</span></span>  
  
 <span data-ttu-id="c3617-209">メッセージが利用できない場合は、いずれかのメッセージが利用可能になるか、タイムアウトが経過するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="c3617-209">If a message is not available, it blocks until one is available or until the timeout is exceeded.</span></span>  
  
 <span data-ttu-id="c3617-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> は、複数回または同時に呼び出しできます。</span><span class="sxs-lookup"><span data-stu-id="c3617-210"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="c3617-211">受信したメッセージごとに、<xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> 呼び出しを 1 つだけ完了できます。</span><span class="sxs-lookup"><span data-stu-id="c3617-211">Only one <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> call can complete for each message received.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3617-212">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="c3617-212">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#14](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c3617-213">操作が完了する前に、指定した <paramref name="timeout" /> が経過しました。</span><span class="sxs-lookup"><span data-stu-id="c3617-213">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3617-214">指定したタイムアウトの値が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="c3617-214">The timeout specified is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (TimeSpan timeout, out System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceive (timeout As TimeSpan, ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceive(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member TryReceive : TimeSpan * Message -&gt; bool" Usage="iInputChannel.TryReceive (timeout, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c3617-215">いずれかの <see cref="T:System.IAsyncResult" /> メソッドへの呼び出しで返された <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-215">The <see cref="T:System.IAsyncResult" /> returned by a call to one of the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> methods.</span></span></param>
        <param name="message"><span data-ttu-id="c3617-216">受信した <see cref="T:System.ServiceModel.Channels.Message" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-216">The <see cref="T:System.ServiceModel.Channels.Message" /> received.</span></span></param>
        <summary><span data-ttu-id="c3617-217">指定された時間内にメッセージの受信を試みます。</span><span class="sxs-lookup"><span data-stu-id="c3617-217">Tries to receive a message within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="c3617-218"><paramref name="timeout" /> が経過する前にメッセージを受信した場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-218"><see langword="true" /> if a message is received before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3617-219">単に <xref:System.TimeoutException> を際スローまたはラップするのではなく、タイムアウトを処理する場合は、<xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> ではなく <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> を呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="c3617-219">If you are going to handle timeouts and not just re-throw or wrap the <xref:System.TimeoutException>, then you should call <xref:System.ServiceModel.Channels.IInputChannel.TryReceive%28System.TimeSpan%2CSystem.ServiceModel.Channels.Message%40%29> instead of <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>.</span></span>  
  
 <span data-ttu-id="c3617-220">タイムアウトの特別な処理を行わない場合は、単に <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> を呼び出します。そうしないと、エラー情報が失われます。</span><span class="sxs-lookup"><span data-stu-id="c3617-220">If you are not going to treat timeouts specially then just call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A>, otherwise you will lose error information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3617-221">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="c3617-221">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#18](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c3617-222">操作が完了する前に、指定した <paramref name="timeout" /> が経過しました。</span><span class="sxs-lookup"><span data-stu-id="c3617-222">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3617-223">指定したタイムアウトの値が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="c3617-223">The timeout specified is less than zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitForMessage">
      <MemberSignature Language="C#" Value="public bool WaitForMessage (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForMessage(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForMessage (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForMessage(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForMessage : TimeSpan -&gt; bool" Usage="iInputChannel.WaitForMessage timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="c3617-224"><see cref="T:System.TimeSpan" /> は、メッセージ到着の待機がタイムアウトするまでの最大時間を指定します。</span><span class="sxs-lookup"><span data-stu-id="c3617-224">The <see cref="T:System.TimeSpan" /> specifies the maximum interval of time to wait for a message to arrive before timing out.</span></span></param>
        <summary><span data-ttu-id="c3617-225">指定した時間内にメッセージが到着したかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="c3617-225">Returns a value that indicates whether a message has arrived within a specified interval of time.</span></span></summary>
        <returns><span data-ttu-id="c3617-226"><see langword="true" /> が経過する前にメッセージを受信した場合は <paramref name="timeout" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c3617-226"><see langword="true" /> if a message has arrived before the <paramref name="timeout" /> has been exceeded; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c3617-227"><xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> を呼び出しても、メッセージの受信または処理は行われません。</span><span class="sxs-lookup"><span data-stu-id="c3617-227">Calling <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> does not result in a message being received or processed in any other way.</span></span>  
  
 <span data-ttu-id="c3617-228"><xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> メソッドは、主にユーザーがトランザクションを使用してメッセージを受信するようなトランザクション処理のシナリオで使用されます。</span><span class="sxs-lookup"><span data-stu-id="c3617-228">The <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="c3617-229"><xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> だけをそのために普通に使用するときは、トランザクションを作成した後、<xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> を呼び出して、トランザクションがタイムアウトする前にメッセージが到着することを期待する必要があります。到着しない可能性もあります。</span><span class="sxs-lookup"><span data-stu-id="c3617-229">When using just <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> normally for this, the user must create the transaction and then call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="c3617-230">代わりに、<xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> を呼び出して適当なタイムアウト (無限も可能) を指定し、メッセージが到着してからトランザクションを開き、<xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> を呼び出して、トランザクションがタイムアウトする前に確実にメッセージを返すこともできます。</span><span class="sxs-lookup"><span data-stu-id="c3617-230">Instead, the user can call <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> with whatever time out they want (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IInputChannel.Receive%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="c3617-231">このメソッドは同期メソッドであるため、メッセージが利用可能になるか、タイムアウトが発生するまで、現在のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="c3617-231">This method is synchronous, so it blocks the current thread until a message is available or the time out occurs.</span></span> <span data-ttu-id="c3617-232">キューにメッセージが到達するまで待機する間、現在のスレッドがブロックされてもいい場合は、<xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> を使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-232">Use <xref:System.ServiceModel.Channels.IInputChannel.WaitForMessage%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="c3617-233">スレッドは、指定した `timeout` までブロックされます。</span><span class="sxs-lookup"><span data-stu-id="c3617-233">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="c3617-234">待機せずにアプリケーションの処理を継続する必要がある場合は、非同期の <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c3617-234">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c3617-235">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="c3617-235">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#21](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingduplexchannel.cs#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TimeoutException"><span data-ttu-id="c3617-236">操作が完了する前に、指定した <paramref name="timeout" /> が経過しました。</span><span class="sxs-lookup"><span data-stu-id="c3617-236">The specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c3617-237">指定したタイムアウトの値が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="c3617-237">The timeout specified is less than zero.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="c3617-238">指定した <see langword="false" /> が経過した場合、操作は、タイムアウト例外ではなく <paramref name="timeout" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="c3617-238">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded, not a timeout exception.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
