<Type Name="IChannelFactory&lt;TChannel&gt;" FullName="System.ServiceModel.Channels.IChannelFactory&lt;TChannel&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7648212bdf19295ccc521a784d21f608e8fe52f4" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78794298" /></Metadata><TypeSignature Language="C#" Value="public interface IChannelFactory&lt;TChannel&gt; : System.ServiceModel.Channels.IChannelFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IChannelFactory`1&lt;TChannel&gt; implements class System.ServiceModel.Channels.IChannelFactory, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IChannelFactory`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IChannelFactory(Of TChannel)&#xA;Implements IChannelFactory" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TChannel&gt;&#xA;public interface class IChannelFactory : System::ServiceModel::Channels::IChannelFactory" />
  <TypeSignature Language="F#" Value="type IChannelFactory&lt;'Channel&gt; = interface&#xA;    interface IChannelFactory&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.7.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.6.0.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="4.7.0.0" FrameworkAlternate="dotnet-plat-ext-3.1" />
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="TChannel" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannelFactory</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TChannel">チャネル ファクトリが作成するチャネルの型。</typeparam>
    <summary>種類に固有のチャネルを作成するためにチャネル ファクトリが実装する必要があるインターフェイスを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.Channels.IChannelFactory%601> コントラクトを実装することで、その都度チャネルの種類を指定することなく、特定の種類の複数のチャネルを作成することができます。 つまり、<xref:System.ServiceModel.Channels.IChannelFactory%601> インターフェイスを実装するチャネル ファクトリのジェネリック パラメーターとしてチャネルの種類を定義することは、<xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%2A> のメソッドに種類を渡す必要がないことを意味します。 異なる種類のチャネルを作成する必要がある場合は、必要なチャネルの種類ごとに別のチャネル ファクトリを作成できます。 <xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> のオーバーロードにより、メッセージが最初に送信されるアドレスと、最終的な宛先を区別することができます。 アドレス指定の詳細については、[アドレス](~/docs/framework/wcf/feature-details/endpoint-addresses.md)に関するトピックを参照してください。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="CreateChannel">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したエンドポイント アドレスへの指定した種類のチャネルを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージの最初の送信先アドレスと最後の宛先アドレスを区別することが手動ルーティングで必要な場合、<xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> オーバーロードを使用します。 チャネル ファクトリを閉じると、そのチャネル ファクトリで作成されたチャネルも閉じられることに注意してください。 アドレス指定の詳細については、[アドレス](~/docs/framework/wcf/feature-details/endpoint-addresses.md)に関するトピックを参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateChannel">
      <MemberSignature Language="C#" Value="public TChannel CreateChannel (System.ServiceModel.EndpointAddress to);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TChannel CreateChannel(class System.ServiceModel.EndpointAddress to) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateChannel (to As EndpointAddress) As TChannel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TChannel CreateChannel(System::ServiceModel::EndpointAddress ^ to);" />
      <MemberSignature Language="F#" Value="abstract member CreateChannel : System.ServiceModel.EndpointAddress -&gt; 'Channel" Usage="iChannelFactory.CreateChannel to" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="to" Type="System.ServiceModel.EndpointAddress" />
      </Parameters>
      <Docs>
        <param name="to">サービスの場所を提供する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
        <summary>指定したエンドポイント アドレスへの指定した種類のチャネルを作成します。</summary>
        <returns>指定したエンドポイント アドレスへの <paramref name="TChannel" /> 型のチャネル。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メッセージの最初の送信先アドレスと最後の宛先アドレスを区別することが手動ルーティングで必要な場合、<xref:System.ServiceModel.Channels.IChannelFactory%601.CreateChannel%28System.ServiceModel.EndpointAddress%2CSystem.Uri%29> オーバーロードを使用します。 チャネル ファクトリを閉じると、そのチャネル ファクトリで作成されたチャネルも閉じられることに注意してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChannel">
      <MemberSignature Language="C#" Value="public TChannel CreateChannel (System.ServiceModel.EndpointAddress to, Uri via);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TChannel CreateChannel(class System.ServiceModel.EndpointAddress to, class System.Uri via) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IChannelFactory`1.CreateChannel(System.ServiceModel.EndpointAddress,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateChannel (to As EndpointAddress, via As Uri) As TChannel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TChannel CreateChannel(System::ServiceModel::EndpointAddress ^ to, Uri ^ via);" />
      <MemberSignature Language="F#" Value="abstract member CreateChannel : System.ServiceModel.EndpointAddress * Uri -&gt; 'Channel" Usage="iChannelFactory.CreateChannel (to, via)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.7.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TChannel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="to" Type="System.ServiceModel.EndpointAddress" />
        <Parameter Name="via" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="to">サービスの場所を提供する <see cref="T:System.ServiceModel.EndpointAddress" />。</param>
        <param name="via">メッセージの送信先のトランスポート アドレスを格納している <see cref="T:System.Uri" />。</param>
        <summary>チャネルの種類と、メッセージの送信先のエンドポイント アドレスとトランスポート アドレスを指定して、チャネルを作成します。</summary>
        <returns>指定したエンドポイント アドレスとトランスポート アドレスへの <paramref name="TChannel" /> 型のチャネル。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `via` によって指定されるトランスポート アドレスはメッセージが最初に送信される場所で、この後にメッセージは、`to` によって指定された、サービスが存在する別のリモート アドレスに送信されます。 インターネットの場合、`via` URI は、サービスの最終的な <xref:System.ServiceModel.EndpointAddress.Uri%2A> アドレスの `to` と同じになります。 この 2 つのアドレスを区別するのは、ある種の手動ルーティングを行う必要がある場合のみです。 チャネル ファクトリを閉じると、そのチャネル ファクトリで作成されたチャネルも閉じられることに注意してください。 アドレス指定の詳細については、[アドレス](~/docs/framework/wcf/feature-details/endpoint-addresses.md)に関するトピックを参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
