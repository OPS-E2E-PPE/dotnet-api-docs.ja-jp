<Type Name="IReplyChannel" FullName="System.ServiceModel.Channels.IReplyChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="961f1414d6b4d48b761619c31594e2698686b24a" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73384996" /></Metadata><TypeSignature Language="C#" Value="public interface IReplyChannel : System.ServiceModel.Channels.IChannel" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReplyChannel implements class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IReplyChannel" />
  <TypeSignature Language="VB.NET" Value="Public Interface IReplyChannel&#xA;Implements IChannel" />
  <TypeSignature Language="C++ CLI" Value="public interface class IReplyChannel : System::ServiceModel::Channels::IChannel" />
  <TypeSignature Language="F#" Value="type IReplyChannel = interface&#xA;    interface IChannel&#xA;    interface ICommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.ICommunicationObject</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="e8a2e-101">チャネルがメッセージング エンドポイント間の要求/応答通信の受信側になるために実装する必要があるインターフェイスを定義します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-101">Defines the interface that a channel must implement to be on the receiving side of a request-reply communication between messaging endpoints.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-interface-note](~/includes/untrusted-data-interface-note.md)]

 <span data-ttu-id="e8a2e-102"><xref:System.ServiceModel.Channels.IReplyChannel> インターフェイスの <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> メソッドには同期と非同期のバリエーションがあり、これらのメソッドが返す <xref:System.ServiceModel.Channels.RequestContext> を使用して、受信した要求に対する応答を作成できます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-102">The <xref:System.ServiceModel.Channels.IReplyChannel> interface includes synchronous and asynchronous variants of a <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> method return an <xref:System.ServiceModel.Channels.RequestContext> that can be used to construct replies to received requests.</span></span>  
  
 <span data-ttu-id="e8a2e-103">コントラクトには、受信、受信試行、およびメッセージ待機の各機能の同期と非同期のバリエーションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-103">The contract includes synchronous and asynchronous variants of receive, try-to-receive and wait-for-a-message functionality.</span></span>  
  
 <span data-ttu-id="e8a2e-104"><xref:System.ServiceModel.Channels.IReplyChannel> は、必ずしも単一の送信元にバインドされているとは限りません。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-104">An <xref:System.ServiceModel.Channels.IReplyChannel> is not necessarily bound to a single sender.</span></span> <span data-ttu-id="e8a2e-105">他のチャネルおよびチャネル インターフェイスは、送信元と応答チャネルの間の相関関係を提供しますが、基本コントラクトにはそのような制約はありません。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-105">Other channels and channel interfaces provide correlation between the sender and the reply channel, but the base contract makes no such restriction.</span></span>  
  
 <span data-ttu-id="e8a2e-106">プル モデルは、メッセージを受信するために <xref:System.ServiceModel.Channels.IReplyChannel> で使用されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-106">The pull model is used with an <xref:System.ServiceModel.Channels.IReplyChannel> to receive messages.</span></span> <span data-ttu-id="e8a2e-107">このモデルは、<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (またはそのバリエーションの 1 つ) の呼び出しと、その後のメッセージ到着待ちで構成されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-107">This model consists of calling <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> (or one of its variants) and then waiting for a message to arrive.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="BeginReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8a2e-108">使用可能な要求を受信するための非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-108">Begins an asynchronous operation to receive an available request.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceiveRequest : AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginReceiveRequest (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback"><span data-ttu-id="e8a2e-109">要求操作が完了したという非同期受信の通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-109">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="e8a2e-110">要求操作の非同期受信に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-110">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="e8a2e-111">既定のタイムアウトで、使用可能な要求を受信するための非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-111">Begins an asynchronous operation to receive an available request with a default timeout.</span></span></summary>
        <returns><span data-ttu-id="e8a2e-112">要求の非同期受信を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-112">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a2e-113"><xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> メソッドは、<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> を非同期的に呼び出すための標準パターンを実装します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-113">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest> asynchronously.</span></span> <span data-ttu-id="e8a2e-114">既定のタイムアウトは 1 分です。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-114">The default timeout is 1 minute.</span></span> <span data-ttu-id="e8a2e-115">接続を構成するために使用されるバインドで受信タイムアウトが設定されている場合は、その値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-115">If a receive timeout is set on the binding used to configure the connection, then that value is used.</span></span> <span data-ttu-id="e8a2e-116">これらの値を他の値にオーバーライドする明示的なタイムアウトを呼び出しで指定する場合は、<xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-116">Use <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> if you want to specify an explicit timeout with the call that overrides these other values.</span></span>  
  
 <span data-ttu-id="e8a2e-117">受信した要求メッセージが、使用されるバインドで許可されている最大メッセージ サイズを超える場合は、<xref:System.ServiceModel.QuotaExceededException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-117">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="e8a2e-118">最大メッセージ サイズは、<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> プロパティで設定されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-118">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="e8a2e-119">既定値は65536バイトです。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-119">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8a2e-120">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-120">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginReceiveRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginReceiveRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="e8a2e-121">利用可能な要求の受信を待機する期間を指定する <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-121">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span></span></param>
        <param name="callback"><span data-ttu-id="e8a2e-122">要求操作が完了したという非同期受信の通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-122">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="e8a2e-123">要求操作の非同期受信に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-123">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="e8a2e-124">指定したタイムアウトで、使用可能な要求を受信するための非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-124">Begins an asynchronous operation to receive an available request with a specified timeout.</span></span></summary>
        <returns><span data-ttu-id="e8a2e-125">要求の非同期受信を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-125">The <see cref="T:System.IAsyncResult" /> that references the asynchronous reception of the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a2e-126"><xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> メソッドは、<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> を非同期的に呼び出すための標準パターンを実装します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-126">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method implements the standard pattern for invoking <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%28System.TimeSpan%29> asynchronously.</span></span> <span data-ttu-id="e8a2e-127">このメソッドで設定するタイムアウトは、接続を構成するために使用されるバインドで設定されている受信タイムアウトをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-127">The timeout set on this method overrides a receive timeout set on the binding that is used to configure the connection.</span></span>  
  
 <span data-ttu-id="e8a2e-128">受信した要求メッセージが、使用されるバインドで許可されている最大メッセージ サイズを超える場合は、<xref:System.ServiceModel.QuotaExceededException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-128">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="e8a2e-129">最大メッセージ サイズは、<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> プロパティで設定されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-129">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="e8a2e-130">既定値は65536バイトです。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-130">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8a2e-131">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-131">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTryReceiveRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTryReceiveRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginTryReceiveRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTryReceiveRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginTryReceiveRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginTryReceiveRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="e8a2e-132">要求受信操作を完了する必要がある制限時間を指定する <see cref="T:System.TimeSpan" />。この時間を経過すると、タイムアウトして <see langword="false" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-132">The <see cref="T:System.TimeSpan" /> that specifies how long the receive request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <param name="callback"><span data-ttu-id="e8a2e-133">要求操作が完了したという非同期受信の通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-133">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="e8a2e-134">要求操作の非同期受信に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-134">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="e8a2e-135">タイムアウトが指定され、状態オブジェクトが関連付けられている、要求メッセージを受信するための非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-135">Begins an asynchronous operation to receive a request message that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="e8a2e-136">非同期要求受信操作を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-136">The <see cref="T:System.IAsyncResult" /> that references the asynchronous receive request operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a2e-137">待機せずにアプリケーションの処理を継続する必要がある場合は、非同期の <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-137">Use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method when you need the application processing to continue without waiting.</span></span> <span data-ttu-id="e8a2e-138">要求メッセージに応答している間、またはタイムアウト期間が経過するまで、現在のスレッドがブロックされてもかまわない場合は、いずれかの同期 <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-138">Use one of the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> methods when it is acceptable for the current thread to be blocked while it replies to the request message or until the timeout interval is exceeded.</span></span>  
  
 <span data-ttu-id="e8a2e-139">このメソッドは、コールバックを通じて操作のイベント ハンドラー ID の通知を受信します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-139">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="e8a2e-140">この操作は、チャネルでメッセージを使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-140">The operation is not complete until either a message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8a2e-141">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-141">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#5](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e8a2e-142">指定した <see langword="false" /> が経過した場合、操作は <paramref name="timeout" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-142">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="BeginWaitForRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginWaitForRequest (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginWaitForRequest(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginWaitForRequest (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginWaitForRequest(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginWaitForRequest : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="iReplyChannel.BeginWaitForRequest (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="e8a2e-143">利用可能な要求の受信を待機する期間を指定する <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-143">The <see cref="T:System.TimeSpan" /> that specifies the interval of time to wait for the reception of an available request.</span></span></param>
        <param name="callback"><span data-ttu-id="e8a2e-144">要求操作が完了したという非同期受信の通知を受信する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-144">The <see cref="T:System.AsyncCallback" /> delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="e8a2e-145">要求操作の非同期受信に関連付けられている状態情報を格納するオブジェクト。アプリケーションで指定します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-145">An object, specified by the application, that contains state information associated with the asynchronous receive of a request operation.</span></span></param>
        <summary><span data-ttu-id="e8a2e-146">タイムアウトが指定され、状態オブジェクトが関連付けられている、非同期要求操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-146">Begins an asynchronous request operation that has a specified time out and state object associated with it.</span></span></summary>
        <returns><span data-ttu-id="e8a2e-147">要求メッセージが到着するのを待機するための非同期操作を参照する <see cref="T:System.IAsyncResult" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-147">The <see cref="T:System.IAsyncResult" /> that references the asynchronous operation to wait for a request message to arrive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a2e-148">要求メッセージのキューへの到達を待機している間に、現在のスレッドがブロックされてもかまわない場合は、同期 <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-148">Use the synchronous <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> method when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="e8a2e-149">スレッドは、指定した `timeout` までブロックされます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-149">The thread is blocked up to the specified `timeout`.</span></span>  
  
 <span data-ttu-id="e8a2e-150">このメソッドは、コールバックを通じて操作のイベント ハンドラー ID の通知を受信します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-150">This method receives notification, through a callback, of the identity of the event handler for the operation.</span></span> <span data-ttu-id="e8a2e-151">この操作は、チャネルで要求メッセージを使用できるようになるか、タイムアウトが発生するまで完了しません。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-151">The operation is not complete until either a request message becomes available in the channel or the time out occurs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8a2e-152">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-152">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#10](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e8a2e-153">指定した <see langword="false" /> が経過した場合、操作は <paramref name="timeout" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-153">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext EndReceiveRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext EndReceiveRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndReceiveRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndReceiveRequest (result As IAsyncResult) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ EndReceiveRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndReceiveRequest : IAsyncResult -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.EndReceiveRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="e8a2e-154"><see cref="T:System.IAsyncResult" /> メソッドの呼び出しで返された <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-154">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="Overload:System.ServiceModel.Channels.IInputChannel.BeginReceive" /> method.</span></span></param>
        <summary><span data-ttu-id="e8a2e-155">使用可能な要求を受信するための非同期操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-155">Completes an asynchronous operation to receive an available request.</span></span></summary>
        <returns><span data-ttu-id="e8a2e-156">要求に対する応答の作成に使用される <see cref="T:System.ServiceModel.Channels.RequestContext" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-156">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct a reply to the request.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a2e-157">受信した要求メッセージが、使用されるバインドで許可されている最大メッセージ サイズを超える場合は、<xref:System.ServiceModel.QuotaExceededException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-157">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="e8a2e-158">最大メッセージ サイズは、<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> プロパティで設定されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-158">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="e8a2e-159">既定値は65536バイトです。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-159">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8a2e-160">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-160">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e8a2e-161">操作を完了する前に指定した <see cref="T:System.TimeoutException" /> が経過した場合、操作は <paramref name="timeout" /> をスローする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-161">The operation should throw a <see cref="T:System.TimeoutException" /> if the specified <paramref name="timeout" /> is exceeded before the operation is completed.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndTryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool EndTryReceiveRequest (IAsyncResult result, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndTryReceiveRequest(class System.IAsyncResult result, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndTryReceiveRequest(System.IAsyncResult,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndTryReceiveRequest (result As IAsyncResult, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndTryReceiveRequest(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberSignature Language="F#" Value="abstract member EndTryReceiveRequest : IAsyncResult * RequestContext -&gt; bool" Usage="iReplyChannel.EndTryReceiveRequest (result, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="e8a2e-162"><see cref="T:System.IAsyncResult" /> メソッドの呼び出しで返された <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-162">The <see cref="T:System.IAsyncResult" /> returned by a call to the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></param>
        <param name="context"><span data-ttu-id="e8a2e-163">受信した <see cref="T:System.ServiceModel.Channels.RequestContext" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-163">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span></span></param>
        <summary><span data-ttu-id="e8a2e-164">要求メッセージを受信するための指定した非同期操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-164">Completes the specified asynchronous operation to receive a request message.</span></span></summary>
        <returns><span data-ttu-id="e8a2e-165">指定した期間が経過する前に要求メッセージを受信する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-165"><see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e8a2e-166">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-166">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#6](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndWaitForRequest">
      <MemberSignature Language="C#" Value="public bool EndWaitForRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndWaitForRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.EndWaitForRequest(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndWaitForRequest (result As IAsyncResult) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EndWaitForRequest(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndWaitForRequest : IAsyncResult -&gt; bool" Usage="iReplyChannel.EndWaitForRequest result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="e8a2e-167"><see cref="T:System.IAsyncResult" /> 操作が完了したことを識別して、それから最終結果を取得する <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-167">The <see cref="T:System.IAsyncResult" /> that identifies the <see cref="M:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest(System.TimeSpan,System.AsyncCallback,System.Object)" /> operation to finish, and from which to retrieve an end result.</span></span></param>
        <summary><span data-ttu-id="e8a2e-168">指定した非同期の要求メッセージ待機操作を完了します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-168">Completes the specified asynchronous wait-for-a-request message operation.</span></span></summary>
        <returns><span data-ttu-id="e8a2e-169">指定した期間が経過する前に要求を受信する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-169"><see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e8a2e-170">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-170">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#11](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalAddress">
      <MemberSignature Language="C#" Value="public System.ServiceModel.EndpointAddress LocalAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ServiceModel.EndpointAddress LocalAddress" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalAddress As EndpointAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceModel::EndpointAddress ^ LocalAddress { System::ServiceModel::EndpointAddress ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalAddress : System.ServiceModel.EndpointAddress" Usage="System.ServiceModel.Channels.IReplyChannel.LocalAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.EndpointAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e8a2e-171">この応答チャネルがメッセージを受信するアドレスを取得します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-171">Gets the address on which this reply channel receives messages.</span></span></summary>
        <value><span data-ttu-id="e8a2e-172">この応答チャネルがメッセージを受信する <see cref="T:System.ServiceModel.EndpointAddress" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-172">The <see cref="T:System.ServiceModel.EndpointAddress" /> on which this reply channel receives messages.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e8a2e-173">このプロパティを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-173">The following code illustrates how to implement this property:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReceiveRequest">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e8a2e-174">利用できるものがある場合、受信した要求のコンテキストを返します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-174">Returns the context of the request received, if one is available.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest () As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest();" />
      <MemberSignature Language="F#" Value="abstract member ReceiveRequest : unit -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.ReceiveRequest " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e8a2e-175">利用できるものがある場合、受信した要求のコンテキストを返します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-175">Returns the context of the request received, if one is available.</span></span> <span data-ttu-id="e8a2e-176">コンテキストが利用できない場合は、利用できるものを待ちます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-176">If a context is not available, waits until there is one available.</span></span></summary>
        <returns><span data-ttu-id="e8a2e-177">応答の作成に使用される <see cref="T:System.ServiceModel.Channels.RequestContext" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-177">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a2e-178"><xref:System.ServiceModel.Channels.RequestContext> は、要求メッセージ、およびそのメッセージに応答するための機構をカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-178"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="e8a2e-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> は、複数回または同時に呼び出しできます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-179"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="e8a2e-180">受信した要求ごとに、<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 呼び出しが 1 つだけ完了します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-180">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="e8a2e-181">受信した要求メッセージが、使用されるバインドで許可されている最大メッセージ サイズを超える場合は、<xref:System.ServiceModel.QuotaExceededException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-181">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="e8a2e-182">最大メッセージ サイズは、<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> プロパティで設定されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-182">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="e8a2e-183">既定値は65536バイトです。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-183">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8a2e-184">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-184">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#7](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveRequest">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.RequestContext ReceiveRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.RequestContext ReceiveRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveRequest (timeout As TimeSpan) As RequestContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ServiceModel::Channels::RequestContext ^ ReceiveRequest(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveRequest : TimeSpan -&gt; System.ServiceModel.Channels.RequestContext" Usage="iReplyChannel.ReceiveRequest timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.RequestContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="e8a2e-185">要求の受信操作を完了する必要がある制限時間を指定する <see cref="T:System.TimeSpan" />。この時間を経過すると、タイムアウトして <see langword="false" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-185">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e8a2e-186">利用できるものがある場合、受信した要求のコンテキストを返します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-186">Returns the context of the request received, if one is available.</span></span> <span data-ttu-id="e8a2e-187">コンテキストが利用できない場合は、利用できるものを待ちます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-187">If a context is not available, waits until there is one available.</span></span></summary>
        <returns><span data-ttu-id="e8a2e-188">応答の作成に使用される <see cref="T:System.ServiceModel.Channels.RequestContext" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-188">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> used to construct replies.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a2e-189"><xref:System.ServiceModel.Channels.RequestContext> は、要求メッセージ、およびそのメッセージに応答するための機構をカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-189"><xref:System.ServiceModel.Channels.RequestContext> encapsulates the request message and a mechanism for replying to that message.</span></span>  
  
 <span data-ttu-id="e8a2e-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> は、複数回または同時に呼び出しできます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-190"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> can be called multiple times or concurrently.</span></span> <span data-ttu-id="e8a2e-191">受信した要求ごとに、<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> 呼び出しが 1 つだけ完了します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-191">Only one <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> call completes per request received.</span></span>  
  
 <span data-ttu-id="e8a2e-192">受信した要求メッセージが、使用されるバインドで許可されている最大メッセージ サイズを超える場合は、<xref:System.ServiceModel.QuotaExceededException> がスローされます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-192">If the request message received is larger that the maximum message size allowed by the binding being used, a <xref:System.ServiceModel.QuotaExceededException> is thrown.</span></span> <span data-ttu-id="e8a2e-193">最大メッセージ サイズは、<xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> プロパティで設定されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-193">The maximum message size is set by the <xref:System.ServiceModel.Channels.TransportBindingElement.MaxReceivedMessageSize%2A> property.</span></span> <span data-ttu-id="e8a2e-194">既定値は65536バイトです。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-194">The default value is 65536 bytes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8a2e-195">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-195">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#8](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceiveRequest">
      <MemberSignature Language="C#" Value="public bool TryReceiveRequest (TimeSpan timeout, out System.ServiceModel.Channels.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceiveRequest(valuetype System.TimeSpan timeout, [out] class System.ServiceModel.Channels.RequestContext&amp; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest(System.TimeSpan,System.ServiceModel.Channels.RequestContext@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReceiveRequest (timeout As TimeSpan, ByRef context As RequestContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReceiveRequest(TimeSpan timeout, [Runtime::InteropServices::Out] System::ServiceModel::Channels::RequestContext ^ % context);" />
      <MemberSignature Language="F#" Value="abstract member TryReceiveRequest : TimeSpan * RequestContext -&gt; bool" Usage="iReplyChannel.TryReceiveRequest (timeout, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="context" Type="System.ServiceModel.Channels.RequestContext" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="e8a2e-196">要求の受信操作を完了する必要がある制限時間を指定する <see cref="T:System.TimeSpan" />。この時間を経過すると、タイムアウトして <see langword="false" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-196">The <see cref="T:System.TimeSpan" /> that specifies how long the receive of a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <param name="context"><span data-ttu-id="e8a2e-197">受信した <see cref="T:System.ServiceModel.Channels.RequestContext" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-197">The <see cref="T:System.ServiceModel.Channels.RequestContext" /> received.</span></span></param>
        <summary><span data-ttu-id="e8a2e-198">指定した期間が経過する前に要求を受信するかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-198">Returns a value that indicates whether a request is received before a specified interval of time elapses.</span></span></summary>
        <returns><span data-ttu-id="e8a2e-199">指定した期間が経過する前に要求メッセージを受信する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-199"><see langword="true" /> if a request message is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a2e-200">要求メッセージがキューに到達するのを待機している間に、現在のスレッドがブロックされてもかまわない場合は、<xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-200">Use <xref:System.ServiceModel.Channels.IReplyChannel.TryReceiveRequest%28System.TimeSpan%2CSystem.ServiceModel.Channels.RequestContext%40%29> when it is acceptable for the current thread to be blocked while it waits for a request message to arrive in the queue.</span></span> <span data-ttu-id="e8a2e-201">スレッドは、指定した `timeout` までブロックされます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-201">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="e8a2e-202">待機せずにアプリケーションの処理を継続する必要がある場合は、非同期の <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-202">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginTryReceiveRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8a2e-203">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-203">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#4](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e8a2e-204">指定した <see langword="false" /> が経過した場合、操作は <paramref name="timeout" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-204">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="WaitForRequest">
      <MemberSignature Language="C#" Value="public bool WaitForRequest (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForRequest(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IReplyChannel.WaitForRequest(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForRequest (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForRequest(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member WaitForRequest : TimeSpan -&gt; bool" Usage="iReplyChannel.WaitForRequest timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="e8a2e-205">要求操作を完了する必要がある制限時間を指定する <see cref="T:System.TimeSpan" />。この時間を経過すると、タイムアウトして <see langword="false" /> が返されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-205">The <see cref="T:System.TimeSpan" /> that specifies how long a request operation has to complete before timing out and returning <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="e8a2e-206">指定した期間が経過する前に要求メッセージを受信するかどうかを示す値を返します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-206">Returns a value that indicates whether a request message is received before a specified interval of time elapses.</span></span></summary>
        <returns><span data-ttu-id="e8a2e-207">指定した期間が経過する前に要求を受信する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-207"><see langword="true" /> if a request is received before the specified interval of time elapses; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e8a2e-208"><xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> を呼び出しても、要求メッセージの受信または処理は行われません。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-208">Calling <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> does not result in a request message being received or processed in any way.</span></span>  
  
 <span data-ttu-id="e8a2e-209"><xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> メソッドは、主にユーザーがトランザクションを使用してメッセージを受信するようなトランザクション処理のシナリオで使用されます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-209">The <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method exists primarily for transacted scenarios where the user wants to receive the message using a transaction.</span></span> <span data-ttu-id="e8a2e-210"><xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> だけをそのために普通に使用するときは、トランザクションを作成して、<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> を呼び出す必要があります。この場合は、トランザクションがタイムアウトする前にメッセージが到着することを期待するしかなく、メッセージが到着しない可能性もあります。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-210">When using just <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> normally for this, the user must create the transaction, and then call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and hope the message arrives before the transaction times out, which may not be possible.</span></span>  
  
 <span data-ttu-id="e8a2e-211">代わりに、<xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> を呼び出してタイムアウト (無限も可能) を指定し、メッセージが到着してからトランザクションを開き、<xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> を呼び出して、トランザクションがタイムアウトする前に確実にメッセージを返すこともできます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-211">Instead, the user can call <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> and specify the time out (even infinite), then when a message arrives they can open the transaction, call <xref:System.ServiceModel.Channels.IReplyChannel.ReceiveRequest%2A> and be confident that they can get the message back before the transaction expires.</span></span>  
  
 <span data-ttu-id="e8a2e-212">キューにメッセージが到達するまで待機する間、現在のスレッドがブロックされてもいい場合は、<xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> を使用します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-212">Use <xref:System.ServiceModel.Channels.IReplyChannel.WaitForRequest%28System.TimeSpan%29> when it is acceptable for the current thread to be blocked while it waits for a message to arrive in the queue.</span></span> <span data-ttu-id="e8a2e-213">スレッドは、指定した `timeout` までブロックされます。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-213">The thread is blocked up to the specified `timeout`.</span></span> <span data-ttu-id="e8a2e-214">待機せずにアプリケーションの処理を継続する必要がある場合は、非同期の <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-214">If you need the application processing to continue without waiting, use the asynchronous <xref:System.ServiceModel.Channels.IReplyChannel.BeginWaitForRequest%28System.TimeSpan%2CSystem.AsyncCallback%2CSystem.Object%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e8a2e-215">このメソッドを実装する方法を次のコードに示します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-215">The following code illustrates how to implement this method:</span></span>  
  
 [!code-csharp[S_UE_MessageInterceptor#9](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_messageinterceptor/cs/interceptingchannellistener.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e8a2e-216">指定した <see langword="false" /> が経過した場合、操作は <paramref name="timeout" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e8a2e-216">The operation returns <see langword="false" /> if the specified <paramref name="timeout" /> is exceeded.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
