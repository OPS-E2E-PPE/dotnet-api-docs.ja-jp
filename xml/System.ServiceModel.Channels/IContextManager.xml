<Type Name="IContextManager" FullName="System.ServiceModel.Channels.IContextManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bb35930a4e77474dfc8c04760977a86940a3bc51" /><Meta Name="ms.sourcegitcommit" Value="1b924db57b3a1cf768d98c21f9b988d6966a0f2b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="03/06/2020" /><Meta Name="ms.locfileid" Value="78794272" /></Metadata><TypeSignature Language="C#" Value="public interface IContextManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContextManager" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IContextManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContextManager" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContextManager" />
  <TypeSignature Language="F#" Value="type IContextManager = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.WorkflowServices" FromVersion="4.0.0.0" To="System.ServiceModel" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>チャネルのコンテキストを取得および設定できるインターフェイスを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.WSHttpContextBinding> 値を設定して <xref:System.ServiceModel.SessionMode.NotAllowed> を使用するチャネルの場合、<xref:System.ServiceModel.Channels.IContextManager> を使用してクライアント上でコンテキストを取得することはできません。それは、<xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> を呼び出してチャネル上で <xref:System.ServiceModel.SessionMode.NotAllowed> セマンティクスを実行するたびに、セッションを確立する新しいチャネルが作成されるためです。 これは、このようなケースでコンテキストがクライアントに正しく反映されても、<xref:System.ServiceModel.Channels.IContextManager> を使用してコンテキストを取得できないことを意味します。 次のコードのように <xref:System.ServiceModel.Channels.ContextMessageProperty> を使用すると、コンテキストを取得できます。  
  
```csharp  
using (new OperationContextScope((IContextChannel)channel))  
{  
    channel.MyChannel("Test");  
    ContextMessageProperty context;  
    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  
    {  
        Console.WriteLine(context.Count);  
    }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテキスト管理が有効にされたかどうかを示す値を取得または設定します。</summary>
        <value>コンテキストが有効な場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンテキスト管理が有効な場合、コンテキスト チャネルはその有効期間中、コンテキストをキャッシュします。 コンテキストは、`IContextManager` メソッドを呼び出して、<xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> チャネル プロパティ経由でチャネルから取得できます。 チャネルを開く前に、チャネル プロパティで <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> メソッドを呼び出して、事前にコンテキストで初期化できます。 チャネルは一度コンテキストで初期化すると、リセットできません。  
  
 このモードのインバリアントを次に示します。  
  
-   チャネルを開いた後に <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> を呼び出すと、`InvalidOperationException` がスローされます。  
  
-   送信メッセージで `ContextMessageProperty` を使用してコンテキストを送信しようとすると、`InvalidOperationException` がスローされます。  
  
-   コンテキストを持つサーバーからメッセージを受信する場合に、チャネルが既にコンテキストで初期化されていると、`ProtocolException` がスローされます。 コンテキストを明示的に設定せずにチャネルを開いている場合は、サーバーから初期コンテキストを受信できます。  
  
-   受信メッセージの `ContextMessageProperty` は常に `null` です。  
  
 コンテキスト管理が有効でない場合、コンテキスト チャネルはコンテキストを管理しません。 コンテキストの取得、管理、および適用は、`ContextMessageProperty` を使用してアプリケーションで行う必要があります。 <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> チャネル プロパティを使用して <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> または `IContextManager` を呼び出そうとすると、`InvalidOperationException` が発生します。  
  
 コンテキスト HTTP クッキーを除くすべての HTTP クッキーはチャネル レベルで処理されます。 コンテキスト HTTP クッキーはアプリケーション レベルで管理されます。 これは、チャネルを共有することによって <xref:System.ServiceModel.Channels.ContextMessageProperty> の対象となっているさまざまなインスタンスと通信するときに予期しない結果を発生させる可能性があります。 次の表は、<xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> が `true` または `false` に設定された場合、HTTP クッキーがどのような影響を受けるかを示しています。  
  
|バインド|IContextManager.Enabled 値|コンテキスト HTTP クッキーのスコープ|他の HTTP クッキーのスコープ|  
|-------------|-----------------------------------|-------------------------------|------------------------------|  
|BasicHttpBinding|N/A|ChannelFactory|ChannelFactory|  
|BasicHttpContextBinding|true|チャネル|チャネル|  
|BasicHttpContextBinding|False|各メッセージ別 (アプリケーションで明示的に管理)|チャネル|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext();" />
      <MemberSignature Language="F#" Value="abstract member GetContext : unit -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="iContextManager.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コンテキストを取得します。</summary>
        <returns>名前空間およびコンテキスト名が含まれたキーと値のペアの <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコードは、クライアント上の型指定のあるプロキシ インスタンスからコンテキストを取得する方法を示しています。  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    context = cm.GetContext();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public void SetContext (System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetContext (context As IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetContext(System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ context);" />
      <MemberSignature Language="F#" Value="abstract member SetContext : System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="iContextManager.SetContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context">名前空間と設定済みのコンテキスト名が含まれたキーと値のペアの <see cref="T:System.Collections.Generic.IDictionary`2" />。</param>
        <summary>コンテキストを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコードは、クライアントでコンテキストを設定する方法を示しています。  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    cm.SetContext(context);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
