<Type Name="IContextManager" FullName="System.ServiceModel.Channels.IContextManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dede70d361b40a73bbb904b9e8b23142df00560c" /><Meta Name="ms.sourcegitcommit" Value="8b09499854b5b7b909802126edc1f1fca0054c10" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/01/2020" /><Meta Name="ms.locfileid" Value="76958674" /></Metadata><TypeSignature Language="C#" Value="public interface IContextManager" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContextManager" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Channels.IContextManager" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContextManager" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContextManager" />
  <TypeSignature Language="F#" Value="type IContextManager = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.WorkflowServices, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="dd818-101">チャネルのコンテキストを取得および設定できるインターフェイスを定義します。</span><span class="sxs-lookup"><span data-stu-id="dd818-101">Defines an interface that allows you to get and set the context on the channel.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dd818-102"><xref:System.ServiceModel.WSHttpContextBinding> 値を設定して <xref:System.ServiceModel.SessionMode.NotAllowed> を使用するチャネルの場合、<xref:System.ServiceModel.Channels.IContextManager> を使用してクライアント上でコンテキストを取得することはできません。それは、<xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> を呼び出してチャネル上で <xref:System.ServiceModel.SessionMode.NotAllowed> セマンティクスを実行するたびに、セッションを確立する新しいチャネルが作成されるためです。</span><span class="sxs-lookup"><span data-stu-id="dd818-102">For channels that use <xref:System.ServiceModel.WSHttpContextBinding> with the <xref:System.ServiceModel.SessionMode.NotAllowed> value set, the context cannot be retrieved on the client using <xref:System.ServiceModel.Channels.IContextManager> because a new channel that establishes a session is created each time <xref:System.ServiceModel.Channels.IChannelFactory.GetProperty%2A> is called to enforce <xref:System.ServiceModel.SessionMode.NotAllowed> semantics on a channel.</span></span> <span data-ttu-id="dd818-103">これは、このようなケースでコンテキストがクライアントに正しく反映されても、<xref:System.ServiceModel.Channels.IContextManager> を使用してコンテキストを取得できないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="dd818-103">This means that even though the context is properly propagated back to the client in this case, it cannot be retrieved using <xref:System.ServiceModel.Channels.IContextManager>.</span></span> <span data-ttu-id="dd818-104">次のコードのように <xref:System.ServiceModel.Channels.ContextMessageProperty> を使用すると、コンテキストを取得できます。</span><span class="sxs-lookup"><span data-stu-id="dd818-104">You can still retrieve it using <xref:System.ServiceModel.Channels.ContextMessageProperty> as shown in the following code.</span></span>  
  
```csharp  
using (new OperationContextScope((IContextChannel)channel))  
{  
    channel.MyChannel("Test");  
    ContextMessageProperty context;  
    if (ContextMessageProperty.TryGet(OperationContext.Current.IncomingMessageProperties, out context))  
    {  
        Console.WriteLine(context.Count);  
    }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.ServiceModel.Channels.IContextManager.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="dd818-105">コンテキスト管理が有効にされたかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="dd818-105">Gets or sets a value that indicates whether the context management is enabled.</span></span></summary>
        <value><span data-ttu-id="dd818-106">コンテキストが有効な場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="dd818-106"><see langword="true" /> if the context is enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dd818-107">コンテキスト管理が有効な場合、コンテキスト チャネルはその有効期間中、コンテキストをキャッシュします。</span><span class="sxs-lookup"><span data-stu-id="dd818-107">When context management is enabled the context channel caches the context in its lifetime.</span></span> <span data-ttu-id="dd818-108">コンテキストは、`IContextManager` メソッドを呼び出して、<xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> チャネル プロパティ経由でチャネルから取得できます。</span><span class="sxs-lookup"><span data-stu-id="dd818-108">Context can be retrieved from the channel through the `IContextManager` channel property by calling <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> method on it.</span></span> <span data-ttu-id="dd818-109">チャネルを開く前に、チャネル プロパティで <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> メソッドを呼び出して、事前にコンテキストで初期化できます。</span><span class="sxs-lookup"><span data-stu-id="dd818-109">The channel can also be pre-initialized with context before being opened by calling the <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> method on the channel property.</span></span> <span data-ttu-id="dd818-110">チャネルは一度コンテキストで初期化すると、リセットできません。</span><span class="sxs-lookup"><span data-stu-id="dd818-110">Once the channel is initialized with context it cannot be reset.</span></span>  
  
 <span data-ttu-id="dd818-111">このモードのインバリアントを次に示します。</span><span class="sxs-lookup"><span data-stu-id="dd818-111">The following are invariants in this mode:</span></span>  
  
-   <span data-ttu-id="dd818-112">チャネルを開いた後に <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> を呼び出すと、`InvalidOperationException` がスローされます。</span><span class="sxs-lookup"><span data-stu-id="dd818-112">Any call to <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> after the channel is open throws an `InvalidOperationException`.</span></span>  
  
-   <span data-ttu-id="dd818-113">送信メッセージで `ContextMessageProperty` を使用してコンテキストを送信しようとすると、`InvalidOperationException` がスローされます。</span><span class="sxs-lookup"><span data-stu-id="dd818-113">Any attempt to send context through the `ContextMessageProperty` in an outgoing message throws `InvalidOperationException`.</span></span>  
  
-   <span data-ttu-id="dd818-114">コンテキストを持つサーバーからメッセージを受信する場合に、チャネルが既にコンテキストで初期化されていると、`ProtocolException` がスローされます。</span><span class="sxs-lookup"><span data-stu-id="dd818-114">If a message is received from the server with context, when the channel is already initialized with a context a `ProtocolException` is thrown.</span></span> <span data-ttu-id="dd818-115">コンテキストを明示的に設定せずにチャネルを開いている場合は、サーバーから初期コンテキストを受信できます。</span><span class="sxs-lookup"><span data-stu-id="dd818-115">Note that you can receive initial context from a server if the channel is opened without explicitly setting the context.</span></span>  
  
-   <span data-ttu-id="dd818-116">受信メッセージの `ContextMessageProperty` は常に `null` です。</span><span class="sxs-lookup"><span data-stu-id="dd818-116">The `ContextMessageProperty` on an incoming message is always `null`.</span></span>  
  
 <span data-ttu-id="dd818-117">コンテキスト管理が有効でない場合、コンテキスト チャネルはコンテキストを管理しません。</span><span class="sxs-lookup"><span data-stu-id="dd818-117">When context management is not enabled, the context channel does not manage context.</span></span> <span data-ttu-id="dd818-118">コンテキストの取得、管理、および適用は、`ContextMessageProperty` を使用してアプリケーションで行う必要があります。</span><span class="sxs-lookup"><span data-stu-id="dd818-118">It is the application's responsibility to retrieve, manage and apply context through the `ContextMessageProperty`.</span></span> <span data-ttu-id="dd818-119"><xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> チャネル プロパティを使用して <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> または `IContextManager` を呼び出そうとすると、`InvalidOperationException` が発生します。</span><span class="sxs-lookup"><span data-stu-id="dd818-119">Any attempt to call <xref:System.ServiceModel.Channels.IContextManager.GetContext%2A> or <xref:System.ServiceModel.Channels.IContextManager.SetContext%2A> using through the `IContextManager` channel property results in `InvalidOperationException`.</span></span>  
  
 <span data-ttu-id="dd818-120">コンテキスト HTTP クッキーを除くすべての HTTP クッキーはチャネル レベルで処理されます。</span><span class="sxs-lookup"><span data-stu-id="dd818-120">All HTTP cookies, except for context HTTP cookies, are handled at the channel level.</span></span> <span data-ttu-id="dd818-121">コンテキスト HTTP クッキーはアプリケーション レベルで管理されます。</span><span class="sxs-lookup"><span data-stu-id="dd818-121">Context HTTP cookies are managed at the application level.</span></span> <span data-ttu-id="dd818-122">これは、チャネルを共有することによって <xref:System.ServiceModel.Channels.ContextMessageProperty> の対象となっているさまざまなインスタンスと通信するときに予期しない結果を発生させる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="dd818-122">This can have unexpected consequences when channels are shared to talk to different instances targeted by <xref:System.ServiceModel.Channels.ContextMessageProperty>.</span></span> <span data-ttu-id="dd818-123">次の表は、<xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> が `true` または `false` に設定された場合、HTTP クッキーがどのような影響を受けるかを示しています。</span><span class="sxs-lookup"><span data-stu-id="dd818-123">The following table shows how HTTP cookies are affected when <xref:System.ServiceModel.Channels.IContextManager.Enabled%2A> is set to either `true` or `false`.</span></span>  
  
|<span data-ttu-id="dd818-124">バインド</span><span class="sxs-lookup"><span data-stu-id="dd818-124">Binding</span></span>|<span data-ttu-id="dd818-125">IContextManager.Enabled 値</span><span class="sxs-lookup"><span data-stu-id="dd818-125">IContextManager.Enabled Value</span></span>|<span data-ttu-id="dd818-126">コンテキスト HTTP クッキーのスコープ</span><span class="sxs-lookup"><span data-stu-id="dd818-126">Context HTTP Cookie Scope</span></span>|<span data-ttu-id="dd818-127">他の HTTP クッキーのスコープ</span><span class="sxs-lookup"><span data-stu-id="dd818-127">Other HTTP Cookies Scope</span></span>|  
|-------------|-----------------------------------|-------------------------------|------------------------------|  
|<span data-ttu-id="dd818-128">BasicHttpBinding</span><span class="sxs-lookup"><span data-stu-id="dd818-128">BasicHttpBinding</span></span>|<span data-ttu-id="dd818-129">該当なし</span><span class="sxs-lookup"><span data-stu-id="dd818-129">n/a</span></span>|<span data-ttu-id="dd818-130">ChannelFactory</span><span class="sxs-lookup"><span data-stu-id="dd818-130">ChannelFactory</span></span>|<span data-ttu-id="dd818-131">ChannelFactory</span><span class="sxs-lookup"><span data-stu-id="dd818-131">ChannelFactory</span></span>|  
|<span data-ttu-id="dd818-132">BasicHttpContextBinding</span><span class="sxs-lookup"><span data-stu-id="dd818-132">BasicHttpContextBinding</span></span>|<span data-ttu-id="dd818-133">true</span><span class="sxs-lookup"><span data-stu-id="dd818-133">true</span></span>|<span data-ttu-id="dd818-134">チャネル</span><span class="sxs-lookup"><span data-stu-id="dd818-134">Channel</span></span>|<span data-ttu-id="dd818-135">チャネル</span><span class="sxs-lookup"><span data-stu-id="dd818-135">Channel</span></span>|  
|<span data-ttu-id="dd818-136">BasicHttpContextBinding</span><span class="sxs-lookup"><span data-stu-id="dd818-136">BasicHttpContextBinding</span></span>|<span data-ttu-id="dd818-137">false</span><span class="sxs-lookup"><span data-stu-id="dd818-137">false</span></span>|<span data-ttu-id="dd818-138">各メッセージ別 (アプリケーションで明示的に管理)</span><span class="sxs-lookup"><span data-stu-id="dd818-138">For each message (explicitly managed by application)</span></span>|<span data-ttu-id="dd818-139">チャネル</span><span class="sxs-lookup"><span data-stu-id="dd818-139">Channel</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContext">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.GetContext" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContext () As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetContext();" />
      <MemberSignature Language="F#" Value="abstract member GetContext : unit -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="iContextManager.GetContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dd818-140">コンテキストを取得します。</span><span class="sxs-lookup"><span data-stu-id="dd818-140">Gets the context.</span></span></summary>
        <returns><span data-ttu-id="dd818-141">名前空間およびコンテキスト名が含まれたキーと値のペアの <see cref="T:System.Collections.Generic.IDictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="dd818-141">The <see cref="T:System.Collections.Generic.IDictionary`2" /> of key/value pairs with the namespace and name of the context.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dd818-142">次のコードは、クライアント上の型指定のあるプロキシ インスタンスからコンテキストを取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="dd818-142">The following code shows how the context can be obtained from a typed proxy instance on the client.</span></span>  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    context = cm.GetContext();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public void SetContext (System.Collections.Generic.IDictionary&lt;string,string&gt; context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(class System.Collections.Generic.IDictionary`2&lt;string, string&gt; context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Channels.IContextManager.SetContext(System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetContext (context As IDictionary(Of String, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetContext(System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ context);" />
      <MemberSignature Language="F#" Value="abstract member SetContext : System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; unit" Usage="iContextManager.SetContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context"><span data-ttu-id="dd818-143">名前空間と設定済みのコンテキスト名が含まれたキーと値のペアの <see cref="T:System.Collections.Generic.IDictionary`2" />。</span><span class="sxs-lookup"><span data-stu-id="dd818-143">The <see cref="T:System.Collections.Generic.IDictionary`2" /> of key/value pairs with the namespace and name of the context that is set.</span></span></param>
        <summary><span data-ttu-id="dd818-144">コンテキストを設定します。</span><span class="sxs-lookup"><span data-stu-id="dd818-144">Sets the context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dd818-145">次のコードは、クライアントでコンテキストを設定する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="dd818-145">The following code shows how the context can be set on the client.</span></span>  
  
```  
IDictionary<string, string> context;  
CalculatorProxy proxy;  
IContextManager cm = proxy.InnerChannel.GetProperty<IContextManager>();  
if (cm != null)  
    cm.SetContext(context);  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
