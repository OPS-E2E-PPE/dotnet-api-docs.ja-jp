<Type Name="CodeSnippetCompileUnit" FullName="System.CodeDom.CodeSnippetCompileUnit">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3f1ea0c5e1d44147451cb34effc29fc7f7f6a5c6" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82328399" /></Metadata><TypeSignature Language="C#" Value="public class CodeSnippetCompileUnit : System.CodeDom.CodeCompileUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CodeSnippetCompileUnit extends System.CodeDom.CodeCompileUnit" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeSnippetCompileUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeSnippetCompileUnit&#xA;Inherits CodeCompileUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeSnippetCompileUnit : System::CodeDom::CodeCompileUnit" />
  <TypeSignature Language="F#" Value="type CodeSnippetCompileUnit = class&#xA;    inherit CodeCompileUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeSnippetCompileUnit extends System.CodeDom.CodeCompileUnit" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeCompileUnit</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="3c8e8-101">コンパイルできるリテラル コード片を表します。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-101">Represents a literal code fragment that can be compiled.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c8e8-102"><xref:System.CodeDom.CodeSnippetCompileUnit> は、変更せずにソースに直接含まれているコードのリテラルブロックを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-102"><xref:System.CodeDom.CodeSnippetCompileUnit> can represent a literal block of code that is included directly in the source without modification.</span></span>  
  
 <span data-ttu-id="3c8e8-103"><xref:System.CodeDom.CodeSnippetCompileUnit> は、コードのセクションを文字列として元の形式で正確に格納します。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-103">A <xref:System.CodeDom.CodeSnippetCompileUnit> stores a section of code, exactly in its original format, as a string.</span></span> <span data-ttu-id="3c8e8-104">CodeDOM は、リテラルコードフラグメントを変換しません。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-104">The CodeDOM does not translate literal code fragments.</span></span> <span data-ttu-id="3c8e8-105">リテラルコードフラグメントは、元の形式で格納され、出力されます。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-105">Literal code fragments are stored and output in their original format.</span></span> <span data-ttu-id="3c8e8-106">開発者が既にターゲット言語に含まれているコードをカプセル化できるようにするために、リテラルコードを含む CodeDOM オブジェクトが用意されています。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-106">CodeDOM objects that contain literal code are provided so developers can encapsulate code that is already in the target language.</span></span>  
  
 <span data-ttu-id="3c8e8-107"><xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> プロパティには、リテラルコードフラグメントが文字列として含まれています。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-107">The <xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> property contains the literal code fragment as a string.</span></span> <span data-ttu-id="3c8e8-108"><xref:System.CodeDom.CodeSnippetCompileUnit.LinePragma%2A> プロパティは省略可能であり、ソースコードドキュメント内のコードの位置を指定します。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-108">The <xref:System.CodeDom.CodeSnippetCompileUnit.LinePragma%2A> property is optional and specifies the position of the code within a source code document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c8e8-109">次のコード例は、リテラルコードを表す文字列を使用して <xref:System.CodeDom.CodeSnippetCompileUnit> クラスの新しいインスタンスを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-109">The following code example demonstrates how to create a new instance of the <xref:System.CodeDom.CodeSnippetCompileUnit> class by using a string that represents literal code.</span></span>  
  
 [!code-cpp[CodeDomSampleBatch#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomSampleBatch/CPP/class1.cpp#8)]
 [!code-csharp[CodeDomSampleBatch#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomSampleBatch/CS/class1.cs#8)]
 [!code-vb[CodeDomSampleBatch#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomSampleBatch/VB/class1.vb#8)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3c8e8-110"><see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-110">Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeSnippetCompileUnit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeSnippetCompileUnit.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeSnippetCompileUnit();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3c8e8-111"><see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-111">Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c8e8-112">このコンストラクターを使用する場合は、<xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> プロパティも設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-112">If you use this constructor you should also set the <xref:System.CodeDom.CodeSnippetCompileUnit.Value%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeSnippetCompileUnit (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeSnippetCompileUnit(System::String ^ value);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.CodeSnippetCompileUnit : string -&gt; System.CodeDom.CodeSnippetCompileUnit" Usage="new System.CodeDom.CodeSnippetCompileUnit value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="3c8e8-113">表すリテラル コード片。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-113">The literal code fragment to represent.</span></span></param>
        <summary><span data-ttu-id="3c8e8-114"><see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-114">Initializes a new instance of the <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="3c8e8-115">次のコード例は、リテラルコードを表す文字列を使用して <xref:System.CodeDom.CodeSnippetCompileUnit> クラスの新しいインスタンスを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-115">The following code example demonstrates how to create a new instance of the <xref:System.CodeDom.CodeSnippetCompileUnit> class by using a string that represents literal code.</span></span>  
  
 [!code-cpp[CodeDomSampleBatch#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomSampleBatch/CPP/class1.cpp#8)]
 [!code-csharp[CodeDomSampleBatch#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomSampleBatch/CS/class1.cs#8)]
 [!code-vb[CodeDomSampleBatch#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomSampleBatch/VB/class1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinePragma">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeLinePragma LinePragma { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeLinePragma LinePragma" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma" />
      <MemberSignature Language="VB.NET" Value="Public Property LinePragma As CodeLinePragma" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeLinePragma ^ LinePragma { System::CodeDom::CodeLinePragma ^ get(); void set(System::CodeDom::CodeLinePragma ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LinePragma : System.CodeDom.CodeLinePragma with get, set" Usage="System.CodeDom.CodeSnippetCompileUnit.LinePragma" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeLinePragma</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c8e8-116">ソース コード ドキュメント内でのコードの位置を示す行情報およびファイル情報を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-116">Gets or sets the line and file information about where the code is located in a source code document.</span></span></summary>
        <value><span data-ttu-id="3c8e8-117">コード片の位置を示す <see cref="T:System.CodeDom.CodeLinePragma" />。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-117">A <see cref="T:System.CodeDom.CodeLinePragma" /> that indicates the position of the code fragment.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeLinePragma" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeSnippetCompileUnit.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : string with get, set" Usage="System.CodeDom.CodeSnippetCompileUnit.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3c8e8-118">表すリテラル コード片を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-118">Gets or sets the literal code fragment to represent.</span></span></summary>
        <value><span data-ttu-id="3c8e8-119">リテラル コード片。</span><span class="sxs-lookup"><span data-stu-id="3c8e8-119">The literal code fragment.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
