<Type Name="FilterLogger" FullName="Microsoft.Extensions.Logging.Filter.Internal.FilterLogger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="31493d4bed2b3a9f81b43f771888a5032c086bea" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82501988" /></Metadata><TypeSignature Language="C#" Value="public class FilterLogger : Microsoft.Extensions.Logging.ILogger" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FilterLogger extends System.Object implements class Microsoft.Extensions.Logging.ILogger" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger" />
  <TypeSignature Language="VB.NET" Value="Public Class FilterLogger&#xA;Implements ILogger" />
  <TypeSignature Language="C++ CLI" Value="public ref class FilterLogger : Microsoft::Extensions::Logging::ILogger" />
  <TypeSignature Language="F#" Value="type FilterLogger = class&#xA;    interface ILogger" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Extensions.Logging.ILogger</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FilterLogger (Microsoft.Extensions.Logging.ILogger innerLogger, string categoryName, Microsoft.Extensions.Logging.IFilterLoggerSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Logging.ILogger innerLogger, string categoryName, class Microsoft.Extensions.Logging.IFilterLoggerSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.#ctor(Microsoft.Extensions.Logging.ILogger,System.String,Microsoft.Extensions.Logging.IFilterLoggerSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerLogger As ILogger, categoryName As String, settings As IFilterLoggerSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FilterLogger(Microsoft::Extensions::Logging::ILogger ^ innerLogger, System::String ^ categoryName, Microsoft::Extensions::Logging::IFilterLoggerSettings ^ settings);" />
      <MemberSignature Language="F#" Value="new Microsoft.Extensions.Logging.Filter.Internal.FilterLogger : Microsoft.Extensions.Logging.ILogger * string * Microsoft.Extensions.Logging.IFilterLoggerSettings -&gt; Microsoft.Extensions.Logging.Filter.Internal.FilterLogger" Usage="new Microsoft.Extensions.Logging.Filter.Internal.FilterLogger (innerLogger, categoryName, settings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="innerLogger" Type="Microsoft.Extensions.Logging.ILogger" />
        <Parameter Name="categoryName" Type="System.String" />
        <Parameter Name="settings" Type="Microsoft.Extensions.Logging.IFilterLoggerSettings" />
      </Parameters>
      <Docs>
        <param name="innerLogger">To be added.</param>
        <param name="categoryName">To be added.</param>
        <param name="settings">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginScope&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public IDisposable BeginScope&lt;TState&gt; (TState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable BeginScope&lt;TState&gt;(!!TState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.BeginScope``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginScope(Of TState) (state As TState) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; virtual IDisposable ^ BeginScope(TState state);" />
      <MemberSignature Language="F#" Value="abstract member BeginScope : 'State -&gt; IDisposable&#xA;override this.BeginScope : 'State -&gt; IDisposable" Usage="filterLogger.BeginScope state" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.BeginScope``1(``0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="state" Type="TState" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="state"><span data-ttu-id="d344b-101">スコープの識別子。</span><span class="sxs-lookup"><span data-stu-id="d344b-101">The identifier for the scope.</span></span></param>
        <summary><span data-ttu-id="d344b-102">論理操作スコープを開始します。</span><span class="sxs-lookup"><span data-stu-id="d344b-102">Begins a logical operation scope.</span></span></summary>
        <returns><span data-ttu-id="d344b-103">破棄の論理操作スコープを終了する <see cref="T:System.IDisposable" />。</span><span class="sxs-lookup"><span data-stu-id="d344b-103">An <see cref="T:System.IDisposable" /> that ends the logical operation scope on dispose.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled (Microsoft.Extensions.Logging.LogLevel logLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(valuetype Microsoft.Extensions.Logging.LogLevel logLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsEnabled (logLevel As LogLevel) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnabled(Microsoft::Extensions::Logging::LogLevel logLevel);" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : Microsoft.Extensions.Logging.LogLevel -&gt; bool&#xA;override this.IsEnabled : Microsoft.Extensions.Logging.LogLevel -&gt; bool" Usage="filterLogger.IsEnabled logLevel" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
      </Parameters>
      <Docs>
        <param name="logLevel"><span data-ttu-id="d344b-104">確認するレベル。</span><span class="sxs-lookup"><span data-stu-id="d344b-104">level to be checked.</span></span></param>
        <summary><span data-ttu-id="d344b-105">指定した <paramref name="logLevel" /> が有効かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="d344b-105">Checks if the given <paramref name="logLevel" /> is enabled.</span></span></summary>
        <returns><span data-ttu-id="d344b-106">有効な場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="d344b-106"><see langword="true" /> if enabled.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Log&lt;TState&gt;">
      <MemberSignature Language="C#" Value="public void Log&lt;TState&gt; (Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, Exception exception, Func&lt;TState,Exception,string&gt; formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Log&lt;TState&gt;(valuetype Microsoft.Extensions.Logging.LogLevel logLevel, valuetype Microsoft.Extensions.Logging.EventId eventId, !!TState state, class System.Exception exception, class System.Func`3&lt;!!TState, class System.Exception, string&gt; formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.Logging.Filter.Internal.FilterLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Log(Of TState) (logLevel As LogLevel, eventId As EventId, state As TState, exception As Exception, formatter As Func(Of TState, Exception, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TState&gt;&#xA; virtual void Log(Microsoft::Extensions::Logging::LogLevel logLevel, Microsoft::Extensions::Logging::EventId eventId, TState state, Exception ^ exception, Func&lt;TState, Exception ^, System::String ^&gt; ^ formatter);" />
      <MemberSignature Language="F#" Value="abstract member Log : Microsoft.Extensions.Logging.LogLevel * Microsoft.Extensions.Logging.EventId * 'State * Exception * Func&lt;'State, Exception, string&gt; -&gt; unit&#xA;override this.Log : Microsoft.Extensions.Logging.LogLevel * Microsoft.Extensions.Logging.EventId * 'State * Exception * Func&lt;'State, Exception, string&gt; -&gt; unit" Usage="filterLogger.Log (logLevel, eventId, state, exception, formatter)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.Extensions.Logging.ILogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Extensions.Logging.Filter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TState" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="logLevel" Type="Microsoft.Extensions.Logging.LogLevel" />
        <Parameter Name="eventId" Type="Microsoft.Extensions.Logging.EventId" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="formatter" Type="System.Func&lt;TState,System.Exception,System.String&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TState">To be added.</typeparam>
        <param name="logLevel"><span data-ttu-id="d344b-107">エントリはこのレベルで書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="d344b-107">Entry will be written on this level.</span></span></param>
        <param name="eventId"><span data-ttu-id="d344b-108">イベントの ID。</span><span class="sxs-lookup"><span data-stu-id="d344b-108">Id of the event.</span></span></param>
        <param name="state"><span data-ttu-id="d344b-109">書き込まれるエントリ。</span><span class="sxs-lookup"><span data-stu-id="d344b-109">The entry to be written.</span></span> <span data-ttu-id="d344b-110">オブジェクトも指定できます。</span><span class="sxs-lookup"><span data-stu-id="d344b-110">Can be also an object.</span></span></param>
        <param name="exception"><span data-ttu-id="d344b-111">このエントリに関連する例外。</span><span class="sxs-lookup"><span data-stu-id="d344b-111">The exception related to this entry.</span></span></param>
        <param name="formatter"><span data-ttu-id="d344b-112"><paramref name="state" /> と <paramref name="exception" /> の <see cref="T:System.String" /> メッセージを作成する関数。</span><span class="sxs-lookup"><span data-stu-id="d344b-112">Function to create a <see cref="T:System.String" /> message of the <paramref name="state" /> and <paramref name="exception" />.</span></span></param>
        <summary><span data-ttu-id="d344b-113">ログ エントリを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="d344b-113">Writes a log entry.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
