<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="26f7ac732371d19aae1ef696e9a0c39d469eb5cc" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75150978" /></Metadata><TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <TypeSignature Language="F#" Value="type KeyedCollection&lt;'Key, 'Item&gt; = class&#xA;    inherit Collection&lt;'Item&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">コレクション内のキーの型。</typeparam>
    <typeparam name="TItem">コレクション内の項目の型。</typeparam>
    <summary>キーが値に埋め込まれているコレクションの抽象基本クラスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ObjectModel.KeyedCollection%602> クラスを使用すると、o (1) のインデックス付き取得と、O (1) に近づくキー取得の両方が提供されます。 構築されたジェネリック型は抽象基底クラスであるため、抽象型であるか、厳密には無限の抽象型のセットになります。 <xref:System.Collections.ObjectModel.KeyedCollection%602>を使用するには、適切な構築型からコレクション型を派生させます。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602> クラスは、<xref:System.Collections.Generic.IList%601> ジェネリックインターフェイスに基づくコレクションと、<xref:System.Collections.Generic.IDictionary%602> ジェネリックインターフェイスに基づくコレクションとの間のハイブリッドです。 <xref:System.Collections.Generic.IList%601> ジェネリックインターフェイスに基づくコレクションと同様に、<xref:System.Collections.ObjectModel.KeyedCollection%602> は項目のインデックス付きリストです。 <xref:System.Collections.Generic.IDictionary%602> ジェネリックインターフェイスに基づくコレクションと同様に、<xref:System.Collections.ObjectModel.KeyedCollection%602> には各要素に関連付けられたキーがあります。  
  
 ディクショナリとは異なり、<xref:System.Collections.ObjectModel.KeyedCollection%602> の要素はキーと値のペアではありません。代わりに、要素全体が値になり、キーは値の中に埋め込まれます。  たとえば、`KeyedCollection\<String,String>` (Visual Basic の`KeyedCollection(Of String, String)`) から派生したコレクションの要素は、"John Doe Jr" のようになります。 値は "John Doe Jr" です。 キーは "Doe" です。または、整数キーを含む従業員レコードのコレクションを `KeyedCollection\<int,Employee>`から派生させることもできます。 Abstract <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドは、要素からキーを抽出します。  
  
 既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602> には、<xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> プロパティを使用して取得できる検索ディクショナリが含まれています。  項目が <xref:System.Collections.ObjectModel.KeyedCollection%602>に追加されると、項目のキーが1回抽出され、検索を高速にするために検索ディクショナリに保存されます。 この動作は、<xref:System.Collections.ObjectModel.KeyedCollection%602>の作成時にディクショナリの作成しきい値を指定することによってオーバーライドされます。 検索ディクショナリは、要素の数が最初にそのしきい値を超えたときに作成されます。  しきい値として-1 を指定した場合、検索辞書は作成されません。  
  
> [!NOTE]
>  内部参照ディクショナリを使用すると、`TItem` が参照型の場合はコレクション内のすべての項目への参照が含まれ、`TItem` が値型の場合はコレクション内のすべての項目のコピーが格納されます。 したがって、`TItem` が値の型である場合、検索辞書の使用は適切ではない可能性があります。  
  
 インデックスまたはキーによって項目にアクセスするには、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> プロパティを使用します。 キーを使用せずに項目を追加できますが、これらの項目にはインデックスによってのみアクセスできます。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初の例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するために必要な最小限のコードを示し、継承されたメソッドの多くを示しています。 2番目の例は、<xref:System.Collections.ObjectModel.KeyedCollection%602> の保護されたメソッドをオーバーライドしてカスタム動作を提供する方法を示しています。  
  
 **例1**  
  
 このコード例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>からコレクションクラスを派生させるために必要な最小限のコードを示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをオーバーライドし、基本クラスのコンストラクターにデリゲートするパブリックコンストラクターを提供します。 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> クラスと <xref:System.Collections.ObjectModel.Collection%601> クラスから継承されたプロパティとメソッドの多くも示しています。  
  
 `SimpleOrder` クラスは、`OrderItem` オブジェクトを含む非常に単純な要求リストです。各オブジェクトは、注文の品目を表します。 `OrderItem` のキーは不変であり、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するクラスにとって重要な考慮事項です。 変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 **例2**  
  
 次のコード例は、protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> の各メソッドのカスタム動作を提供し、既定の <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ (のC#インデクサー) を設定する方法を示しています。 この例で提供されるカスタム動作は、`Changed`という名前の通知イベントで、オーバーライドされた各メソッドの最後に発生します。  
  
 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> から派生し、単純な注文フォームを表す `SimpleOrder` クラスを作成します。 注文フォームには、注文されたアイテムを表す `OrderItem` オブジェクトが含まれます。 また、このコード例では、イベント情報を格納する `SimpleOrderChangedEventArgs` クラスと、変更の種類を識別するための列挙も作成します。  
  
 このコード例では、`Demo` クラスの `Main` メソッドで、派生クラスのプロパティとメソッドを呼び出すことによって、カスタム動作を示します。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>既定の等値比較子を使用する <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターで作成された <xref:System.Collections.ObjectModel.KeyedCollection%602> は、<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>から取得したキーの型に対して既定のジェネリック等値比較子を使用します。 別のジェネリック等値比較子を指定するには、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> コンストラクターまたは <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンストラクターを使用します。  
  
 既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602> には、最初の項目が追加されたときに作成される検索ディクショナリが含まれます。 項目が <xref:System.Collections.ObjectModel.KeyedCollection%602>に追加されると、項目のキーが1回抽出され、検索を高速にするために検索ディクショナリに保存されます。 この動作をオーバーライドするには、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンストラクターを使用し、ディクショナリの作成しきい値を指定します。  
  
> [!NOTE]
>  <xref:System.Collections.ObjectModel.KeyedCollection%602> クラスは abstract (Visual Basic で`MustInherit`) であるため、それを使用するためには抽象クラスから派生する必要があります。 派生型のコンストラクターで、適切な <xref:System.Collections.ObjectModel.KeyedCollection%602> コンストラクターを呼び出します。 コンストラクターで、等値比較子やディクショナリ作成のしきい値などの機能を公開する必要はありません。  
  
 このコンストラクターは O (1) 操作です。  
  
   
  
## Examples  
 このコード例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>からコレクションクラスを派生させるために必要な最小限のコードを示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをオーバーライドし、基本クラスのコンストラクターにデリゲートするパブリックコンストラクターを提供します。 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> クラスと <xref:System.Collections.ObjectModel.Collection%601> クラスから継承されたプロパティとメソッドの多くも示しています。  
  
 `SimpleOrder` クラスは、`OrderItem` オブジェクトを含む非常に単純な要求リストです。各オブジェクトは、注文の品目を表します。 `OrderItem` のキーは不変であり、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するクラスにとって重要な考慮事項です。 変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">キーを比較する場合に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。または、<see langword="null" /> から取得する、キーの型の既定の等値比較子を使用する場合は <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />。</param>
        <summary>指定した等値比較子を使用する <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602> には、最初の項目が追加されたときに作成される検索ディクショナリが含まれます。 項目が <xref:System.Collections.ObjectModel.KeyedCollection%602>に追加されると、項目のキーが1回抽出され、検索を高速にするために検索ディクショナリに保存されます。 この動作をオーバーライドするには、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンストラクターを使用し、ディクショナリの作成しきい値を指定します。  
  
> [!NOTE]
>  <xref:System.Collections.ObjectModel.KeyedCollection%602> クラスは abstract (Visual Basic で`MustInherit`) であるため、それを使用するためには抽象クラスから派生する必要があります。 派生型のコンストラクターで、適切な <xref:System.Collections.ObjectModel.KeyedCollection%602> コンストラクターを呼び出します。 コンストラクターで、等値比較子やディクショナリ作成のしきい値などの機能を公開する必要はありません。  
  
 このコンストラクターは O (1) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * int -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; (comparer, dictionaryCreationThreshold)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">キーを比較する場合に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。または、<see langword="null" /> から取得する、キーの型の既定の等値比較子を使用する場合は <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />。</param>
        <param name="dictionaryCreationThreshold">検索ディクショナリを作成せずにコレクションが保有できる要素数 (0 を指定すると最初の項目の追加時に検索ディクショナリが作成される)。検索ディクショナリを作成しない場合は -1。</param>
        <summary>指定した等値比較子を使用し、指定したしきい値を超えた場合に検索ディクショナリを作成する、<see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602> には、最初の項目が追加されたときに作成される検索ディクショナリが含まれます。 項目が <xref:System.Collections.ObjectModel.KeyedCollection%602>に追加されると、項目のキーが1回抽出され、検索を高速にするために検索ディクショナリに保存されます。 このコンストラクターを使用すると、その動作をオーバーライドできます。 最初の要素が追加されたときにディクショナリを作成するには0を指定し、2番目の要素が追加されたときにディクショナリを作成するには1を指定します。 しきい値として-1 を指定した場合、検索辞書は作成されません。  
  
 非常に小さなコレクションでは、検索ディクショナリによって提供される取得速度の向上は、辞書に必要な追加メモリには価値がない可能性があります。 しきい値を設定すると、そのトレードオフをいつどのようにするかを決めることができます。  
  
> [!NOTE]
>  <xref:System.Collections.ObjectModel.KeyedCollection%602> クラスは abstract (Visual Basic で`MustInherit`) であるため、それを使用するためには抽象クラスから派生する必要があります。 派生型のコンストラクターで、適切な <xref:System.Collections.ObjectModel.KeyedCollection%602> コンストラクターを呼び出します。 コンストラクターで、等値比較子やディクショナリ作成のしきい値などの機能を公開する必要はありません。  
  
 このコンストラクターは O (1) 操作です。  
  
   
  
## Examples  
 次のコード例は、protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> の各メソッドのカスタム動作を提供し、既定の <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ (のC#インデクサー) を設定する方法を示しています。 この例で提供されるカスタム動作は、`Changed`という名前の通知イベントで、オーバーライドされた各メソッドの最後に発生します。  
  
 このコード例では、しきい値が0の <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンストラクターを使用して、コレクションにオブジェクトを初めて追加するときに内部ディクショナリが作成されるようにします。  
  
 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> から派生し、単純な注文フォームを表す `SimpleOrder` クラスを作成します。 注文フォームには、注文されたアイテムを表す `OrderItem` オブジェクトが含まれます。 また、このコード例では、イベント情報を格納する `SimpleOrderChangedEventArgs` クラスと、変更の種類を識別するための列挙も作成します。  
  
 このコード例では、`Demo` クラスの `Main` メソッドで、派生クラスのプロパティとメソッドを呼び出すことによって、カスタム動作を示します。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dictionaryCreationThreshold" /> が -1 未満です。</exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberSignature Language="F#" Value="member this.ChangeItemKey : 'Item * 'Key -&gt; unit" Usage="keyedCollection.ChangeItemKey (item, newKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item">変更するキーの要素。</param>
        <param name="newKey"><paramref name="item" /> の新しいキー。</param>
        <summary>検索ディクショナリの指定した要素に関連付けられたキーを変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは `item`に埋め込まれたキーを変更しません。単に、検索ディクショナリに保存されているキーを置き換えます。  したがって、`newKey` が `item`に埋め込まれているキーと異なる場合は、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>によって返されたキーを使用して `item` にアクセスすることはできません。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602> にルックアップディクショナリがない場合、このメソッドは何も実行しません。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602> 内のすべてのキーは一意である必要があります。 キーを `null`ことはできません。  
  
 このメソッドは、O(1) 操作です。  
  
## <a name="notes-for-implementers"></a>実装に関する注意事項  
 項目に埋め込まれたキーを変更する前に、このメソッドを呼び出して、検索ディクショナリのキーを更新する必要があります。 ディクショナリの作成しきい値が-1 の場合、このメソッドを呼び出す必要はありません。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドは、派生クラスのパブリックメソッドとして公開しないでください。 このメソッドを誤用すると、ルックアップディクショナリが項目キーと同期しなくなります。 たとえば、キーを `null` に設定してから別の値に設定すると、項目の複数のキーが検索ディクショナリに追加されます。 このメソッドを内部で公開して、変更可能な項目キーを許可します。項目のキーが変更されたときに、このメソッドを使用して、検索ディクショナリのキーを変更します。  
  
   
  
## Examples  
 次のコード例は、保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドをオーバーライドして変更可能なキーをサポートする方法、および保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、キーとコレクションの整合性を維持する方法を示しています。  
  
 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生した `MutableKeys` コレクションと、`MutableKey` クラスを作成します。 `MutableKey` クラスには、設定可能な `Key` プロパティがあります。 新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子は、コレクションの `internal` (Visual Basic で`Friend` `ChangeKey`) を呼び出して、新しいキーが既存のキーと競合するかどうかをテストします。 その場合は、例外がスローされ、プロパティ値は変更されません。  
  
 `MutableKey` オブジェクトと `MutableKeys` コレクション間の接続を維持し、オブジェクトが2つのコレクションに挿入されないようにするために、`MutableKey` クラスには`Friend` フィールドに `internal` (Visual Basic) があります。`Collection` このフィールドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドなどのコレクションの項目を追加および削除するためのカスタム動作を提供する、保護されたメソッドによって管理されます。 フィールドは、アイテムがコレクションに追加されたときに設定され、アイテムが削除されるとクリアされます。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="item" /> は <see langword="null" /> です。  
  
または 
 <paramref name="key" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="item" /> が見つかりません。  
  
または 
 <paramref name="key" /> は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> に既に存在します。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberSignature Language="F#" Value="override this.ClearItems : unit -&gt; unit" Usage="keyedCollection.ClearItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> からすべての要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 検索ディクショナリが存在する場合、このメソッドはそれをクリアしますが、削除しません。  
  
 要素の数がディクショナリの作成しきい値を超え、<xref:System.Collections.ObjectModel.KeyedCollection%602> が参照ディクショナリを使用している場合は、要素の数がしきい値を下回る場合でも、検索辞書が引き続き使用されます。  
  
 このメソッドは O(`n`) 操作です。`n` は <xref:System.Collections.ObjectModel.Collection%601.Count%2A> です。  
  
## <a name="notes-for-implementers"></a>実装に関する注意事項  
 このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601> ジェネリッククラスから継承された <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> メソッドにカスタマイズされた動作を提供します。  
  
 このメソッドの基本クラスの実装を呼び出して、基になるコレクションをクリアし、参照ディクショナリをクリアします。  
  
   
  
## Examples  
 このセクションでは、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> メソッドをオーバーライドして、コレクションからすべてのオブジェクトをクリアするカスタム動作を提供する2つのコード例について説明します。 最初の例では、カスタム通知イベントを追加し、2番目の例では、変更可能なキーを持つオブジェクトのコレクションをサポートしています。  
  
 例 1  
  
 次のコード例は、protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> の各メソッドのカスタム動作を提供し、既定の <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ (のC#インデクサー) を設定する方法を示しています。 この例で提供されるカスタム動作は、`Changed`という名前の通知イベントで、オーバーライドされた各メソッドの最後に発生します。  
  
 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> から派生し、単純な注文フォームを表す `SimpleOrder` クラスを作成します。 注文フォームには、注文されたアイテムを表す `OrderItem` オブジェクトが含まれます。 また、このコード例では、イベント情報を格納する `SimpleOrderChangedEventArgs` クラスと、変更の種類を識別するための列挙も作成します。  
  
 このコード例では、`Demo` クラスの `Main` メソッドで、派生クラスのプロパティとメソッドを呼び出すことによって、カスタム動作を示します。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 例 2  
  
 次のコード例は、保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドをオーバーライドして変更可能なキーをサポートする方法、および保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、キーとコレクションの整合性を維持する方法を示しています。  
  
 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生した `MutableKeys` コレクションと、`MutableKey` クラスを作成します。 `MutableKey` クラスには、設定可能な `Key` プロパティがあります。 新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子は、コレクションの `internal` (Visual Basic で`Friend` `ChangeKey`) を呼び出して、新しいキーが既存のキーと競合するかどうかをテストします。 その場合は、例外がスローされ、プロパティ値は変更されません。  
  
 `MutableKey` オブジェクトと `MutableKeys` コレクション間の接続を維持し、オブジェクトが2つのコレクションに挿入されないようにするために、`MutableKey` クラスには`Friend` フィールドに `internal` (Visual Basic) があります。`Collection` このフィールドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドなどのコレクションの項目を追加および削除するためのカスタム動作を提供する、保護されたメソッドによって管理されます。 フィールドは、アイテムがコレクションに追加されたときに設定され、アイテムが削除されるとクリアされます。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションの複数のキーの値が等しいかどうかを確認するために使用される、ジェネリック等値比較子を取得します。</summary>
        <value>コレクションの複数のキーの値が等しいかどうかを確認するために使用される <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Contains : 'Key -&gt; bool" Usage="keyedCollection.Contains key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 内で検索されるキー。</param>
        <summary>指定されたキーを持つ要素がコレクションに格納されているかどうかを確認します。</summary>
        <returns>指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.ObjectModel.KeyedCollection%602> にルックアップ辞書がある場合は、`key` を使用して辞書を検索します。 検索ディクショナリがない場合は、各要素のキーが <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドを使用して抽出され、指定したキーと比較されます。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602> に参照ディクショナリがある場合、このメソッドは O (1) 操作です。それ以外の場合は、O (`n`) 操作であり、`n` は <xref:System.Collections.ObjectModel.Collection%601.Count%2A>ます。  
  
   
  
## Examples  
 このコード例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>からコレクションクラスを派生させるために必要な最小限のコードを示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをオーバーライドし、基本クラスのコンストラクターにデリゲートするパブリックコンストラクターを提供します。 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> クラスと <xref:System.Collections.ObjectModel.Collection%601> クラスから継承されたプロパティとメソッドの多くも示しています。  
  
 `SimpleOrder` クラスは、`OrderItem` オブジェクトを含む非常に単純な要求リストです。各オブジェクトは、注文の品目を表します。 `OrderItem` のキーは不変であり、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するクラスにとって重要な考慮事項です。 変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.Generic.IDictionary&lt;'Key, 'Item&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の検索ディクショナリを取得します。</summary>
        <value>存在する場合は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の検索ディクショナリ。それ以外の場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602> には、最初の項目が追加されたときに作成される検索ディクショナリが含まれます。 項目が <xref:System.Collections.ObjectModel.KeyedCollection%602>に追加されると、項目のキーが1回抽出され、検索を高速にするために検索ディクショナリに保存されます。 この動作をオーバーライドするには、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンストラクターを使用し、ディクショナリの作成しきい値を指定します。  
  
 このプロパティ値を取得することは、O(1) 操作になります。  
  
   
  
## Examples  
 次のコード例は、保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドをオーバーライドして変更可能なキーをサポートする方法、および保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、キーとコレクションの整合性を維持する方法を示しています。  
  
 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生した `MutableKeys` コレクションと、`MutableKey` クラスを作成します。 `MutableKey` クラスには、設定可能な `Key` プロパティがあります。 新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子は、コレクションの `internal` (Visual Basic で`Friend` `ChangeKey`) を呼び出して、新しいキーが既存のキーと競合するかどうかをテストします。 その場合は、例外がスローされ、プロパティ値は変更されません。  
  
 `MutableKey` オブジェクトと `MutableKeys` コレクション間の接続を維持し、オブジェクトが2つのコレクションに挿入されないようにするために、`MutableKey` クラスには`Friend` フィールドに `internal` (Visual Basic) があります。`Collection` このフィールドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドなどのコレクションの項目を追加および削除するためのカスタム動作を提供する、保護されたメソッドによって管理されます。 フィールドは、アイテムがコレクションに追加されたときに設定され、アイテムが削除されるとクリアされます。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberSignature Language="F#" Value="abstract member GetKeyForItem : 'Item -&gt; 'Key" Usage="keyedCollection.GetKeyForItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item">キーの抽出元要素。</param>
        <summary>派生クラスで実装された場合、指定した要素からキーを抽出します。</summary>
        <returns>指定した要素のキー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 参照辞書のキーが `item`に埋め込まれているキーと異なる場合、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>によって返されたキーを使用して `item` にアクセスすることはできません。  
  
 このメソッドを実装すると、キーのない項目を含むコレクションに対して `null` を返すことができます。この場合、項目にはインデックスによってのみアクセスできます。 このメソッドは、O(1) 操作です。  
  
## <a name="notes-for-implementers"></a>実装に関する注意事項  
 ディクショナリ内の項目からキーを抽出する方法をディクショナリに提供するには、このメソッドをオーバーライドする必要があります。  
  
 このメソッドは、内部的に呼び出されます。 パブリックにする必要はありません。  
  
   
  
## Examples  
 このコード例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>からコレクションクラスを派生させるために必要な最小限のコードを示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをオーバーライドし、基本クラスのコンストラクターにデリゲートするパブリックコンストラクターを提供します。 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> クラスと <xref:System.Collections.ObjectModel.Collection%601> クラスから継承されたプロパティとメソッドの多くも示しています。  
  
 `SimpleOrder` クラスは、`OrderItem` オブジェクトを含む非常に単純な要求リストです。各オブジェクトは、注文の品目を表します。 `OrderItem` のキーは不変であり、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するクラスにとって重要な考慮事項です。 変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.InsertItem : int * 'Item -&gt; unit" Usage="keyedCollection.InsertItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index"><paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
        <param name="item">挿入するオブジェクトです。</param>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 内の指定したインデックスの位置に要素を挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `index` が <xref:System.Collections.ObjectModel.Collection%601.Count%2A>に等しい場合は、<xref:System.Collections.ObjectModel.KeyedCollection%602>の末尾に `item` が追加されます。  
  
 このメソッドは O(`n`) 操作です。`n` は <xref:System.Collections.ObjectModel.Collection%601.Count%2A> です。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> は、<xref:System.Collections.ObjectModel.Collection%601.Add%2A> メソッドと <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> メソッドによって呼び出されます。  
  
## <a name="notes-for-implementers"></a>実装に関する注意事項  
 このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601> ジェネリッククラスから継承された <xref:System.Collections.ObjectModel.Collection%601.Add%2A> および <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> メソッドに対してカスタマイズされた動作を提供します。  
  
 このメソッドの基本クラスの実装を呼び出して、基になるコレクションに項目を挿入し、検索ディクショナリを更新します。  
  
   
  
## Examples  
 このセクションには、コレクションにオブジェクトを追加または挿入するためのカスタム動作を提供するための <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドのオーバーライド方法を示す2つのコード例が含まれています。 最初の例では、カスタム通知イベントを追加し、2番目の例では、変更可能なキーを持つオブジェクトのコレクションをサポートしています。  
  
 例 1  
  
 次のコード例は、protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> の各メソッドのカスタム動作を提供し、既定の <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ (のC#インデクサー) を設定する方法を示しています。 この例で提供されるカスタム動作は、`Changed`という名前の通知イベントで、オーバーライドされた各メソッドの最後に発生します。  
  
 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> から派生し、単純な注文フォームを表す `SimpleOrder` クラスを作成します。 注文フォームには、注文されたアイテムを表す `OrderItem` オブジェクトが含まれます。 また、このコード例では、イベント情報を格納する `SimpleOrderChangedEventArgs` クラスと、変更の種類を識別するための列挙も作成します。  
  
 このコード例では、`Demo` クラスの `Main` メソッドで、派生クラスのプロパティとメソッドを呼び出すことによって、カスタム動作を示します。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 例 2  
  
 次のコード例は、保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドをオーバーライドして変更可能なキーをサポートする方法、および保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、キーとコレクションの整合性を維持する方法を示しています。  
  
 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生した `MutableKeys` コレクションと、`MutableKey` クラスを作成します。 `MutableKey` クラスには、設定可能な `Key` プロパティがあります。 新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子は、コレクションの `internal` (Visual Basic で`Friend` `ChangeKey`) を呼び出して、新しいキーが既存のキーと競合するかどうかをテストします。 その場合は、例外がスローされ、プロパティ値は変更されません。  
  
 `MutableKey` オブジェクトと `MutableKeys` コレクション間の接続を維持し、オブジェクトが2つのコレクションに挿入されないようにするために、`MutableKey` クラスには`Friend` フィールドに `internal` (Visual Basic) があります。`Collection` このフィールドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドなどのコレクションの項目を追加および削除するためのカスタム動作を提供する、保護されたメソッドによって管理されます。 フィールドは、アイテムがコレクションに追加されたときに設定され、アイテムが削除されるとクリアされます。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> が 0 未満です。  
  
または 
 <paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> より大きくなっています。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Item" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">取得する要素のキー。</param>
        <summary>指定したキーを持つ要素を取得します。</summary>
        <value>指定したキーを持つ要素。 指定したキーを持つ要素が見つからない場合は、例外がスローされます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、`myCollection[key]` (Visual Basic で`myCollection(key)`) という構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。  
  
> [!NOTE]
>  このプロパティは、要素を数値インデックスによって取得および設定する、継承された <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> プロパティとは異なります。 ただし、`TKey` が <xref:System.Int32>型の場合、このプロパティは継承されたプロパティをマスクします。 その場合は、その基本型に <xref:System.Collections.ObjectModel.KeyedCollection%602> をキャストすることによって、継承されたプロパティにアクセスできます。 たとえば、`KeyedCollection<int, MyType>` (Visual Basic では`KeyedCollection(Of Integer, MyType)`、でC++は `KeyedCollection<int, MyType^>`) は `Collection<MyType>` にキャストできます (`Collection(Of MyType)` の Visual Basic、 C++`Collection<MyType^>`)。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602> にルックアップディクショナリがある場合は、`key` を使用してディクショナリから要素を取得します。  検索ディクショナリがない場合は、各要素のキーが <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドを使用して抽出され、指定したキーと比較されます。  
  
 このC#言語では、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> プロパティを実装する代わりに、 [this](~/docs/csharp/language-reference/keywords/this.md)キーワードを使用してインデクサーを定義します。 Visual Basic は、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> を[既定のプロパティ](~/docs/visual-basic/language-reference/modifiers/default.md)として実装します。これにより、同じインデックス作成機能が提供されます。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602> にルックアップディクショナリがある場合、このプロパティの値を取得するには O (1) 操作を実行します。それ以外の場合は、O (`n`) 操作であり、`n` は <xref:System.Collections.ObjectModel.Collection%601.Count%2A>ます。

## Examples  
 このコード例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>からコレクションクラスを派生させるために必要な最小限のコードを示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをオーバーライドし、基本クラスのコンストラクターにデリゲートするパブリックコンストラクターを提供します。 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> クラスと <xref:System.Collections.ObjectModel.Collection%601> クラスから継承されたプロパティとメソッドの多くも示しています。  
  
 このコード例では、読み取り専用で、キーによって取得される <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> プロパティと、インデックスによって設定および取得される <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> プロパティの両方を呼び出します。 派生コレクション内のオブジェクトに整数キーがある場合に、後者のプロパティにアクセスする方法を示します。これは、インデックス取得に使用される整数と区別できません。  
  
 `SimpleOrder` クラスは、`OrderItem` オブジェクトを含む非常に単純な要求リストです。各オブジェクトは、注文の品目を表します。 `OrderItem` のキーは不変であり、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するクラスにとって重要な考慮事項です。 変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">指定したキーを持つ要素がコレクション内に存在しません。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Key -&gt; bool" Usage="keyedCollection.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">削除する要素のキー。</param>
        <summary>指定したキーを持つ要素を <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> から削除します。</summary>
        <returns>要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<see langword="false" /> が <paramref name="key" /> に見つからない場合にも <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素のキーも検索ディクショナリから削除されます。  
  
 要素の数がディクショナリの作成しきい値を超え、<xref:System.Collections.ObjectModel.KeyedCollection%602> が参照ディクショナリを使用している場合は、要素の数がしきい値を下回る場合でも、検索辞書が引き続き使用されます。  
  
> [!NOTE]
>  このメソッドの動作をカスタマイズするには、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> メソッドをオーバーライドします。  
  
 このメソッドは O(`n`) 操作です。`n` は <xref:System.Collections.ObjectModel.Collection%601.Count%2A> です。  
  
   
  
## Examples  
 このコード例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>からコレクションクラスを派生させるために必要な最小限のコードを示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをオーバーライドし、基本クラスのコンストラクターにデリゲートするパブリックコンストラクターを提供します。 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> クラスと <xref:System.Collections.ObjectModel.Collection%601> クラスから継承されたプロパティとメソッドの多くも示しています。  
  
 この例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>から継承された <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> メソッドを示しています。このメソッドは、指定したキーを持つ項目を削除します。また、<xref:System.Collections.ObjectModel.Collection%601>から継承された <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> および <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> メソッドも、オブジェクトとインデックスによってそれぞれ削除されます。  
  
 `SimpleOrder` クラスは、`OrderItem` オブジェクトを含む非常に単純な要求リストです。各オブジェクトは、注文の品目を表します。 `OrderItem` のキーは不変であり、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するクラスにとって重要な考慮事項です。 変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RemoveItem : int -&gt; unit" Usage="keyedCollection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除する要素のインデックス。</param>
        <summary><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の指定したインデックスにある要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 要素のキーも検索ディクショナリから削除されます。  
  
 要素の数がディクショナリの作成しきい値を超え、<xref:System.Collections.ObjectModel.KeyedCollection%602> が参照ディクショナリを使用している場合は、要素の数がしきい値を下回る場合でも、検索辞書が引き続き使用されます。  
  
 このメソッドは O(`n`) 操作です。`n` は <xref:System.Collections.ObjectModel.Collection%601.Count%2A> です。  
  
## <a name="notes-for-implementers"></a>実装に関する注意事項  
 このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601> ジェネリッククラスから継承された <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> および <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> メソッドと、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> メソッドに対してカスタマイズされた動作を提供します。  
  
 このメソッドの基本クラスの実装を呼び出して、基になるコレクションから項目を削除し、参照ディクショナリを更新します。  
  
   
  
## Examples  
 このセクションでは、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> メソッドをオーバーライドして、コレクションからオブジェクトを削除するためのカスタム動作を提供する2つのコード例について説明します。 最初の例では、カスタム通知イベントを追加し、2番目の例では、変更可能なキーを持つオブジェクトのコレクションをサポートしています。  
  
 例 1  
  
 次のコード例は、protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> の各メソッドのカスタム動作を提供し、既定の <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ (のC#インデクサー) を設定する方法を示しています。 この例で提供されるカスタム動作は、`Changed`という名前の通知イベントで、オーバーライドされた各メソッドの最後に発生します。  
  
 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> から派生し、単純な注文フォームを表す `SimpleOrder` クラスを作成します。 注文フォームには、注文されたアイテムを表す `OrderItem` オブジェクトが含まれます。 また、このコード例では、イベント情報を格納する `SimpleOrderChangedEventArgs` クラスと、変更の種類を識別するための列挙も作成します。  
  
 このコード例では、`Demo` クラスの `Main` メソッドで、派生クラスのプロパティとメソッドを呼び出すことによって、カスタム動作を示します。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 例 2  
  
 次のコード例は、保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドをオーバーライドして変更可能なキーをサポートする方法、および保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、キーとコレクションの整合性を維持する方法を示しています。  
  
 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生した `MutableKeys` コレクションと、`MutableKey` クラスを作成します。 `MutableKey` クラスには、設定可能な `Key` プロパティがあります。 新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子は、コレクションの `internal` (Visual Basic で`Friend` `ChangeKey`) を呼び出して、新しいキーが既存のキーと競合するかどうかをテストします。 その場合は、例外がスローされ、プロパティ値は変更されません。  
  
 `MutableKey` オブジェクトと `MutableKeys` コレクション間の接続を維持し、オブジェクトが2つのコレクションに挿入されないようにするために、`MutableKey` クラスには`Friend` フィールドに `internal` (Visual Basic) があります。`Collection` このフィールドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドなどのコレクションの項目を追加および削除するためのカスタム動作を提供する、保護されたメソッドによって管理されます。 フィールドは、アイテムがコレクションに追加されたときに設定され、アイテムが削除されるとクリアされます。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.SetItem : int * 'Item -&gt; unit" Usage="keyedCollection.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">置き換えられる項目の 0 から始まるインデックス。</param>
        <param name="item">新しい項目。</param>
        <summary>指定したインデックス位置の項目を、指定した項目で置き換えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 それに応じて、検索辞書が更新されます。 つまり、置換される項目のキーが検索ディクショナリから削除され、新しい項目のキーが追加されます。  
  
 このメソッドは、O(1) 操作です。  
  
## <a name="notes-for-implementers"></a>実装に関する注意事項  
 <xref:System.Collections.ObjectModel.Collection%601> ジェネリッククラスから継承された <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティを設定するためのカスタマイズされた動作を提供するには、このメソッドをオーバーライドします。  
  
> [!NOTE]
>  このメソッドは、読み取り専用の <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> プロパティの動作には影響しません。  
  
 このメソッドの基本クラスの実装を呼び出して、基になるコレクションの項目を設定し、参照ディクショナリを更新します。  
  
   
  
## Examples  
 このセクションには、<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> プロパティを設定するためのカスタム動作を提供するために <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> メソッドをオーバーライドする方法を示す2つのコード例が含まれています。 最初の例では、カスタム通知イベントを追加し、2番目の例では、変更可能なキーを持つオブジェクトのコレクションをサポートしています。  
  
 例 1  
  
 次のコード例は、protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> の各メソッドのカスタム動作を提供し、既定の <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ (のC#インデクサー) を設定する方法を示しています。 この例で提供されるカスタム動作は、`Changed`という名前の通知イベントで、オーバーライドされた各メソッドの最後に発生します。  
  
 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> から派生し、単純な注文フォームを表す `SimpleOrder` クラスを作成します。 注文フォームには、注文されたアイテムを表す `OrderItem` オブジェクトが含まれます。 また、このコード例では、イベント情報を格納する `SimpleOrderChangedEventArgs` クラスと、変更の種類を識別するための列挙も作成します。  
  
 このコード例では、`Demo` クラスの `Main` メソッドで、派生クラスのプロパティとメソッドを呼び出すことによって、カスタム動作を示します。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 例 2  
  
 次のコード例は、保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドをオーバーライドして変更可能なキーをサポートする方法、および保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、キーとコレクションの整合性を維持する方法を示しています。  
  
 このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生した `MutableKeys` コレクションと、`MutableKey` クラスを作成します。 `MutableKey` クラスには、設定可能な `Key` プロパティがあります。 新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子は、コレクションの `internal` (Visual Basic で`Friend` `ChangeKey`) を呼び出して、新しいキーが既存のキーと競合するかどうかをテストします。 その場合は、例外がスローされ、プロパティ値は変更されません。  
  
 `MutableKey` オブジェクトと `MutableKeys` コレクション間の接続を維持し、オブジェクトが2つのコレクションに挿入されないようにするために、`MutableKey` クラスには`Friend` フィールドに `internal` (Visual Basic) があります。`Collection` このフィールドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドなどのコレクションの項目を追加および削除するためのカスタム動作を提供する、保護されたメソッドによって管理されます。 フィールドは、アイテムがコレクションに追加されたときに設定され、アイテムが削除されるとクリアされます。  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key * 'Item -&gt; bool" Usage="keyedCollection.TryGetValue (key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="item" Type="TItem" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="key">コレクション内で検索するアイテムのキー。</param>
        <param name="item">このメソッドが <see langword="true" /> を返すとき、指定したキーに一致するコレクションの項目。このメソッドが <see langword="false" /> を返すとき、コレクションの型の <see langword="default" /> 値。</param>
        <summary>指定したキーを使用して、コレクションから項目を取得しようとします。</summary>
        <returns>指定したキーの項目がコレクションに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
