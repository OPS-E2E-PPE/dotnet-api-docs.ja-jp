<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c89d98e367a7205fcd37ba9360776f3ba0c420eb" /><Meta Name="ms.sourcegitcommit" Value="2e48a9d60e44719c021ea403a45f4a08b7f88f08" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/14/2019" /><Meta Name="ms.locfileid" Value="74092433" /></Metadata><TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class KeyedCollection(Of TKey, TItem)&#xA;Inherits Collection(Of TItem)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TItem&gt;&#xA;public ref class KeyedCollection abstract : System::Collections::ObjectModel::Collection&lt;TItem&gt;" />
  <TypeSignature Language="F#" Value="type KeyedCollection&lt;'Key, 'Item&gt; = class&#xA;    inherit Collection&lt;'Item&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey"><span data-ttu-id="2bf6b-101">コレクション内のキーの型。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-101">The type of keys in the collection.</span></span></typeparam>
    <typeparam name="TItem"><span data-ttu-id="2bf6b-102">コレクション内の項目の型。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-102">The type of items in the collection.</span></span></typeparam>
    <summary><span data-ttu-id="2bf6b-103">キーが値に埋め込まれているコレクションの抽象基本クラスを提供します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-103">Provides the abstract base class for a collection whose keys are embedded in the values.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-104"><xref:System.Collections.ObjectModel.KeyedCollection%602> クラスを使用すると、o (1) のインデックス付き取得と、O (1) に近づくキー取得の両方が提供されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-104">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class provides both O(1) indexed retrieval and keyed retrieval that approaches O(1).</span></span> <span data-ttu-id="2bf6b-105">構築されたジェネリック型は抽象基底クラスであるため、抽象型であるか、厳密には無限の抽象型のセットになります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-105">It is an abstract type, or more accurately an infinite set of abstract types, because each of its constructed generic types is an abstract base class.</span></span> <span data-ttu-id="2bf6b-106"><xref:System.Collections.ObjectModel.KeyedCollection%602>を使用するには、適切な構築型からコレクション型を派生させます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-106">To use <xref:System.Collections.ObjectModel.KeyedCollection%602>, derive your collection type from the appropriate constructed type.</span></span>  
  
 <span data-ttu-id="2bf6b-107"><xref:System.Collections.ObjectModel.KeyedCollection%602> クラスは、<xref:System.Collections.Generic.IList%601> ジェネリックインターフェイスに基づくコレクションと、<xref:System.Collections.Generic.IDictionary%602> ジェネリックインターフェイスに基づくコレクションとの間のハイブリッドです。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-107">The <xref:System.Collections.ObjectModel.KeyedCollection%602> class is a hybrid between a collection based on the <xref:System.Collections.Generic.IList%601> generic interface and a collection based on the <xref:System.Collections.Generic.IDictionary%602> generic interface.</span></span> <span data-ttu-id="2bf6b-108"><xref:System.Collections.Generic.IList%601> ジェネリックインターフェイスに基づくコレクションと同様に、<xref:System.Collections.ObjectModel.KeyedCollection%602> は項目のインデックス付きリストです。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-108">Like collections based on the <xref:System.Collections.Generic.IList%601> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> is an indexed list of items.</span></span> <span data-ttu-id="2bf6b-109"><xref:System.Collections.Generic.IDictionary%602> ジェネリックインターフェイスに基づくコレクションと同様に、<xref:System.Collections.ObjectModel.KeyedCollection%602> には各要素に関連付けられたキーがあります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-109">Like collections based on the <xref:System.Collections.Generic.IDictionary%602> generic interface, <xref:System.Collections.ObjectModel.KeyedCollection%602> has a key associated with each element.</span></span>  
  
 <span data-ttu-id="2bf6b-110">ディクショナリとは異なり、<xref:System.Collections.ObjectModel.KeyedCollection%602> の要素はキーと値のペアではありません。代わりに、要素全体が値になり、キーは値の中に埋め込まれます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-110">Unlike dictionaries, an element of <xref:System.Collections.ObjectModel.KeyedCollection%602> is not a key/value pair; instead, the entire element is the value and the key is embedded within the value.</span></span>  <span data-ttu-id="2bf6b-111">たとえば、`KeyedCollection\<String,String>` (Visual Basic の`KeyedCollection(Of String, String)`) から派生したコレクションの要素は、"John Doe Jr" のようになります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-111">For example, an element of a collection derived from `KeyedCollection\<String,String>` (`KeyedCollection(Of String, String)` in Visual Basic) might be "John Doe Jr."</span></span> <span data-ttu-id="2bf6b-112">値は "John Doe Jr" です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-112">where the value is "John Doe Jr."</span></span> <span data-ttu-id="2bf6b-113">キーは "Doe" です。または、整数キーを含む従業員レコードのコレクションを `KeyedCollection\<int,Employee>`から派生させることもできます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-113">and the key is "Doe"; or a collection of employee records containing integer keys could be derived from `KeyedCollection\<int,Employee>`.</span></span> <span data-ttu-id="2bf6b-114">Abstract <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドは、要素からキーを抽出します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-114">The abstract <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method extracts the key from the element.</span></span>  
  
 <span data-ttu-id="2bf6b-115">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602> には、<xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> プロパティを使用して取得できる検索ディクショナリが含まれています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-115">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that you can obtain with the <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> property.</span></span>  <span data-ttu-id="2bf6b-116">項目が <xref:System.Collections.ObjectModel.KeyedCollection%602>に追加されると、項目のキーが1回抽出され、検索を高速にするために検索ディクショナリに保存されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-116">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="2bf6b-117">この動作は、<xref:System.Collections.ObjectModel.KeyedCollection%602>の作成時にディクショナリの作成しきい値を指定することによってオーバーライドされます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-117">This behavior is overridden by specifying a dictionary creation threshold when you create the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="2bf6b-118">検索ディクショナリは、要素の数が最初にそのしきい値を超えたときに作成されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-118">The lookup dictionary is created the first time the number of elements exceeds that threshold.</span></span>  <span data-ttu-id="2bf6b-119">しきい値として-1 を指定した場合、検索辞書は作成されません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-119">If you specify -1 as the threshold, the lookup dictionary is never created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bf6b-120">内部参照ディクショナリを使用すると、`TItem` が参照型の場合はコレクション内のすべての項目への参照が含まれ、`TItem` が値型の場合はコレクション内のすべての項目のコピーが格納されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-120">When the internal lookup dictionary is used, it contains references to all the items in the collection if `TItem` is a reference type, or copies of all the items in the collection if `TItem` is a value type.</span></span> <span data-ttu-id="2bf6b-121">したがって、`TItem` が値の型である場合、検索辞書の使用は適切ではない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-121">Thus, using the lookup dictionary may not be appropriate if `TItem` is a value type.</span></span>  
  
 <span data-ttu-id="2bf6b-122">インデックスまたはキーによって項目にアクセスするには、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-122">You can access an item by its index or key by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="2bf6b-123">キーを使用せずに項目を追加できますが、これらの項目にはインデックスによってのみアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-123">You can add items without a key, but these items can subsequently be accessed only by index.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf6b-124">このセクションには、2 つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-124">This section contains two code examples.</span></span> <span data-ttu-id="2bf6b-125">最初の例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するために必要な最小限のコードを示し、継承されたメソッドの多くを示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-125">The first example shows the minimum code required to derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and demonstrates many of the inherited methods.</span></span> <span data-ttu-id="2bf6b-126">2番目の例は、<xref:System.Collections.ObjectModel.KeyedCollection%602> の保護されたメソッドをオーバーライドしてカスタム動作を提供する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-126">The second example shows how to override the protected methods of <xref:System.Collections.ObjectModel.KeyedCollection%602> to provide custom behavior.</span></span>  
  
 <span data-ttu-id="2bf6b-127">**例 1**</span><span class="sxs-lookup"><span data-stu-id="2bf6b-127">**Example 1**</span></span>  
  
 <span data-ttu-id="2bf6b-128">このコード例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>からコレクションクラスを派生させるために必要な最小限のコードを示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをオーバーライドし、基本クラスのコンストラクターにデリゲートするパブリックコンストラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-128">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="2bf6b-129">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> クラスと <xref:System.Collections.ObjectModel.Collection%601> クラスから継承されたプロパティとメソッドの多くも示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-129">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="2bf6b-130">`SimpleOrder` クラスは、`OrderItem` オブジェクトを含む非常に単純な要求リストです。各オブジェクトは、注文の品目を表します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-130">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="2bf6b-131">`OrderItem` のキーは不変であり、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するクラスにとって重要な考慮事項です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-131">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="2bf6b-132">変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-132">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 <span data-ttu-id="2bf6b-133">**例 2**</span><span class="sxs-lookup"><span data-stu-id="2bf6b-133">**Example 2**</span></span>  
  
 <span data-ttu-id="2bf6b-134">次のコード例は、protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> の各メソッドのカスタム動作を提供し、既定の <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ (のインデクサー) を設定する方法を示しています。C#).</span><span class="sxs-lookup"><span data-stu-id="2bf6b-134">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="2bf6b-135">この例で提供されるカスタム動作は、`Changed`という名前の通知イベントで、オーバーライドされた各メソッドの最後に発生します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-135">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="2bf6b-136">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> から派生し、単純な注文フォームを表す `SimpleOrder` クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-136">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="2bf6b-137">注文フォームには、注文されたアイテムを表す `OrderItem` オブジェクトが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-137">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="2bf6b-138">また、このコード例では、イベント情報を格納する `SimpleOrderChangedEventArgs` クラスと、変更の種類を識別するための列挙も作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-138">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="2bf6b-139">このコード例では、`Demo` クラスの `Main` メソッドで、派生クラスのプロパティとメソッドを呼び出すことによって、カスタム動作を示します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-139">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="2bf6b-140">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-140">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="2bf6b-141">変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-141">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2bf6b-142"><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-142">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bf6b-143">既定の等値比較子を使用する <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-143">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the default equality comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-144">このコンストラクターで作成された <xref:System.Collections.ObjectModel.KeyedCollection%602> は、<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>から取得したキーの型に対して既定のジェネリック等値比較子を使用します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-144">A <xref:System.Collections.ObjectModel.KeyedCollection%602> created with this constructor uses the default generic equality comparer for the type of the key, obtained from <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="2bf6b-145">別のジェネリック等値比較子を指定するには、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> コンストラクターまたは <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-145">To specify a different generic equality comparer, use the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor or the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor.</span></span>  
  
 <span data-ttu-id="2bf6b-146">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602> には、最初の項目が追加されたときに作成される検索ディクショナリが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-146">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="2bf6b-147">項目が <xref:System.Collections.ObjectModel.KeyedCollection%602>に追加されると、項目のキーが1回抽出され、検索を高速にするために検索ディクショナリに保存されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-147">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="2bf6b-148">この動作をオーバーライドするには、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンストラクターを使用し、ディクショナリの作成しきい値を指定します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-148">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bf6b-149"><xref:System.Collections.ObjectModel.KeyedCollection%602> クラスは abstract (Visual Basic で`MustInherit`) であるため、それを使用するためには抽象クラスから派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-149">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="2bf6b-150">派生型のコンストラクターで、適切な <xref:System.Collections.ObjectModel.KeyedCollection%602> コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-150">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="2bf6b-151">コンストラクターで、等値比較子やディクショナリ作成のしきい値などの機能を公開する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-151">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="2bf6b-152">このコンストラクターは O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-152">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf6b-153">このコード例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>からコレクションクラスを派生させるために必要な最小限のコードを示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをオーバーライドし、基本クラスのコンストラクターにデリゲートするパブリックコンストラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-153">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="2bf6b-154">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> クラスと <xref:System.Collections.ObjectModel.Collection%601> クラスから継承されたプロパティとメソッドの多くも示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-154">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="2bf6b-155">`SimpleOrder` クラスは、`OrderItem` オブジェクトを含む非常に単純な要求リストです。各オブジェクトは、注文の品目を表します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-155">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="2bf6b-156">`OrderItem` のキーは不変であり、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するクラスにとって重要な考慮事項です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-156">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="2bf6b-157">変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-157">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="2bf6b-158">キーを比較する場合に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。または、<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> から取得する、キーの型の既定の等値比較子を使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-158">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span></span></param>
        <summary><span data-ttu-id="2bf6b-159">指定した等値比較子を使用する <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-159">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-160">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602> には、最初の項目が追加されたときに作成される検索ディクショナリが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-160">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="2bf6b-161">項目が <xref:System.Collections.ObjectModel.KeyedCollection%602>に追加されると、項目のキーが1回抽出され、検索を高速にするために検索ディクショナリに保存されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-161">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="2bf6b-162">この動作をオーバーライドするには、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンストラクターを使用し、ディクショナリの作成しきい値を指定します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-162">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bf6b-163"><xref:System.Collections.ObjectModel.KeyedCollection%602> クラスは abstract (Visual Basic で`MustInherit`) であるため、それを使用するためには抽象クラスから派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-163">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="2bf6b-164">派生型のコンストラクターで、適切な <xref:System.Collections.ObjectModel.KeyedCollection%602> コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-164">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="2bf6b-165">コンストラクターで、等値比較子やディクショナリ作成のしきい値などの機能を公開する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-165">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="2bf6b-166">このコンストラクターは O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-166">This constructor is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (comparer As IEqualityComparer(Of TKey), dictionaryCreationThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; KeyedCollection(System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="F#" Value="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; : System.Collections.Generic.IEqualityComparer&lt;'Key&gt; * int -&gt; System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;" Usage="new System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt; (comparer, dictionaryCreationThreshold)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer"><span data-ttu-id="2bf6b-167">キーを比較する場合に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。または、<see cref="P:System.Collections.Generic.EqualityComparer`1.Default" /> から取得する、キーの型の既定の等値比較子を使用する場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-167">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing keys, or <see langword="null" /> to use the default equality comparer for the type of the key, obtained from <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</span></span></param>
        <param name="dictionaryCreationThreshold"><span data-ttu-id="2bf6b-168">検索ディクショナリを作成せずにコレクションが保有できる要素数 (0 を指定すると最初の項目の追加時に検索ディクショナリが作成される)。検索ディクショナリを作成しない場合は -1。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-168">The number of elements the collection can hold without creating a lookup dictionary (0 creates the lookup dictionary when the first item is added), or -1 to specify that a lookup dictionary is never created.</span></span></param>
        <summary><span data-ttu-id="2bf6b-169">指定した等値比較子を使用し、指定したしきい値を超えた場合に検索ディクショナリを作成する、<see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-169">Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> class that uses the specified equality comparer and creates a lookup dictionary when the specified threshold is exceeded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-170">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602> には、最初の項目が追加されたときに作成される検索ディクショナリが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-170">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="2bf6b-171">項目が <xref:System.Collections.ObjectModel.KeyedCollection%602>に追加されると、項目のキーが1回抽出され、検索を高速にするために検索ディクショナリに保存されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-171">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="2bf6b-172">このコンストラクターを使用すると、その動作をオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-172">This constructor allows you to override that behavior.</span></span> <span data-ttu-id="2bf6b-173">最初の要素が追加されたときにディクショナリを作成するには0を指定し、2番目の要素が追加されたときにディクショナリを作成するには1を指定します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-173">Specify 0 to create the dictionary when the first element is added, 1 to create the dictionary when the second element is added, and so on.</span></span> <span data-ttu-id="2bf6b-174">しきい値として-1 を指定した場合、検索辞書は作成されません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-174">If you specify -1 as the threshold, the lookup dictionary is never created.</span></span>  
  
 <span data-ttu-id="2bf6b-175">非常に小さなコレクションでは、検索ディクショナリによって提供される取得速度の向上は、辞書に必要な追加メモリには価値がない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-175">For very small collections the improvement in retrieval speed provided by the lookup dictionary might not be worth the extra memory required by the dictionary.</span></span> <span data-ttu-id="2bf6b-176">しきい値を設定すると、そのトレードオフをいつどのようにするかを決めることができます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-176">Setting a threshold allows you to decide when to make that tradeoff.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bf6b-177"><xref:System.Collections.ObjectModel.KeyedCollection%602> クラスは abstract (Visual Basic で`MustInherit`) であるため、それを使用するためには抽象クラスから派生する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-177">Because the <xref:System.Collections.ObjectModel.KeyedCollection%602> class is abstract (`MustInherit` in Visual Basic), you must derive from it in order to use it.</span></span> <span data-ttu-id="2bf6b-178">派生型のコンストラクターで、適切な <xref:System.Collections.ObjectModel.KeyedCollection%602> コンストラクターを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-178">In the constructor for your derived type, call the appropriate <xref:System.Collections.ObjectModel.KeyedCollection%602> constructor.</span></span> <span data-ttu-id="2bf6b-179">コンストラクターで、等値比較子やディクショナリ作成のしきい値などの機能を公開する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-179">It is not necessary to expose functionality like the equality comparer or the dictionary creation threshold in your constructors.</span></span>  
  
 <span data-ttu-id="2bf6b-180">このコンストラクターは O (1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-180">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf6b-181">次のコード例は、protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> の各メソッドのカスタム動作を提供し、既定の <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ (のインデクサー) を設定する方法を示しています。C#).</span><span class="sxs-lookup"><span data-stu-id="2bf6b-181">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="2bf6b-182">この例で提供されるカスタム動作は、`Changed`という名前の通知イベントで、オーバーライドされた各メソッドの最後に発生します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-182">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="2bf6b-183">このコード例では、しきい値が0の <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンストラクターを使用して、コレクションにオブジェクトを初めて追加するときに内部ディクショナリが作成されるようにします。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-183">The code example uses the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor with a threshold of 0, so that the internal dictionary is created the first time an object is added to the collection.</span></span>  
  
 <span data-ttu-id="2bf6b-184">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> から派生し、単純な注文フォームを表す `SimpleOrder` クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-184">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="2bf6b-185">注文フォームには、注文されたアイテムを表す `OrderItem` オブジェクトが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-185">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="2bf6b-186">また、このコード例では、イベント情報を格納する `SimpleOrderChangedEventArgs` クラスと、変更の種類を識別するための列挙も作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-186">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="2bf6b-187">このコード例では、`Demo` クラスの `Main` メソッドで、派生クラスのプロパティとメソッドを呼び出すことによって、カスタム動作を示します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-187">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="2bf6b-188">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-188">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="2bf6b-189">変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-189">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2bf6b-190"><paramref name="dictionaryCreationThreshold" /> が -1 未満です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-190"><paramref name="dictionaryCreationThreshold" /> is less than -1.</span></span></exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ChangeItemKey (item As TItem, newKey As TKey)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ChangeItemKey(TItem item, TKey newKey);" />
      <MemberSignature Language="F#" Value="member this.ChangeItemKey : 'Item * 'Key -&gt; unit" Usage="keyedCollection.ChangeItemKey (item, newKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2bf6b-191">変更するキーの要素。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-191">The element to change the key of.</span></span></param>
        <param name="newKey"><span data-ttu-id="2bf6b-192"><paramref name="item" /> の新しいキー。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-192">The new key for <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="2bf6b-193">検索ディクショナリの指定した要素に関連付けられたキーを変更します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-193">Changes the key associated with the specified element in the lookup dictionary.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-194">このメソッドは `item`に埋め込まれたキーを変更しません。単に、検索ディクショナリに保存されているキーを置き換えます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-194">This method does not modify the key embedded in `item`; it simply replaces the key saved in the lookup dictionary.</span></span>  <span data-ttu-id="2bf6b-195">したがって、`newKey` が `item`に埋め込まれているキーと異なる場合は、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>によって返されたキーを使用して `item` にアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-195">Therefore, if `newKey` is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="2bf6b-196"><xref:System.Collections.ObjectModel.KeyedCollection%602> にルックアップディクショナリがない場合、このメソッドは何も実行しません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-196">This method does nothing if the <xref:System.Collections.ObjectModel.KeyedCollection%602> does not have a lookup dictionary.</span></span>  
  
 <span data-ttu-id="2bf6b-197"><xref:System.Collections.ObjectModel.KeyedCollection%602> 内のすべてのキーは一意である必要があります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-197">Every key in a <xref:System.Collections.ObjectModel.KeyedCollection%602> must be unique.</span></span> <span data-ttu-id="2bf6b-198">キーを `null`ことはできません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-198">A key cannot be `null`.</span></span>  
  
 <span data-ttu-id="2bf6b-199">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-199">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="2bf6b-200">実装に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="2bf6b-200">Notes for Implementers</span></span>  
 <span data-ttu-id="2bf6b-201">項目に埋め込まれたキーを変更する前に、このメソッドを呼び出して、検索ディクショナリのキーを更新する必要があります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-201">Before modifying the key embedded in an item, you must call this method to update the key in the lookup dictionary.</span></span> <span data-ttu-id="2bf6b-202">ディクショナリの作成しきい値が-1 の場合、このメソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-202">If the dictionary creation threshold is -1, calling this method is not necessary.</span></span>  
  
 <span data-ttu-id="2bf6b-203"><xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドは、派生クラスのパブリックメソッドとして公開しないでください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-203">Do not expose the <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method as a public method of a derived class.</span></span> <span data-ttu-id="2bf6b-204">このメソッドを誤用すると、ルックアップディクショナリが項目キーと同期しなくなります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-204">Misuse of this method puts the lookup dictionary out of sync with item keys.</span></span> <span data-ttu-id="2bf6b-205">たとえば、キーを `null` に設定してから別の値に設定すると、項目の複数のキーが検索ディクショナリに追加されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-205">For example, setting the key to `null` and then setting it to another value adds multiple keys for an item to the lookup dictionary.</span></span> <span data-ttu-id="2bf6b-206">このメソッドを内部で公開して、変更可能な項目キーを許可します。項目のキーが変更されたときに、このメソッドを使用して、検索ディクショナリのキーを変更します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-206">Expose this method internally to allow mutable item keys: When the key for an item changes, this method is used to change the key in the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf6b-207">次のコード例は、保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドをオーバーライドして変更可能なキーをサポートする方法、および保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、キーとコレクションの整合性を維持する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-207">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="2bf6b-208">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生した `MutableKeys` コレクションと、`MutableKey` クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-208">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="2bf6b-209">`MutableKey` クラスには、設定可能な `Key` プロパティがあります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-209">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="2bf6b-210">新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子は、コレクションの `internal` (Visual Basic で`Friend` `ChangeKey`) を呼び出して、新しいキーが既存のキーと競合するかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-210">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="2bf6b-211">その場合は、例外がスローされ、プロパティ値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-211">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="2bf6b-212">`MutableKey` オブジェクトと `MutableKeys` コレクション間の接続を維持し、オブジェクトが2つのコレクションに挿入されないようにするために、`MutableKey` クラスには`Friend` フィールドに `internal` (Visual Basic) があります。`Collection`</span><span class="sxs-lookup"><span data-stu-id="2bf6b-212">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="2bf6b-213">このフィールドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドなどのコレクションの項目を追加および削除するためのカスタム動作を提供する、保護されたメソッドによって管理されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-213">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="2bf6b-214">フィールドは、アイテムがコレクションに追加されたときに設定され、アイテムが削除されるとクリアされます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-214">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2bf6b-215"><paramref name="item" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-215"><paramref name="item" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="2bf6b-216">- または -</span><span class="sxs-lookup"><span data-stu-id="2bf6b-216">-or-</span></span> 
 <span data-ttu-id="2bf6b-217"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-217"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="2bf6b-218"><paramref name="item" /> が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-218"><paramref name="item" /> is not found.</span></span>  
  
<span data-ttu-id="2bf6b-219">- または -</span><span class="sxs-lookup"><span data-stu-id="2bf6b-219">-or-</span></span> 
 <span data-ttu-id="2bf6b-220"><paramref name="key" /> は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> に既に存在します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-220"><paramref name="key" /> already exists in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ClearItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ClearItems();" />
      <MemberSignature Language="F#" Value="override this.ClearItems : unit -&gt; unit" Usage="keyedCollection.ClearItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2bf6b-221"><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> からすべての要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-221">Removes all elements from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-222">検索ディクショナリが存在する場合、このメソッドはそれをクリアしますが、削除しません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-222">If there is a lookup dictionary, this method clears it but does not delete it.</span></span>  
  
 <span data-ttu-id="2bf6b-223">要素の数がディクショナリの作成しきい値を超え、<xref:System.Collections.ObjectModel.KeyedCollection%602> が参照ディクショナリを使用している場合は、要素の数がしきい値を下回る場合でも、検索辞書が引き続き使用されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-223">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="2bf6b-224">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.ObjectModel.Collection%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-224">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="2bf6b-225">実装に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="2bf6b-225">Notes for Implementers</span></span>  
 <span data-ttu-id="2bf6b-226">このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601> ジェネリッククラスから継承された <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> メソッドにカスタマイズされた動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-226">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="2bf6b-227">このメソッドの基本クラスの実装を呼び出して、基になるコレクションをクリアし、参照ディクショナリをクリアします。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-227">Call the base class implementation of this method to clear the underlying collection and to clear the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf6b-228">このセクションでは、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> メソッドをオーバーライドして、コレクションからすべてのオブジェクトをクリアするカスタム動作を提供する2つのコード例について説明します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-228">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> method to provide custom behavior for clearing all objects from the collection.</span></span> <span data-ttu-id="2bf6b-229">最初の例では、カスタム通知イベントを追加し、2番目の例では、変更可能なキーを持つオブジェクトのコレクションをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-229">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="2bf6b-230">例 1</span><span class="sxs-lookup"><span data-stu-id="2bf6b-230">Example 1</span></span>  
  
 <span data-ttu-id="2bf6b-231">次のコード例は、protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> の各メソッドのカスタム動作を提供し、既定の <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ (のインデクサー) を設定する方法を示しています。C#).</span><span class="sxs-lookup"><span data-stu-id="2bf6b-231">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="2bf6b-232">この例で提供されるカスタム動作は、`Changed`という名前の通知イベントで、オーバーライドされた各メソッドの最後に発生します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-232">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="2bf6b-233">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> から派生し、単純な注文フォームを表す `SimpleOrder` クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-233">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="2bf6b-234">注文フォームには、注文されたアイテムを表す `OrderItem` オブジェクトが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-234">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="2bf6b-235">また、このコード例では、イベント情報を格納する `SimpleOrderChangedEventArgs` クラスと、変更の種類を識別するための列挙も作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-235">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="2bf6b-236">このコード例では、`Demo` クラスの `Main` メソッドで、派生クラスのプロパティとメソッドを呼び出すことによって、カスタム動作を示します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-236">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="2bf6b-237">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-237">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="2bf6b-238">変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-238">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="2bf6b-239">例 2</span><span class="sxs-lookup"><span data-stu-id="2bf6b-239">Example 2</span></span>  
  
 <span data-ttu-id="2bf6b-240">次のコード例は、保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドをオーバーライドして変更可能なキーをサポートする方法、および保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、キーとコレクションの整合性を維持する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-240">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="2bf6b-241">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生した `MutableKeys` コレクションと、`MutableKey` クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-241">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="2bf6b-242">`MutableKey` クラスには、設定可能な `Key` プロパティがあります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-242">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="2bf6b-243">新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子は、コレクションの `internal` (Visual Basic で`Friend` `ChangeKey`) を呼び出して、新しいキーが既存のキーと競合するかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-243">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="2bf6b-244">その場合は、例外がスローされ、プロパティ値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-244">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="2bf6b-245">`MutableKey` オブジェクトと `MutableKeys` コレクション間の接続を維持し、オブジェクトが2つのコレクションに挿入されないようにするために、`MutableKey` クラスには`Friend` フィールドに `internal` (Visual Basic) があります。`Collection`</span><span class="sxs-lookup"><span data-stu-id="2bf6b-245">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="2bf6b-246">このフィールドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドなどのコレクションの項目を追加および削除するためのカスタム動作を提供する、保護されたメソッドによって管理されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-246">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="2bf6b-247">フィールドは、アイテムがコレクションに追加されたときに設定され、アイテムが削除されるとクリアされます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-247">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IEqualityComparer&lt;'Key&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bf6b-248">コレクションの複数のキーの値が等しいかどうかを確認するために使用される、ジェネリック等値比較子を取得します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-248">Gets the generic equality comparer that is used to determine equality of keys in the collection.</span></span></summary>
        <value><span data-ttu-id="2bf6b-249">コレクションの複数のキーの値が等しいかどうかを確認するために使用される <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-249">The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface that is used to determine equality of keys in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-250">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-250">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Contains : 'Key -&gt; bool" Usage="keyedCollection.Contains key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="2bf6b-251"><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 内で検索されるキー。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-251">The key to locate in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></param>
        <summary><span data-ttu-id="2bf6b-252">指定したキーの要素がコレクションに含まれているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-252">Determines whether the collection contains an element with the specified key.</span></span></summary>
        <returns><span data-ttu-id="2bf6b-253">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-253"><see langword="true" /> if the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-254"><xref:System.Collections.ObjectModel.KeyedCollection%602> にルックアップ辞書がある場合は、`key` を使用して辞書を検索します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-254">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to search the dictionary.</span></span> <span data-ttu-id="2bf6b-255">検索ディクショナリがない場合は、各要素のキーが <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドを使用して抽出され、指定したキーと比較されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-255">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="2bf6b-256"><xref:System.Collections.ObjectModel.KeyedCollection%602> に参照ディクショナリがある場合、このメソッドは O (1) 操作です。それ以外の場合は、O (`n`) 操作であり、`n` は <xref:System.Collections.ObjectModel.Collection%601.Count%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-256">This method is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf6b-257">このコード例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>からコレクションクラスを派生させるために必要な最小限のコードを示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをオーバーライドし、基本クラスのコンストラクターにデリゲートするパブリックコンストラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-257">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="2bf6b-258">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> クラスと <xref:System.Collections.ObjectModel.Collection%601> クラスから継承されたプロパティとメソッドの多くも示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-258">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="2bf6b-259">`SimpleOrder` クラスは、`OrderItem` オブジェクトを含む非常に単純な要求リストです。各オブジェクトは、注文の品目を表します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-259">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="2bf6b-260">`OrderItem` のキーは不変であり、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するクラスにとって重要な考慮事項です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-260">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="2bf6b-261">変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-261">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2bf6b-262"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-262"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Dictionary As IDictionary(Of TKey, TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ Dictionary { System::Collections::Generic::IDictionary&lt;TKey, TItem&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Dictionary : System.Collections.Generic.IDictionary&lt;'Key, 'Item&gt;" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2bf6b-263"><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の検索ディクショナリを取得します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-263">Gets the lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></summary>
        <value><span data-ttu-id="2bf6b-264">存在する場合は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の検索ディクショナリ。それ以外の場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-264">The lookup dictionary of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, if it exists; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-265">既定では、<xref:System.Collections.ObjectModel.KeyedCollection%602> には、最初の項目が追加されたときに作成される検索ディクショナリが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-265">By default, the <xref:System.Collections.ObjectModel.KeyedCollection%602> includes a lookup dictionary that is created when the first item is added.</span></span> <span data-ttu-id="2bf6b-266">項目が <xref:System.Collections.ObjectModel.KeyedCollection%602>に追加されると、項目のキーが1回抽出され、検索を高速にするために検索ディクショナリに保存されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-266">When an item is added to the <xref:System.Collections.ObjectModel.KeyedCollection%602>, the item's key is extracted once and saved in the lookup dictionary for faster searches.</span></span> <span data-ttu-id="2bf6b-267">この動作をオーバーライドするには、<xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンストラクターを使用し、ディクショナリの作成しきい値を指定します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-267">This behavior can be overridden by using the <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> constructor and specifying a dictionary creation threshold.</span></span>  
  
 <span data-ttu-id="2bf6b-268">このプロパティ値を取得することは、O(1) 操作になります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-268">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf6b-269">次のコード例は、保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドをオーバーライドして変更可能なキーをサポートする方法、および保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、キーとコレクションの整合性を維持する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-269">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="2bf6b-270">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生した `MutableKeys` コレクションと、`MutableKey` クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-270">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="2bf6b-271">`MutableKey` クラスには、設定可能な `Key` プロパティがあります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-271">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="2bf6b-272">新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子は、コレクションの `internal` (Visual Basic で`Friend` `ChangeKey`) を呼び出して、新しいキーが既存のキーと競合するかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-272">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="2bf6b-273">その場合は、例外がスローされ、プロパティ値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-273">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="2bf6b-274">`MutableKey` オブジェクトと `MutableKeys` コレクション間の接続を維持し、オブジェクトが2つのコレクションに挿入されないようにするために、`MutableKey` クラスには`Friend` フィールドに `internal` (Visual Basic) があります。`Collection`</span><span class="sxs-lookup"><span data-stu-id="2bf6b-274">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="2bf6b-275">このフィールドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドなどのコレクションの項目を追加および削除するためのカスタム動作を提供する、保護されたメソッドによって管理されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-275">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="2bf6b-276">フィールドは、アイテムがコレクションに追加されたときに設定され、アイテムが削除されるとクリアされます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-276">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetKeyForItem (item As TItem) As TKey" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TKey GetKeyForItem(TItem item);" />
      <MemberSignature Language="F#" Value="abstract member GetKeyForItem : 'Item -&gt; 'Key" Usage="keyedCollection.GetKeyForItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="2bf6b-277">キーの抽出元要素。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-277">The element from which to extract the key.</span></span></param>
        <summary><span data-ttu-id="2bf6b-278">派生クラスで実装された場合、指定した要素からキーを抽出します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-278">When implemented in a derived class, extracts the key from the specified element.</span></span></summary>
        <returns><span data-ttu-id="2bf6b-279">指定した要素のキー。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-279">The key for the specified element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-280">参照辞書のキーが `item`に埋め込まれているキーと異なる場合、<xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>によって返されたキーを使用して `item` にアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-280">If the key in the lookup dictionary is different from the key that is embedded in `item`, you cannot access `item` by using the key returned by <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>.</span></span>  
  
 <span data-ttu-id="2bf6b-281">このメソッドを実装すると、キーのない項目を含むコレクションに対して `null` を返すことができます。この場合、項目にはインデックスによってのみアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-281">You can implement this method to return `null` for a collection that contains items without keys, in which case the items can be accessed only by their index.</span></span> <span data-ttu-id="2bf6b-282">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-282">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="2bf6b-283">実装に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="2bf6b-283">Notes for Implementers</span></span>  
 <span data-ttu-id="2bf6b-284">ディクショナリ内の項目からキーを抽出する方法をディクショナリに提供するには、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-284">You must override this method to provide the dictionary with a way to extract keys from items in the dictionary.</span></span>  
  
 <span data-ttu-id="2bf6b-285">このメソッドは、内部的に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-285">This method is called internally.</span></span> <span data-ttu-id="2bf6b-286">パブリックにする必要はありません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-286">It is not necessary for it to be public.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf6b-287">このコード例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>からコレクションクラスを派生させるために必要な最小限のコードを示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをオーバーライドし、基本クラスのコンストラクターにデリゲートするパブリックコンストラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-287">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="2bf6b-288">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> クラスと <xref:System.Collections.ObjectModel.Collection%601> クラスから継承されたプロパティとメソッドの多くも示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-288">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="2bf6b-289">`SimpleOrder` クラスは、`OrderItem` オブジェクトを含む非常に単純な要求リストです。各オブジェクトは、注文の品目を表します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-289">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="2bf6b-290">`OrderItem` のキーは不変であり、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するクラスにとって重要な考慮事項です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-290">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="2bf6b-291">変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-291">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InsertItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InsertItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.InsertItem : int * 'Item -&gt; unit" Usage="keyedCollection.InsertItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2bf6b-292"><paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-292">The zero-based index at which <paramref name="item" /> should be inserted.</span></span></param>
        <param name="item"><span data-ttu-id="2bf6b-293">挿入するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-293">The object to insert.</span></span></param>
        <summary><span data-ttu-id="2bf6b-294"><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 内の指定したインデックスの位置に要素を挿入します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-294">Inserts an element into the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-295">`index` が <xref:System.Collections.ObjectModel.Collection%601.Count%2A>に等しい場合は、<xref:System.Collections.ObjectModel.KeyedCollection%602>の末尾に `item` が追加されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-295">If `index` is equal to <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, `item` is added to the end of the <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span>  
  
 <span data-ttu-id="2bf6b-296">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.ObjectModel.Collection%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-296">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="2bf6b-297"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> は、<xref:System.Collections.ObjectModel.Collection%601.Add%2A> メソッドと <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> メソッドによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-297"><xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> is called by the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="2bf6b-298">実装に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="2bf6b-298">Notes for Implementers</span></span>  
 <span data-ttu-id="2bf6b-299">このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601> ジェネリッククラスから継承された <xref:System.Collections.ObjectModel.Collection%601.Add%2A> および <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> メソッドに対してカスタマイズされた動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-299">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A> and <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
 <span data-ttu-id="2bf6b-300">このメソッドの基本クラスの実装を呼び出して、基になるコレクションに項目を挿入し、検索ディクショナリを更新します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-300">Call the base class implementation of this method to insert the item into the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf6b-301">このセクションには、コレクションにオブジェクトを追加または挿入するためのカスタム動作を提供するための <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドのオーバーライド方法を示す2つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-301">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method to provide custom behavior for adding or inserting objects into the collection.</span></span> <span data-ttu-id="2bf6b-302">最初の例では、カスタム通知イベントを追加し、2番目の例では、変更可能なキーを持つオブジェクトのコレクションをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-302">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="2bf6b-303">例 1</span><span class="sxs-lookup"><span data-stu-id="2bf6b-303">Example 1</span></span>  
  
 <span data-ttu-id="2bf6b-304">次のコード例は、protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> の各メソッドのカスタム動作を提供し、既定の <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ (のインデクサー) を設定する方法を示しています。C#).</span><span class="sxs-lookup"><span data-stu-id="2bf6b-304">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="2bf6b-305">この例で提供されるカスタム動作は、`Changed`という名前の通知イベントで、オーバーライドされた各メソッドの最後に発生します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-305">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="2bf6b-306">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> から派生し、単純な注文フォームを表す `SimpleOrder` クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-306">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="2bf6b-307">注文フォームには、注文されたアイテムを表す `OrderItem` オブジェクトが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-307">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="2bf6b-308">また、このコード例では、イベント情報を格納する `SimpleOrderChangedEventArgs` クラスと、変更の種類を識別するための列挙も作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-308">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="2bf6b-309">このコード例では、`Demo` クラスの `Main` メソッドで、派生クラスのプロパティとメソッドを呼び出すことによって、カスタム動作を示します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-309">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="2bf6b-310">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-310">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="2bf6b-311">変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-311">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="2bf6b-312">例 2</span><span class="sxs-lookup"><span data-stu-id="2bf6b-312">Example 2</span></span>  
  
 <span data-ttu-id="2bf6b-313">次のコード例は、保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドをオーバーライドして変更可能なキーをサポートする方法、および保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、キーとコレクションの整合性を維持する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-313">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="2bf6b-314">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生した `MutableKeys` コレクションと、`MutableKey` クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-314">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="2bf6b-315">`MutableKey` クラスには、設定可能な `Key` プロパティがあります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-315">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="2bf6b-316">新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子は、コレクションの `internal` (Visual Basic で`Friend` `ChangeKey`) を呼び出して、新しいキーが既存のキーと競合するかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-316">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="2bf6b-317">その場合は、例外がスローされ、プロパティ値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-317">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="2bf6b-318">`MutableKey` オブジェクトと `MutableKeys` コレクション間の接続を維持し、オブジェクトが2つのコレクションに挿入されないようにするために、`MutableKey` クラスには`Friend` フィールドに `internal` (Visual Basic) があります。`Collection`</span><span class="sxs-lookup"><span data-stu-id="2bf6b-318">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="2bf6b-319">このフィールドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドなどのコレクションの項目を追加および削除するためのカスタム動作を提供する、保護されたメソッドによって管理されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-319">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="2bf6b-320">フィールドは、アイテムがコレクションに追加されたときに設定され、アイテムが削除されるとクリアされます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-320">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="2bf6b-321"><paramref name="index" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-321"><paramref name="index" /> is less than 0.</span></span>  
  
<span data-ttu-id="2bf6b-322">- または -</span><span class="sxs-lookup"><span data-stu-id="2bf6b-322">-or-</span></span> 
 <span data-ttu-id="2bf6b-323"><paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-323"><paramref name="index" /> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</span></span></exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As TKey) As TItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TItem default[TKey] { TItem get(TKey key); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Item" Usage="System.Collections.ObjectModel.KeyedCollection&lt;'Key, 'Item&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="2bf6b-324">取得する要素のキー。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-324">The key of the element to get.</span></span></param>
        <summary><span data-ttu-id="2bf6b-325">指定したキーを持つ要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-325">Gets the element with the specified key.</span></span></summary>
        <value><span data-ttu-id="2bf6b-326">指定したキーを持つ要素。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-326">The element with the specified key.</span></span> <span data-ttu-id="2bf6b-327">指定したキーを持つ要素が見つからない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-327">If an element with the specified key is not found, an exception is thrown.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-328">このプロパティは、`myCollection[key]` (Visual Basic で`myCollection(key)`) という構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-328">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bf6b-329">このプロパティは、要素を数値インデックスによって取得および設定する、継承された <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> プロパティとは異なります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-329">This property is distinct from the inherited <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which gets and sets elements by numeric index.</span></span> <span data-ttu-id="2bf6b-330">ただし、`TKey` が <xref:System.Int32>型の場合、このプロパティは継承されたプロパティをマスクします。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-330">However, if `TKey` is of type <xref:System.Int32>, this property masks the inherited property.</span></span> <span data-ttu-id="2bf6b-331">その場合は、その基本型に <xref:System.Collections.ObjectModel.KeyedCollection%602> をキャストすることによって、継承されたプロパティにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-331">In that case, you can access the inherited property by casting the <xref:System.Collections.ObjectModel.KeyedCollection%602> to its base type.</span></span> <span data-ttu-id="2bf6b-332">たとえば、`KeyedCollection<int, MyType>` (Visual Basic では`KeyedCollection(Of Integer, MyType)`、でC++は `KeyedCollection<int, MyType^>`) は `Collection<MyType>` にキャストできます (`Collection(Of MyType)` の Visual Basic、 C++`Collection<MyType^>`)。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-332">For example, `KeyedCollection<int, MyType>` (`KeyedCollection(Of Integer, MyType)` in Visual Basic, `KeyedCollection<int, MyType^>` in C++) can be cast to `Collection<MyType>` (`Collection(Of MyType)` in Visual Basic, `Collection<MyType^>` in C++).</span></span>  
  
 <span data-ttu-id="2bf6b-333"><xref:System.Collections.ObjectModel.KeyedCollection%602> にルックアップディクショナリがある場合は、`key` を使用してディクショナリから要素を取得します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-333">If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, `key` is used to retrieve the element from the dictionary.</span></span>  <span data-ttu-id="2bf6b-334">検索ディクショナリがない場合は、各要素のキーが <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドを使用して抽出され、指定したキーと比較されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-334">If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.</span></span>  
  
 <span data-ttu-id="2bf6b-335">このC#言語では、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> プロパティを実装する代わりに、 [this](~/docs/csharp/language-reference/keywords/this.md)キーワードを使用してインデクサーを定義します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-335">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> property.</span></span> <span data-ttu-id="2bf6b-336">Visual Basic は、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> を[既定のプロパティ](~/docs/visual-basic/language-reference/modifiers/default.md)として実装します。これにより、同じインデックス作成機能が提供されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-336">Visual Basic implements <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> as a [default property](~/docs/visual-basic/language-reference/modifiers/default.md), which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="2bf6b-337"><xref:System.Collections.ObjectModel.KeyedCollection%602> にルックアップディクショナリがある場合、このプロパティの値を取得するには O (1) 操作を実行します。それ以外の場合は、O (`n`) 操作であり、`n` は <xref:System.Collections.ObjectModel.Collection%601.Count%2A>ます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-337">Retrieving the value of this property is an O(1) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>

## Examples  
 <span data-ttu-id="2bf6b-338">このコード例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>からコレクションクラスを派生させるために必要な最小限のコードを示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをオーバーライドし、基本クラスのコンストラクターにデリゲートするパブリックコンストラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-338">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="2bf6b-339">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> クラスと <xref:System.Collections.ObjectModel.Collection%601> クラスから継承されたプロパティとメソッドの多くも示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-339">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="2bf6b-340">このコード例では、読み取り専用で、キーによって取得される <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> プロパティと、インデックスによって設定および取得される <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> プロパティの両方を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-340">The code example calls both the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only and retrieves by key, and the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property, which is settable and retrieves by index.</span></span> <span data-ttu-id="2bf6b-341">派生コレクション内のオブジェクトに整数キーがある場合に、後者のプロパティにアクセスする方法を示します。これは、インデックス取得に使用される整数と区別できません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-341">It shows how to access the latter property when the objects in the derived collection have integer keys, indistinguishable from the integers used for indexed retrieval.</span></span>  
  
 <span data-ttu-id="2bf6b-342">`SimpleOrder` クラスは、`OrderItem` オブジェクトを含む非常に単純な要求リストです。各オブジェクトは、注文の品目を表します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-342">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="2bf6b-343">`OrderItem` のキーは不変であり、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するクラスにとって重要な考慮事項です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-343">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="2bf6b-344">変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-344">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2bf6b-345"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-345"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException"><span data-ttu-id="2bf6b-346">指定したキーを持つ要素がコレクション内に存在しません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-346">An element with the specified key does not exist in the collection.</span></span></exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="override this.Remove : 'Key -&gt; bool" Usage="keyedCollection.Remove key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="2bf6b-347">削除する要素のキー。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-347">The key of the element to remove.</span></span></param>
        <summary><span data-ttu-id="2bf6b-348">指定したキーを持つ要素を <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> から削除します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-348">Removes the element with the specified key from the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></summary>
        <returns><span data-ttu-id="2bf6b-349">要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-349"><see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="2bf6b-350">このメソッドは、<see langword="false" /> が <paramref name="key" /> に見つからない場合にも <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-350">This method also returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-351">要素のキーも検索ディクショナリから削除されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-351">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="2bf6b-352">要素の数がディクショナリの作成しきい値を超え、<xref:System.Collections.ObjectModel.KeyedCollection%602> が参照ディクショナリを使用している場合は、要素の数がしきい値を下回る場合でも、検索辞書が引き続き使用されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-352">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bf6b-353">このメソッドの動作をカスタマイズするには、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> メソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-353">To customize the behavior of this method, override the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method.</span></span>  
  
 <span data-ttu-id="2bf6b-354">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.ObjectModel.Collection%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-354">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf6b-355">このコード例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>からコレクションクラスを派生させるために必要な最小限のコードを示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをオーバーライドし、基本クラスのコンストラクターにデリゲートするパブリックコンストラクターを提供します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-355">This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor.</span></span> <span data-ttu-id="2bf6b-356">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> クラスと <xref:System.Collections.ObjectModel.Collection%601> クラスから継承されたプロパティとメソッドの多くも示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-356">The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.</span></span>  
  
 <span data-ttu-id="2bf6b-357">この例は、<xref:System.Collections.ObjectModel.KeyedCollection%602>から継承された <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> メソッドを示しています。このメソッドは、指定したキーを持つ項目を削除します。また、<xref:System.Collections.ObjectModel.Collection%601>から継承された <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> および <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> メソッドも、オブジェクトとインデックスによってそれぞれ削除されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-357">The example demonstrates <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> method inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602>, which removes the item with a specified key, and also the <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> methods inherited from <xref:System.Collections.ObjectModel.Collection%601>, which remove by object and by index respectively.</span></span>  
  
 <span data-ttu-id="2bf6b-358">`SimpleOrder` クラスは、`OrderItem` オブジェクトを含む非常に単純な要求リストです。各オブジェクトは、注文の品目を表します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-358">The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order.</span></span> <span data-ttu-id="2bf6b-359">`OrderItem` のキーは不変であり、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生するクラスにとって重要な考慮事項です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-359">The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>.</span></span> <span data-ttu-id="2bf6b-360">変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-360">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2bf6b-361"><paramref name="key" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-361"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RemoveItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RemoveItem(int index);" />
      <MemberSignature Language="F#" Value="override this.RemoveItem : int -&gt; unit" Usage="keyedCollection.RemoveItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2bf6b-362">削除する要素のインデックス。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-362">The index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="2bf6b-363"><see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の指定したインデックスにある要素を削除します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-363">Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-364">要素のキーも検索ディクショナリから削除されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-364">The key of the element is also removed from the lookup dictionary.</span></span>  
  
 <span data-ttu-id="2bf6b-365">要素の数がディクショナリの作成しきい値を超え、<xref:System.Collections.ObjectModel.KeyedCollection%602> が参照ディクショナリを使用している場合は、要素の数がしきい値を下回る場合でも、検索辞書が引き続き使用されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-365">If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.</span></span>  
  
 <span data-ttu-id="2bf6b-366">このメソッドは O(`n`) 操作です。`n`は <xref:System.Collections.ObjectModel.Collection%601.Count%2A> です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-366">This method is an O(`n`) operation, where `n` is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="2bf6b-367">実装に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="2bf6b-367">Notes for Implementers</span></span>  
 <span data-ttu-id="2bf6b-368">このメソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601> ジェネリッククラスから継承された <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> および <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> メソッドと、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> メソッドに対してカスタマイズされた動作を提供します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-368">Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> and <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> methods, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class, and the <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> method.</span></span>  
  
 <span data-ttu-id="2bf6b-369">このメソッドの基本クラスの実装を呼び出して、基になるコレクションから項目を削除し、参照ディクショナリを更新します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-369">Call the base class implementation of this method to remove the item from the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf6b-370">このセクションでは、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> メソッドをオーバーライドして、コレクションからオブジェクトを削除するためのカスタム動作を提供する2つのコード例について説明します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-370">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> method to provide custom behavior for removing objects from the collection.</span></span> <span data-ttu-id="2bf6b-371">最初の例では、カスタム通知イベントを追加し、2番目の例では、変更可能なキーを持つオブジェクトのコレクションをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-371">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="2bf6b-372">例 1</span><span class="sxs-lookup"><span data-stu-id="2bf6b-372">Example 1</span></span>  
  
 <span data-ttu-id="2bf6b-373">次のコード例は、protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> の各メソッドのカスタム動作を提供し、既定の <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ (のインデクサー) を設定する方法を示しています。C#).</span><span class="sxs-lookup"><span data-stu-id="2bf6b-373">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="2bf6b-374">この例で提供されるカスタム動作は、`Changed`という名前の通知イベントで、オーバーライドされた各メソッドの最後に発生します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-374">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="2bf6b-375">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> から派生し、単純な注文フォームを表す `SimpleOrder` クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-375">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="2bf6b-376">注文フォームには、注文されたアイテムを表す `OrderItem` オブジェクトが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-376">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="2bf6b-377">また、このコード例では、イベント情報を格納する `SimpleOrderChangedEventArgs` クラスと、変更の種類を識別するための列挙も作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-377">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="2bf6b-378">このコード例では、`Demo` クラスの `Main` メソッドで、派生クラスのプロパティとメソッドを呼び出すことによって、カスタム動作を示します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-378">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="2bf6b-379">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-379">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="2bf6b-380">変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-380">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="2bf6b-381">例 2</span><span class="sxs-lookup"><span data-stu-id="2bf6b-381">Example 2</span></span>  
  
 <span data-ttu-id="2bf6b-382">次のコード例は、保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドをオーバーライドして変更可能なキーをサポートする方法、および保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、キーとコレクションの整合性を維持する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-382">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="2bf6b-383">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生した `MutableKeys` コレクションと、`MutableKey` クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-383">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="2bf6b-384">`MutableKey` クラスには、設定可能な `Key` プロパティがあります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-384">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="2bf6b-385">新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子は、コレクションの `internal` (Visual Basic で`Friend` `ChangeKey`) を呼び出して、新しいキーが既存のキーと競合するかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-385">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="2bf6b-386">その場合は、例外がスローされ、プロパティ値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-386">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="2bf6b-387">`MutableKey` オブジェクトと `MutableKeys` コレクション間の接続を維持し、オブジェクトが2つのコレクションに挿入されないようにするために、`MutableKey` クラスには`Friend` フィールドに `internal` (Visual Basic) があります。`Collection`</span><span class="sxs-lookup"><span data-stu-id="2bf6b-387">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="2bf6b-388">このフィールドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドなどのコレクションの項目を追加および削除するためのカスタム動作を提供する、保護されたメソッドによって管理されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-388">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="2bf6b-389">フィールドは、アイテムがコレクションに追加されたときに設定され、アイテムが削除されるとクリアされます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-389">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItem (index As Integer, item As TItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItem(int index, TItem item);" />
      <MemberSignature Language="F#" Value="override this.SetItem : int * 'Item -&gt; unit" Usage="keyedCollection.SetItem (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="2bf6b-390">置き換えられる項目の 0 から始まるインデックス。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-390">The zero-based index of the item to be replaced.</span></span></param>
        <param name="item"><span data-ttu-id="2bf6b-391">新しい項目。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-391">The new item.</span></span></param>
        <summary><span data-ttu-id="2bf6b-392">指定したインデックス位置の項目を、指定した項目で置き換えます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-392">Replaces the item at the specified index with the specified item.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2bf6b-393">それに応じて、検索辞書が更新されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-393">The lookup dictionary is updated accordingly.</span></span> <span data-ttu-id="2bf6b-394">つまり、置換される項目のキーが検索ディクショナリから削除され、新しい項目のキーが追加されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-394">That is, the key of the item that is being replaced is removed from the lookup dictionary, and the key of the new item is added.</span></span>  
  
 <span data-ttu-id="2bf6b-395">このメソッドは、O(1) 操作です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-395">This method is an O(1) operation.</span></span>  
  
## <a name="notes-for-implementers"></a><span data-ttu-id="2bf6b-396">実装に関する注意事項</span><span class="sxs-lookup"><span data-stu-id="2bf6b-396">Notes for Implementers</span></span>  
 <span data-ttu-id="2bf6b-397"><xref:System.Collections.ObjectModel.Collection%601> ジェネリッククラスから継承された <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティを設定するためのカスタマイズされた動作を提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-397">Override this method to provide customized behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="2bf6b-398">このメソッドは、読み取り専用の <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> プロパティの動作には影響しません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-398">This method does not affect the behavior of the <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=nameWithType> property, which is read-only.</span></span>  
  
 <span data-ttu-id="2bf6b-399">このメソッドの基本クラスの実装を呼び出して、基になるコレクションの項目を設定し、参照ディクショナリを更新します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-399">Call the base class implementation of this method to set the item in the underlying collection and to update the lookup dictionary.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2bf6b-400">このセクションには、<xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> プロパティを設定するためのカスタム動作を提供するために <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> メソッドをオーバーライドする方法を示す2つのコード例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-400">This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> method to provide custom behavior for setting the <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="2bf6b-401">最初の例では、カスタム通知イベントを追加し、2番目の例では、変更可能なキーを持つオブジェクトのコレクションをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-401">The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.</span></span>  
  
 <span data-ttu-id="2bf6b-402">例 1</span><span class="sxs-lookup"><span data-stu-id="2bf6b-402">Example 1</span></span>  
  
 <span data-ttu-id="2bf6b-403">次のコード例は、protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、<xref:System.Collections.ObjectModel.Collection%601.Add%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>、および <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> の各メソッドのカスタム動作を提供し、既定の <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ (のインデクサー) を設定する方法を示しています。C#).</span><span class="sxs-lookup"><span data-stu-id="2bf6b-403">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property (the indexer in C#).</span></span> <span data-ttu-id="2bf6b-404">この例で提供されるカスタム動作は、`Changed`という名前の通知イベントで、オーバーライドされた各メソッドの最後に発生します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-404">The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.</span></span>  
  
 <span data-ttu-id="2bf6b-405">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602> から派生し、単純な注文フォームを表す `SimpleOrder` クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-405">The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form.</span></span> <span data-ttu-id="2bf6b-406">注文フォームには、注文されたアイテムを表す `OrderItem` オブジェクトが含まれます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-406">The order form contains `OrderItem` objects representing items ordered.</span></span> <span data-ttu-id="2bf6b-407">また、このコード例では、イベント情報を格納する `SimpleOrderChangedEventArgs` クラスと、変更の種類を識別するための列挙も作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-407">The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.</span></span>  
  
 <span data-ttu-id="2bf6b-408">このコード例では、`Demo` クラスの `Main` メソッドで、派生クラスのプロパティとメソッドを呼び出すことによって、カスタム動作を示します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-408">The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.</span></span>  
  
 <span data-ttu-id="2bf6b-409">このコード例では、変更できないキーを持つオブジェクトを使用します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-409">This code example uses objects with immutable keys.</span></span> <span data-ttu-id="2bf6b-410">変更可能なキーを使用するコード例については、「<xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-410">For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.</span></span>  
  
 [!code-cpp[KeyedCollection2#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 <span data-ttu-id="2bf6b-411">例 2</span><span class="sxs-lookup"><span data-stu-id="2bf6b-411">Example 2</span></span>  
  
 <span data-ttu-id="2bf6b-412">次のコード例は、保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> メソッドをオーバーライドして変更可能なキーをサポートする方法、および保護された <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> の各メソッドをオーバーライドして、キーとコレクションの整合性を維持する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-412">The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.</span></span>  
  
 <span data-ttu-id="2bf6b-413">このコード例では、<xref:System.Collections.ObjectModel.KeyedCollection%602>から派生した `MutableKeys` コレクションと、`MutableKey` クラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-413">The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class.</span></span> <span data-ttu-id="2bf6b-414">`MutableKey` クラスには、設定可能な `Key` プロパティがあります。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-414">The `MutableKey` class has a settable `Key` property.</span></span> <span data-ttu-id="2bf6b-415">新しいキーがプロパティに割り当てられると、プロパティ set アクセス操作子は、コレクションの `internal` (Visual Basic で`Friend` `ChangeKey`) を呼び出して、新しいキーが既存のキーと競合するかどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-415">When a new key is assigned to the property, the property setter calls the `internal` (`Friend` in Visual Basic) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key.</span></span> <span data-ttu-id="2bf6b-416">その場合は、例外がスローされ、プロパティ値は変更されません。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-416">If so, an exception is thrown and the property value is not changed.</span></span>  
  
 <span data-ttu-id="2bf6b-417">`MutableKey` オブジェクトと `MutableKeys` コレクション間の接続を維持し、オブジェクトが2つのコレクションに挿入されないようにするために、`MutableKey` クラスには`Friend` フィールドに `internal` (Visual Basic) があります。`Collection`</span><span class="sxs-lookup"><span data-stu-id="2bf6b-417">In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an `internal` (`Friend` in Visual Basic) `Collection` field.</span></span> <span data-ttu-id="2bf6b-418">このフィールドは、<xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドなどのコレクションの項目を追加および削除するためのカスタム動作を提供する、保護されたメソッドによって管理されます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-418">This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method.</span></span> <span data-ttu-id="2bf6b-419">フィールドは、アイテムがコレクションに追加されたときに設定され、アイテムが削除されるとクリアされます。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-419">The field is set when the item is added to a collection and cleared when the item is removed.</span></span>  
  
 [!code-csharp[KeyedCollectionMutable#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, [out] !TItem&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef item As TItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TItem % item);" />
      <MemberSignature Language="F#" Value="member this.TryGetValue : 'Key * 'Item -&gt; bool" Usage="keyedCollection.TryGetValue (key, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="item" Type="TItem" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="2bf6b-420">コレクション内で検索するアイテムのキー。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-420">The key of the item to search in the collection.</span></span></param>
        <param name="item"><span data-ttu-id="2bf6b-421">このメソッドが <see langword="true" /> を返すとき、指定したキーに一致するコレクションの項目。このメソッドが <see langword="false" /> を返すとき、コレクションの型の <see langword="default" /> 値。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-421">When this method returns <see langword="true" />, the item from the collection that matches the provided key; when this method returns <see langword="false" />, the <see langword="default" /> value for the type of the collection.</span></span></param>
        <summary><span data-ttu-id="2bf6b-422">指定したキーを使用して、コレクションから項目を取得しようとします。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-422">Tries to get an item from the collection using the specified key.</span></span></summary>
        <returns><span data-ttu-id="2bf6b-423">指定したキーの項目がコレクションに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-423"><see langword="true" /> if an item for the specified key was found in the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="2bf6b-424"><paramref name="key" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="2bf6b-424"><paramref name="key" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
