<Type Name="Task" FullName="System.Threading.Tasks.Task">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f952036180de7e8ddbce20a1abb7ee709291dcbf" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75117451" /></Metadata><TypeSignature Language="C#" Value="public class Task : IAsyncResult, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Task extends System.Object implements class System.IAsyncResult, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Task" />
  <TypeSignature Language="VB.NET" Value="Public Class Task&#xA;Implements IAsyncResult, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Task : IAsyncResult, IDisposable" />
  <TypeSignature Language="F#" Value="type Task = class&#xA;    interface IAsyncResult&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_TaskDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d35a0-101">非同期操作を表します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-101">Represents an asynchronous operation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
   
## Remarks  
 <span data-ttu-id="d35a0-102"><xref:System.Threading.Tasks.Task> クラスは、値を返さず、通常は非同期的に実行する1つの操作を表します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-102">The <xref:System.Threading.Tasks.Task> class represents a single operation that does not return a value and that usually executes asynchronously.</span></span> <span data-ttu-id="d35a0-103"><xref:System.Threading.Tasks.Task> オブジェクトは、.NET Framework 4 で最初に導入された[タスクベースの非同期パターン](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md)の中心的なコンポーネントの1つです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-103"><xref:System.Threading.Tasks.Task> objects are one of the central components of the  [task-based asynchronous pattern](~/docs/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap.md) first introduced in the .NET Framework 4.</span></span> <span data-ttu-id="d35a0-104"><xref:System.Threading.Tasks.Task> オブジェクトによって実行される作業は通常、メインアプリケーションスレッドで同期的に実行されるのではなく、スレッドプールのスレッドで非同期的に実行されるため、<xref:System.Threading.Tasks.Task.Status%2A> プロパティと、<xref:System.Threading.Tasks.Task.IsCanceled%2A>、<xref:System.Threading.Tasks.Task.IsCompleted%2A>、および <xref:System.Threading.Tasks.Task.IsFaulted%2A> の各プロパティを使用して、タスクの状態を確認できます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-104">Because the work performed by a <xref:System.Threading.Tasks.Task> object typically executes asynchronously on a thread pool thread rather than synchronously on the main application thread, you can use the <xref:System.Threading.Tasks.Task.Status%2A> property, as well as the <xref:System.Threading.Tasks.Task.IsCanceled%2A>, <xref:System.Threading.Tasks.Task.IsCompleted%2A>, and <xref:System.Threading.Tasks.Task.IsFaulted%2A> properties, to determine the   state of a task.</span></span> <span data-ttu-id="d35a0-105">通常、ラムダ式を使用して、タスクが実行する作業を指定します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-105">Most commonly, a lambda expression is used to specify the work that the task is to perform.</span></span>  
  
 <span data-ttu-id="d35a0-106">値を返す操作の場合は、<xref:System.Threading.Tasks.Task%601> クラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-106">For operations that return values, you use the <xref:System.Threading.Tasks.Task%601> class.</span></span>  
  
 <span data-ttu-id="d35a0-107">このセクションの内容:</span><span class="sxs-lookup"><span data-stu-id="d35a0-107">In this section:</span></span>  
  
 <span data-ttu-id="d35a0-108">[タスクのインスタンス化の例](#Instant) </span><span class="sxs-lookup"><span data-stu-id="d35a0-108">[Task instantiation examples](#Instant) </span></span>  
 <span data-ttu-id="d35a0-109">[タスク  の作成と実行](#Creating)</span><span class="sxs-lookup"><span data-stu-id="d35a0-109">[Creating and executing a task](#Creating) </span></span>  
 <span data-ttu-id="d35a0-110">[タスクの作成と実行  の分離](#Separating)</span><span class="sxs-lookup"><span data-stu-id="d35a0-110">[Separating task creation and execution](#Separating) </span></span>  
 <span data-ttu-id="d35a0-111">[1 つ以上のタスクが完了するのを待機して](#WaitingForOne)い </span><span class="sxs-lookup"><span data-stu-id="d35a0-111">[Waiting for one or more tasks to complete](#WaitingForOne) </span></span>  
 <span data-ttu-id="d35a0-112">[タスクとカルチャの](#Culture) </span><span class="sxs-lookup"><span data-stu-id="d35a0-112">[Tasks and culture](#Culture) </span></span>  
 [<span data-ttu-id="d35a0-113">デバッガー開発者向け</span><span class="sxs-lookup"><span data-stu-id="d35a0-113">For debugger developers</span></span>](#Debugger)  

 <a name="Instant"></a>     
## <a name="task-instantiation"></a><span data-ttu-id="d35a0-114">タスクのインスタンス化</span><span class="sxs-lookup"><span data-stu-id="d35a0-114">Task instantiation</span></span>  
 <span data-ttu-id="d35a0-115">次の例では、4つのタスクを作成して実行します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-115">The following example creates and executes four tasks.</span></span> <span data-ttu-id="d35a0-116">3つのタスクは、型 <xref:System.Object>の引数を受け取る `action`という名前の <xref:System.Action%601> デリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-116">Three tasks execute an <xref:System.Action%601> delegate named `action`, which accepts an argument of type <xref:System.Object>.</span></span> <span data-ttu-id="d35a0-117">4番目のタスクは、タスク作成メソッドの呼び出しでインラインで定義されているラムダ式 (<xref:System.Action> デリゲート) を実行します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-117">A fourth task executes a lambda expression (an <xref:System.Action> delegate) that is defined inline in the call to the task creation method.</span></span> <span data-ttu-id="d35a0-118">各タスクはインスタンス化され、別の方法で実行されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-118">Each task is instantiated and run in a different way:</span></span>  
  
-   <span data-ttu-id="d35a0-119">タスク `t1` はタスククラスコンストラクターを呼び出すことによってインスタンス化されますが、タスク `t2` が開始された後にのみ、<xref:System.Threading.Tasks.Task.Start> メソッドを呼び出すことによって開始されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-119">Task `t1` is instantiated by calling a Task class constructor, but is started by calling its <xref:System.Threading.Tasks.Task.Start> method only after task `t2` has started.</span></span>  
  
-   <span data-ttu-id="d35a0-120">タスク `t2` は、<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> メソッドを呼び出すことによってインスタンス化され、1回のメソッド呼び出しで開始されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-120">Task `t2` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="d35a0-121">タスク `t3` は、<xref:System.Threading.Tasks.Task.Run%28System.Action%29> メソッドを呼び出すことによってインスタンス化され、1回のメソッド呼び出しで開始されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-121">Task `t3` is instantiated and started in a single method call by calling the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
-   <span data-ttu-id="d35a0-122">タスク `t4` は、<xref:System.Threading.Tasks.Task.RunSynchronously> メソッドを呼び出すことによって、メインスレッドで同期的に実行されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-122">Task `t4` is executed synchronously on the main thread by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method.</span></span>  
  
 <span data-ttu-id="d35a0-123">タスク `t4` は同期的に実行されるため、メインアプリケーションスレッドで実行されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-123">Because task `t4` executes synchronously, it executes on the main application thread.</span></span> <span data-ttu-id="d35a0-124">残りのタスクは、通常、1つ以上のスレッドプールのスレッドで非同期的に実行されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-124">The remaining tasks execute asynchronously typically on one or more thread pool threads.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew.cs#01)]
 [!code-vb[System.Threading.Tasks.Task#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew.vb#01)] 
    
<a name="Creating"></a>   
## <a name="creating-and-executing-a-task"></a><span data-ttu-id="d35a0-125">タスクの作成と実行</span><span class="sxs-lookup"><span data-stu-id="d35a0-125">Creating and executing a task</span></span>  
 <span data-ttu-id="d35a0-126"><xref:System.Threading.Tasks.Task> インスタンスは、さまざまな方法で作成できます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-126"><xref:System.Threading.Tasks.Task> instances may be created in a variety of ways.</span></span> <span data-ttu-id="d35a0-127">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]から使用できる最も一般的な方法は、静的な <xref:System.Threading.Tasks.Task.Run%2A> メソッドを呼び出すことです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-127">The most common approach, which is available starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], is to call the static <xref:System.Threading.Tasks.Task.Run%2A> method.</span></span> <span data-ttu-id="d35a0-128"><xref:System.Threading.Tasks.Task.Run%2A> メソッドは、既定値を使用してタスクを開始する簡単な方法を提供し、追加のパラメーターを必要としません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-128">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a simple way to start a task using default values and without requiring additional parameters.</span></span> <span data-ttu-id="d35a0-129">次の例では、<xref:System.Threading.Tasks.Task.Run%28System.Action%29> メソッドを使用して、ループするタスクを開始し、ループイテレーションの数を表示します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-129">The following example uses the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to start a task that loops and then displays the number of loop iterations:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/run1.cs#6)]
 [!code-vb[System.Threading.Tasks.Task#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/run1.vb#6)]  
  
 <span data-ttu-id="d35a0-130">代替手段として、[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]でタスクを開始する最も一般的な方法は、静的な <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-130">An alternative, and the most common method to start a task in [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], is the static <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-131"><xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> プロパティは、<xref:System.Threading.Tasks.TaskFactory> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-131">The <xref:System.Threading.Tasks.Task.Factory%2A?displayProperty=nameWithType> property returns a <xref:System.Threading.Tasks.TaskFactory> object.</span></span> <span data-ttu-id="d35a0-132"><xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> メソッドのオーバーロードを使用すると、タスクの作成オプションとタスクスケジューラに渡すパラメーターを指定できます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-132">Overloads of the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method let you specify parameters to pass to the task creation options and a task scheduler.</span></span> <span data-ttu-id="d35a0-133">次の例では、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> メソッドを使用してタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-133">The following example uses the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method to start a task.</span></span> <span data-ttu-id="d35a0-134">これは、前の例のコードと機能的には同等です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-134">It is functionally equivalent to the code in the previous example.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/startnew1.cs#7)]
 [!code-vb[System.Threading.Tasks.Task#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/startnew1.vb#7)]  
  
 <span data-ttu-id="d35a0-135">詳細な例については、「[タスクベースの非同期プログラミング](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-135">For more complete examples, see [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md).</span></span>  
  
<a name="Separating"></a>   
## <a name="separating-task-creation-and-execution"></a><span data-ttu-id="d35a0-136">タスクの作成と実行の分離</span><span class="sxs-lookup"><span data-stu-id="d35a0-136">Separating task creation and execution</span></span>  
 <span data-ttu-id="d35a0-137"><xref:System.Threading.Tasks.Task> クラスには、タスクを初期化するが、実行のスケジュールが設定されていないコンストラクターも用意されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-137">The <xref:System.Threading.Tasks.Task> class also provides constructors that initialize the task but that do not schedule it for execution.</span></span> <span data-ttu-id="d35a0-138">パフォーマンス上の理由により、<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> または <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> 方法は、計算タスクを作成およびスケジュールするために推奨されるメカニズムですが、作成とスケジュールを分離する必要があるシナリオでは、コンストラクターを使用してから、<xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> メソッドを呼び出して、後で実行するタスクをスケジュールすることができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-138">For performance reasons, the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method is the preferred mechanism for creating and scheduling computational tasks, but for scenarios where creation and scheduling must be separated, you can use the constructors and then call the <xref:System.Threading.Tasks.Task.Start%2A?displayProperty=nameWithType> method to schedule the task for execution at a later time.</span></span>  
  
<a name="WaitingForOne"></a>   
## <a name="waiting-for-one-or-more-tasks-to-complete"></a><span data-ttu-id="d35a0-139">1つ以上のタスクが完了するのを待機しています</span><span class="sxs-lookup"><span data-stu-id="d35a0-139">Waiting for one or more tasks to complete</span></span>  
 <span data-ttu-id="d35a0-140">タスクは通常、スレッドプールのスレッドで非同期に実行されるため、タスクを作成して開始するスレッドは、タスクがインスタンス化されるとすぐに実行を継続します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-140">Because tasks typically run asynchronously on a thread pool thread, the thread that creates and starts the task continues execution as soon as the task has been instantiated.</span></span> <span data-ttu-id="d35a0-141">場合によっては、呼び出し元のスレッドがメインアプリケーションスレッドである場合、タスクが実際に実行を開始する前にアプリが終了することがあります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-141">In some cases, when the calling thread is the main application thread, the app may terminate before any the task actually begins execution.</span></span> <span data-ttu-id="d35a0-142">それ以外の場合、アプリケーションのロジックでは、1つ以上のタスクが実行を完了したときにのみ、呼び出し元のスレッドが実行を継続することが必要になる場合があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-142">In others,   your application's logic may require that the calling thread continue execution only when one or more tasks has completed execution.</span></span> <span data-ttu-id="d35a0-143">1つ以上のタスクが完了するのを待機するために `Wait` メソッドを呼び出すことにより、呼び出し元スレッドと起動する非同期タスクの実行を同期できます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-143">You can synchronize the execution of the calling thread and the asynchronous tasks it launches by calling a `Wait` method to wait for one or more tasks to complete.</span></span>  
  
 <span data-ttu-id="d35a0-144">1つのタスクが完了するまで待機するには、その <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-144">To wait for a single task to complete, you can call its <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-145"><xref:System.Threading.Tasks.Task.Wait%2A> メソッドを呼び出すと、単一クラスのインスタンスの実行が完了するまで、呼び出し元のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-145">A call to the  <xref:System.Threading.Tasks.Task.Wait%2A> method blocks the calling thread until the single class instance has completed execution.</span></span>  
  
 <span data-ttu-id="d35a0-146">次の例では、パラメーターなしの <xref:System.Threading.Tasks.Task.Wait> メソッドを呼び出して、タスクが完了するまで無条件に待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-146">The following example calls the parameterless <xref:System.Threading.Tasks.Task.Wait> method to wait unconditionally until a task completes.</span></span> <span data-ttu-id="d35a0-147">このタスクは、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> メソッドを呼び出して2秒間スリープ状態にすることで、作業をシミュレートします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-147">The task simulates work by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to sleep for two seconds.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait1.cs#8)]
 [!code-vb[System.Threading.Tasks.Task#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait1.vb#8)]  
  
 <span data-ttu-id="d35a0-148">タスクの完了を条件付きで待機することもできます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-148">You can also conditionally wait for a task to complete.</span></span> <span data-ttu-id="d35a0-149"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> および <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> メソッドは、タスクが終了するまで、またはタイムアウト間隔が経過するまで、呼び出し元のスレッドをブロックします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-149">The <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> and <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> methods block the calling thread until the task finishes or a timeout interval elapses, whichever comes first.</span></span> <span data-ttu-id="d35a0-150">次の例では、2秒間スリープするタスクを起動しますが、1秒間のタイムアウト値を定義するため、呼び出し元のスレッドはタイムアウトが経過するまでブロックされ、タスクの実行が完了するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-150">Since the following example launches a task that sleeps for two seconds but defines a one-second timeout value, the calling thread blocks until the timeout expires and before the task has completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/Wait2.cs#9)]
 [!code-vb[System.Threading.Tasks.Task#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/Wait2.vb#9)]  
  
 <span data-ttu-id="d35a0-151"><xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> および <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> メソッドを呼び出すことによって、キャンセルトークンを指定することもできます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-151">You can also supply a cancellation token by calling the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> and  <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> methods.</span></span> <span data-ttu-id="d35a0-152"><xref:System.Threading.Tasks.Task.Wait%2A> メソッドの実行中にトークンの <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> プロパティが `true` または `true` になると、メソッドは <xref:System.OperationCanceledException>をスローします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-152">If the  token's <xref:System.Threading.CancellationToken.IsCancellationRequested%2A> property is `true` or becomes `true` while the <xref:System.Threading.Tasks.Task.Wait%2A> method is executing, the method throws an <xref:System.OperationCanceledException>.</span></span>  
  
 <span data-ttu-id="d35a0-153">場合によっては、一連の実行中の一連のタスクが完了するまで待機する必要がありますが、それがどのようなタスクであるかは気にしません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-153">In some cases, you may want to wait for the first of a series of executing tasks to complete, but don't care which task it is.</span></span>  <span data-ttu-id="d35a0-154">このために、<xref:System.Threading.Tasks.Task.WaitAny%2A?displayProperty=nameWithType> メソッドのオーバーロードの1つを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-154">For this purpose, you can call one of the overloads of the <xref:System.Threading.Tasks.Task.WaitAny%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="d35a0-155">次の例では、3つのタスクを作成します。各タスクは、ランダムな数値ジェネレーターによって決定された間隔でスリープします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-155">The following example creates three tasks, each of which sleeps for an interval determine by a random number generator.</span></span> <span data-ttu-id="d35a0-156"><xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> メソッドは、最初のタスクが完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-156">The <xref:System.Threading.Tasks.Task.WaitAny%28System.Threading.Tasks.Task%5B%5D%29> method waits for the first task to complete.</span></span> <span data-ttu-id="d35a0-157">この例では、3つのタスクすべての状態に関する情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-157">The example then displays information about the status of all three tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WhenAny1.cs#10)]
 [!code-vb[System.Threading.Tasks.Task#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAny1.vb#10)]  
  
 <span data-ttu-id="d35a0-158"><xref:System.Threading.Tasks.Task.WaitAll%2A> メソッドを呼び出すことによって、一連のタスクが完了するまで待機することもできます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-158">You can also wait for all of a series of tasks to complete by calling the <xref:System.Threading.Tasks.Task.WaitAll%2A> method.</span></span> <span data-ttu-id="d35a0-159">次の例では、10個のタスクを作成し、すべての10が完了するまで待機して、その状態を表示します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-159">The following example creates ten tasks, waits for all ten to complete, and then displays their status.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll1.cs#11)]
 [!code-vb[System.Threading.Tasks.Task#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll1.vb#11)]  
  
 <span data-ttu-id="d35a0-160">1つ以上のタスクが完了するまで待機すると、次の例に示すように、実行中のタスクでスローされた例外は、`Wait` メソッドを呼び出すスレッドに反映されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-160">Note that when you wait for one or more tasks to complete, any exceptions thrown in the running tasks are propagated on the thread that calls the `Wait` method, as the following example shows.</span></span> <span data-ttu-id="d35a0-161">12個のタスクが起動され、そのうち3つは正常に完了し、そのうち3つは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-161">It launches 12 tasks, three of which complete normally and three of which throw an exception.</span></span> <span data-ttu-id="d35a0-162">残りの6つのタスクのうち、3つは開始前にキャンセルされ、3つは実行中にキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-162">Of the remaining six tasks, three are cancelled before they start, and three are cancelled while they are executing.</span></span> <span data-ttu-id="d35a0-163"><xref:System.Threading.Tasks.Task.WaitAll%2A> メソッドの呼び出しで例外がスローされ、`try`/`catch` ブロックによって処理されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-163">Exceptions are thrown in the <xref:System.Threading.Tasks.Task.WaitAll%2A> method call and are handled by a `try`/`catch` block.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/WaitAll2.cs#12)]
 [!code-vb[System.Threading.Tasks.Task#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/WaitAll2.vb#12)]  
  
 <span data-ttu-id="d35a0-164">タスクベースの非同期操作での例外処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-164">For more information on exception handling in task-based asynchronous operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
<a name="Culture"></a>   
## <a name="tasks-and-culture"></a><span data-ttu-id="d35a0-165">タスクとカルチャ</span><span class="sxs-lookup"><span data-stu-id="d35a0-165">Tasks and culture</span></span>  
 <span data-ttu-id="d35a0-166">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]を対象とするデスクトップアプリ以降では、タスクを作成して呼び出すスレッドのカルチャがスレッドのコンテキストの一部になります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-166">Starting with desktop apps that target the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the thread that creates and invokes a task becomes part of the thread's context.</span></span> <span data-ttu-id="d35a0-167">つまり、タスクが実行されるスレッドの現在のカルチャに関係なく、タスクの現在のカルチャが呼び出し元スレッドのカルチャになります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-167">That is, regardless of the current culture of the thread on which the task executes, the current culture of the task is the culture of the calling thread.</span></span> <span data-ttu-id="d35a0-168">[!INCLUDE[net_v46](~/includes/net-v46-md.md)]前に .NET Framework のバージョンを対象とするアプリの場合、タスクのカルチャは、タスクが実行されるスレッドのカルチャになります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-168">For apps that target versions of the .NET Framework prior to the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the culture of the task is the culture of the thread on which the task executes.</span></span> <span data-ttu-id="d35a0-169">詳細については、「<xref:System.Globalization.CultureInfo>」トピックの「カルチャとタスクベースの非同期操作」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-169">For more information, see the "Culture and task-based asynchronous operations" section in the <xref:System.Globalization.CultureInfo> topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d35a0-170">ストアアプリは、設定の Windows ランタイムに従い、既定のカルチャを取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-170">Store apps follow the Windows Runtime in setting and getting the default culture.</span></span>  
  
<a name="Debugger"></a>   
## <a name="for-debugger-developers"></a><span data-ttu-id="d35a0-171">デバッガー開発者向け</span><span class="sxs-lookup"><span data-stu-id="d35a0-171">For debugger developers</span></span>  
 <span data-ttu-id="d35a0-172">カスタムデバッガーを実装する開発者にとっては、タスクのいくつかの内部メンバーとプライベートメンバーが役に立つ場合があります (これらはリリースごとに変更される可能性があります)。</span><span class="sxs-lookup"><span data-stu-id="d35a0-172">For developers implementing custom debuggers, several internal and private members of task may be useful (these may change from release to release).</span></span> <span data-ttu-id="d35a0-173">`m_taskId` フィールドは、<xref:System.Threading.Tasks.Task.Id%2A> プロパティのバッキングストアとして機能しますが、デバッガーから直接このフィールドにアクセスする方が、プロパティの getter メソッドを使用して同じ値にアクセスするよりも効率的な場合があります (`s_taskIdCounter` カウンターを使用して、タスクの次に使用可能な ID を取得します)。</span><span class="sxs-lookup"><span data-stu-id="d35a0-173">The `m_taskId` field serves as the backing store for the <xref:System.Threading.Tasks.Task.Id%2A> property, however accessing this field directly from a debugger may be more efficient than accessing the same value through the property's getter method (the `s_taskIdCounter` counter is used to retrieve the next available ID for a task).</span></span> <span data-ttu-id="d35a0-174">同様に、[`m_stateFlags`] フィールドには、タスクの現在のライフサイクルステージに関する情報が格納されます。この情報には、<xref:System.Threading.Tasks.Task.Status%2A> プロパティを通じてアクセスすることもできます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-174">Similarly, the `m_stateFlags` field stores information about the current lifecycle stage of the task, information also accessible through the <xref:System.Threading.Tasks.Task.Status%2A> property.</span></span> <span data-ttu-id="d35a0-175">`m_action` フィールドにはタスクのデリゲートへの参照が格納され、`m_stateObject` フィールドには、開発者によってタスクに渡される非同期状態が格納されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-175">The `m_action` field stores a reference to the task's delegate, and the `m_stateObject` field stores the async state passed to the task by the developer.</span></span> <span data-ttu-id="d35a0-176">最後に、スタックフレームを解析するデバッガーの場合、`InternalWait` メソッドは、タスクが待機操作に入ったときのマーカーとして機能します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-176">Finally, for debuggers that parse stack frames, the `InternalWait` method serves a potential marker for when a task is entering a wait operation.</span></span>   
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="d35a0-177"><see cref="M:System.Threading.Tasks.Task.Dispose" />を除く <see cref="T:System.Threading.Tasks.Task" />のすべてのメンバーはスレッドセーフであり、複数のスレッドから同時に使用することができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-177">All members of <see cref="T:System.Threading.Tasks.Task" />, except for <see cref="M:System.Threading.Tasks.Task.Dispose" />, are thread-safe and may be used from multiple threads concurrently.</span></span></threadsafe>
    <altmember cref="T:System.Threading.Tasks.Task`1" />
    <related type="Article" href="~/docs/standard/parallel-programming/task-parallel-library-tpl.md"><span data-ttu-id="d35a0-178">タスク並列ライブラリ (TPL)</span><span class="sxs-lookup"><span data-stu-id="d35a0-178">Task Parallel Library (TPL)</span></span></related>
    <related type="Article" href="~/docs/standard/parallel-programming/task-based-asynchronous-programming.md"><span data-ttu-id="d35a0-179">タスク ベースの非同期プログラミング</span><span class="sxs-lookup"><span data-stu-id="d35a0-179">Task-based Asynchronous Programming</span></span></related>
    <related type="ExternalDocumentation" href="https://code.msdn.microsoft.com/Samples-for-Parallel-b4b76364"><span data-ttu-id="d35a0-180">.NET Framework を使用した並列プログラミングのサンプル</span><span class="sxs-lookup"><span data-stu-id="d35a0-180">Samples for Parallel Programming with the .NET Framework</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d35a0-181">新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-181">Initializes a new <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task action" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="d35a0-182">タスクで実行するコードを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="d35a0-182">The delegate that represents the code to execute in the task.</span></span></param>
        <summary><span data-ttu-id="d35a0-183">指定したアクションで新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-183">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-184">このコンストラクターは、タスクの作成と開始を分離する必要がある高度なシナリオでのみ使用してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-184">This constructor should only be used in advanced scenarios where it is required that the creation and starting of the task is separated.</span></span>  
  
 <span data-ttu-id="d35a0-185">このコンストラクターを呼び出すのではなく、静的 <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> または <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> メソッドを呼び出すことによって、<xref:System.Threading.Tasks.Task> オブジェクトをインスタンス化し、タスクを起動するのが最も一般的な方法です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-185">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%29?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="d35a0-186">API のコンシューマーが待機する必要のあるタスクを実行するためだけにアクションのないタスクが必要な場合は、<xref:System.Threading.Tasks.TaskCompletionSource%601> を使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-186">If a task with no action is needed just for the consumer of an API to have something to await, a <xref:System.Threading.Tasks.TaskCompletionSource%601> should be used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-187">次の例では、<xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> コンストラクターを使用して、指定したディレクトリ内のファイル名を取得するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-187">The following example uses the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to create tasks that retrieve the filenames in specified directories.</span></span> <span data-ttu-id="d35a0-188">すべてのタスクは、ファイル名を1つの <xref:System.Collections.Concurrent.ConcurrentBag%601> オブジェクトに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-188">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="d35a0-189">次に、<xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> メソッドを呼び出してすべてのタスクが完了したことを確認し、<xref:System.Collections.Concurrent.ConcurrentBag%601> オブジェクトに書き込まれたファイル名の合計数を表示します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-189">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/ctor1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/ctor1.vb#1)]  
  
 <span data-ttu-id="d35a0-190">次の例は同じですが、<xref:System.Threading.Tasks.Task.Run%28System.Action%29> メソッドを使用して1回の操作でタスクをインスタンス化して実行する点が異なります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-190">The following example is identical, except that it used the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method to instantiate and run the task in a single operation.</span></span> <span data-ttu-id="d35a0-191">メソッドは、タスクを表す <xref:System.Threading.Tasks.Task> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-191">The method returns the <xref:System.Threading.Tasks.Task> object that represents the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-192"><paramref name="action" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-192">The <paramref name="action" /> argument is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Threading.Tasks.Task.Run(System.Action)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="d35a0-193">タスクで実行するコードを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="d35a0-193">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-194">新しいタスクが観察する <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-194">The <see cref="T:System.Threading.CancellationToken" /> that the new  task will observe.</span></span></param>
        <summary><span data-ttu-id="d35a0-195">指定したアクションおよび <see cref="T:System.Threading.Tasks.Task" /> で新しい <see cref="T:System.Threading.CancellationToken" /> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-195">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and <see cref="T:System.Threading.CancellationToken" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-196">このコンストラクターを呼び出すのではなく、静的 <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> メソッドと <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> メソッドを呼び出すことによって、<xref:System.Threading.Tasks.Task> オブジェクトをインスタンス化し、タスクを起動するのが最も一般的な方法です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-196">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> and <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="d35a0-197">このコンストラクターによって提供される唯一の利点は、オブジェクトのインスタンス化をタスクの呼び出しから分離できることです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-197">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="d35a0-198">詳細については、「[タスクの並列化 (タスク並列ライブラリ)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) 」および「[マネージスレッドでのキャンセル](~/docs/standard/threading/cancellation-in-managed-threads.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-198">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-199">次の例では、<xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> コンストラクターを呼び出して、C:\Windows\System32 ディレクトリ内のファイルを反復処理するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-199">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%2CSystem.Threading.CancellationToken%29> constructor to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="d35a0-200">ラムダ式は、<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドを呼び出して、各ファイルに関する情報を <xref:System.Collections.Generic.List%601> オブジェクトに追加します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-200">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="d35a0-201"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> ループによって呼び出された、デタッチされた入れ子になった各タスクは、キャンセルトークンの状態をチェックし、キャンセルが要求された場合は <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-201">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-202"><xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> メソッドは、呼び出し元のスレッドが <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> メソッドを呼び出すと `catch` ブロックで処理される <xref:System.OperationCanceledException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-202">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="d35a0-203">次に、<xref:System.Threading.Tasks.Task.Start%2A> メソッドを呼び出してタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-203">The <xref:System.Threading.Tasks.Task.Start%2A> method is then called to start the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-204">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-204">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-205"><paramref name="action" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-205">The <paramref name="action" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="d35a0-206">タスクで実行するコードを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="d35a0-206">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="d35a0-207">タスクの動作のカスタマイズに使用する <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-207">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span></span></param>
        <summary><span data-ttu-id="d35a0-208">指定したアクションと作成オプションで新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-208">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-209">このコンストラクターを呼び出すのではなく、静的な <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> メソッドを呼び出すことによって、<xref:System.Threading.Tasks.Task> オブジェクトをインスタンス化し、タスクを起動するための最も一般的な方法です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-209">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-210">このコンストラクターによって提供される唯一の利点は、オブジェクトのインスタンス化をタスクの呼び出しから分離できることです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-210">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-211"><paramref name="action" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-211">The <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-212"><paramref name="creationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-212">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="d35a0-213">タスクで実行するコードを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="d35a0-213">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-214">アクションによって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-214">An object representing data to be used by the action.</span></span></param>
        <summary><span data-ttu-id="d35a0-215">指定したアクションと状態で新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-215">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-216">このコンストラクターを呼び出すのではなく、静的な <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> メソッドを呼び出すことによって、<xref:System.Threading.Tasks.Task> オブジェクトをインスタンス化し、タスクを起動するための最も一般的な方法です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-216">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-217">このコンストラクターによって提供される唯一の利点は、オブジェクトのインスタンス化をタスクの呼び出しから分離できることです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-217">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-218">次の例では、6文字の単語の配列を定義しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-218">The following example defines an array of 6-letter words.</span></span> <span data-ttu-id="d35a0-219">各単語は引数として <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> コンストラクターに渡され、<xref:System.Action%601> デリゲートによって単語内の文字がスクランブルされます。その後、元の単語とそのスクランブルバージョンが表示されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-219">Each word is then passed as an argument to the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%7BSystem.Object%7D%2CSystem.Object%29> constructor, whose <xref:System.Action%601> delegate scrambles the characters in the word, then displays the original word and its scrambled version.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/cs/startnew3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.ctor/vb/startnew3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-220"><paramref name="action" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-220">The <paramref name="action" /> argument is null.</span></span></exception>
        <altmember cref="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action ^ action, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, cancellationToken, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="d35a0-221">タスクで実行するコードを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="d35a0-221">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-222">新しいタスクが観察する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-222">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="d35a0-223">タスクの動作のカスタマイズに使用する <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-223">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span></span></param>
        <summary><span data-ttu-id="d35a0-224">指定したアクションと作成オプションで新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-224">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action and creation options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-225">このコンストラクターを呼び出すのではなく、静的な <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> メソッドを呼び出すことによって、<xref:System.Threading.Tasks.Task> オブジェクトをインスタンス化し、タスクを起動するための最も一般的な方法です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-225">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-226">このコンストラクターによって提供される唯一の利点は、オブジェクトのインスタンス化をタスクの呼び出しから分離できることです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-226">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 <span data-ttu-id="d35a0-227">詳細については、「[タスクの並列化 (タスク並列ライブラリ)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) 」および「[タスクのキャンセル](~/docs/standard/parallel-programming/task-cancellation.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-227">For more information, see [Task Parallelism (Task Parallel Library)](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Task Cancellation](~/docs/standard/parallel-programming/task-cancellation.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-228"><see cref="T:System.Threading.CancellationTokenSource" /> を作成した <paramref name="cancellationToken" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-228">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-229"><paramref name="action" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-229">The <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-230"><paramref name="creationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-230">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state, cancellationToken)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="d35a0-231">タスクで実行するコードを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="d35a0-231">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-232">アクションによって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-232">An object representing data to be used by the action.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-233">新しいタスクが観察する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-233">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</span></span></param>
        <summary><span data-ttu-id="d35a0-234">指定したアクション、状態、およびオプションで新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-234">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-235">このコンストラクターを呼び出すのではなく、静的な <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> メソッドを呼び出すことによって、<xref:System.Threading.Tasks.Task> オブジェクトをインスタンス化し、タスクを起動するための最も一般的な方法です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-235">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-236">このコンストラクターによって提供される唯一の利点は、オブジェクトのインスタンス化をタスクの呼び出しから分離できることです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-236">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-237"><see cref="T:System.Threading.CancellationTokenSource" /> を作成した <paramref name="cancellationToken" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-237">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-238"><paramref name="action" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-238">The <paramref name="action" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="d35a0-239">タスクで実行するコードを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="d35a0-239">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-240">アクションによって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-240">An object representing data to be used by the action.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="d35a0-241">タスクの動作のカスタマイズに使用する <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-241">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span></span></param>
        <summary><span data-ttu-id="d35a0-242">指定したアクション、状態、およびオプションで新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-242">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-243">このコンストラクターを呼び出すのではなく、静的な <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> メソッドを呼び出すことによって、<xref:System.Threading.Tasks.Task> オブジェクトをインスタンス化し、タスクを起動するための最も一般的な方法です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-243">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.Tasks.TaskCreationOptions%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-244">このコンストラクターによって提供される唯一の利点は、オブジェクトのインスタンス化をタスクの呼び出しから分離できることです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-244">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-245"><paramref name="action" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-245">The <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-246"><paramref name="creationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-246">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Task (Action&lt;object&gt; action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action`1&lt;object&gt; action, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Task(Action&lt;System::Object ^&gt; ^ action, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions);" />
      <MemberSignature Language="F#" Value="new System.Threading.Tasks.Task : Action&lt;obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskCreationOptions -&gt; System.Threading.Tasks.Task" Usage="new System.Threading.Tasks.Task (action, state, cancellationToken, creationOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;System.Object&gt;" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="d35a0-247">タスクで実行するコードを表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="d35a0-247">The delegate that represents the code to execute in the task.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-248">アクションによって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-248">An object representing data to be used by the action.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-249">新しいタスクが観察する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-249">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that the new task will observe.</span></span></param>
        <param name="creationOptions"><span data-ttu-id="d35a0-250">タスクの動作のカスタマイズに使用する <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-250">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to customize the task's behavior.</span></span></param>
        <summary><span data-ttu-id="d35a0-251">指定したアクション、状態、およびオプションで新しい <see cref="T:System.Threading.Tasks.Task" /> を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-251">Initializes a new <see cref="T:System.Threading.Tasks.Task" /> with the specified action, state, and options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-252">このコンストラクターを呼び出すのではなく、静的な <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> メソッドを呼び出すことによって、<xref:System.Threading.Tasks.Task> オブジェクトをインスタンス化し、タスクを起動するための最も一般的な方法です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-252">Rather than calling this constructor, the most common way to instantiate a <xref:System.Threading.Tasks.Task> object and launch a task is by calling the static <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%7BSystem.Object%7D%2CSystem.Object%2CSystem.Threading.CancellationToken%2CSystem.Threading.Tasks.TaskCreationOptions%2CSystem.Threading.Tasks.TaskScheduler%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-253">このコンストラクターによって提供される唯一の利点は、オブジェクトのインスタンス化をタスクの呼び出しから分離できることです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-253">The only advantage offered by this constructor is that it allows object instantiation to be separated from task invocation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-254"><see cref="T:System.Threading.CancellationTokenSource" /> を作成した <paramref name="cancellationToken" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-254">The <see cref="T:System.Threading.CancellationTokenSource" /> that created <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-255"><paramref name="action" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-255">The <paramref name="action" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-256"><paramref name="creationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskCreationOptions" /> の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-256">The <paramref name="creationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskCreationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncState">
      <MemberSignature Language="C#" Value="public object AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.AsyncState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AsyncState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ AsyncState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AsyncState : obj" Usage="System.Threading.Tasks.Task.AsyncState" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncState</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-257"><see cref="T:System.Threading.Tasks.Task" /> が作成されたときに渡される状態オブジェクトを取得します。渡されなかった場合は null。</span><span class="sxs-lookup"><span data-stu-id="d35a0-257">Gets the state object supplied when the <see cref="T:System.Threading.Tasks.Task" /> was created, or null if none was supplied.</span></span></summary>
        <value><span data-ttu-id="d35a0-258">タスクの作成時にそのタスクに渡された状態データを表す <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-258">An <see cref="T:System.Object" /> that represents the state data that was passed in to the task when it was created.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-259">オブジェクトを元の型にキャストして、データを取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-259">Cast the object back to the original type to retrieve its data.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedTask">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task CompletedTask { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.Task CompletedTask" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CompletedTask" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CompletedTask As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::Task ^ CompletedTask { System::Threading::Tasks::Task ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompletedTask : System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.CompletedTask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-260">既に正常に完了したタスクを取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-260">Gets a task that has already completed successfully.</span></span></summary>
        <value><span data-ttu-id="d35a0-261">正常に完了したタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-261">The successfully completed task.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-262">このプロパティは、<xref:System.Threading.Tasks.Task.Status%2A> プロパティが <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>に設定されているタスクを返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-262">This property returns a task whose <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="d35a0-263">値を返して完了まで実行するタスクを作成するには、<xref:System.Threading.Tasks.Task.FromResult%2A> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-263">To create task that returns a value and runs to completion, call the <xref:System.Threading.Tasks.Task.FromResult%2A> method.</span></span>  
  
 <span data-ttu-id="d35a0-264">このプロパティ値を繰り返し取得しようとすると、必ずしも同じインスタンスが返されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-264">Repeated attempts to retrieve this property value may not always return the same instance.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="ConfigureAwait">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait (bool continueOnCapturedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function ConfigureAwait (continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);" />
      <MemberSignature Language="F#" Value="member this.ConfigureAwait : bool -&gt; System.Runtime.CompilerServices.ConfiguredTaskAwaitable" Usage="task.ConfigureAwait continueOnCapturedContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.ConfiguredTaskAwaitable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continueOnCapturedContext" Type="System.Boolean" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="continueOnCapturedContext"><span data-ttu-id="d35a0-265">継続をキャプチャされた元のコンテキストにマーシャリングする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-265"><see langword="true" /> to attempt to marshal the continuation back to the original context captured; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="d35a0-266">この <see cref="T:System.Threading.Tasks.Task" /> を待機するために使用する awaiter を構成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-266">Configures an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="d35a0-267">このタスクを待機するために使用するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-267">An object used to await this task.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ContinueWith">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d35a0-268">ターゲットの <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期に実行する継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-268">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith continuationAction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="d35a0-269"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-269">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-270">実行すると、完了したタスクがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-270">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <summary><span data-ttu-id="d35a0-271">ターゲットの <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期に実行する継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-271">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span></summary>
        <returns><span data-ttu-id="d35a0-272">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-272">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-273">返された <xref:System.Threading.Tasks.Task> は、現在のタスクが完了するまで実行されるようにスケジュールされません。正常に完了するために実行が正常に完了したか、未処理の例外が原因でエラーが発生したか、または取り消されたため早期に終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-273">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-274">次の例では、100のランダムな日付と時刻の値を配列に設定するタスクを定義します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-274">The following example defines a task that populates an array with 100 random date and time values.</span></span> <span data-ttu-id="d35a0-275">配列が完全に設定されたら、<xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> メソッドを使用して、最も古い日付と最後の日付の値を選択します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-275">It uses the <xref:System.Threading.Tasks.Task.ContinueWith%28System.Action%7BSystem.Threading.Tasks.Task%7D%29> method to select the earliest and the latest date values once the array is fully populated.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/cs/continuewith1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.ContinueWith#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.continuewith/vb/continuewith1.vb#1)]  
  
 <span data-ttu-id="d35a0-276">継続タスクが実行される前にコンソールアプリケーションが終了する可能性があるため、<xref:System.Threading.Tasks.Task.Wait> メソッドを呼び出して、この例が終了する前に継続が実行を終了するようにします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-276">Because a console application may terminate before the continuation task executes, the <xref:System.Threading.Tasks.Task.Wait> method is called to ensure that the continuation finishes executing before the example ends.</span></span>  
  
 <span data-ttu-id="d35a0-277">その他の例については、「[継続タスクを使用](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)したタスクの連結」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-277">For an additional example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-278"><paramref name="continuationAction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-278">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="d35a0-279">タスクの完了時に実行するアクション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-279">An action to run when the task completes.</span></span> <span data-ttu-id="d35a0-280">実行されると、完了したタスクと、呼び出し元が指定する状態オブジェクトが、引数としてデリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-280">When run, the delegate is passed the completed task and a caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-281">継続アクションによって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-281">An object representing data to be used by the continuation action.</span></span></param>
        <summary><span data-ttu-id="d35a0-282">呼び出し元から提供される状態情報を受け取り、対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-282">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span></summary>
        <returns><span data-ttu-id="d35a0-283">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-283">A new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-284">返された <xref:System.Threading.Tasks.Task> は、現在のタスクが完了するまで実行されるようにスケジュールされません。正常に完了するために実行が正常に完了したか、ハンドルされない例外が原因でエラーが発生したか、またはキャンセルにより早期に終了した可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-284">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting early due to cancellation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-285"><paramref name="continuationAction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-285">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="d35a0-286"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-286">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-287">実行すると、完了したタスクがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-287">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-288">新しい継続タスクに割り当てられる <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-288">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="d35a0-289">キャンセル トークンを受け取って、対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期的に実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-289">Creates a continuation that receives a cancellation token and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span></summary>
        <returns><span data-ttu-id="d35a0-290">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-290">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-291">返された <xref:System.Threading.Tasks.Task> は、現在のタスクが完了するまで実行されるようにスケジュールされません。正常に完了するために実行が正常に完了したか、未処理の例外が原因でエラーが発生したか、または取り消されたため早期に終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-291">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-292">トークンを作成した <see cref="T:System.Threading.CancellationTokenSource" /> は、既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-292">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-293"><paramref name="continuationAction" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-293">The <paramref name="continuationAction" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="d35a0-294">指定した <paramref name="continuationOptions" /> に従って実行するアクション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-294">An action to run according to the specified <paramref name="continuationOptions" />.</span></span> <span data-ttu-id="d35a0-295">実行すると、完了したタスクがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-295">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="d35a0-296">継続タスクのスケジュールおよびその動作を設定するオプション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-296">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="d35a0-297">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-297">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <summary><span data-ttu-id="d35a0-298">対象のタスクが完了したときに、指定した <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> に従って実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-298">Creates a continuation that executes when the target task completes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></summary>
        <returns><span data-ttu-id="d35a0-299">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-299">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-300">返された <xref:System.Threading.Tasks.Task> は、現在のタスクが完了するまで実行されるようにスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-300">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="d35a0-301">`continuationOptions` パラメーターによって指定された継続条件が満たされない場合、継続タスクはスケジュールではなくキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-301">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-302">次の例では、<xref:System.Threading.Tasks.TaskContinuationOptions> を使用して、継続元タスクが完了したときに継続タスクを同期的に実行するように指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-302">The following example demonstrates using <xref:System.Threading.Tasks.TaskContinuationOptions> to specify that a continuation task should run synchronously when the antecedent task completes.</span></span> <span data-ttu-id="d35a0-303">(指定したタスクが <xref:System.Threading.Tasks.Task.ContinueWith%2A> が呼び出された時点で既に完了している場合、同期継続は <xref:System.Threading.Tasks.Task.ContinueWith%2A>を呼び出すスレッドで実行されます)。</span><span class="sxs-lookup"><span data-stu-id="d35a0-303">(If the specified task has already completed by the time <xref:System.Threading.Tasks.Task.ContinueWith%2A> is called, the synchronous continuation will run on the thread calling <xref:System.Threading.Tasks.Task.ContinueWith%2A>.)</span></span>  
  
```csharp  
  
public class TaskCounter  
{  
   private volatile int _count;  
  
   public void Track(Task t)  
   {  
      if (t == null) throw new ArgumentNullException("t");  
      Interlocked.Increment(ref _count);  
      t.ContinueWith(ct => Interlocked.Decrement(ref _count), TaskContinuationOptions.ExecuteSynchronously);  
   }  
  
   public int NumberOfActiveTasks { get { return _count; } }  
}  
  
```  
  
```vb  
  
Public Class TaskCounter  
   Private _count as Integer  
  
   Public Sub Track(ByVal t as Task)  
      If t is Nothing Then Throw New ArgumentNullException("t")  
      Interlocked.Increment(_count)  
      t.ContinueWith(Sub(ct)  
                        Interlocked.Decrement(_count)  
                     End Sub,  
                     TaskContinuationOptions.ExecuteSynchronously)  
   End Sub  
  
   Public ReadOnly Property NumberOfActiveTasks As Integer  
      Get  
         Return _count  
      End Get  
   End Property  
End Class  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-304"><paramref name="continuationAction" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-304">The <paramref name="continuationAction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-305"><paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-305">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task), scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="d35a0-306"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-306">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-307">実行すると、完了したタスクがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-307">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="scheduler"><span data-ttu-id="d35a0-308">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-308">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span></span></param>
        <summary><span data-ttu-id="d35a0-309">ターゲットの <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期に実行する継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-309">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-310">継続タスクは、指定されたスケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-310">The continuation uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="d35a0-311">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-311">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-312">返された <xref:System.Threading.Tasks.Task> は、現在のタスクが完了するまで実行されるようにスケジュールされません。正常に完了するために実行が正常に完了したか、未処理の例外が原因でエラーが発生したか、または取り消されたため早期に終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-312">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-313"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-313">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-314"><paramref name="continuationAction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-314">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d35a0-315">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-315">-or-</span></span> 
<span data-ttu-id="d35a0-316"><paramref name="scheduler" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-316">The <paramref name="scheduler" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="d35a0-317"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-317">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-318">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-318">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-319">継続アクションによって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-319">An object representing data to be used by the continuation action.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-320">新しい継続タスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-320">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="d35a0-321">呼び出し元から提供される状態情報およびキャンセル トークンを受け取り、対象の <see cref="T:System.Threading.Tasks.Task" /> の完了時に非同期的に実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-321">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span></summary>
        <returns><span data-ttu-id="d35a0-322">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-322">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-323">返された <xref:System.Threading.Tasks.Task> は、現在のタスクが完了するまで実行されるようにスケジュールされません。正常に完了するために実行が正常に完了したか、未処理の例外が原因でエラーが発生したか、または取り消されたため早期に終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-323">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-324"><paramref name="continuationAction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-324">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-325">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-325">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, continuationOptions As TaskContinuationOptions) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="d35a0-326"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-326">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-327">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-327">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-328">継続アクションによって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-328">An object representing data to be used by the continuation action.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="d35a0-329">継続タスクのスケジュールおよびその動作を設定するオプション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-329">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="d35a0-330">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-330">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <summary><span data-ttu-id="d35a0-331">呼び出し元から提供される状態情報を受け取り、対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-331">Creates a continuation that receives caller-supplied state information and executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-332">継続タスクは、指定した一連の条件に基づいて実行されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-332">The continuation executes based on a set of specified conditions.</span></span></summary>
        <returns><span data-ttu-id="d35a0-333">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-333">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-334">返された <xref:System.Threading.Tasks.Task> は、現在のタスクが完了するまで実行されるようにスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-334">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="d35a0-335">`continuationOptions` パラメーターによって指定された継続条件が満たされない場合、継続タスクはスケジュールではなくキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-335">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-336"><paramref name="continuationAction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-336">The <paramref name="continuationAction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-337"><paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-337">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith (continuationAction As Action(Of Task, Object), state As Object, scheduler As TaskScheduler) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="d35a0-338"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-338">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span>  <span data-ttu-id="d35a0-339">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-339">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-340">継続アクションによって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-340">An object representing data to be used by the continuation action.</span></span></param>
        <param name="scheduler"><span data-ttu-id="d35a0-341">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-341">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span></span></param>
        <summary><span data-ttu-id="d35a0-342">呼び出し元から提供される状態情報を受け取り、対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期的に実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-342">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-343">継続タスクは、指定されたスケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-343">The continuation uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="d35a0-344">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-344">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-345">返された <xref:System.Threading.Tasks.Task> は、現在のタスクが完了するまで実行されるようにスケジュールされません。正常に完了するために実行が正常に完了したか、未処理の例外が原因でエラーが発生したか、または取り消されたため早期に終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-345">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-346"><paramref name="scheduler" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-346">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task&gt; continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`1&lt;class System.Threading.Tasks.Task&gt; continuationAction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^&gt; ^ continuationAction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="d35a0-347">指定した <paramref name="continuationOptions" /> に従って実行するアクション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-347">An action to run according to the specified <paramref name="continuationOptions" />.</span></span> <span data-ttu-id="d35a0-348">実行すると、完了したタスクがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-348">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-349">新しい継続タスクに割り当てられる <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-349">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="d35a0-350">継続タスクのスケジュールおよびその動作を設定するオプション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-350">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="d35a0-351">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-351">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="d35a0-352">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-352">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span></span></param>
        <summary><span data-ttu-id="d35a0-353">対象のタスクが完了したときに、指定した <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> に従って実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-353">Creates a continuation that executes when the target task competes according to the specified <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span> <span data-ttu-id="d35a0-354">この継続タスクは、キャンセル トークンを受け取り、指定されたスケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-354">The continuation receives a cancellation token and uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="d35a0-355">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-355">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-356">返された <xref:System.Threading.Tasks.Task> は、現在のタスクが完了するまで実行されるようにスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-356">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="d35a0-357">`continuationOptions` パラメーターを使用して指定した条件が満たされない場合、継続タスクはスケジュールではなくキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-357">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-358">System.threading.tasks.task.continuewith を使用して、バックグラウンドとユーザーインターフェイススレッドの両方で作業を実行する例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-358">The following is an example of using ContinueWith to run work both in the background and on the user interface threads.</span></span>  
  
```csharp  
  
private void Button1_Click(object sender, EventArgs e)  
{  
   var backgroundScheduler = TaskScheduler.Default;  
   var uiScheduler = TaskScheduler.FromCurrentSynchronizationContext();  
   Task.Factory.StartNew(delegate { DoBackgroundComputation(); },  
                         backgroundScheduler).  
   ContinueWith(delegate { UpdateUI(); }, uiScheduler).  
                ContinueWith(delegate { DoAnotherBackgroundComputation(); },  
                             backgroundScheduler).  
                ContinueWith(delegate { UpdateUIAgain(); }, uiScheduler);  
}  
  
```  
  
```vb  
  
Private Sub Button1_Click(ByVal sender As System.Object,   
                          ByVal e As System.EventArgs) Handles Button1.Click  
   Dim backgroundScheduler = TaskScheduler.Default  
   Dim uiScheduler = TaskScheduler.FromCurrentSynchronizationContext()  
  
   Task.Factory.StartNew(Sub()  
                           DoBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUI()  
                         End Sub, uiScheduler).ContinueWith(Sub(t)  
                            DoAnotherBackgroundComputation()  
                         End Sub, backgroundScheduler).ContinueWith(Sub(t)  
                            UpdateUIAgain()  
                         End Sub, uiScheduler)  
End Sub  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-359">トークンを作成した <see cref="T:System.Threading.CancellationTokenSource" /> は、既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-359">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-360"><paramref name="continuationAction" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-360">The <paramref name="continuationAction" /> argument is null.</span></span>  
  
<span data-ttu-id="d35a0-361">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-361">-or-</span></span> 
<span data-ttu-id="d35a0-362"><paramref name="scheduler" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-362">The <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-363"><paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-363">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ContinueWith (Action&lt;System.Threading.Tasks.Task,object&gt; continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task ContinueWith(class System.Action`2&lt;class System.Threading.Tasks.Task, object&gt; continuationAction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ ContinueWith(Action&lt;System::Threading::Tasks::Task ^, System::Object ^&gt; ^ continuationAction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Action&lt;System.Threading.Tasks.Task, obj&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task" Usage="task.ContinueWith (continuationAction, state, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="continuationAction" Type="System.Action&lt;System.Threading.Tasks.Task,System.Object&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="continuationAction"><span data-ttu-id="d35a0-364"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行するアクション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-364">An action to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-365">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-365">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-366">継続アクションによって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-366">An object representing data to be used by the continuation action.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-367">新しい継続タスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-367">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="d35a0-368">継続タスクのスケジュールおよびその動作を設定するオプション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-368">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="d35a0-369">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-369">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="d35a0-370">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-370">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span></span></param>
        <summary><span data-ttu-id="d35a0-371">呼び出し元から提供される状態情報およびキャンセル トークンを受け取り、対象の <see cref="T:System.Threading.Tasks.Task" /> の完了時に実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-371">Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-372">継続タスクは、指定した一連の条件に基づき、指定したスケジューラを使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-372">The continuation executes based on a set of specified conditions and uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="d35a0-373">新しい継続 <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-373">A new continuation <see cref="T:System.Threading.Tasks.Task" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-374">返された <xref:System.Threading.Tasks.Task> は、現在のタスクが完了するまで実行されるようにスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-374">The returned <xref:System.Threading.Tasks.Task> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="d35a0-375">`continuationOptions` パラメーターを使用して指定した条件が満たされない場合、継続タスクはスケジュールではなくキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-375">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-376"><paramref name="scheduler" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-376">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-377"><paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-377">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-378">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-378">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith continuationFunction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-379">継続タスクによって生成される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-379">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="d35a0-380"><see cref="T:System.Threading.Tasks.Task`1" /> の完了時に実行する関数。</span><span class="sxs-lookup"><span data-stu-id="d35a0-380">A function to run when the <see cref="T:System.Threading.Tasks.Task`1" /> completes.</span></span> <span data-ttu-id="d35a0-381">実行すると、完了したタスクがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-381">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <summary><span data-ttu-id="d35a0-382">対象の <see cref="T:System.Threading.Tasks.Task`1" /> が完了して値を返したときに非同期的に実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-382">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task`1" /> completes and returns a value.</span></span></summary>
        <returns><span data-ttu-id="d35a0-383">新しい継続タスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-383">A new continuation task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-384">返された <xref:System.Threading.Tasks.Task%601> は、現在のタスクが完了するまで実行されるようにスケジュールされません。正常に完了するために実行が正常に完了したか、未処理の例外が原因でエラーが発生したか、または取り消されたため早期に終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-384">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-385">次の例は、System.threading.tasks.task.continuewith メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-385">The following example shows how to use the ContinueWith method:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationsimple.cs#03)]
 [!code-vb[System.Threading.Tasks.Task#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationsimple.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-386"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-386">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-387"><paramref name="continuationFunction" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-387">The <paramref name="continuationFunction" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-388">継続タスクによって生成される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-388">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="d35a0-389"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span><span class="sxs-lookup"><span data-stu-id="d35a0-389">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-390">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-390">When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-391">継続関数によって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-391">An object representing data to be used by the continuation function.</span></span></param>
        <summary><span data-ttu-id="d35a0-392">呼び出し元から提供される状態情報を受け取り、対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期的に実行され、値を返す継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-392">Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span></span></summary>
        <returns><span data-ttu-id="d35a0-393">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-393">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-394">返された <xref:System.Threading.Tasks.Task%601> は、現在のタスクが完了するまで実行されるようにスケジュールされません。正常に完了するために実行が正常に完了したか、未処理の例外が原因でエラーが発生したか、または取り消されたため早期に終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-394">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-395"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-395">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-396">継続タスクによって生成される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-396">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="d35a0-397"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span><span class="sxs-lookup"><span data-stu-id="d35a0-397">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-398">実行すると、完了したタスクがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-398">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-399">新しい継続タスクに割り当てられる <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-399">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="d35a0-400">対象の <see cref="T:System.Threading.Tasks.Task" /> が完了して値を返したときに非同期的に実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-400">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span></span> <span data-ttu-id="d35a0-401">この継続タスクは、キャンセル トークンを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-401">The continuation receives a cancellation token.</span></span></summary>
        <returns><span data-ttu-id="d35a0-402">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-402">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-403">返された <xref:System.Threading.Tasks.Task%601> は、現在のタスクが完了するまで実行されるようにスケジュールされません。正常に完了するために実行が正常に完了したか、未処理の例外が原因でエラーが発生したか、または取り消されたため早期に終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-403">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-404"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-404">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span>  
  
<span data-ttu-id="d35a0-405">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-405">-or-</span></span> 
<span data-ttu-id="d35a0-406">トークンを作成した <see cref="T:System.Threading.CancellationTokenSource" /> は、既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-406">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-407"><paramref name="continuationFunction" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-407">The <paramref name="continuationFunction" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-408">継続タスクによって生成される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-408">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="d35a0-409"><paramref name="continuationOptions" /> で指定した条件に従って実行する関数。</span><span class="sxs-lookup"><span data-stu-id="d35a0-409">A function to run according to the condition specified in <paramref name="continuationOptions" />.</span></span> <span data-ttu-id="d35a0-410">実行すると、完了したタスクがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-410">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="d35a0-411">継続タスクのスケジュールおよびその動作を設定するオプション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-411">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="d35a0-412">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-412">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <summary><span data-ttu-id="d35a0-413">指定された継続のオプションに従って実行され、値を返す継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-413">Creates a continuation that executes according to the specified continuation options and returns a value.</span></span></summary>
        <returns><span data-ttu-id="d35a0-414">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-414">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-415">返された <xref:System.Threading.Tasks.Task%601> は、現在のタスクが完了するまで実行されるようにスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-415">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="d35a0-416">`continuationOptions` パラメーターによって指定された継続条件が満たされない場合、継続タスクはスケジュールではなくキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-416">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-417"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-417">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-418"><paramref name="continuationFunction" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-418">The <paramref name="continuationFunction" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-419"><paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-419">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, TResult), scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-420">継続タスクによって生成される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-420">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="d35a0-421"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span><span class="sxs-lookup"><span data-stu-id="d35a0-421">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-422">実行すると、完了したタスクがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-422">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="scheduler"><span data-ttu-id="d35a0-423">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-423">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span></span></param>
        <summary><span data-ttu-id="d35a0-424">対象の <see cref="T:System.Threading.Tasks.Task" /> が完了して値を返したときに非同期的に実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-424">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span></span> <span data-ttu-id="d35a0-425">継続タスクは、指定されたスケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-425">The continuation uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="d35a0-426">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-426">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-427">返された <xref:System.Threading.Tasks.Task%601> は、現在のタスクが完了するまで実行されるようにスケジュールされません。正常に完了するために実行が正常に完了したか、未処理の例外が原因でエラーが発生したか、または取り消されたため早期に終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-427">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed, whether it completes due to running to completion successfully, faulting due to an unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-428"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-428">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-429"><paramref name="continuationFunction" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-429">The <paramref name="continuationFunction" /> argument is null.</span></span>  
  
<span data-ttu-id="d35a0-430">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-430">-or-</span></span> 
<span data-ttu-id="d35a0-431"><paramref name="scheduler" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-431">The <paramref name="scheduler" /> argument is null.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-432">継続タスクによって生成される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-432">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="d35a0-433"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span><span class="sxs-lookup"><span data-stu-id="d35a0-433">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-434">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-434">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-435">継続関数によって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-435">An object representing data to be used by the continuation function.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-436">新しい継続タスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-436">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <summary><span data-ttu-id="d35a0-437">対象の <see cref="T:System.Threading.Tasks.Task" /> が完了して値を返したときに非同期的に実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-437">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span></span> <span data-ttu-id="d35a0-438">この継続タスクは、呼び出し元から提供される状態情報とキャンセル トークンを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-438">The continuation receives caller-supplied state information and a cancellation token.</span></span></summary>
        <returns><span data-ttu-id="d35a0-439">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-439">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-440">返された <xref:System.Threading.Tasks.Task%601> は、現在のタスクが完了するまで実行されるようにスケジュールされません。正常に完了するために実行が正常に完了したか、未処理の例外が原因でエラーが発生したか、または取り消されたため早期に終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-440">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-441"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-441">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-442">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-442">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskContinuationOptions continuationOptions);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.Tasks.TaskContinuationOptions -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, continuationOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-443">継続タスクによって生成される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-443">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="d35a0-444"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span><span class="sxs-lookup"><span data-stu-id="d35a0-444">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-445">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-445">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-446">継続関数によって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-446">An object representing data to be used by the continuation function.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="d35a0-447">継続タスクのスケジュールおよびその動作を設定するオプション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-447">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="d35a0-448">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-448">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <summary><span data-ttu-id="d35a0-449">対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに、指定したタスク継続オプションに基づいて実行される継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-449">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-450">この継続タスクは、呼び出し元から提供される状態情報を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-450">The continuation receives caller-supplied state information.</span></span></summary>
        <returns><span data-ttu-id="d35a0-451">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-451">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-452">返された <xref:System.Threading.Tasks.Task%601> は、現在のタスクが完了するまで実行されるようにスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-452">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="d35a0-453">`continuationOptions` パラメーターによって指定された継続条件が満たされない場合、継続タスクはスケジュールではなくキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-453">If the continuation criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-454"><paramref name="continuationFunction" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-454">The <paramref name="continuationFunction" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-455"><paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-455">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContinueWith(Of TResult) (continuationFunction As Func(Of Task, Object, TResult), state As Object, scheduler As TaskScheduler) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-456">継続タスクによって生成される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-456">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="d35a0-457"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span><span class="sxs-lookup"><span data-stu-id="d35a0-457">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span>  <span data-ttu-id="d35a0-458">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-458">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-459">継続関数によって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-459">An object representing data to be used by the continuation function.</span></span></param>
        <param name="scheduler"><span data-ttu-id="d35a0-460">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-460">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span></span></param>
        <summary><span data-ttu-id="d35a0-461">ターゲットの <see cref="T:System.Threading.Tasks.Task" /> が完了したときに非同期に実行する継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-461">Creates a continuation that executes asynchronously when the target <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-462">この継続タスクは、呼び出し元が提供した状態情報を受け取り、指定したスケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-462">The continuation receives caller-supplied state information and uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="d35a0-463">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-463">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-464">返された <xref:System.Threading.Tasks.Task%601> は、現在のタスクが完了するまで実行されるようにスケジュールされません。正常に完了するために実行が正常に完了したか、未処理の例外が原因でエラーが発生したか、または取り消されたため早期に終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-464">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed, whether it completes due to running to completion successfully, faulting due to an  unhandled exception, or exiting out early due to being canceled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-465"><paramref name="scheduler" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-465">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,TResult&gt; continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`2&lt;class System.Threading.Tasks.Task, !!TResult&gt; continuationFunction, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, TResult&gt; ^ continuationFunction, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, 'Result&gt; * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,TResult&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-466">継続タスクによって生成される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-466">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="d35a0-467">指定した <c>continuationOptions</c> に従って実行する関数。</span><span class="sxs-lookup"><span data-stu-id="d35a0-467">A function to run according to the specified <c>continuationOptions.</c></span></span> <span data-ttu-id="d35a0-468">実行すると、完了したタスクがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-468">When run, the delegate will be passed the completed task as an argument.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-469">新しい継続タスクに割り当てられる <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-469">The <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="d35a0-470">継続タスクのスケジュールおよびその動作を設定するオプション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-470">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="d35a0-471">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-471">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="d35a0-472">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-472">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its execution.</span></span></param>
        <summary><span data-ttu-id="d35a0-473">指定された継続のオプションに従って実行され、値を返す継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-473">Creates a continuation that executes according to the specified continuation options and returns a value.</span></span> <span data-ttu-id="d35a0-474">継続タスクは、キャンセル トークンを渡され、指定されたスケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-474">The continuation is passed a cancellation token and uses a specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="d35a0-475">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-475">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-476">返された <xref:System.Threading.Tasks.Task%601> は、現在のタスクが完了するまで実行されるようにスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-476">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has completed.</span></span> <span data-ttu-id="d35a0-477">`continuationOptions` パラメーターを使用して指定した条件が満たされない場合、継続タスクはスケジュールではなくキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-477">If the criteria specified through the `continuationOptions` parameter are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-478">次の例は、System.threading.tasks.task.continuewith メソッドを継続オプションと共に使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-478">The following example shows how to use the ContinueWith method with continuation options:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/continuationoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Task#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/continuationoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-479"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-479">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span>  
  
<span data-ttu-id="d35a0-480">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-480">-or-</span></span> 
<span data-ttu-id="d35a0-481">トークンを作成した <see cref="T:System.Threading.CancellationTokenSource" /> は、既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-481">The <see cref="T:System.Threading.CancellationTokenSource" /> that created the token has already been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-482"><paramref name="continuationFunction" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-482">The <paramref name="continuationFunction" /> argument is null.</span></span>  
  
<span data-ttu-id="d35a0-483">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-483">-or-</span></span> 
<span data-ttu-id="d35a0-484"><paramref name="scheduler" /> 引数が null です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-484">The <paramref name="scheduler" /> argument is null.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-485"><paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-485">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueWith&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; ContinueWith&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task,object,TResult&gt; continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;!!TResult&gt; ContinueWith&lt;TResult&gt;(class System.Func`3&lt;class System.Threading.Tasks.Task, object, !!TResult&gt; continuationFunction, object state, valuetype System.Threading.CancellationToken cancellationToken, valuetype System.Threading.Tasks.TaskContinuationOptions continuationOptions, class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Threading::Tasks::Task&lt;TResult&gt; ^ ContinueWith(Func&lt;System::Threading::Tasks::Task ^, System::Object ^, TResult&gt; ^ continuationFunction, System::Object ^ state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.ContinueWith : Func&lt;System.Threading.Tasks.Task, obj, 'Result&gt; * obj * System.Threading.CancellationToken * System.Threading.Tasks.TaskContinuationOptions * System.Threading.Tasks.TaskScheduler -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="task.ContinueWith (continuationFunction, state, cancellationToken, continuationOptions, scheduler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="continuationFunction" Type="System.Func&lt;System.Threading.Tasks.Task,System.Object,TResult&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="state" Type="System.Object" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="continuationOptions" Type="System.Threading.Tasks.TaskContinuationOptions" Index="3" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" Index="4" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-486">継続タスクによって生成される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-486">The type of the result produced by the continuation.</span></span></typeparam>
        <param name="continuationFunction"><span data-ttu-id="d35a0-487"><see cref="T:System.Threading.Tasks.Task" /> の完了時に実行する関数。</span><span class="sxs-lookup"><span data-stu-id="d35a0-487">A function to run when the <see cref="T:System.Threading.Tasks.Task" /> completes.</span></span> <span data-ttu-id="d35a0-488">実行すると、完了したタスクおよび呼び出し元が指定する状態オブジェクトがデリゲートの引数として渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-488">When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</span></span></param>
        <param name="state"><span data-ttu-id="d35a0-489">継続関数によって使用されるデータを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-489">An object representing data to be used by the continuation function.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-490">新しい継続タスクに割り当てられる <see cref="T:System.Threading.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-490">The <see cref="T:System.Threading.CancellationToken" /> that will be assigned to the new continuation task.</span></span></param>
        <param name="continuationOptions"><span data-ttu-id="d35a0-491">継続タスクのスケジュールおよびその動作を設定するオプション。</span><span class="sxs-lookup"><span data-stu-id="d35a0-491">Options for when the continuation is scheduled and how it behaves.</span></span> <span data-ttu-id="d35a0-492">これには、<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" /> などの基準および <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" /> などの実行オプションが含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-492">This includes criteria, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />, as well as execution options, such as <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />.</span></span></param>
        <param name="scheduler"><span data-ttu-id="d35a0-493">継続タスクに関連付け、それを実行するために使用する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-493">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> to associate with the continuation task and to use for its  execution.</span></span></param>
        <summary><span data-ttu-id="d35a0-494">対象の <see cref="T:System.Threading.Tasks.Task" /> が完了したときに、指定したタスク継続オプションに基づいて実行され、値を返す継続タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-494">Creates a continuation that executes based on the specified task continuation options when the target <see cref="T:System.Threading.Tasks.Task" /> completes and returns a value.</span></span> <span data-ttu-id="d35a0-495">この継続タスクは、呼び出し元が提供した状態情報とキャンセル トークンを受け取り、指定したスケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-495">The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler.</span></span></summary>
        <returns><span data-ttu-id="d35a0-496">新しい継続 <see cref="T:System.Threading.Tasks.Task`1" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-496">A new continuation <see cref="T:System.Threading.Tasks.Task`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-497">返された <xref:System.Threading.Tasks.Task%601> は、現在のタスクが完了するまで実行されるようにスケジュールされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-497">The returned <xref:System.Threading.Tasks.Task%601> will not be scheduled for execution until the current task has  completed.</span></span> <span data-ttu-id="d35a0-498">`continuationOptions` パラメーターを使用して指定した条件が満たされない場合、継続タスクはスケジュールではなくキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-498">If the criteria specified through the `continuationOptions` parameter  are not met, the continuation task will be canceled instead of scheduled.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-499"><paramref name="scheduler" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-499">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-500"><paramref name="continuationOptions" /> 引数が、<see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> の無効な値を指定しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-500">The <paramref name="continuationOptions" /> argument specifies an invalid value for <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-501">指定された <see cref="T:System.Threading.CancellationToken" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-501">The provided <see cref="T:System.Threading.CancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreationOptions">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskCreationOptions CreationOptions" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CreationOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CreationOptions As TaskCreationOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskCreationOptions CreationOptions { System::Threading::Tasks::TaskCreationOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.CreationOptions : System.Threading.Tasks.TaskCreationOptions" Usage="System.Threading.Tasks.Task.CreationOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskCreationOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-502">このタスクの作成に使用される <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-502">Gets the <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span></span></summary>
        <value><span data-ttu-id="d35a0-503">このタスクの作成に使用される <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-503">The <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> used to create this task.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentId">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; CurrentId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Nullable`1&lt;int32&gt; CurrentId" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.CurrentId" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentId As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Nullable&lt;int&gt; CurrentId { Nullable&lt;int&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentId : Nullable&lt;int&gt;" Usage="System.Threading.Tasks.Task.CurrentId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-504">現在実行中の <see cref="T:System.Threading.Tasks.Task" /> の ID を返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-504">Returns the ID of the currently executing <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <value><span data-ttu-id="d35a0-505">システムによって現在実行中のタスクに割り当てられた整数。</span><span class="sxs-lookup"><span data-stu-id="d35a0-505">An integer that was assigned by the system to the currently-executing task.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-506"><xref:System.Threading.Tasks.Task.CurrentId%2A> は、タスクが実行されているコードから現在実行中のタスクの識別子を取得するために使用される `static` (Visual Basic の`Shared`) プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-506"><xref:System.Threading.Tasks.Task.CurrentId%2A> is a `static` (`Shared` in Visual Basic) property that is used to get the identifier of the currently executing task from the code that the task is executing.</span></span> <span data-ttu-id="d35a0-507">これは、特定の <xref:System.Threading.Tasks.Task> インスタンスの識別子を返す <xref:System.Threading.Tasks.Task.Id%2A> プロパティとは異なります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-507">It differs from the <xref:System.Threading.Tasks.Task.Id%2A> property, which returns the identifier of a particular <xref:System.Threading.Tasks.Task> instance.</span></span> <span data-ttu-id="d35a0-508">タスクが実行されているコードの外部から <xref:System.Threading.Tasks.Task.CurrentId%2A> 値を取得しようとすると、プロパティは `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-508">If you attempt to retrieve the <xref:System.Threading.Tasks.Task.CurrentId%2A> value from outside the code that a task is executing, the property returns `null`.</span></span>  
  
 <span data-ttu-id="d35a0-509">競合は非常にまれですが、タスク識別子は一意であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-509">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.Id" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Delay">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d35a0-510">遅延後に完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-510">Creates a task that will complete after a time delay.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (millisecondsDelay As Integer) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay);" />
      <MemberSignature Language="F#" Value="static member Delay : int -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay millisecondsDelay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay"><span data-ttu-id="d35a0-511">戻されるタスクが完了するまでに待機するミリ秒数。無期限に待機する場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d35a0-511">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="d35a0-512">指定したミリ秒後に完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-512">Creates a task that completes after a specified number of milliseconds.</span></span></summary>
        <returns><span data-ttu-id="d35a0-513">遅延を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-513">A task that represents the time delay.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-514"><xref:System.Threading.Tasks.Task.Delay%2A> メソッドは、通常、指定された時間間隔でタスクの全体または一部の操作を遅延するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-514">The <xref:System.Threading.Tasks.Task.Delay%2A> method is typically used to delay the operation of all or part of a task for a specified time interval.</span></span> <span data-ttu-id="d35a0-515">通常、遅延時間は次のようになります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-515">Most commonly, the time delay is introduced:</span></span>  
  
-   <span data-ttu-id="d35a0-516">次の例に示すように、タスクの先頭にあります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-516">At the beginning of the task, as the following example shows.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#5)]
     [!code-vb[System.Threading.Tasks.Task.Delay#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#5)]  
  
-   <span data-ttu-id="d35a0-517">タスクの実行中に発生します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-517">Sometime while the task is executing.</span></span> <span data-ttu-id="d35a0-518">この場合、次の例に示すように、<xref:System.Threading.Tasks.Task.Delay%2A> メソッドへの呼び出しは、タスク内の子タスクとして実行されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-518">In this case, the call to the <xref:System.Threading.Tasks.Task.Delay%2A> method executes as a child task within a task, as the following example shows.</span></span> <span data-ttu-id="d35a0-519"><xref:System.Threading.Tasks.Task.Delay%2A> メソッドを呼び出すタスクは非同期的に実行されるため、親タスクは `await` キーワードを使用して完了するまで待機する必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-519">Note that since the task that calls the <xref:System.Threading.Tasks.Task.Delay%2A> method executes asynchronously, the parent task must wait for it to complete by using the `await` keyword.</span></span>  
  
     [!code-csharp[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay5.cs#7)]
     [!code-vb[System.Threading.Tasks.Task.Delay#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay5.vb#7)]  
  
 <span data-ttu-id="d35a0-520">指定された遅延時間が経過すると、タスクは <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態で完了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-520">After the specified time delay, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="d35a0-521">この方法は、システムクロックによって異なります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-521">This method depends on the system clock.</span></span> <span data-ttu-id="d35a0-522">これは、`millisecondsDelay` 引数がシステムクロックの解像度 (Windows システムで約15ミリ秒) よりも少ない場合に、時間の遅延がシステムクロックの解像度とほぼ同じであることを意味します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-522">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-523">次の例は、<xref:System.Threading.Tasks.Task.Delay%2A> メソッドを簡単に使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-523">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Delay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-524"><paramref name="millisecondsDelay" /> 引数は -1 未満です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-524">The <paramref name="millisecondsDelay" /> argument is less than -1.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Delay (delay As TimeSpan) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay);" />
      <MemberSignature Language="F#" Value="static member Delay : TimeSpan -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay delay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="delay"><span data-ttu-id="d35a0-525">戻されるタスクが完了するまでに待機する時間。無期限に待機する場合は <see langword="TimeSpan.FromMilliseconds(-1)" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-525">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="d35a0-526">指定の時間間隔後に完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-526">Creates a task that completes after a specified time interval.</span></span></summary>
        <returns><span data-ttu-id="d35a0-527">遅延を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-527">A task that represents the time delay.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-528">指定された遅延時間が経過すると、タスクは <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態で完了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-528">After the specified time delay, the task is completed in <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="d35a0-529">使用シナリオとその他の例については、<xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> のオーバーロードに関するドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-529">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="d35a0-530">この方法は、システムクロックによって異なります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-530">This method depends on the system clock.</span></span> <span data-ttu-id="d35a0-531">これは、`delay` 引数がシステムクロックの解像度 (Windows システムで約15ミリ秒) よりも少ない場合に、時間の遅延がシステムクロックの解像度とほぼ同じであることを意味します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-531">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-532">次の例は、<xref:System.Threading.Tasks.Task.Delay%2A> メソッドを簡単に使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-532">The following example shows a simple use of the <xref:System.Threading.Tasks.Task.Delay%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Delay#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-533"><paramref name="delay" /> は、<see langword="TimeSpan.FromMilliseconds(-1)" /> 以外の負の時間間隔を表します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-533"><paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMilliseconds(-1)" />.</span></span>  
  
<span data-ttu-id="d35a0-534">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-534">-or-</span></span> 
<span data-ttu-id="d35a0-535"><paramref name="delay" /> 引数の <see cref="P:System.TimeSpan.TotalMilliseconds" />プロパティが <see cref="F:System.Int32.MaxValue" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-535">The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (int millisecondsDelay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(int32 millisecondsDelay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(int millisecondsDelay, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Delay : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay (millisecondsDelay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay"><span data-ttu-id="d35a0-536">戻されるタスクが完了するまでに待機するミリ秒数。無期限に待機する場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d35a0-536">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-537">タスクの完了の待機中に観察するキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="d35a0-537">A cancellation token to observe while waiting for the task to complete.</span></span></param>
        <summary><span data-ttu-id="d35a0-538">指定したミリ秒後に完了するキャンセル可能なタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-538">Creates a cancellable task that completes after a specified number of milliseconds.</span></span></summary>
        <returns><span data-ttu-id="d35a0-539">遅延を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-539">A task that represents the time delay.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-540">指定した時間が経過する前にキャンセルトークンがシグナル状態になると、<xref:System.Threading.Tasks.TaskCanceledException> 例外が発生し、タスクが <xref:System.Threading.Tasks.TaskStatus.Canceled> 状態で完了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-540">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="d35a0-541">それ以外の場合、指定された遅延時間が経過すると、タスクは <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態で完了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-541">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="d35a0-542">使用シナリオとその他の例については、<xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> のオーバーロードに関するドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-542">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="d35a0-543">この方法は、システムクロックによって異なります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-543">This method depends on the system clock.</span></span> <span data-ttu-id="d35a0-544">これは、`millisecondsDelay` 引数がシステムクロックの解像度 (Windows システムで約15ミリ秒) よりも少ない場合に、時間の遅延がシステムクロックの解像度とほぼ同じであることを意味します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-544">This means that the time delay will approximately equal the resolution of the system clock if the `millisecondsDelay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-545">次の例では、1秒間隔で <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> メソッドの呼び出しを含むタスクを起動します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-545">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%2CSystem.Threading.CancellationToken%29> method with a one second delay.</span></span> <span data-ttu-id="d35a0-546">遅延間隔が経過する前に、トークンは取り消されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-546">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="d35a0-547">この例の出力は、結果として <xref:System.Threading.Tasks.TaskCanceledException> がスローされ、タスクの <xref:System.Threading.Tasks.Task.Status%2A> プロパティが <xref:System.Threading.Tasks.TaskStatus.Canceled>に設定されていることを示しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-547">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Delay#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-548"><paramref name="millisecondsDelay" /> 引数は -1 未満です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-548">The <paramref name="millisecondsDelay" /> argument is less than -1.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="d35a0-549">タスクが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-549">The task has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-550">指定された <paramref name="cancellationToken" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-550">The provided <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Delay (TimeSpan delay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Delay(TimeSpan delay, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Delay : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Delay (delay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="delay"><span data-ttu-id="d35a0-551">戻されるタスクが完了するまでに待機する時間。無期限に待機する場合は <see langword="TimeSpan.FromMilliseconds(-1)" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-551">The time span to wait before completing the returned task, or <see langword="TimeSpan.FromMilliseconds(-1)" /> to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-552">タスクの完了の待機中に観察するキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="d35a0-552">A cancellation token to observe while waiting for the task to complete.</span></span></param>
        <summary><span data-ttu-id="d35a0-553">指定の時間間隔後に完了するキャンセル可能タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-553">Creates a cancellable task that completes after a specified time interval.</span></span></summary>
        <returns><span data-ttu-id="d35a0-554">遅延を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-554">A task that represents the time delay.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-555">指定した時間が経過する前にキャンセルトークンがシグナル状態になると、<xref:System.Threading.Tasks.TaskCanceledException> 例外が発生し、タスクが <xref:System.Threading.Tasks.TaskStatus.Canceled> 状態で完了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-555">If the cancellation token is signaled before the specified time delay, a <xref:System.Threading.Tasks.TaskCanceledException> exception results, and the task is completed in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  <span data-ttu-id="d35a0-556">それ以外の場合、指定された遅延時間が経過すると、タスクは <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態で完了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-556">Otherwise, the task is completed in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state once the specified time delay has elapsed.</span></span>  
  
 <span data-ttu-id="d35a0-557">使用シナリオとその他の例については、<xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> のオーバーロードに関するドキュメントを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-557">For usage scenarios and additional examples, see the documentation for the <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> overload.</span></span>  
  
 <span data-ttu-id="d35a0-558">この方法は、システムクロックによって異なります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-558">This method depends on the system clock.</span></span> <span data-ttu-id="d35a0-559">これは、`delay` 引数がシステムクロックの解像度 (Windows システムで約15ミリ秒) よりも少ない場合に、時間の遅延がシステムクロックの解像度とほぼ同じであることを意味します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-559">This means that the time delay will approximately equal the resolution of the system clock if the `delay` argument is less than the resolution of the system clock, which is approximately 15 milliseconds on Windows systems.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-560">次の例では、1.5 秒の遅延がある <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> メソッドの呼び出しを含むタスクを起動します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-560">The following example launches a task that includes a call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method with a 1.5 second delay.</span></span> <span data-ttu-id="d35a0-561">遅延間隔が経過する前に、トークンは取り消されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-561">Before the delay interval elapses, the token is cancelled.</span></span> <span data-ttu-id="d35a0-562">この例の出力は、結果として <xref:System.Threading.Tasks.TaskCanceledException> がスローされ、タスクの <xref:System.Threading.Tasks.Task.Status%2A> プロパティが <xref:System.Threading.Tasks.TaskStatus.Canceled>に設定されていることを示しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-562">The output from the example shows that, as a result, a <xref:System.Threading.Tasks.TaskCanceledException> is thrown, and the tasks' <xref:System.Threading.Tasks.Task.Status%2A> property is set to <xref:System.Threading.Tasks.TaskStatus.Canceled>.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.delay/cs/delay4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Delay#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.delay/vb/delay4.vb#4)]  
  
 <span data-ttu-id="d35a0-563">この例には潜在的な競合状態が含まれていることに注意してください。これは、トークンが取り消されたときに、タスクが非同期的に遅延を実行することに依存します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-563">Note that this example includes a potential race condition: it depends on the task asynchronously executing the delay when the token is cancelled.</span></span> <span data-ttu-id="d35a0-564"><xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> メソッドを呼び出すと1.5 秒の遅延が発生する可能性がありますが、トークンが取り消される前に <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> メソッドの呼び出しが戻る可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-564">Although the 1.5 second delay from the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method makes that assumption likely, it is nevertheless possible that the call to the <xref:System.Threading.Tasks.Task.Delay%28System.TimeSpan%2CSystem.Threading.CancellationToken%29> method could return before the token is cancelled.</span></span> <span data-ttu-id="d35a0-565">その場合、この例では次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-565">In that case, the example produces the following output:</span></span>  
  
```  
Task t Status: RanToCompletion, Result: 42  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-566"><paramref name="delay" /> は、<see langword="TimeSpan.FromMilliseconds(-1)" /> 以外の負の時間間隔を表します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-566"><paramref name="delay" /> represents a negative time interval other than <see langword="TimeSpan.FromMilliseconds(-1)" />.</span></span>  
  
<span data-ttu-id="d35a0-567">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-567">-or-</span></span> 
<span data-ttu-id="d35a0-568"><paramref name="delay" /> 引数の <see cref="P:System.TimeSpan.TotalMilliseconds" />プロパティが <see cref="F:System.Int32.MaxValue" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-568">The <paramref name="delay" /> argument's <see cref="P:System.TimeSpan.TotalMilliseconds" /> property is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="d35a0-569">タスクが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-569">The task has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-570">指定された <paramref name="cancellationToken" /> は既に破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-570">The provided <paramref name="cancellationToken" /> has already been disposed.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d35a0-571"><see cref="T:System.Threading.Tasks.Task" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-571">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="task.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d35a0-572"><see cref="T:System.Threading.Tasks.Task" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-572">Releases all resources used by the current instance of the <see cref="T:System.Threading.Tasks.Task" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-573"><xref:System.Threading.Tasks.Task> クラスは、内部的に <xref:System.IDisposable>も実装するリソースを使用するため、<xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-573">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="d35a0-574">ただし、特に、アプリが [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 以降を対象としている場合は、パフォーマンスやスケーラビリティのテストによって、使用パターンに基づいてアプリのパフォーマンスが向上することが示されていない限り、<xref:System.Threading.Tasks.Task.Dispose%2A> を呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-574">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="d35a0-575">詳細については、「.NET を使用した並列プログラミング」ブログの「[タスクを破棄する必要がありますか](https://devblogs.microsoft.com/pfxteam/do-i-need-to-dispose-of-tasks/)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-575">For more information, see [Do I need to dispose of Tasks?](https://devblogs.microsoft.com/pfxteam/do-i-need-to-dispose-of-tasks/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d35a0-576">タスクが最終的な状態、<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />、または <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> のいずれでもありません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-576">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="task.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="d35a0-577"><see cref="M:System.Threading.Tasks.Task.Dispose" /> が呼び出されたことが原因でこのメソッドが呼び出されているかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="d35a0-577">A Boolean value that indicates whether this method is being called due to a call to <see cref="M:System.Threading.Tasks.Task.Dispose" />.</span></span></param>
        <summary><span data-ttu-id="d35a0-578"><see cref="T:System.Threading.Tasks.Task" /> を破棄し、そのすべてのアンマネージ リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-578">Disposes the <see cref="T:System.Threading.Tasks.Task" />, releasing all of its unmanaged resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-579"><xref:System.Threading.Tasks.Task> クラスは、内部的に <xref:System.IDisposable>も実装するリソースを使用するため、<xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-579">The <xref:System.Threading.Tasks.Task> class implements the <xref:System.IDisposable> interface because internally it uses resources that also implement <xref:System.IDisposable>.</span></span> <span data-ttu-id="d35a0-580">ただし、特に、アプリが [!INCLUDE[net_v45](~/includes/net-v45-md.md)] 以降を対象としている場合は、パフォーマンスやスケーラビリティのテストによって、使用パターンに基づいてアプリのパフォーマンスが向上することが示されていない限り、<xref:System.Threading.Tasks.Task.Dispose%2A> を呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-580">However, particularly if your app targets the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] or later, there is no need to call <xref:System.Threading.Tasks.Task.Dispose%2A> unless performance or scalability testing indicates that, based on your usage patterns, your app's performance would be improved by disposing of tasks.</span></span> <span data-ttu-id="d35a0-581">詳細については、「.NET を使用した並列プログラミング」ブログの「[タスクを破棄する必要がありますか](https://devblogs.microsoft.com/pfxteam/do-i-need-to-dispose-of-tasks/)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-581">For more information, see [Do I need to dispose of Tasks?](https://devblogs.microsoft.com/pfxteam/do-i-need-to-dispose-of-tasks/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d35a0-582">タスクが最終的な状態、<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />、または <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> のいずれでもありません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-582">The task is not in one of the final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</span></span></exception>
        <threadsafe><span data-ttu-id="d35a0-583"><see cref="T:System.Threading.Tasks.Task" /> クラスのほとんどのメンバーとは異なり、このメソッドはスレッドセーフではありません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-583">Unlike most of the members of the <see cref="T:System.Threading.Tasks.Task" /> class, this method is not thread-safe.</span></span></threadsafe>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public AggregateException Exception { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AggregateException Exception" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Exception" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Exception As AggregateException" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AggregateException ^ Exception { AggregateException ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Exception : AggregateException" Usage="System.Threading.Tasks.Task.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AggregateException</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-584"><see cref="T:System.AggregateException" /> が途中で終了する原因となった <see cref="T:System.Threading.Tasks.Task" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-584">Gets the <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span></span> <span data-ttu-id="d35a0-585"><see cref="T:System.Threading.Tasks.Task" /> が正常に完了した場合、または例外がスローされていない場合は、<see langword="null" /> が戻ります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-585">If the <see cref="T:System.Threading.Tasks.Task" /> completed successfully or has not yet thrown any exceptions, this will return <see langword="null" />.</span></span></summary>
        <value><span data-ttu-id="d35a0-586"><see cref="T:System.AggregateException" /> が途中で終了する原因となった <see cref="T:System.Threading.Tasks.Task" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-586">The <see cref="T:System.AggregateException" /> that caused the <see cref="T:System.Threading.Tasks.Task" /> to end prematurely.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-587">未処理の例外をスローするタスクは、結果として得られる例外を格納し、<xref:System.Threading.Tasks.Task.Wait%2A> または <xref:System.Threading.Tasks.Task.Exception%2A> プロパティへのアクセスの呼び出しで <xref:System.AggregateException> にラップします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-587">Tasks that throw unhandled exceptions store the resulting exception and propagate it wrapped in a <xref:System.AggregateException> in calls to <xref:System.Threading.Tasks.Task.Wait%2A> or in accesses to the <xref:System.Threading.Tasks.Task.Exception%2A> property.</span></span> <span data-ttu-id="d35a0-588">タスクインスタンスがガベージコレクションされた時間によって監視されない例外は、ファイナライザースレッドで反映されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-588">Any exceptions not observed by the time the task instance is garbage collected will be propagated on the finalizer thread.</span></span> <span data-ttu-id="d35a0-589">詳細と例については、「[例外処理 (タスク並列ライブラリ)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-589">For more information and an example, see [Exception Handling (Task Parallel Library)](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Factory">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.TaskFactory Factory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.Tasks.TaskFactory Factory" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Factory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Factory As TaskFactory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::Tasks::TaskFactory ^ Factory { System::Threading::Tasks::TaskFactory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Factory : System.Threading.Tasks.TaskFactory" Usage="System.Threading.Tasks.Task.Factory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-590"><see cref="T:System.Threading.Tasks.Task" /> インスタンスおよび <see cref="T:System.Threading.Tasks.Task`1" /> インスタンスを作成して構成するためのファクトリ メソッドへのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-590">Provides access to factory methods for creating and configuring <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> instances.</span></span></summary>
        <value><span data-ttu-id="d35a0-591">さまざまな <see cref="T:System.Threading.Tasks.Task" /> オブジェクトおよび <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトを作成可能なファクトリ オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-591">A factory object that can create a variety of <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.Task`1" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-592">このプロパティは、パラメーターなしの <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType> コンストラクターを呼び出すことによって作成されたものと同一の <xref:System.Threading.Tasks.TaskFactory> クラスの既定のインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-592">This property returns a default instance of the <xref:System.Threading.Tasks.TaskFactory> class that is identical to the one created by calling the parameterless <xref:System.Threading.Tasks.TaskFactory.%23ctor?displayProperty=nameWithType> constructor.</span></span> <span data-ttu-id="d35a0-593">これには、次のプロパティ値があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-593">It has the following property values:</span></span>  
  
|<span data-ttu-id="d35a0-594">property</span><span class="sxs-lookup"><span data-stu-id="d35a0-594">Property</span></span>|<span data-ttu-id="d35a0-595">[値]</span><span class="sxs-lookup"><span data-stu-id="d35a0-595">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A?displayProperty=nameWithType>|<xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.ContinuationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskContinuationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.CreationOptions%2A?displayProperty=nameWithType>|<xref:System.Threading.Tasks.TaskCreationOptions.None?displayProperty=nameWithType>|  
|<xref:System.Threading.Tasks.TaskFactory.Scheduler%2A?displayProperty=nameWithType>|<span data-ttu-id="d35a0-596">`null`、または <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="d35a0-596">`null`, or <xref:System.Threading.Tasks.TaskScheduler.Current%2A?displayProperty=nameWithType></span></span>|  
  
 <span data-ttu-id="d35a0-597">このプロパティの最も一般的な用途は、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> メソッドの1回の呼び出しで新しいタスクを作成して開始することです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-597">The most common use of this property is to create and start a new task in a single call to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d35a0-598">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以降、<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> メソッドは、既定の構成値を使用して <xref:System.Threading.Tasks.Task> オブジェクトを作成する最も簡単な方法を提供します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-598">Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> method provides the easiest way to create a <xref:System.Threading.Tasks.Task> object with default configuration values.</span></span>  
  
 <span data-ttu-id="d35a0-599">次の例では、静的な <xref:System.Threading.Tasks.Task.Factory%2A> プロパティを使用して、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> メソッドを2回呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-599">The following example uses the static <xref:System.Threading.Tasks.Task.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-600">最初のは、ユーザーのマイドキュメント ディレクトリ内のファイルの名前を配列に格納し、2番目のは配列にユーザーのマイドキュメント ディレクトリのサブディレクトリの名前を設定します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-600">The first populates an array with the names of files in the user's MyDocuments directory, while the second populates an array with the names of subdirectories of the user's MyDocuments directory.</span></span> <span data-ttu-id="d35a0-601">次に、<xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> メソッドを呼び出します。これにより、最初の2つのタスクの実行が完了した後に、2つの配列内のファイルとディレクトリの数に関する情報が表示されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-601">It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=nameWithType> method, which displays information about the number of files and directories in the two arrays after the first two tasks have completed execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Factory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.Tasks.TaskFactory" />
      </Docs>
    </Member>
    <Member MemberName="FromCanceled">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromCanceled (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromCanceled(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member FromCanceled : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.FromCanceled cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="d35a0-602">タスクを完了させるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="d35a0-602">The cancellation token with which to complete the task.</span></span></param>
        <summary><span data-ttu-id="d35a0-603">指定されたキャンセル トークンを使用したキャンセルにより完了した <see cref="T:System.Threading.Tasks.Task" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-603">Creates a <see cref="T:System.Threading.Tasks.Task" /> that's completed due to cancellation with a specified cancellation token.</span></span></summary>
        <returns><span data-ttu-id="d35a0-604">キャンセルされたタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-604">The canceled task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-605"><paramref name="cancellationToken" /> は、キャンセルが要求されていません。<see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> プロパティは <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-605">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromCanceled&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromCanceled&lt;TResult&gt; (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromCanceled&lt;TResult&gt;(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromCanceled(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member FromCanceled : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.FromCanceled cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-606">タスクによって返される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-606">The type of the result returned by the task.</span></span></typeparam>
        <param name="cancellationToken"><span data-ttu-id="d35a0-607">タスクを完了させるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="d35a0-607">The cancellation token with which to complete the task.</span></span></param>
        <summary><span data-ttu-id="d35a0-608">指定されたキャンセル トークンを使用したキャンセルにより完了した <see cref="T:System.Threading.Tasks.Task`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-608">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed due to cancellation with a specified cancellation token.</span></span></summary>
        <returns><span data-ttu-id="d35a0-609">キャンセルされたタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-609">The canceled task.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-610"><paramref name="cancellationToken" /> は、キャンセルが要求されていません。<see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> プロパティは <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-610">Cancellation has not been requested for <paramref name="cancellationToken" />; its <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> property is <see langword="false" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromException">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task FromException (Exception exception);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task FromException(class System.Exception exception) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException(System.Exception)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ FromException(Exception ^ exception);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="static member FromException : Exception -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.FromException exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="exception"><span data-ttu-id="d35a0-611">タスクを完了させる例外。</span><span class="sxs-lookup"><span data-stu-id="d35a0-611">The exception with which to complete the task.</span></span></param>
        <summary><span data-ttu-id="d35a0-612">指定した例外で完了した <see cref="T:System.Threading.Tasks.Task" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-612">Creates a <see cref="T:System.Threading.Tasks.Task" /> that has completed with a specified exception.</span></span></summary>
        <returns><span data-ttu-id="d35a0-613">エラーが発生したタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-613">The faulted task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-614">このメソッドは、<xref:System.Threading.Tasks.Task.Status%2A> プロパティが <xref:System.Threading.Tasks.TaskStatus.Faulted>、<xref:System.Threading.Tasks.Task.Exception%2A> プロパティに `exception`が格納されている <xref:System.Threading.Tasks.Task> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-614">This method creates a <xref:System.Threading.Tasks.Task> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="d35a0-615">メソッドは、通常、タスクが実行する作業が、長いコードパスを実行する前に例外をスローすることがわかっている場合に使用されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-615">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="d35a0-616">例については、「<xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> のオーバーロード」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-616">For an example, see the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromException&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromException&lt;TResult&gt; (Exception exception);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromException&lt;TResult&gt;(class System.Exception exception) cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromException``1(System.Exception)" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromException(Exception ^ exception);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="static member FromException : Exception -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.FromException exception" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-617">タスクによって返される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-617">The type of the result returned by the task.</span></span></typeparam>
        <param name="exception"><span data-ttu-id="d35a0-618">タスクを完了させる例外。</span><span class="sxs-lookup"><span data-stu-id="d35a0-618">The exception with which to complete the task.</span></span></param>
        <summary><span data-ttu-id="d35a0-619">指定した例外で完了した <see cref="T:System.Threading.Tasks.Task`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-619">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed with a specified exception.</span></span></summary>
        <returns><span data-ttu-id="d35a0-620">エラーが発生したタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-620">The faulted task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-621">このメソッドは、<xref:System.Threading.Tasks.Task.Status%2A> プロパティが <xref:System.Threading.Tasks.TaskStatus.Faulted>、<xref:System.Threading.Tasks.Task.Exception%2A> プロパティに `exception`が格納されている <xref:System.Threading.Tasks.Task%601> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-621">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.Faulted> and whose <xref:System.Threading.Tasks.Task.Exception%2A> property contains `exception`.</span></span> <span data-ttu-id="d35a0-622">メソッドは、通常、タスクが実行する作業が、長いコードパスを実行する前に例外をスローすることがわかっている場合に使用されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-622">The method is commonly used when you immediately know that the work that a task performs will throw an exception before executing a longer code path.</span></span> <span data-ttu-id="d35a0-623">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-623">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-624">次の例は、コマンドライン引数として渡された名前を持つ各ディレクトリ内のファイルのバイト数を計算するコマンドラインユーティリティです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-624">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="d35a0-625"><xref:System.IO.FileInfo> オブジェクトをインスタンス化し、ディレクトリ内の各ファイルの <xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType> プロパティの値を取得する長いコードパスを実行するのではなく、この例では、<xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> メソッドを呼び出して、特定のサブディレクトリが存在しない場合にエラーが発生したタスクを作成するだけです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-625">Rather than executing a longer code path that instantiates a <xref:System.IO.FileInfo> object and retrieves the value of its <xref:System.IO.FileInfo.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromException%60%601%28System.Exception%29> method to create a faulted task if a particular subdirectory does not exist.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromResult&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; FromResult&lt;TResult&gt; (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; FromResult&lt;TResult&gt;(!!TResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromResult(Of TResult) (result As TResult) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ FromResult(TResult result);" />
      <MemberSignature Language="F#" Value="static member FromResult : 'Result -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.FromResult result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="result" Type="TResult" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-626">タスクによって返される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-626">The type of the result returned by the task.</span></span></typeparam>
        <param name="result"><span data-ttu-id="d35a0-627">完了したタスクに格納する結果。</span><span class="sxs-lookup"><span data-stu-id="d35a0-627">The result to store into the completed task.</span></span></param>
        <summary><span data-ttu-id="d35a0-628">指定した結果で成功した <see cref="T:System.Threading.Tasks.Task`1" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-628">Creates a <see cref="T:System.Threading.Tasks.Task`1" /> that's completed successfully with the specified result.</span></span></summary>
        <returns><span data-ttu-id="d35a0-629">正常に完了したタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-629">The successfully completed task.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-630">このメソッドは、<xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> プロパティが `result`、<xref:System.Threading.Tasks.Task.Status%2A> プロパティが <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>である <xref:System.Threading.Tasks.Task%601> オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-630">This method creates a <xref:System.Threading.Tasks.Task%601> object whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is `result` and whose <xref:System.Threading.Tasks.Task.Status%2A> property is <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>.</span></span> <span data-ttu-id="d35a0-631">メソッドは、タスクの戻り値が、長いコードパスを実行せずにすぐにわからない場合によく使用されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-631">The method is commonly used when the return value of a task is immediately known without executing a longer code path.</span></span> <span data-ttu-id="d35a0-632">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-632">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="d35a0-633">値を返さないタスクオブジェクトを作成するには、<xref:System.Threading.Tasks.Task.CompletedTask%2A> プロパティからタスクオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-633">To create a Task object that does not return a value, retrieve the Task object from the <xref:System.Threading.Tasks.Task.CompletedTask%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-634">次の例は、コマンドライン引数として渡された名前を持つ各ディレクトリ内のファイルのバイト数を計算するコマンドラインユーティリティです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-634">The following example is a command-line utility that calculates the number of bytes in the files in each directory whose name is passed as a command-line argument.</span></span> <span data-ttu-id="d35a0-635">この例では、<xref:System.IO.FileStream> オブジェクトをインスタンス化し、ディレクトリ内の各ファイルの <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> プロパティの値を取得する長いコードパスを実行するのではなく、単純に <xref:System.Threading.Tasks.Task.FromResult%2A> メソッドを呼び出して、ディレクトリにファイルがない場合に <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> プロパティがゼロ (0) のタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-635">Rather than executing a longer code path that instantiates a <xref:System.IO.FileStream> object and retrieves the value of its <xref:System.IO.FileStream.Length%2A?displayProperty=nameWithType> property for each file in the directory, the example simply calls the <xref:System.Threading.Tasks.Task.FromResult%2A> method to create a task whose <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property is zero (0) if a directory has no files.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/cs/fromresult1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.FromResult#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.fromresult/vb/fromresult1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CompletedTask" />
      </Docs>
    </Member>
    <Member MemberName="GetAwaiter">
      <MemberSignature Language="C#" Value="public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.CompilerServices.TaskAwaiter GetAwaiter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.GetAwaiter" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAwaiter () As TaskAwaiter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::CompilerServices::TaskAwaiter GetAwaiter();" />
      <MemberSignature Language="F#" Value="member this.GetAwaiter : unit -&gt; System.Runtime.CompilerServices.TaskAwaiter" Usage="task.GetAwaiter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.TaskAwaiter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d35a0-636">この <see cref="T:System.Threading.Tasks.Task" /> を待機するために使用する awaiter を取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-636">Gets an awaiter used to await this <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
        <returns><span data-ttu-id="d35a0-637">awaiter のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="d35a0-637">An awaiter instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-638">このメソッドは、アプリケーションコードで使用するためではなく、コンパイラの使用を目的としています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-638">This method is intended for compiler use rather than for use in application code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : int" Usage="System.Threading.Tasks.Task.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-639">この <see cref="T:System.Threading.Tasks.Task" /> インスタンスの一意の ID を取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-639">Gets an ID for this <see cref="T:System.Threading.Tasks.Task" /> instance.</span></span></summary>
        <value><span data-ttu-id="d35a0-640">システムによってこの <see cref="T:System.Threading.Tasks.Task" /> インスタンスに割り当てられた識別子。</span><span class="sxs-lookup"><span data-stu-id="d35a0-640">The identifier that is assigned by the system to this <see cref="T:System.Threading.Tasks.Task" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-641">タスク Id は要求に応じて割り当てられ、必ずしもタスクインスタンスの作成順序を表すとは限りません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-641">Task IDs are assigned on-demand and do not necessarily represent the order in which task instances are created.</span></span> <span data-ttu-id="d35a0-642">競合は非常にまれですが、タスク識別子は一意であるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-642">Note that although collisions are very rare, task identifiers are not guaranteed to be unique.</span></span>  
  
 <span data-ttu-id="d35a0-643">タスクが実行されているコード内から現在実行中のタスクのタスク ID を取得するには、<xref:System.Threading.Tasks.Task.CurrentId%2A> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-643">To get the task ID of the currently executing task from within code that task is executing, use the <xref:System.Threading.Tasks.Task.CurrentId%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.Task.CurrentId" />
      </Docs>
    </Member>
    <Member MemberName="IsCanceled">
      <MemberSignature Language="C#" Value="public bool IsCanceled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCanceled" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCanceled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCanceled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCanceled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCanceled : bool" Usage="System.Threading.Tasks.Task.IsCanceled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-644">この <see cref="T:System.Threading.Tasks.Task" /> インスタンスの実行が取り消されることによって完了したかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-644">Gets whether this <see cref="T:System.Threading.Tasks.Task" /> instance has completed execution due to being canceled.</span></span></summary>
        <value><span data-ttu-id="d35a0-645">タスクが取り消されることによって完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-645"><see langword="true" /> if the task has completed due to being canceled; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-646"><xref:System.Threading.Tasks.Task> は、次のいずれかの条件下で <xref:System.Threading.Tasks.TaskStatus.Canceled> 状態で完了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-646">A <xref:System.Threading.Tasks.Task> will complete in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="d35a0-647">タスクが実行を開始する前に、その <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> がキャンセル用にマークされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-647">Its <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> was marked for cancellation before the task started executing,</span></span>  
  
-   <span data-ttu-id="d35a0-648">タスクは、同じ <xref:System.Threading.CancellationToken>を持つ <xref:System.OperationCanceledException> をスローすることによって、既にシグナル状態になっている <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> に対して取り消し要求を受信確認しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-648">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by throwing an <xref:System.OperationCanceledException> that bears the same <xref:System.Threading.CancellationToken>.</span></span>  
  
-   <span data-ttu-id="d35a0-649">タスクは、<xref:System.Threading.CancellationToken>の <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> メソッドを呼び出して、既にシグナル状態になっている <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> に対して取り消し要求を受信確認しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-649">The task acknowledged the cancellation request on its already signaled <xref:System.Threading.Tasks.TaskFactory.CancellationToken%2A> by calling the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A> method on the <xref:System.Threading.CancellationToken>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d35a0-650"><xref:System.Threading.Tasks.Task.IsCanceled%2A> プロパティの値を取得しても、タスクが完了するまで呼び出し元のスレッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-650">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCanceled%2A> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompleted : bool" Usage="System.Threading.Tasks.Task.IsCompleted" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.IsCompleted</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-651">タスクが完了したかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-651">Gets a value that indicates whether the task has completed.</span></span></summary>
        <value><span data-ttu-id="d35a0-652">タスクが完了した (つまり、<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />、<see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />) のいずれかの最終状態であることを <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-652"><see langword="true" /> if the task has completed (that is, the task is in one of the three final states: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />, or <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />); otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> <span data-ttu-id="d35a0-653"><xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType> プロパティの値を取得しても、タスクが完了するまで呼び出し元のスレッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-653">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsCompleted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCompletedSuccessfully">
      <MemberSignature Language="C#" Value="public bool IsCompletedSuccessfully { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCompletedSuccessfully" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsCompletedSuccessfully" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCompletedSuccessfully As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCompletedSuccessfully { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCompletedSuccessfully : bool" Usage="System.Threading.Tasks.Task.IsCompletedSuccessfully" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-654">タスクが完了まで実行されたかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-654">Gets whether the task ran to completion.</span></span></summary>
        <value><span data-ttu-id="d35a0-655">タスクが完了まで実行されたかどうかを <see langword="true" /> します。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-655"><see langword="true" /> if the task ran to completion; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFaulted">
      <MemberSignature Language="C#" Value="public bool IsFaulted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFaulted" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.IsFaulted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFaulted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFaulted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFaulted : bool" Usage="System.Threading.Tasks.Task.IsFaulted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-656">処理されない例外が発生したことが原因で <see cref="T:System.Threading.Tasks.Task" /> が完了したかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-656">Gets whether the <see cref="T:System.Threading.Tasks.Task" /> completed due to an unhandled exception.</span></span></summary>
        <value><span data-ttu-id="d35a0-657">タスクがハンドルされない例外をスローした場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-657"><see langword="true" /> if the task has thrown an unhandled exception; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-658"><xref:System.Threading.Tasks.Task.IsFaulted%2A> が `true`の場合、タスクの <xref:System.Threading.Tasks.Task.Status%2A> は <xref:System.Threading.Tasks.TaskStatus.Faulted>と等しく、その <xref:System.Threading.Tasks.Task.Exception%2A> プロパティは null 以外になります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-658">If <xref:System.Threading.Tasks.Task.IsFaulted%2A> is `true`, the task's <xref:System.Threading.Tasks.Task.Status%2A> is equal to <xref:System.Threading.Tasks.TaskStatus.Faulted>, and its <xref:System.Threading.Tasks.Task.Exception%2A> property will be non-null.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d35a0-659"><xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType> プロパティの値を取得しても、タスクが完了するまで呼び出し元のスレッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-659">Retrieving the value of the <xref:System.Threading.Tasks.Task.IsFaulted%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d35a0-660">ThreadPool 上で実行する指定された作業をキューに配置し、その作業のタスクまたは <see cref="T:System.Threading.Tasks.Task`1" /> のハンドルを戻します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-660">Queues the specified work to run on the ThreadPool and returns a task or <see cref="T:System.Threading.Tasks.Task`1" /> handle for that work.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-661"><xref:System.Threading.Tasks.Task.Run%2A> メソッドには、既定値を使用してタスクを簡単に開始できるようにする一連のオーバーロードが用意されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-661">The <xref:System.Threading.Tasks.Task.Run%2A> method provides a set of overloads that make it easy to start a task by using default values.</span></span> <span data-ttu-id="d35a0-662"><xref:System.Threading.Tasks.TaskFactory.StartNew%2A> のオーバーロードに代わる軽量の方法です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-662">It is a lightweight alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> overloads.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action);" />
      <MemberSignature Language="F#" Value="static member Run : Action -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="d35a0-663">非同期的に実行する処理</span><span class="sxs-lookup"><span data-stu-id="d35a0-663">The work to execute asynchronously</span></span></param>
        <summary><span data-ttu-id="d35a0-664">スレッド プール上で実行する指定された作業をキューに配置し、その作業を表す <see cref="T:System.Threading.Tasks.Task" /> オブジェクトを戻します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-664">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span></span></summary>
        <returns><span data-ttu-id="d35a0-665">ThreadPool で実行するためにキューに配置された作業を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-665">A task that represents the work queued to execute in the ThreadPool.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-666"><xref:System.Threading.Tasks.Task.Run%2A> メソッドを使用すると、1回のメソッド呼び出しでタスクを作成および実行することができます。これは、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A> メソッドの代わりに、より簡単な方法です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-666">The <xref:System.Threading.Tasks.Task.Run%2A> method allows you to create and execute a task in a single method call and is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="d35a0-667">次の既定値を使用してタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-667">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="d35a0-668">キャンセルトークンが <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>ます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-668">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="d35a0-669"><xref:System.Threading.Tasks.Task.CreationOptions%2A> プロパティ値が <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d35a0-669">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="d35a0-670">既定のタスクスケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-670">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="d35a0-671">タスク操作によってスローされる例外の処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-671">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-672">次の例では、現在のスレッドの <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> を表示する `ShowThreadInfo` メソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-672">The following example defines a `ShowThreadInfo` method  that displays the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> of the current thread.</span></span> <span data-ttu-id="d35a0-673">これはアプリケーションスレッドから直接呼び出され、<xref:System.Threading.Tasks.Task.Run%28System.Action%29> メソッドに渡される <xref:System.Action> デリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-673">It is called directly from the application thread, and is called from the <xref:System.Action> delegate passed to the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run11.cs#11)]
 [!code-vb[System.Threading.Tasks.Task.Run#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run11.vb#11)]  
  
 <span data-ttu-id="d35a0-674">次の例は前の例と似ていますが、ラムダ式を使用して、タスクが実行するコードを定義している点が異なります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-674">The following example is similar to the previous one, except that it uses a lambda expression to define the code that the task is to execute.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run6.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Run#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run6.vb#3)]  
  
 <span data-ttu-id="d35a0-675">この例は、非同期タスクがメインアプリケーションスレッドとは異なるスレッドで実行されることを示しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-675">The examples show that the asynchronous task executes on a different thread than the main application thread.</span></span>  
  
 <span data-ttu-id="d35a0-676"><xref:System.Threading.Tasks.Task.Wait%2A> メソッドを呼び出すことで、タスクが完了し、アプリケーションが終了する前にその出力が表示されるようになります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-676">The call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that the task completes and displays its output before the application ends.</span></span> <span data-ttu-id="d35a0-677">それ以外の場合は、タスクが終了する前に `Main` メソッドが完了する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-677">Otherwise, it is possible that the `Main` method will complete before the task finishes.</span></span>  
  
 <span data-ttu-id="d35a0-678">次の例は、<xref:System.Threading.Tasks.Task.Run%28System.Action%29> メソッドを示しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-678">The following example illustrates the <xref:System.Threading.Tasks.Task.Run%28System.Action%29> method.</span></span> <span data-ttu-id="d35a0-679">ディレクトリ名の配列を定義し、各ディレクトリ内のファイル名を取得するための別のタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-679">It defines an array of directory names and starts a separate task to retrieve the file names in each directory.</span></span> <span data-ttu-id="d35a0-680">すべてのタスクは、ファイル名を1つの <xref:System.Collections.Concurrent.ConcurrentBag%601> オブジェクトに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-680">All tasks write the file names to a single <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span> <span data-ttu-id="d35a0-681">次に、<xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> メソッドを呼び出してすべてのタスクが完了したことを確認し、<xref:System.Collections.Concurrent.ConcurrentBag%601> オブジェクトに書き込まれたファイル名の合計数を表示します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-681">The example then calls the <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method to ensure that all tasks have completed, and then displays a count of the total number of file names written to the <xref:System.Collections.Concurrent.ConcurrentBag%601> object.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run2.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Run#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-682"><paramref name="action" /> パラメーターは <see langword="null" /> でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-682">The <paramref name="action" /> parameter was <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="d35a0-683">例外処理 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="d35a0-683">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run (function As Func(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="d35a0-684">非同期的に実行する処理</span><span class="sxs-lookup"><span data-stu-id="d35a0-684">The work to execute asynchronously</span></span></param>
        <summary><span data-ttu-id="d35a0-685">スレッド プール上で実行する作業を指定してキューに配置し、<paramref name="function" /> によって返されるタスクのプロキシを返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-685">Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <paramref name="function" />.</span></span></summary>
        <returns><span data-ttu-id="d35a0-686"><paramref name="function" /> によって返されるタスクのプロキシを表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-686">A task that represents a proxy for the task returned by <paramref name="function" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-687">タスク操作によってスローされる例外の処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-687">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-688"><paramref name="function" /> パラメーターは <see langword="null" /> でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-688">The <paramref name="function" /> parameter was <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="d35a0-689">例外処理 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="d35a0-689">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Action action, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Action action, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Action ^ action, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Action * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run (action, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="action"><span data-ttu-id="d35a0-690">非同期的に実行する処理</span><span class="sxs-lookup"><span data-stu-id="d35a0-690">The work to execute asynchronously</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-691">処理を取り消すために使用できるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="d35a0-691">A cancellation token that can be used to cancel the work</span></span></param>
        <summary><span data-ttu-id="d35a0-692">スレッド プール上で実行する指定された作業をキューに配置し、その作業を表す <see cref="T:System.Threading.Tasks.Task" /> オブジェクトを戻します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-692">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task" /> object that represents that work.</span></span> <span data-ttu-id="d35a0-693">キャンセル トークンで作業をキャンセルできます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-693">A cancellation token allows the work to be cancelled.</span></span></summary>
        <returns><span data-ttu-id="d35a0-694">スレッド プールで実行するためにキューに配置された作業を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-694">A task that represents the work queued to execute in the thread pool.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-695">タスクが実行を開始する前にキャンセルが要求された場合、タスクは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-695">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="d35a0-696">代わりに、<xref:System.Threading.Tasks.TaskStatus.Canceled> 状態に設定され、<xref:System.Threading.Tasks.TaskCanceledException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-696">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="d35a0-697"><xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> メソッドは、<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> メソッドの代わりに、より簡単に行うことができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-697">The <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%2CSystem.Threading.CancellationToken%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-698">次の既定値を使用してタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-698">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="d35a0-699"><xref:System.Threading.Tasks.Task.CreationOptions%2A> プロパティ値が <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d35a0-699">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="d35a0-700">既定のタスクスケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-700">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="d35a0-701">タスク操作によってスローされる例外の処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-701">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-702">次の例では、<xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> メソッドを呼び出して、C:\Windows\System32 ディレクトリ内のファイルを反復処理するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-702">The following example calls the <xref:System.Threading.Tasks.Task.Run%28System.Action%2CSystem.Threading.CancellationToken%29> method to create a task that iterates the files in the C:\Windows\System32 directory.</span></span> <span data-ttu-id="d35a0-703">ラムダ式は、<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドを呼び出して、各ファイルに関する情報を <xref:System.Collections.Generic.List%601> オブジェクトに追加します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-703">The lambda expression calls the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method to add information about each  file to a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="d35a0-704"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> ループによって呼び出された、デタッチされた入れ子になった各タスクは、キャンセルトークンの状態をチェックし、キャンセルが要求された場合は <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-704">Each detached nested task invoked by the <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> loop checks the state of the cancellation token and, if cancellation is requested, calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-705"><xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> メソッドは、呼び出し元のスレッドが <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> メソッドを呼び出すと `catch` ブロックで処理される <xref:System.OperationCanceledException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-705">The <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method throws an <xref:System.OperationCanceledException> exception that is handled in a `catch` block when the calling thread calls the <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Run#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-706"><paramref name="action" /> パラメーターは <see langword="null" /> でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-706">The <paramref name="action" /> parameter was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="d35a0-707">タスクが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-707">The task has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-708"><see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられた <paramref name="cancellationToken" /> が破棄されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-708">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="d35a0-709">例外処理 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="d35a0-709">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Run (Func&lt;System.Threading.Tasks.Task&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Run(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ Run(Func&lt;System::Threading::Tasks::Task ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.Run (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="function"><span data-ttu-id="d35a0-710">非同期的に実行する処理。</span><span class="sxs-lookup"><span data-stu-id="d35a0-710">The work to execute asynchronously.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-711">処理を取り消すために使用されるキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="d35a0-711">A cancellation token that should be used to cancel the work.</span></span></param>
        <summary><span data-ttu-id="d35a0-712">スレッド プール上で実行する作業を指定してキューに配置し、<paramref name="function" /> によって返されるタスクのプロキシを返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-712">Queues the specified work to run on the thread pool and returns a proxy for the task returned by <paramref name="function" />.</span></span></summary>
        <returns><span data-ttu-id="d35a0-713"><paramref name="function" /> によって返されるタスクのプロキシを表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-713">A task that represents a proxy for the task returned by <paramref name="function" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-714">タスク操作によってスローされる例外の処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-714">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-715"><paramref name="function" /> パラメーターは <see langword="null" /> でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-715">The <paramref name="function" /> parameter was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="d35a0-716">タスクが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-716">The task has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-717"><see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられた <paramref name="cancellationToken" /> が破棄されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-717">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d35a0-718">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="d35a0-718">Task Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="d35a0-719">例外処理 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="d35a0-719">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of Task(Of TResult))) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-720">プロキシ タスクによって返される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-720">The type of the result returned by the proxy task.</span></span></typeparam>
        <param name="function"><span data-ttu-id="d35a0-721">非同期的に実行する処理</span><span class="sxs-lookup"><span data-stu-id="d35a0-721">The work to execute asynchronously</span></span></param>
        <summary><span data-ttu-id="d35a0-722">スレッド プール上で実行する指定された作業をキューに配置し、<see langword="Task(TResult)" /> によって返される <paramref name="function" /> のプロキシを返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-722">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span></span></summary>
        <returns><span data-ttu-id="d35a0-723"><see langword="Task(TResult)" /> によって返される <see langword="Task(TResult)" /> のプロキシを表す <paramref name="function" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-723">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-724">タスク操作によってスローされる例外の処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-724">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-725"><paramref name="function" /> パラメーターは <see langword="null" /> でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-725">The <paramref name="function" /> parameter was <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="d35a0-726">例外処理 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="d35a0-726">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Run(Of TResult) (function As Func(Of TResult)) As Task(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;'Result&gt; -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run function" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-727">タスクの戻り値の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-727">The return type of the task.</span></span></typeparam>
        <param name="function"><span data-ttu-id="d35a0-728">非同期的に実行する処理。</span><span class="sxs-lookup"><span data-stu-id="d35a0-728">The work to execute asynchronously.</span></span></param>
        <summary><span data-ttu-id="d35a0-729">スレッド プール上で実行する指定された作業をキューに配置し、その作業を表す <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトを戻します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-729">Queues the specified work to run on the thread pool and returns a <see cref="T:System.Threading.Tasks.Task`1" /> object that represents that work.</span></span></summary>
        <returns><span data-ttu-id="d35a0-730">スレッド プールで実行するためキューに配置された処理を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-730">A task object that represents the work queued to execute in the thread pool.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-731"><xref:System.Threading.Tasks.Task.Run%2A> メソッドは、<xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> メソッドの代わりに、より簡単に行うことができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-731">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%28System.Action%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d35a0-732">次の既定値を使用してタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-732">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="d35a0-733">キャンセルトークンが <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>ます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-733">Its cancellation token is <xref:System.Threading.CancellationToken.None%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="d35a0-734"><xref:System.Threading.Tasks.Task.CreationOptions%2A> プロパティ値が <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d35a0-734">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="d35a0-735">既定のタスクスケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-735">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="d35a0-736">タスク操作によってスローされる例外の処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-736">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-737">次の例では、発行されたブックを表すテキストファイル内の単語数の概算値をカウントします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-737">The following example counts the approximate number of words in text files that represent published books.</span></span> <span data-ttu-id="d35a0-738">各タスクは、ファイルを開いて、その内容全体を非同期に読み取り、正規表現を使用して単語数を計算する役割を担います。</span><span class="sxs-lookup"><span data-stu-id="d35a0-738">Each task is responsible for opening a file, reading its entire contents asynchronously, and calculating the word count by using a regular expression.</span></span> <span data-ttu-id="d35a0-739"><xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> メソッドを呼び出して、各ブックのカウントをコンソールに表示する前に、すべてのタスクが完了したことを確認します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-739">The <xref:System.Threading.Tasks.Task.WaitAll%28System.Threading.Tasks.Task%5B%5D%29> method is called to ensure that all tasks have completed before  displaying the word count of each book to the console.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/run3.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.Run#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/run3.vb#2)]  
  
 <span data-ttu-id="d35a0-740">正規表現 `\p{P}*\s+` は、0個以上の区切り文字の後に1つ以上の空白文字が続くパターンに一致します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-740">The regular expression `\p{P}*\s+` matches zero, one, or more punctuation characters followed by one or more white-space characters.</span></span> <span data-ttu-id="d35a0-741">一致の合計数が、おおよその単語数と同じであることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-741">It assumes that the total number of matches equals the approximate word count.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-742"><paramref name="function" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-742">The <paramref name="function" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="d35a0-743">例外処理 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="d35a0-743">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-744">プロキシ タスクによって返される結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-744">The type of the result returned by the proxy task.</span></span></typeparam>
        <param name="function"><span data-ttu-id="d35a0-745">非同期的に実行する処理</span><span class="sxs-lookup"><span data-stu-id="d35a0-745">The work to execute asynchronously</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-746">処理を取り消すために使用されるキャンセル トークン</span><span class="sxs-lookup"><span data-stu-id="d35a0-746">A cancellation token that should be used to cancel the work</span></span></param>
        <summary><span data-ttu-id="d35a0-747">スレッド プール上で実行する指定された作業をキューに配置し、<see langword="Task(TResult)" /> によって返される <paramref name="function" /> のプロキシを返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-747">Queues the specified work to run on the thread pool and returns a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span></span></summary>
        <returns><span data-ttu-id="d35a0-748"><see langword="Task(TResult)" /> によって返される <see langword="Task(TResult)" /> のプロキシを表す <paramref name="function" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-748">A <see langword="Task(TResult)" /> that represents a proxy for the <see langword="Task(TResult)" /> returned by <paramref name="function" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-749">タスク操作によってスローされる例外の処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-749">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-750"><paramref name="function" /> パラメーターは <see langword="null" /> でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-750">The <paramref name="function" /> parameter was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="d35a0-751">タスクが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-751">The task has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-752"><see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられた <paramref name="cancellationToken" /> が破棄されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-752">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d35a0-753">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="d35a0-753">Task Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="d35a0-754">例外処理 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="d35a0-754">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Run&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult&gt; Run&lt;TResult&gt; (Func&lt;TResult&gt; function, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult&gt; Run&lt;TResult&gt;(class System.Func`1&lt;!!TResult&gt; function, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;TResult&gt; ^ Run(Func&lt;TResult&gt; ^ function, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Run : Func&lt;'Result&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Result&gt;" Usage="System.Threading.Tasks.Task.Run (function, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="function" Type="System.Func&lt;TResult&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-755">タスクの結果の型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-755">The result type of the task.</span></span></typeparam>
        <param name="function"><span data-ttu-id="d35a0-756">非同期的に実行する処理</span><span class="sxs-lookup"><span data-stu-id="d35a0-756">The work to execute asynchronously</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-757">処理を取り消すために使用されるキャンセル トークン</span><span class="sxs-lookup"><span data-stu-id="d35a0-757">A cancellation token that should be used to cancel the work</span></span></param>
        <summary><span data-ttu-id="d35a0-758">スレッド プール上で実行する指定された作業をキューに配置し、その作業を表す <see langword="Task(TResult)" /> オブジェクトを戻します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-758">Queues the specified work to run on the thread pool and returns a <see langword="Task(TResult)" /> object that represents that work.</span></span> <span data-ttu-id="d35a0-759">キャンセル トークンで作業をキャンセルできます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-759">A cancellation token allows the work to be cancelled.</span></span></summary>
        <returns><span data-ttu-id="d35a0-760"><see langword="Task(TResult)" /> は、スレッド プールで実行するためにキューに配置された作業を表します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-760">A <see langword="Task(TResult)" /> that represents the work queued to execute in the thread pool.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-761">タスクが実行を開始する前にキャンセルが要求された場合、タスクは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-761">If cancellation is requested before the task begins execution, the task does not execute.</span></span> <span data-ttu-id="d35a0-762">代わりに、<xref:System.Threading.Tasks.TaskStatus.Canceled> 状態に設定され、<xref:System.Threading.Tasks.TaskCanceledException> 例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-762">Instead it is set to the <xref:System.Threading.Tasks.TaskStatus.Canceled> state and throws a <xref:System.Threading.Tasks.TaskCanceledException> exception.</span></span>  
  
 <span data-ttu-id="d35a0-763"><xref:System.Threading.Tasks.Task.Run%2A> メソッドは、<xref:System.Threading.Tasks.TaskFactory.StartNew%2A> メソッドの代わりに、より簡単に行うことができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-763">The <xref:System.Threading.Tasks.Task.Run%2A> method is a simpler alternative to the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method.</span></span> <span data-ttu-id="d35a0-764">次の既定値を使用してタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-764">It creates a task with the following default values:</span></span>  
  
-   <span data-ttu-id="d35a0-765"><xref:System.Threading.Tasks.Task.CreationOptions%2A> プロパティ値が <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d35a0-765">Its <xref:System.Threading.Tasks.Task.CreationOptions%2A> property value is <xref:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="d35a0-766">既定のタスクスケジューラを使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-766">It uses the default task scheduler.</span></span>  
  
 <span data-ttu-id="d35a0-767">タスク操作によってスローされる例外の処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-767">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-768">次の例では、カウンターが200万の値にインクリメントされるまでループするタスクを20個作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-768">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="d35a0-769">最初の10個のタスクが200万に達した場合、キャンセルトークンは取り消され、カウンターが200万に達していないすべてのタスクは取り消されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-769">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="d35a0-770">この例は、考えられる出力を示しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-770">The example shows possible output.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 <span data-ttu-id="d35a0-771">この例では、<xref:System.AggregateException.InnerExceptions%2A> プロパティを使用して例外を調べる代わりに、すべてのタスクを反復処理して、正常に完了し、取り消されたものを特定します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-771">Instead of using the <xref:System.AggregateException.InnerExceptions%2A> property to   examine exceptions, the example iterates all tasks to determine which have completed successfully and which have been cancelled.</span></span> <span data-ttu-id="d35a0-772">完了したものについては、タスクによって返された値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-772">For those that have completed, it displays the value returned by the task.</span></span>  
  
 <span data-ttu-id="d35a0-773">取り消しは協調しているため、各タスクはキャンセルに応答する方法を決定できます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-773">Because cancellation is cooperative, each task can decide how to respond to cancellation.</span></span> <span data-ttu-id="d35a0-774">次の例は最初の例と似ていますが、トークンが取り消されると、タスクは、例外をスローするのではなく、完了したイテレーションの数を返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-774">The following example is like the first, except that, once the token is cancelled, tasks return the number of iterations they've completed rather than throw an exception.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run28.cs#28)]
 [!code-vb[System.Threading.Tasks.Task.Run#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run28.vb#28)]  
  
 <span data-ttu-id="d35a0-775">この例では、キャンセルが要求されたときに開始されていないタスクも例外をスローするため、<xref:System.AggregateException> 例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-775">The example still must handle the <xref:System.AggregateException> exception,   since any tasks that have not started when cancellation is requested still throw an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-776"><paramref name="function" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-776">The <paramref name="function" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskCanceledException"><span data-ttu-id="d35a0-777">タスクが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-777">The task has been canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-778"><see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられた <paramref name="cancellationToken" /> が破棄されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-778">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with <paramref name="cancellationToken" /> was disposed.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/task-cancellation.md"><span data-ttu-id="d35a0-779">タスクのキャンセル</span><span class="sxs-lookup"><span data-stu-id="d35a0-779">Task Cancellation</span></span></related>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="d35a0-780">例外処理 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="d35a0-780">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="RunSynchronously">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d35a0-781">現在の <see cref="T:System.Threading.Tasks.Task" /> で <see cref="T:System.Threading.Tasks.TaskScheduler" /> を同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-781">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously();" />
      <MemberSignature Language="F#" Value="member this.RunSynchronously : unit -&gt; unit" Usage="task.RunSynchronously " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d35a0-782">現在の <see cref="T:System.Threading.Tasks.Task" /> で <see cref="T:System.Threading.Tasks.TaskScheduler" /> を同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-782">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-783">通常、タスクはスレッドプールのスレッドで非同期的に実行され、呼び出し元のスレッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-783">Ordinarily, tasks are executed asynchronously on a thread pool thread and do not block the calling thread.</span></span> <span data-ttu-id="d35a0-784"><xref:System.Threading.Tasks.Task.RunSynchronously> メソッドを呼び出すことによって実行されるタスクは、現在の <xref:System.Threading.Tasks.TaskScheduler> に関連付けられ、呼び出し元のスレッドで実行されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-784">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously> method are associated with the current <xref:System.Threading.Tasks.TaskScheduler> and are run on the calling thread.</span></span> <span data-ttu-id="d35a0-785">ターゲットスケジューラが呼び出し元のスレッドでこのタスクの実行をサポートしていない場合は、タスクがスケジューラで実行されるようにスケジュールされ、呼び出し元のスレッドはタスクの実行が完了するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-785">If the target scheduler does not support running this task on the calling thread, the task will be scheduled for execution on the scheduler, and the calling thread will block until the task has completed execution.</span></span> <span data-ttu-id="d35a0-786">タスクが同期的に実行されている場合でも、呼び出し元のスレッドは <xref:System.Threading.Tasks.Task.Wait%2A> を呼び出して、タスクがスローする可能性のある例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-786">Even though the task runs synchronously, the calling thread should still call <xref:System.Threading.Tasks.Task.Wait%2A> to handle any exceptions that the task might throw.</span></span>  <span data-ttu-id="d35a0-787">例外処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-787">For more information on exception handling, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 <span data-ttu-id="d35a0-788"><xref:System.Threading.Tasks.Task.RunSynchronously%2A> メソッドを呼び出すことによって実行されるタスクは、<xref:System.Threading.Tasks.Task> または <xref:System.Threading.Tasks.Task%601> クラスコンストラクターを呼び出すことによってインスタンス化されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-788">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="d35a0-789">同期的に実行するタスクは、<xref:System.Threading.Tasks.TaskStatus.Created> 状態である必要があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-789">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="d35a0-790">タスクを開始して1回だけ実行することができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-790">A task may be started and run only once.</span></span> <span data-ttu-id="d35a0-791">タスクを2回目にスケジュールしようとすると、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-791">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-792">次の例では、<xref:System.Threading.Tasks.Task.RunSynchronously%2A> メソッドを呼び出して、非同期に実行されるタスクを比較します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-792">The following example compares a task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method with one executed asynchronously.</span></span> <span data-ttu-id="d35a0-793">どちらの場合も、タスクは、タスクが実行されているスレッドのタスク ID と ID を表示する、同一のラムダ式を実行します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-793">In both cases, the tasks execute identical lambda expressions that display the task ID and the ID of the thread on which the task is running.</span></span> <span data-ttu-id="d35a0-794">このタスクでは、1 ~ 100万の整数の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-794">The task calculates the sum of the integers between 1 and 1,000,000.</span></span> <span data-ttu-id="d35a0-795">例の出力が示すように、<xref:System.Threading.Tasks.Task.RunSynchronously%2A> メソッドを呼び出すことによって実行されるタスクはアプリケーションスレッドで実行されますが、非同期タスクでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-795">As the output from the example shows, the task executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method runs on the application thread, while the asynchronous task does not.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/cs/runsynchronously1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.RunSynchronously#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.runsynchronously/vb/runsynchronously1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-796"><see cref="T:System.Threading.Tasks.Task" /> インスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-796">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d35a0-797"><see cref="T:System.Threading.Tasks.Task" /> は、開始する有効な状態にはありません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-797">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span></span> <span data-ttu-id="d35a0-798">既に開始、実行、またはキャンセルされたか、ダイレクト スケジューリングをサポートしない方法で作成された可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-798">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="d35a0-799">例外処理 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="d35a0-799">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RunSynchronously">
      <MemberSignature Language="C#" Value="public void RunSynchronously (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunSynchronously(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RunSynchronously (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RunSynchronously(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.RunSynchronously : System.Threading.Tasks.TaskScheduler -&gt; unit" Usage="task.RunSynchronously scheduler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler"><span data-ttu-id="d35a0-800">このタスク インラインの実行を試みるスケジューラ。</span><span class="sxs-lookup"><span data-stu-id="d35a0-800">The scheduler on which to attempt to run this task inline.</span></span></param>
        <summary><span data-ttu-id="d35a0-801">指定された <see cref="T:System.Threading.Tasks.Task" /> で <see cref="T:System.Threading.Tasks.TaskScheduler" /> を同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-801">Runs the <see cref="T:System.Threading.Tasks.Task" /> synchronously on the <see cref="T:System.Threading.Tasks.TaskScheduler" /> provided.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-802"><xref:System.Threading.Tasks.Task.RunSynchronously%2A> メソッドを呼び出すことによって実行されるタスクは、<xref:System.Threading.Tasks.Task> または <xref:System.Threading.Tasks.Task%601> クラスコンストラクターを呼び出すことによってインスタンス化されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-802">Tasks executed by calling the <xref:System.Threading.Tasks.Task.RunSynchronously%2A> method are instantiated by calling a <xref:System.Threading.Tasks.Task> or <xref:System.Threading.Tasks.Task%601> class constructor.</span></span> <span data-ttu-id="d35a0-803">同期的に実行するタスクは、<xref:System.Threading.Tasks.TaskStatus.Created> 状態である必要があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-803">The task to be run synchronously must be in the <xref:System.Threading.Tasks.TaskStatus.Created> state.</span></span> <span data-ttu-id="d35a0-804">タスクを開始して1回だけ実行することができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-804">A task may be started and run only once.</span></span> <span data-ttu-id="d35a0-805">タスクを2回目にスケジュールしようとすると、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-805">Any attempts to schedule a task a second time results in an exception.</span></span>  
  
 <span data-ttu-id="d35a0-806">ターゲットスケジューラが現在のスレッドでこのタスクの実行をサポートしていない場合は、タスクがスケジューラで実行されるようにスケジュールされ、現在のスレッドはタスクの実行が完了するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-806">If the target scheduler does not support running this task on the current thread, the task will be scheduled for execution on the scheduler, and the current thread will block until the task has completed execution.</span></span> <span data-ttu-id="d35a0-807">このため、呼び出し元のスレッドは、タスクが実行を完了したことを確認するために、<xref:System.Threading.Tasks.Task.Wait%2A> などのメソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-807">Because of this, the calling thread does not need to call a method such as <xref:System.Threading.Tasks.Task.Wait%2A> to ensure that the task has completed execution.</span></span> <span data-ttu-id="d35a0-808">タスク操作の例外処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-808">For more information on exception handling for task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-809"><see cref="T:System.Threading.Tasks.Task" /> インスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-809">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-810"><paramref name="scheduler" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-810">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d35a0-811"><see cref="T:System.Threading.Tasks.Task" /> は、開始する有効な状態にはありません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-811">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span></span> <span data-ttu-id="d35a0-812">既に開始、実行、またはキャンセルされたか、ダイレクト スケジューリングをサポートしない方法で作成された可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-812">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span></span></exception>
        <altmember cref="T:System.Threading.Tasks.TaskScheduler" />
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="d35a0-813">例外処理 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="d35a0-813">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d35a0-814"><see cref="T:System.Threading.Tasks.Task" /> を開始します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-814">Starts the <see cref="T:System.Threading.Tasks.Task" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="task.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d35a0-815">現在の <see cref="T:System.Threading.Tasks.Task" /> に <see cref="T:System.Threading.Tasks.TaskScheduler" /> の実行をスケジュールし、それを開始します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-815">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the current <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-816">タスクを開始して1回だけ実行することができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-816">A task may be started and run only once.</span></span> <span data-ttu-id="d35a0-817">タスクを2回目にスケジュールしようとすると、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-817">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="d35a0-818"><xref:System.Threading.Tasks.Task.Start%2A> は、<xref:System.Threading.Tasks.Task> コンストラクターのいずれかを呼び出すことによって作成されたタスクを実行するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-818">The <xref:System.Threading.Tasks.Task.Start%2A> is used to execute a task that has been created by calling one of the <xref:System.Threading.Tasks.Task> constructors.</span></span> <span data-ttu-id="d35a0-819">これは通常、作成したタスクを条件付きで実行する場合など、タスクの作成を実行から分離する必要がある場合に行います。</span><span class="sxs-lookup"><span data-stu-id="d35a0-819">Typically, you do this when you need to separate the task's creation from its execution, such as when you conditionally execute tasks that you've created.</span></span> <span data-ttu-id="d35a0-820">タスクのインスタンス化を実行から分離する必要がない一般的なケースの場合は、<xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> または <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> メソッドのオーバーロードを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-820">For the more common case in which you don't need to separate  task instantiation from execution, we recommend that you call an overload of the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.TaskFactory.StartNew%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="d35a0-821">タスク操作によってスローされる例外の処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-821">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-822">次の例では、<xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> コンストラクターを呼び出して、タスク ID とマネージスレッド ID を表示する新しい <xref:System.Threading.Tasks.Task> オブジェクトをインスタンス化し、ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-822">The following example calls the <xref:System.Threading.Tasks.Task.%23ctor%28System.Action%29> constructor to instantiate a new <xref:System.Threading.Tasks.Task> object that displays its task ID and managed thread ID and then executes a loop.</span></span> <span data-ttu-id="d35a0-823">次に、<xref:System.Threading.Tasks.Task.Start%2A> メソッドを呼び出してタスクを実行します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-823">It then calls the <xref:System.Threading.Tasks.Task.Start%2A> method to execute the task.</span></span>  <span data-ttu-id="d35a0-824">これはコンソールアプリであるため、タスクが実行を終了する前にアプリが終了しないようにするには、<xref:System.Threading.Tasks.Task.Wait%2A> メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-824">Since this is a console app, the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method is necessary to prevent the app from terminating before the task finishes execution.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Start#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.start/cs/Start1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Start#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.start/vb/Start1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-825"><see cref="T:System.Threading.Tasks.Task" /> インスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-825">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d35a0-826"><see cref="T:System.Threading.Tasks.Task" /> は、開始する有効な状態にはありません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-826">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span></span> <span data-ttu-id="d35a0-827">既に開始、実行、またはキャンセルされたか、ダイレクト スケジューリングをサポートしない方法で作成された可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-827">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="d35a0-828">例外処理 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="d35a0-828">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (System.Threading.Tasks.TaskScheduler scheduler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(class System.Threading.Tasks.TaskScheduler scheduler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (scheduler As TaskScheduler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(System::Threading::Tasks::TaskScheduler ^ scheduler);" />
      <MemberSignature Language="F#" Value="member this.Start : System.Threading.Tasks.TaskScheduler -&gt; unit" Usage="task.Start scheduler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scheduler" Type="System.Threading.Tasks.TaskScheduler" />
      </Parameters>
      <Docs>
        <param name="scheduler"><span data-ttu-id="d35a0-829">このタスクを関連付けて実行する <see cref="T:System.Threading.Tasks.TaskScheduler" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-829">The <see cref="T:System.Threading.Tasks.TaskScheduler" /> with which to associate and execute this task.</span></span></param>
        <summary><span data-ttu-id="d35a0-830">指定された <see cref="T:System.Threading.Tasks.Task" /> に <see cref="T:System.Threading.Tasks.TaskScheduler" /> の実行をスケジュールし、それを開始します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-830">Starts the <see cref="T:System.Threading.Tasks.Task" />, scheduling it for execution to the specified <see cref="T:System.Threading.Tasks.TaskScheduler" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-831">タスクを開始して実行できるのは一度だけです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-831">A task may only be started and run only once.</span></span> <span data-ttu-id="d35a0-832">タスクを2回目にスケジュールしようとすると、例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-832">Any attempts to schedule a task a second time will result in an exception.</span></span>  
  
 <span data-ttu-id="d35a0-833">タスク操作によってスローされる例外の処理の詳細については、「[例外処理](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-833">For information on handling exceptions thrown by task operations, see [Exception Handling](~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-834"><paramref name="scheduler" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-834">The <paramref name="scheduler" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d35a0-835"><see cref="T:System.Threading.Tasks.Task" /> は、開始する有効な状態にはありません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-835">The <see cref="T:System.Threading.Tasks.Task" /> is not in a valid state to be started.</span></span> <span data-ttu-id="d35a0-836">既に開始、実行、またはキャンセルされたか、ダイレクト スケジューリングをサポートしない方法で作成された可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-836">It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-837"><see cref="T:System.Threading.Tasks.Task" /> インスタンスは破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-837">The <see cref="T:System.Threading.Tasks.Task" /> instance has been disposed.</span></span></exception>
        <exception cref="T:System.Threading.Tasks.TaskSchedulerException"><span data-ttu-id="d35a0-838">スケジューラは、このタスクをキューに入れられませんでした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-838">The scheduler was unable to queue this task.</span></span></exception>
        <related type="Article" href="~/docs/standard/parallel-programming/exception-handling-task-parallel-library.md"><span data-ttu-id="d35a0-839">例外処理 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="d35a0-839">Exception Handling (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.TaskStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.Tasks.TaskStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As TaskStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::Tasks::TaskStatus Status { System::Threading::Tasks::TaskStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Threading.Tasks.TaskStatus" Usage="System.Threading.Tasks.Task.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.TaskStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-840">このタスクの <see cref="T:System.Threading.Tasks.TaskStatus" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-840">Gets the <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task.</span></span></summary>
        <value><span data-ttu-id="d35a0-841">このタスク インスタンスの現在の <see cref="T:System.Threading.Tasks.TaskStatus" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-841">The current <see cref="T:System.Threading.Tasks.TaskStatus" /> of this task instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-842"><xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> プロパティの値を取得しても、タスクが完了するまで呼び出し元のスレッドはブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-842">Retrieving the value of the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property does not block the calling thread until the task has completed.</span></span>  
  
 <span data-ttu-id="d35a0-843">詳細と例については、「[継続タスクを使用](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md)したタスクの連結」と「[方法: タスクとその子を取り消す](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-843">For more information and an example, see [Chaining Tasks by Using Continuation Tasks](~/docs/standard/parallel-programming/chaining-tasks-by-using-continuation-tasks.md) and [How to: Cancel a Task and Its Children](~/docs/standard/parallel-programming/how-to-cancel-a-task-and-its-children.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-844">次の例では、カウンターが200万の値にインクリメントされるまでループするタスクを20個作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-844">The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million.</span></span> <span data-ttu-id="d35a0-845">最初の10個のタスクが200万に達した場合、キャンセルトークンは取り消され、カウンターが200万に達していないすべてのタスクは取り消されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-845">When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled.</span></span> <span data-ttu-id="d35a0-846">この例では、各タスクの <xref:System.Threading.Tasks.Task.Status%2A> プロパティを調べて、正常に完了したか取り消されたかを示します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-846">The example then examines the <xref:System.Threading.Tasks.Task.Status%2A> property of each task to indicate whether it completed successfully or was cancelled.</span></span> <span data-ttu-id="d35a0-847">完了したものについては、タスクによって返された値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-847">For those that completed, it displays the value returned by the task.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Run#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.run/cs/Run7.cs#7)]
 [!code-vb[System.Threading.Tasks.Task.Run#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.run/vb/Run7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncWaitHandle">
      <MemberSignature Language="C#" Value="System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property AsyncWaitHandle As WaitHandle Implements IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="C++ CLI" Value="property System::Threading::WaitHandle ^ System::IAsyncResult::AsyncWaitHandle { System::Threading::WaitHandle ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.IAsyncResult.AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.AsyncWaitHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-848">タスクの完了を待機するために使用できる <see cref="T:System.Threading.WaitHandle" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-848">Gets a <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span></span></summary>
        <value><span data-ttu-id="d35a0-849">タスクの完了を待機するために使用できる <see cref="T:System.Threading.WaitHandle" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-849">A <see cref="T:System.Threading.WaitHandle" /> that can be used to wait for the task to complete.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-850"><xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> によって提供される待機機能を使用すると、同様の機能に <xref:System.IAsyncResult.AsyncWaitHandle%2A> を使用することをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-850">Using the wait functionality provided by <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> is preferable to using <xref:System.IAsyncResult.AsyncWaitHandle%2A> for similar functionality.</span></span> <span data-ttu-id="d35a0-851">詳細については、「[タスクベースの非同期プログラミング](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md)」の「タスクを待機中」と、[他の非同期パターンで TPL を使用する方法](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md)に関するセクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-851">For more information, see the "Waiting on Tasks" section in [Task-based Asynchronous Programming](~/docs/standard/parallel-programming/task-based-asynchronous-programming.md) and [Using TPL with Other Asynchronous Patterns](~/docs/standard/parallel-programming/using-tpl-with-other-asynchronous-patterns.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-852"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-852">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.CompletedSynchronously">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property CompletedSynchronously As Boolean Implements IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="C++ CLI" Value="property bool System::IAsyncResult::CompletedSynchronously { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.IAsyncResult.CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.IAsyncResult.CompletedSynchronously</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d35a0-853">操作が同期的に完了したかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-853">Gets an indication of whether the operation completed synchronously.</span></span></summary>
        <value><span data-ttu-id="d35a0-854">操作が同期的に完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-854"><see langword="true" /> if the operation completed synchronously; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Wait">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d35a0-855"><see cref="T:System.Threading.Tasks.Task" /> の実行が完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-855">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait" />
      <MemberSignature Language="VB.NET" Value="Public Sub Wait ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait();" />
      <MemberSignature Language="F#" Value="member this.Wait : unit -&gt; unit" Usage="task.Wait " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d35a0-856"><see cref="T:System.Threading.Tasks.Task" /> の実行が完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-856">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-857"><xref:System.Threading.Tasks.Task.Wait%2A> は、現在のタスクが完了するまで呼び出し元のスレッドを待機させる同期メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-857"><xref:System.Threading.Tasks.Task.Wait%2A> is a synchronization method that causes the calling thread to wait until the current task has completed.</span></span> <span data-ttu-id="d35a0-858">現在のタスクが実行を開始していない場合、Wait メソッドはスケジューラからタスクを削除し、現在のスレッドでインラインで実行しようとします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-858">If the current task has not started execution, the Wait method attempts to remove the task from the scheduler and execute it inline on the current thread.</span></span> <span data-ttu-id="d35a0-859">それができない場合、または現在のタスクが既に実行を開始している場合は、タスクが完了するまで呼び出し元のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-859">If it is unable to do that, or if the current task has already started execution, it blocks the calling thread until the task completes.</span></span> <span data-ttu-id="d35a0-860">詳細については、「.NET を使用した並列プログラミング」ブログの「 [Task. Wait」と「インライン展開」](https://devblogs.microsoft.com/pfxteam/task-wait-and-inlining/)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-860">For more information, see [Task.Wait and "Inlining"](https://devblogs.microsoft.com/pfxteam/task-wait-and-inlining/) in the Parallel Programming with .NET blog.</span></span>   
  
## Examples  
 <span data-ttu-id="d35a0-861">次の例では、0と100の間に100万のランダムな整数を生成し、その平均値を計算するタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-861">The following example starts a task that generates one million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="d35a0-862">この例では、<xref:System.Threading.Tasks.Task.Wait%2A> メソッドを使用して、アプリケーションが終了する前にタスクが完了するようにします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-862">The example uses the <xref:System.Threading.Tasks.Task.Wait%2A> method to ensure that the task completes before the application terminates.</span></span> <span data-ttu-id="d35a0-863">それ以外の場合、これはコンソールアプリケーションであるため、この例はタスクが計算して平均値を表示する前に終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-863">Otherwise, because this is a console application, the example would terminate before the task can compute and display the mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.Wait#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-864"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-864">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="d35a0-865">タスクが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-865">The task was canceled.</span></span> <span data-ttu-id="d35a0-866"><see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.Threading.Tasks.TaskCanceledException" /> オブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-866">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span></span>  
  
<span data-ttu-id="d35a0-867">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-867">-or-</span></span> 
<span data-ttu-id="d35a0-868">タスクの実行時に例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-868">An exception was thrown during the execution of the task.</span></span> <span data-ttu-id="d35a0-869"><see cref="P:System.AggregateException.InnerExceptions" /> コレクションには、例外に関する情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-869">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span></span></exception>
        <related type="ExternalDocumentation" href="https://devblogs.microsoft.com/pfxteam/task-wait-and-inlining/"><span data-ttu-id="d35a0-870">タスク。待機と "インライン展開"</span><span class="sxs-lookup"><span data-stu-id="d35a0-870">Task.Wait and "Inlining"</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : int -&gt; bool" Usage="task.Wait millisecondsTimeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="d35a0-871">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="d35a0-871">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="d35a0-872">提供された <see cref="T:System.Threading.Tasks.Task" /> の実行が完了するまで、指定したミリ秒数以内の間、待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-872">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified number of milliseconds.</span></span></summary>
        <returns><span data-ttu-id="d35a0-873">割り当てられた時間内に <see langword="true" /> の実行が完了した場合は <see cref="T:System.Threading.Tasks.Task" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-873"><see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-874"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> は、次のいずれかが発生するまで、呼び出し元のスレッドが現在のタスクインスタンスの完了を待機する同期メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-874"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="d35a0-875">タスクが正常に完了しました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-875">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="d35a0-876">タスク自体が取り消されたか、例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-876">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="d35a0-877">この場合、<xref:System.AggregateException> 例外を処理します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-877">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="d35a0-878"><xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> プロパティには、例外または例外の詳細が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-878">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="d35a0-879">`millisecondsTimeout` によって定義された間隔が経過した。</span><span class="sxs-lookup"><span data-stu-id="d35a0-879">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="d35a0-880">この場合、現在のスレッドは実行を再開し、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-880">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-881">次の例では、0と100の間に500万のランダムな整数を生成し、その平均値を計算するタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-881">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="d35a0-882">この例では、<xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> メソッドを使用して、アプリケーションが150ミリ秒以内に完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-882">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="d35a0-883">アプリケーションが正常に完了した場合、タスクでは、生成された乱数の合計と平均が表示されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-883">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="d35a0-884">タイムアウト間隔が経過した場合、この例ではメッセージが終了する前に表示されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-884">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait5.cs#5)]
 [!code-vb[System.Threading.Tasks.Task.Wait#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-885"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-885">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-886"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-886"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="d35a0-887">タスクが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-887">The task was canceled.</span></span> <span data-ttu-id="d35a0-888"><see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.Threading.Tasks.TaskCanceledException" /> オブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-888">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span></span>  
  
<span data-ttu-id="d35a0-889">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-889">-or-</span></span> 
<span data-ttu-id="d35a0-890">タスクの実行時に例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-890">An exception was thrown during the execution of the task.</span></span> <span data-ttu-id="d35a0-891"><see cref="P:System.AggregateException.InnerExceptions" /> コレクションには、例外に関する情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-891">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public void Wait (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Wait(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Wait(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : System.Threading.CancellationToken -&gt; unit" Usage="task.Wait cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"><span data-ttu-id="d35a0-892">タスクの完了の待機中に観察するキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="d35a0-892">A cancellation token to observe while waiting for the task to complete.</span></span></param>
        <summary><span data-ttu-id="d35a0-893"><see cref="T:System.Threading.Tasks.Task" /> の実行が完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-893">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span></span> <span data-ttu-id="d35a0-894">タスクの完了前にキャンセル トークンが取り消される場合は、待機が終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-894">The wait terminates if a cancellation token is canceled before the task completes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-895"><xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> メソッドは、キャンセル可能な待機を作成します。つまり、次のいずれかが発生するまで、現在のスレッドは待機状態になります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-895">The <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method creates a cancelable wait; that is, it causes the current thread to wait until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="d35a0-896">タスクが完了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-896">The task completes.</span></span>  
  
-   <span data-ttu-id="d35a0-897">キャンセルトークンが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-897">The cancellation token is canceled.</span></span> <span data-ttu-id="d35a0-898">この場合、<xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> メソッドを呼び出すと、<xref:System.OperationCanceledException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-898">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d35a0-899">キャンセルトークンがキャンセルトークンに渡され、キャンセルを処理できるように準備されている場合を除き、`cancellationToken` キャンセルトークンをキャンセルしても、実行中のタスクには影響しません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-899">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="d35a0-900">`cancellationToken` オブジェクトをこのメソッドに渡すだけで、待機を取り消すことができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-900">Passing the `cancellationToken` object to this method simply allows the wait to be canceled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-901">次の例では、キャンセルトークンを使用してタスクの完了を待機する方法を簡単に説明します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-901">The following example illustrates the simple use of a cancellation token to cancel waiting for a task's completion.</span></span> <span data-ttu-id="d35a0-902">タスクが起動され、<xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> メソッドを呼び出してトークンソースのキャンセルトークンをキャンセルし、5秒間遅延します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-902">A task is launched, calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel any of the token source's cancellation tokens, and then delays for five seconds.</span></span> <span data-ttu-id="d35a0-903">タスク自体にキャンセルトークンが渡されておらず、キャンセルできないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-903">Note that the task itself has not been passed the cancellation token and is not cancelable.</span></span> <span data-ttu-id="d35a0-904">アプリケーションスレッドはタスクの <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> メソッドを呼び出してタスクの完了を待機しますが、キャンセルトークンが取り消され、<xref:System.OperationCanceledException> がスローされると待機がキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-904">The application thread calls the task's <xref:System.Threading.Tasks.Task.Wait%2A?displayProperty=nameWithType> method to wait for the task to complete, but the wait is canceled once the cancellation token is cancelled and an <xref:System.OperationCanceledException> is thrown.</span></span> <span data-ttu-id="d35a0-905">例外ハンドラーは例外を報告し、6秒間スリープします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-905">The exception handler reports the exception and then sleeps for six seconds.</span></span> <span data-ttu-id="d35a0-906">この例の出力に示されているように、この遅延により、タスクは <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態で完了できます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-906">As the output from the example shows, that delay allows the task to complete in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.Wait#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="d35a0-907"><paramref name="cancellationToken" /> は取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-907">The <paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-908">タスクが破棄されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-908">The task has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="d35a0-909">タスクが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-909">The task was canceled.</span></span> <span data-ttu-id="d35a0-910"><see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.Threading.Tasks.TaskCanceledException" /> オブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-910">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span></span>  
  
<span data-ttu-id="d35a0-911">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-911">-or-</span></span> 
<span data-ttu-id="d35a0-912">タスクの実行時に例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-912">An exception was thrown during the execution of the task.</span></span> <span data-ttu-id="d35a0-913"><see cref="P:System.AggregateException.InnerExceptions" /> コレクションには、例外に関する情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-913">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Wait (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Wait : TimeSpan -&gt; bool" Usage="task.Wait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="d35a0-914">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-914">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="d35a0-915">提供された <see cref="T:System.Threading.Tasks.Task" /> の実行が完了するまで、指定した時間間隔内の間、待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-915">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution within a specified time interval.</span></span></summary>
        <returns><span data-ttu-id="d35a0-916">割り当てられた時間内に <see langword="true" /> の実行が完了した場合は <see cref="T:System.Threading.Tasks.Task" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-916"><see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-917"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> は、次のいずれかが発生するまで、呼び出し元のスレッドが現在のタスクインスタンスの完了を待機する同期メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-917"><xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="d35a0-918">タスクが正常に完了しました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-918">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="d35a0-919">タスク自体が取り消されたか、例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-919">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="d35a0-920">この場合、<xref:System.AggregateException> 例外を処理します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-920">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="d35a0-921"><xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> プロパティには、例外または例外の詳細が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-921">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="d35a0-922">`timeout` によって定義された間隔が経過した。</span><span class="sxs-lookup"><span data-stu-id="d35a0-922">The interval defined by `timeout` elapses.</span></span> <span data-ttu-id="d35a0-923">この場合、現在のスレッドは実行を再開し、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-923">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-924">次の例では、0と100の間に500万のランダムな整数を生成し、その平均値を計算するタスクを開始します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-924">The following example starts a task that generates five million random integers between 0 and 100 and computes their mean.</span></span> <span data-ttu-id="d35a0-925">この例では、<xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> メソッドを使用して、アプリケーションが150ミリ秒以内に完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-925">The example uses the <xref:System.Threading.Tasks.Task.Wait%28System.TimeSpan%29> method to wait for the application to complete within 150 milliseconds.</span></span> <span data-ttu-id="d35a0-926">アプリケーションが正常に完了した場合、タスクでは、生成された乱数の合計と平均が表示されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-926">If the application completes normally, the task displays the sum and mean of the random numbers that it has generated.</span></span> <span data-ttu-id="d35a0-927">タイムアウト間隔が経過した場合、この例ではメッセージが終了する前に表示されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-927">If the timeout interval has elapsed, the example displays a message before it terminates.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/Wait6.cs#6)]
 [!code-vb[System.Threading.Tasks.Task.Wait#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/Wait6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-928"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-928">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-929"><paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-929"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="d35a0-930">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-930">-or-</span></span> 
 <span data-ttu-id="d35a0-931"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-931"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="d35a0-932">タスクが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-932">The task was canceled.</span></span> <span data-ttu-id="d35a0-933"><see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.Threading.Tasks.TaskCanceledException" /> オブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-933">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span></span>  
  
<span data-ttu-id="d35a0-934">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-934">-or-</span></span> 
<span data-ttu-id="d35a0-935">タスクの実行時に例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-935">An exception was thrown during the execution of the task.</span></span> <span data-ttu-id="d35a0-936"><see cref="P:System.AggregateException.InnerExceptions" /> コレクションには、例外に関する情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-936">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="member this.Wait : int * System.Threading.CancellationToken -&gt; bool" Usage="task.Wait (millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="d35a0-937">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="d35a0-937">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-938">タスクの完了の待機中に観察するキャンセル トークン。</span><span class="sxs-lookup"><span data-stu-id="d35a0-938">A cancellation token to observe while waiting for the task to complete.</span></span></param>
        <summary><span data-ttu-id="d35a0-939"><see cref="T:System.Threading.Tasks.Task" /> の実行が完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-939">Waits for the <see cref="T:System.Threading.Tasks.Task" /> to complete execution.</span></span> <span data-ttu-id="d35a0-940">タスクの完了前に、タイムアウト期間が経過するか、キャンセル トークンが取り消される場合には、待機が終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-940">The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes.</span></span></summary>
        <returns><span data-ttu-id="d35a0-941">割り当てられた時間内に <see langword="true" /> の実行が完了した場合は <see cref="T:System.Threading.Tasks.Task" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-941"><see langword="true" /> if the <see cref="T:System.Threading.Tasks.Task" /> completed execution within the allotted time; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-942"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> は、次のいずれかが発生するまで、呼び出し元のスレッドが現在のタスクインスタンスの完了を待機する同期メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-942"><xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> is a synchronization method that causes the calling thread to wait for the current task instance to complete until one of the following occurs:</span></span>  
  
-   <span data-ttu-id="d35a0-943">タスクが正常に完了しました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-943">The task completes successfully.</span></span>  
  
-   <span data-ttu-id="d35a0-944">タスク自体が取り消されたか、例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-944">The task itself is canceled or throws an exception.</span></span> <span data-ttu-id="d35a0-945">この場合、<xref:System.AggregateException> 例外を処理します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-945">In this case, you handle an <xref:System.AggregateException> exception.</span></span> <span data-ttu-id="d35a0-946"><xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> プロパティには、例外または例外の詳細が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-946">The <xref:System.AggregateException.InnerExceptions%2A?displayProperty=nameWithType> property contains details about the exception or exceptions.</span></span>  
  
-   <span data-ttu-id="d35a0-947">`cancellationToken` キャンセルトークンが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-947">The `cancellationToken` cancellation token is canceled.</span></span> <span data-ttu-id="d35a0-948">この場合、<xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> メソッドを呼び出すと、<xref:System.OperationCanceledException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-948">In this case, the call to the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method throws an <xref:System.OperationCanceledException>.</span></span>  
  
-   <span data-ttu-id="d35a0-949">`millisecondsTimeout` によって定義された間隔が経過した。</span><span class="sxs-lookup"><span data-stu-id="d35a0-949">The interval defined by `millisecondsTimeout` elapses.</span></span> <span data-ttu-id="d35a0-950">この場合、現在のスレッドは実行を再開し、メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-950">In this case, the current thread resumes execution and the method returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d35a0-951">キャンセルトークンがキャンセルトークンに渡され、キャンセルを処理できるように準備されている場合を除き、`cancellationToken` キャンセルトークンをキャンセルしても、実行中のタスクには影響しません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-951">Canceling the `cancellationToken` cancellation token has no effect on the running task unless it has also been passed the cancellation token and is prepared to handle cancellation.</span></span> <span data-ttu-id="d35a0-952">`cancellationToken` オブジェクトをこのメソッドに渡すだけで、何らかの条件に基づいて待機を取り消すことができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-952">Passing the `cancellationToken` object to this method simply allows the wait to be canceled based on some condition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-953">次の例では、<xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> メソッドを呼び出して、タイムアウト値と、タスクの完了の待機を終了できるキャンセルトークンの両方を提供しています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-953">The following example calls the <xref:System.Threading.Tasks.Task.Wait%28System.Int32%2CSystem.Threading.CancellationToken%29> method to provide both a timeout value and a cancellation token that can end the wait for a task's completion.</span></span> <span data-ttu-id="d35a0-954">新しいスレッドが開始され、`CancelToken` メソッドを実行します。このメソッドは、一時停止し、<xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> メソッドを呼び出してキャンセルトークンをキャンセルします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-954">A new thread is started and executes the `CancelToken` method, which pauses and then calls the <xref:System.Threading.CancellationTokenSource.Cancel%2A?displayProperty=nameWithType> method to cancel the cancellation tokens.</span></span> <span data-ttu-id="d35a0-955">タスクが起動され、5秒間遅延します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-955">A task is then launched and delays for 5 seconds.</span></span> <span data-ttu-id="d35a0-956">次に、<xref:System.Threading.Tasks.Task.Wait%2A> メソッドを呼び出してタスクの完了を待機し、短いタイムアウト値とキャンセルトークンの両方を提供します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-956">The <xref:System.Threading.Tasks.Task.Wait%2A> method is then called to wait for the task's completion and is provided both a brief timeout value and a cancellation token.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.wait/cs/wait4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.Wait#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.wait/vb/wait4.vb#4)]  
  
 <span data-ttu-id="d35a0-957">この例の正確な出力は、キャンセルトークンによって、またはタイムアウト間隔が経過したために待機がキャンセルされたかどうかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-957">Note that the precise output from the example depends on whether the wait was canceled because of the cancellation token or because the timeout interval elapsed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="d35a0-958"><paramref name="cancellationToken" /> は取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-958">The <paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-959"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-959">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-960"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-960"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="d35a0-961">タスクが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-961">The task was canceled.</span></span> <span data-ttu-id="d35a0-962"><see cref="P:System.AggregateException.InnerExceptions" /> コレクションに <see cref="T:System.Threading.Tasks.TaskCanceledException" /> オブジェクトが含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-962">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains a <see cref="T:System.Threading.Tasks.TaskCanceledException" /> object.</span></span>  
  
<span data-ttu-id="d35a0-963">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-963">-or-</span></span> 
<span data-ttu-id="d35a0-964">タスクの実行時に例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-964">An exception was thrown during the execution of the task.</span></span> <span data-ttu-id="d35a0-965"><see cref="P:System.AggregateException.InnerExceptions" /> コレクションには、例外に関する情報が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-965">The <see cref="P:System.AggregateException.InnerExceptions" /> collection contains information about the exception or exceptions.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d35a0-966">指定したすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-966">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitAll (ParamArray tasks As Task())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] -&gt; unit" Usage="System.Threading.Tasks.Task.WaitAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-967">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="d35a0-967">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <summary><span data-ttu-id="d35a0-968">指定したすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-968">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d35a0-969">次の例では、10個のタスクを開始します。各タスクには、状態オブジェクトとしてインデックスが渡されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-969">The following example starts 10 tasks, each of which is passed an index as a state object.</span></span> <span data-ttu-id="d35a0-970">2 ~ 5 のインデックスを持つタスクは、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-970">Tasks with an index from two to five throw exceptions.</span></span> <span data-ttu-id="d35a0-971"><xref:System.Threading.Tasks.Task.WaitAll%2A> メソッドを呼び出すと、すべての例外が <xref:System.AggregateException> オブジェクトにラップされ、呼び出し元のスレッドに反映されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-971">The call to the <xref:System.Threading.Tasks.Task.WaitAll%2A> method wraps all exceptions in an <xref:System.AggregateException> object and propagates it to the calling thread.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task/cs/waitall.cs#02)]
 [!code-vb[System.Threading.Tasks.Task#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task/vb/waitall.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-972"><see cref="T:System.Threading.Tasks.Task" /> の <paramref name="tasks" /> オブジェクトが 1 つ以上破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-972">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-973"><paramref name="tasks" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-973">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-974"><paramref name="tasks" /> 引数に NULL 要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-974">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="d35a0-975">少なくとも 1 つ以上の <see cref="T:System.Threading.Tasks.Task" /> インスタンスが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-975">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span></span> <span data-ttu-id="d35a0-976">タスクが取り消された場合は、<see cref="T:System.AggregateException" /> 例外の <see cref="T:System.OperationCanceledException" /> コレクションに <see cref="P:System.AggregateException.InnerExceptions" /> 例外が格納されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-976">If a task was canceled, the <see cref="T:System.AggregateException" /> exception contains an <see cref="T:System.OperationCanceledException" /> exception in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span></span>  
  
<span data-ttu-id="d35a0-977">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-977">-or-</span></span> 
<span data-ttu-id="d35a0-978">少なくとも 1 つの <see cref="T:System.Threading.Tasks.Task" /> インスタンスの実行時に、例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-978">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), millisecondsTimeout As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * int -&gt; bool" Usage="System.Threading.Tasks.Task.WaitAll (tasks, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-979">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="d35a0-979">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="d35a0-980">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="d35a0-980">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="d35a0-981">提供されたすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで、指定したミリ秒数以内の間、待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-981">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span></span></summary>
        <returns><span data-ttu-id="d35a0-982">割り当てられた時間内に <see langword="true" /> インスタンスすべての実行が完了した場合は <see cref="T:System.Threading.Tasks.Task" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-982"><see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-983"><see cref="T:System.Threading.Tasks.Task" /> の <paramref name="tasks" /> オブジェクトが 1 つ以上破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-983">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-984"><paramref name="tasks" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-984">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="d35a0-985">少なくとも 1 つ以上の <see cref="T:System.Threading.Tasks.Task" /> インスタンスが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-985">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span></span> <span data-ttu-id="d35a0-986">タスクが取り消された場合は、<see cref="T:System.AggregateException" /> の <see cref="T:System.OperationCanceledException" /> コレクションに <see cref="P:System.AggregateException.InnerExceptions" /> が格納されます</span><span class="sxs-lookup"><span data-stu-id="d35a0-986">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span></span>  
  
<span data-ttu-id="d35a0-987">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-987">-or-</span></span> 
<span data-ttu-id="d35a0-988">少なくとも 1 つの <see cref="T:System.Threading.Tasks.Task" /> インスタンスの実行時に、例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-988">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-989"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-989"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-990"><paramref name="tasks" /> 引数に NULL 要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-990">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static void WaitAll (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * System.Threading.CancellationToken -&gt; unit" Usage="System.Threading.Tasks.Task.WaitAll (tasks, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-991">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="d35a0-991">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-992">タスクの完了を待機しているときに観察する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-992">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span></span></param>
        <summary><span data-ttu-id="d35a0-993">待機が取り消されない限り、指定したすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-993">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-994">`cancellationToken` 引数は、待機操作を取り消すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-994">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="d35a0-995">タスクの取り消しは個別の操作であり、前述のように <xref:System.AggregateException> によって通知されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-995">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> as noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="d35a0-996"><paramref name="cancellationToken" /> は取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-996">The <paramref name="cancellationToken" /> was canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-997"><paramref name="tasks" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-997">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="d35a0-998">少なくとも 1 つ以上の <see cref="T:System.Threading.Tasks.Task" /> インスタンスが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-998">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span></span> <span data-ttu-id="d35a0-999">タスクが取り消された場合は、<see cref="T:System.AggregateException" /> の <see cref="T:System.OperationCanceledException" /> コレクションに <see cref="P:System.AggregateException.InnerExceptions" /> が格納されます</span><span class="sxs-lookup"><span data-stu-id="d35a0-999">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span></span>  
  
<span data-ttu-id="d35a0-1000">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-1000">-or-</span></span> 
<span data-ttu-id="d35a0-1001">少なくとも 1 つの <see cref="T:System.Threading.Tasks.Task" /> インスタンスの実行時に、例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1001">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1002"><paramref name="tasks" /> 引数に NULL 要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1002">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-1003"><see cref="T:System.Threading.Tasks.Task" /> の <paramref name="tasks" /> オブジェクトが 1 つ以上破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1003">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAll (tasks As Task(), timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * TimeSpan -&gt; bool" Usage="System.Threading.Tasks.Task.WaitAll (tasks, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-1004">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1004">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="d35a0-1005">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1005">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="d35a0-1006">提供されたすべてのキャンセル可能な <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで、指定した時間間隔の間、待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1006">Waits for all of the provided cancellable <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1007">割り当てられた時間内に <see langword="true" /> インスタンスすべての実行が完了した場合は <see cref="T:System.Threading.Tasks.Task" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1007"><see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-1008"><see cref="T:System.Threading.Tasks.Task" /> の <paramref name="tasks" /> オブジェクトが 1 つ以上破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1008">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1009"><paramref name="tasks" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1009">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="d35a0-1010">少なくとも 1 つ以上の <see cref="T:System.Threading.Tasks.Task" /> インスタンスが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1010">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span></span> <span data-ttu-id="d35a0-1011">タスクが取り消された場合は、<see cref="T:System.AggregateException" /> の <see cref="T:System.OperationCanceledException" /> コレクションに <see cref="P:System.AggregateException.InnerExceptions" /> が格納されます</span><span class="sxs-lookup"><span data-stu-id="d35a0-1011">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span></span>  
  
<span data-ttu-id="d35a0-1012">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-1012">-or-</span></span> 
<span data-ttu-id="d35a0-1013">少なくとも 1 つの <see cref="T:System.Threading.Tasks.Task" /> インスタンスの実行時に、例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1013">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-1014"><paramref name="timeout" /> は無限のタイムアウトを表す -1 ミリ秒以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1014"><paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out.</span></span> 
<span data-ttu-id="d35a0-1015">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-1015">-or-</span></span> 
 <span data-ttu-id="d35a0-1016"><paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1016"><paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1017"><paramref name="tasks" /> 引数に NULL 要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1017">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAll">
      <MemberSignature Language="C#" Value="public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WaitAll(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool WaitAll(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAll : System.Threading.Tasks.Task[] * int * System.Threading.CancellationToken -&gt; bool" Usage="System.Threading.Tasks.Task.WaitAll (tasks, millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-1018">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1018">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="d35a0-1019">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1019">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-1020">タスクの完了を待機しているときに観察する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1020">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for the tasks to complete.</span></span></param>
        <summary><span data-ttu-id="d35a0-1021">指定したミリ秒数まで、または待機が取り消されるまで、提供されたすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するのを待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1021">Waits for all of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1022">割り当てられた時間内に <see langword="true" /> インスタンスすべての実行が完了した場合は <see cref="T:System.Threading.Tasks.Task" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1022"><see langword="true" /> if all of the <see cref="T:System.Threading.Tasks.Task" /> instances completed execution within the allotted time; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-1023">`cancellationToken` 引数は、待機操作を取り消すために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1023">The `cancellationToken` argument is used to cancel the wait operation.</span></span> <span data-ttu-id="d35a0-1024">タスクの取り消しは個別の操作であり、上記の <xref:System.AggregateException> によって通知されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1024">Cancellation of the tasks is a distinct operation, and is signaled by the <xref:System.AggregateException> noted above.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-1025"><see cref="T:System.Threading.Tasks.Task" /> の <paramref name="tasks" /> オブジェクトが 1 つ以上破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1025">One or more of the <see cref="T:System.Threading.Tasks.Task" /> objects in <paramref name="tasks" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1026"><paramref name="tasks" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1026">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="d35a0-1027">少なくとも 1 つ以上の <see cref="T:System.Threading.Tasks.Task" /> インスタンスが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1027">At least one of the <see cref="T:System.Threading.Tasks.Task" /> instances was canceled.</span></span> <span data-ttu-id="d35a0-1028">タスクが取り消された場合は、<see cref="T:System.AggregateException" /> の <see cref="T:System.OperationCanceledException" /> コレクションに <see cref="P:System.AggregateException.InnerExceptions" /> が格納されます</span><span class="sxs-lookup"><span data-stu-id="d35a0-1028">If a task was canceled, the <see cref="T:System.AggregateException" /> contains an <see cref="T:System.OperationCanceledException" /> in its <see cref="P:System.AggregateException.InnerExceptions" /> collection.</span></span>  
  
<span data-ttu-id="d35a0-1029">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-1029">-or-</span></span> 
<span data-ttu-id="d35a0-1030">少なくとも 1 つの <see cref="T:System.Threading.Tasks.Task" /> インスタンスの実行時に、例外がスローされました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1030">An exception was thrown during the execution of at least one of the <see cref="T:System.Threading.Tasks.Task" /> instances.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-1031"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1031"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1032"><paramref name="tasks" /> 引数に NULL 要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1032">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="d35a0-1033"><paramref name="cancellationToken" /> は取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1033">The <paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d35a0-1034">指定したいずれかの <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1034">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (ParamArray tasks As Task()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-1035">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1035">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <summary><span data-ttu-id="d35a0-1036">指定したいずれかの <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1036">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1037"><see cref="T:System.Threading.Tasks.Task" /> 配列内の完了した <paramref name="tasks" /> オブジェクトのインデックス。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1037">The index of the completed <see cref="T:System.Threading.Tasks.Task" /> object in the <paramref name="tasks" /> array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d35a0-1038">次の例では、5つのタスクを起動します。各タスクは最低50ミリ秒、または最大1050ミリ秒間スリープします。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1038">The following example launches five tasks, each of which sleeps for a minimum of 50 milliseconds or a maximum of 1,050 milliseconds.</span></span> <span data-ttu-id="d35a0-1039"><xref:System.Threading.Tasks.Task.WaitAny%2A> メソッドは、いずれかのタスクが完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1039">The <xref:System.Threading.Tasks.Task.WaitAny%2A> method then waits for any of the tasks to complete.</span></span> <span data-ttu-id="d35a0-1040">この例では、待機を終了したタスクのタスク ID と、すべてのタスクの現在の状態が表示されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1040">The example displays the task ID of the task that ended the wait, as well as the current status of all the tasks.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/cs/WaitAny1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WaitAny#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Threading.Tasks.Task.WaitAny/vb/WaitAny1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-1041"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1041">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1042"><paramref name="tasks" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1042">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1043"><paramref name="tasks" /> 引数に NULL 要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1043">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), millisecondsTimeout As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * int -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, millisecondsTimeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-1044">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1044">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="d35a0-1045">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1045">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="d35a0-1046">提供されたいずれかの <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで、指定したミリ秒数以内の間、待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1046">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1047"><paramref name="tasks" /> 配列引数内の完了したタスクのインデックス。タイムアウトが発生した場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1047">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-1048"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1048">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1049"><paramref name="tasks" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1049">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-1050"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1050"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1051"><paramref name="tasks" /> 引数に NULL 要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1051">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * System.Threading.CancellationToken -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-1052">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1052">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-1053">タスクの完了を待機しているときに監視する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1053">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span></span></param>
        <summary><span data-ttu-id="d35a0-1054">待機が取り消されない限り、指定したいずれかの <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1054">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution unless the wait is cancelled.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1055"><paramref name="tasks" /> 配列引数内の完了したタスクのインデックス。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1055">The index of the completed task in the <paramref name="tasks" /> array argument.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-1056"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1056">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1057"><paramref name="tasks" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1057">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1058"><paramref name="tasks" /> 引数に NULL 要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1058">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="d35a0-1059"><paramref name="cancellationToken" /> は取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1059">The <paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitAny (tasks As Task(), timeout As TimeSpan) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * TimeSpan -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-1060">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1060">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="timeout"><span data-ttu-id="d35a0-1061">待機するミリ秒数を表す <see cref="T:System.TimeSpan" />。無制限に待機する場合は、-1 ミリ秒を表す <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1061">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a <see cref="T:System.TimeSpan" /> that represents -1 milliseconds to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="d35a0-1062">提供されたいずれかの <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するまで、指定した時間間隔内の間、待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1062">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified time interval.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1063"><paramref name="tasks" /> 配列引数内の完了したタスクのインデックス。タイムアウトが発生した場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1063">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-1064"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1064">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1065"><paramref name="tasks" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1065">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-1066"><see cref="P:System.TimeSpan.TotalMilliseconds" /> 引数の <paramref name="timeout" /> プロパティは、-1 (無制限のタイムアウトを表す) 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1066">The <see cref="P:System.TimeSpan.TotalMilliseconds" /> property of the <paramref name="timeout" /> argument is a negative number other than -1, which represents an infinite time-out.</span></span> 
<span data-ttu-id="d35a0-1067">または</span><span class="sxs-lookup"><span data-stu-id="d35a0-1067">-or-</span></span> 
<span data-ttu-id="d35a0-1068"><see cref="P:System.TimeSpan.TotalMilliseconds" /> 引数の <paramref name="timeout" /> プロパティが <see cref="F:System.Int32.MaxValue" /> より大きい値です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1068">The <see cref="P:System.TimeSpan.TotalMilliseconds" /> property of the <paramref name="timeout" /> argument is greater than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1069"><paramref name="tasks" /> 引数に NULL 要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1069">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WaitAny">
      <MemberSignature Language="C#" Value="public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 WaitAny(class System.Threading.Tasks.Task[] tasks, int32 millisecondsTimeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int WaitAny(cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks, int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member WaitAny : System.Threading.Tasks.Task[] * int * System.Threading.CancellationToken -&gt; int" Usage="System.Threading.Tasks.Task.WaitAny (tasks, millisecondsTimeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" />
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-1070">待機する <see cref="T:System.Threading.Tasks.Task" /> インスタンスの配列。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1070">An array of <see cref="T:System.Threading.Tasks.Task" /> instances on which to wait.</span></span></param>
        <param name="millisecondsTimeout"><span data-ttu-id="d35a0-1071">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1071">The number of milliseconds to wait, or <see cref="F:System.Threading.Timeout.Infinite" /> (-1) to wait indefinitely.</span></span></param>
        <param name="cancellationToken"><span data-ttu-id="d35a0-1072">タスクの完了を待機しているときに監視する <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1072">A <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> to observe while waiting for a task to complete.</span></span></param>
        <summary><span data-ttu-id="d35a0-1073">指定したミリ秒数まで、または待機トークンが取り消されるまで、提供されたいずれかの <see cref="T:System.Threading.Tasks.Task" /> オブジェクトの実行が完了するのを待機します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1073">Waits for any of the provided <see cref="T:System.Threading.Tasks.Task" /> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1074"><paramref name="tasks" /> 配列引数内の完了したタスクのインデックス。タイムアウトが発生した場合は -1。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1074">The index of the completed task in the <paramref name="tasks" /> array argument, or -1 if the timeout occurred.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="d35a0-1075"><see cref="T:System.Threading.Tasks.Task" /> は破棄されています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1075">The <see cref="T:System.Threading.Tasks.Task" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1076"><paramref name="tasks" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1076">The <paramref name="tasks" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d35a0-1077"><paramref name="millisecondsTimeout" /> は無限のタイムアウトを表す -1 以外の負の数です。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1077"><paramref name="millisecondsTimeout" /> is a negative number other than -1, which represents an infinite time-out.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1078"><paramref name="tasks" /> 引数に NULL 要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1078">The <paramref name="tasks" /> argument contains a null element.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="d35a0-1079"><paramref name="cancellationToken" /> は取り消されました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1079">The <paramref name="cancellationToken" /> was canceled.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAll">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d35a0-1080">指定されたすべてのタスクが完了してから完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1080">Creates a task that will complete when all of the supplied tasks have completed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (tasks As IEnumerable(Of Task)) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : seq&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-1081">完了を待機するタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1081">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="d35a0-1082">列挙可能なコレクション内のすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトが完了したときに完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1082">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an enumerable collection have completed.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1083">指定されたすべてのタスクの完了を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1083">A task that represents the completion of all of the supplied tasks.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-1084"><xref:System.Threading.Tasks.Task> オブジェクトを返す <xref:System.Threading.Tasks.Task.WhenAll%2A> メソッドのオーバーロードは、通常、一連のタスクの状態または一連のタスクによってスローされた例外に関心がある場合に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1084">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d35a0-1085"><xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> メソッドを呼び出すと、呼び出し元のスレッドがブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1085">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="d35a0-1086">指定されたいずれかのタスクが faulted 状態で完了した場合、返されたタスクも <xref:System.Threading.Tasks.TaskStatus.Faulted> 状態で完了します。この場合、例外には、指定された各タスクからのラップされていない一連の例外の集計が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1086">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state,  where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="d35a0-1087">指定されたタスクがいずれも失敗しても、そのうち少なくとも1つが取り消された場合、返されたタスクは <xref:System.Threading.Tasks.TaskStatus.Canceled> 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1087">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="d35a0-1088">タスクにエラーが発生しておらず、どのタスクも取り消されなかった場合、結果として得られるタスクは <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1088">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="d35a0-1089">指定した配列または列挙可能なにタスクが含まれていない場合、返されたタスクは、呼び出し元に返される前に、直ちに <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態に遷移します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1089">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-1090">次の例では、配列内の Url に ping を行う一連のタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1090">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="d35a0-1091">タスクは、<xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> メソッドに渡される `List<Task>` コレクションに格納されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1091">The tasks are stored in a `List<Task>` collection that is passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="d35a0-1092"><xref:System.Threading.Tasks.Task.Wait%2A> メソッドを呼び出してすべてのスレッドが完了したことを確認した後、この例では <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> プロパティを調べて、いずれかのタスクが失敗したかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1092">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll4.cs#4)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1093"><paramref name="tasks" /> 引数が <see langword="null" /> でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1093">The <paramref name="tasks" /> argument was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1094"><paramref name="tasks" /> コレクションに <see langword="null" /> タスクが含まれていました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1094">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task WhenAll (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task WhenAll(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll (ParamArray tasks As Task()) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : System.Threading.Tasks.Task[] -&gt; System.Threading.Tasks.Task" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-1095">完了を待機するタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1095">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="d35a0-1096">配列内のすべての <see cref="T:System.Threading.Tasks.Task" /> オブジェクトが完了したときに完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1096">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task" /> objects in an array have completed.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1097">指定されたすべてのタスクの完了を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1097">A task that represents the completion of all of the supplied tasks.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-1098"><xref:System.Threading.Tasks.Task> オブジェクトを返す <xref:System.Threading.Tasks.Task.WhenAll%2A> メソッドのオーバーロードは、通常、一連のタスクの状態または一連のタスクによってスローされた例外に関心がある場合に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1098">The overloads of the <xref:System.Threading.Tasks.Task.WhenAll%2A> method that return a <xref:System.Threading.Tasks.Task> object are typically called when you are interested in the status of a set of tasks or in the exceptions thrown by a set of tasks.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d35a0-1099"><xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> メソッドを呼び出すと、呼び出し元のスレッドがブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1099">The call to <xref:System.Threading.Tasks.Task.WhenAll%28System.Threading.Tasks.Task%5B%5D%29> method does not block the calling thread.</span></span>  
  
 <span data-ttu-id="d35a0-1100">指定されたいずれかのタスクが faulted 状態で完了した場合、返されたタスクも <xref:System.Threading.Tasks.TaskStatus.Faulted> 状態で完了します。この場合、例外には、指定された各タスクからのラップされていない一連の例外の集計が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1100">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="d35a0-1101">指定されたタスクがいずれも失敗しても、そのうち少なくとも1つが取り消された場合、返されたタスクは <xref:System.Threading.Tasks.TaskStatus.Canceled> 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1101">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="d35a0-1102">タスクにエラーが発生しておらず、どのタスクも取り消されなかった場合、結果として得られるタスクは <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1102">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  
  
 <span data-ttu-id="d35a0-1103">指定した配列または列挙可能なにタスクが含まれていない場合、返されたタスクは、呼び出し元に返される前に、直ちに <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態に遷移します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1103">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-1104">次の例では、配列内の Url に ping を行う一連のタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1104">The following example creates a set of tasks that ping the URLs in an array.</span></span> <span data-ttu-id="d35a0-1105">タスクは、配列に変換され、<xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> メソッドに渡される `List<Task>` コレクションに格納されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1105">The tasks are stored in a `List<Task>` collection that is converted to an array and passed to the <xref:System.Threading.Tasks.Task.WhenAll%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7D%29> method.</span></span> <span data-ttu-id="d35a0-1106"><xref:System.Threading.Tasks.Task.Wait%2A> メソッドを呼び出してすべてのスレッドが完了したことを確認した後、この例では <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> プロパティを調べて、いずれかのタスクが失敗したかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1106">After the call to the <xref:System.Threading.Tasks.Task.Wait%2A> method ensures that all threads have completed, the example examines the <xref:System.Threading.Tasks.Task.Status%2A?displayProperty=nameWithType> property to determine whether any tasks have faulted.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/WhenAll3.cs#3)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/WhenAll3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1107"><paramref name="tasks" /> 引数が <see langword="null" /> でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1107">The <paramref name="tasks" /> argument was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1108"><paramref name="tasks" /> 配列に <see langword="null" /> タスクが含まれていました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1108">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : seq&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;'Result[]&gt;" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-1109">完了したタスクの型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1109">The type of the completed task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="d35a0-1110">完了を待機するタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1110">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="d35a0-1111">列挙可能なコレクション内のすべての <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトが完了したときに完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1111">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an enumerable collection have completed.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1112">指定されたすべてのタスクの完了を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1112">A task that represents the completion of all of the supplied tasks.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-1113"><xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> メソッドを呼び出すと、呼び出し元のスレッドがブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1113">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Collections.Generic.IEnumerable%7BSystem.Threading.Tasks.Task%7B%60%600%7D%7D%29> method does not block the calling thread.</span></span> <span data-ttu-id="d35a0-1114">ただし、返された <xref:System.Threading.Tasks.Task%601.Result%2A> プロパティを呼び出すと、呼び出し元のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1114">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="d35a0-1115">指定されたいずれかのタスクが faulted 状態で完了した場合、返されたタスクも <xref:System.Threading.Tasks.TaskStatus.Faulted> 状態で完了します。この場合、例外には、指定された各タスクからのラップされていない一連の例外の集計が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1115">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="d35a0-1116">指定されたタスクがいずれも失敗しても、そのうち少なくとも1つが取り消された場合、返されたタスクは <xref:System.Threading.Tasks.TaskStatus.Canceled> 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1116">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="d35a0-1117">タスクにエラーが発生しておらず、どのタスクも取り消されなかった場合、結果として得られるタスクは <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1117">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="d35a0-1118">返されたタスクの <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> プロパティは、指定されたタスクのすべての結果を含む配列に設定されます。たとえば、入力タスク配列に t1、t2、t3 が含まれている場合、出力タスクの <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> プロパティは `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`の `TResult[]` を返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1118">The <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output task's <xref:System.Threading.Tasks.Task%601.Result%2A?displayProperty=nameWithType> property will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="d35a0-1119">`tasks` 引数にタスクが含まれていない場合、返されたタスクは、呼び出し元に返される前に、直ちに <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態に遷移します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1119">If the `tasks` argument contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span> <span data-ttu-id="d35a0-1120">返される `TResult[]` は、0個の要素の配列になります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1120">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-1121">次の例では、10個のタスクを作成し、1 ~ 1000 の範囲で1000の乱数を作成し、平均を計算する乱数ジェネレーターをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1121">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="d35a0-1122"><xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> メソッドは、乱数ジェネレーターのインスタンス化を遅延させ、同じシード値で作成されないようにするために使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1122">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="d35a0-1123"><xref:System.Threading.Tasks.Task.WhenAll%2A> メソッドを呼び出すと、各タスクによって計算された平均値を含む <xref:System.Int64> 配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1123">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="d35a0-1124">これらは、全体の平均を計算するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1124">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall1.cs#1)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall1.vb#1)]  
  
 <span data-ttu-id="d35a0-1125">この場合、10個の個別のタスクが <xref:System.Collections.Generic.List%601> オブジェクトに格納されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1125">In this case, the ten individual tasks are stored in a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="d35a0-1126"><xref:System.Collections.Generic.List%601> は、<xref:System.Collections.Generic.IEnumerable%601> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1126"><xref:System.Collections.Generic.List%601> implements the <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1127"><paramref name="tasks" /> 引数が <see langword="null" /> でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1127">The <paramref name="tasks" /> argument was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1128"><paramref name="tasks" /> コレクションに <see langword="null" /> タスクが含まれていました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1128">The <paramref name="tasks" /> collection contained a <see langword="null" /> task.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAll&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TResult[]&gt; WhenAll&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TResult[]&gt; WhenAll&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAll(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of TResult())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;cli::array &lt;TResult&gt; ^&gt; ^ WhenAll(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAll : System.Threading.Tasks.Task&lt;'Result&gt;[] -&gt; System.Threading.Tasks.Task&lt;'Result[]&gt;" Usage="System.Threading.Tasks.Task.WhenAll tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult[]&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-1129">完了したタスクの型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1129">The type of the completed task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="d35a0-1130">完了を待機するタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1130">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="d35a0-1131">配列内のすべての <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトが完了したときに完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1131">Creates a task that will complete when all of the <see cref="T:System.Threading.Tasks.Task`1" /> objects in an array have completed.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1132">指定されたすべてのタスクの完了を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1132">A task that represents the completion of all of the supplied tasks.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-1133"><xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> メソッドを呼び出すと、呼び出し元のスレッドがブロックされません。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1133">The call to <xref:System.Threading.Tasks.Task.WhenAll%60%601%28System.Threading.Tasks.Task%7B%60%600%7D%5B%5D%29> method does not block the calling thread.</span></span> <span data-ttu-id="d35a0-1134">ただし、返された <xref:System.Threading.Tasks.Task%601.Result%2A> プロパティを呼び出すと、呼び出し元のスレッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1134">However, a call to the returned <xref:System.Threading.Tasks.Task%601.Result%2A> property does block the calling thread.</span></span>  
  
 <span data-ttu-id="d35a0-1135">指定されたいずれかのタスクが faulted 状態で完了した場合、返されたタスクも <xref:System.Threading.Tasks.TaskStatus.Faulted> 状態で完了します。この場合、例外には、指定された各タスクからのラップされていない一連の例外の集計が含まれます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1135">If any of the supplied tasks completes in a faulted state, the returned task will also complete in a <xref:System.Threading.Tasks.TaskStatus.Faulted> state, where its exceptions will contain the aggregation of the set of unwrapped exceptions from each of the supplied tasks.</span></span>  
  
 <span data-ttu-id="d35a0-1136">指定されたタスクがいずれも失敗しても、そのうち少なくとも1つが取り消された場合、返されたタスクは <xref:System.Threading.Tasks.TaskStatus.Canceled> 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1136">If none of the supplied tasks faulted but at least one of them was canceled, the returned task will end in the <xref:System.Threading.Tasks.TaskStatus.Canceled> state.</span></span>  
  
 <span data-ttu-id="d35a0-1137">タスクにエラーが発生しておらず、どのタスクも取り消されなかった場合、結果として得られるタスクは <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1137">If none of the tasks faulted and none of the tasks were canceled, the resulting task will end in the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state.</span></span>  <span data-ttu-id="d35a0-1138">返されたタスクの <xref:System.Threading.Tasks.Task%601.Result%2A> は、指定されたタスクのすべての結果を含む配列に設定されます (たとえば、入力タスク配列に t1、t2、t3 が含まれている場合、出力タスクの <xref:System.Threading.Tasks.Task%601.Result%2A> は `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`の `TResult[]` を返します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1138">The <xref:System.Threading.Tasks.Task%601.Result%2A> of the returned task will be set to an array containing all of the results of the supplied tasks in the same order as they were provided (e.g. if the input tasks array contained t1, t2, t3, the output   task's <xref:System.Threading.Tasks.Task%601.Result%2A> will return an `TResult[]` where `arr[0] == t1.Result, arr[1] == t2.Result, and arr[2] == t3.Result)`.</span></span>  
  
 <span data-ttu-id="d35a0-1139">指定した配列または列挙可能なにタスクが含まれていない場合、返されたタスクは、呼び出し元に返される前に、直ちに <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> 状態に遷移します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1139">If the supplied array/enumerable contains no tasks, the returned task will immediately transition to a <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state before it's returned to the caller.</span></span>  <span data-ttu-id="d35a0-1140">返される `TResult[]` は、0個の要素の配列になります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1140">The returned `TResult[]` will be an array of 0 elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d35a0-1141">次の例では、10個のタスクを作成し、1 ~ 1000 の範囲で1000の乱数を作成し、平均を計算する乱数ジェネレーターをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1141">The following example creates ten tasks, each of which instantiates a random number generator that creates 1,000 random numbers between 1 and 1,000 and computes their mean.</span></span> <span data-ttu-id="d35a0-1142">この場合、10個の個別のタスクが `Task<Int64>` 配列に格納されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1142">In this case, the ten individual tasks are stored in a `Task<Int64>` array.</span></span>  <span data-ttu-id="d35a0-1143"><xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> メソッドは、乱数ジェネレーターのインスタンス化を遅延させ、同じシード値で作成されないようにするために使用します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1143">The <xref:System.Threading.Tasks.Task.Delay%28System.Int32%29> method is used to delay instantiation of the random number generators so that they are not created with identical seed values.</span></span> <span data-ttu-id="d35a0-1144"><xref:System.Threading.Tasks.Task.WhenAll%2A> メソッドを呼び出すと、各タスクによって計算された平均値を含む <xref:System.Int64> 配列が返されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1144">The call to the <xref:System.Threading.Tasks.Task.WhenAll%2A> method then returns an <xref:System.Int64> array that contains the mean computed by each task.</span></span> <span data-ttu-id="d35a0-1145">これらは、全体の平均を計算するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1145">These are then used to calculate the overall mean.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/cs/whenall2.cs#2)]
 [!code-vb[System.Threading.Tasks.Task.WhenAll#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.whenall/vb/whenall2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1146"><paramref name="tasks" /> 引数が <see langword="null" /> でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1146">The <paramref name="tasks" /> argument was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1147"><paramref name="tasks" /> 配列に <see langword="null" /> タスクが含まれていました。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1147">The <paramref name="tasks" /> array contained a <see langword="null" /> task.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WhenAny">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d35a0-1148">指定されたタスクのいずれかが完了してから完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1148">Creates a task that will complete when any of the supplied tasks have completed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (tasks As IEnumerable(Of Task)) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : seq&lt;System.Threading.Tasks.Task&gt; -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-1149">完了を待機するタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1149">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="d35a0-1150">指定されたタスクのいずれかが完了してから完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1150">Creates a task that will complete when any of the supplied tasks have completed.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1151">指定されたいずれかのタスクの完了を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1151">A task that represents the completion of one of the supplied tasks.</span></span>  <span data-ttu-id="d35a0-1152">返されるタスクの結果は完了したタスクです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1152">The return task's Result is the task that completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-1153">指定されたタスクのいずれかが完了すると、返されたタスクが完了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1153">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="d35a0-1154">返されたタスクは常に、最初のタスクが完了するまでの結果セットと共に `RanToCompletion` 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1154">The returned task will always end in the `RanToCompletion` state  with its Result set to the first task to complete.</span></span>  <span data-ttu-id="d35a0-1155">これは、最初のタスクが完了したときに、`Canceled` または `Faulted` 状態で終了した場合にも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1155">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1156"><paramref name="tasks" /> 引数が <see langword="null" /> でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1156">The <paramref name="tasks" /> argument was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1157"><paramref name="tasks" /> 配列に null タスクが含まれていたか、空でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1157">The <paramref name="tasks" /> array contained a null task, or was empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt; WhenAny (params System.Threading.Tasks.Task[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task&gt; WhenAny(class System.Threading.Tasks.Task[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny (ParamArray tasks As Task()) As Task(Of Task)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : System.Threading.Tasks.Task[] -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tasks"><span data-ttu-id="d35a0-1158">完了を待機するタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1158">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="d35a0-1159">指定されたタスクのいずれかが完了してから完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1159">Creates a task that will complete when any of the supplied tasks have completed.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1160">指定されたいずれかのタスクの完了を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1160">A task that represents the completion of one of the supplied tasks.</span></span>  <span data-ttu-id="d35a0-1161">返されるタスクの結果は完了したタスクです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1161">The return task's Result is the task that completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-1162">指定されたタスクのいずれかが完了すると、返されたタスクが完了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1162">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="d35a0-1163">返されたタスクは常に、最初のタスクが完了するように設定された `Result` と共に `RanToCompletion` 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1163">The returned task will always end in the `RanToCompletion` state   with its `Result` set to the first task to complete.</span></span>  <span data-ttu-id="d35a0-1164">これは、最初のタスクが完了したときに、`Canceled` または `Faulted` 状態で終了した場合にも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1164">This is true even if the first task to complete ended in the `Canceled` or `Faulted` state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1165"><paramref name="tasks" /> 引数が null でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1165">The <paramref name="tasks" /> argument was null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1166"><paramref name="tasks" /> 配列に null タスクが含まれていたか、空でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1166">The <paramref name="tasks" /> array contained a null task, or was empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (tasks As IEnumerable(Of Task(Of TResult))) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(System::Collections::Generic::IEnumerable&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : seq&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt; -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-1167">完了したタスクの型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1167">The type of the completed task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="d35a0-1168">完了を待機するタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1168">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="d35a0-1169">指定されたタスクのいずれかが完了してから完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1169">Creates a task that will complete when any of the supplied tasks have completed.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1170">指定されたいずれかのタスクの完了を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1170">A task that represents the completion of one of the supplied tasks.</span></span>  <span data-ttu-id="d35a0-1171">返されるタスクの結果は完了したタスクです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1171">The return task's Result is the task that completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-1172">指定されたタスクのいずれかが完了すると、返されたタスクが完了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1172">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="d35a0-1173">返されたタスクは、最初のタスクが完了するまでの結果セットと共に、常に RanToCompletion 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1173">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="d35a0-1174">これは、最初のタスクが取り消された状態または Faulted 状態で終了した場合でも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1174">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1175"><paramref name="tasks" /> 引数が <see langword="null" /> でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1175">The <paramref name="tasks" /> argument was <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1176"><paramref name="tasks" /> 配列に null タスクが含まれていたか、空でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1176">The <paramref name="tasks" /> array contained a null task, or was empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WhenAny&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt; WhenAny&lt;TResult&gt; (params System.Threading.Tasks.Task&lt;TResult&gt;[] tasks);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Threading.Tasks.Task`1&lt;!!TResult&gt;&gt; WhenAny&lt;TResult&gt;(class System.Threading.Tasks.Task`1&lt;!!TResult&gt;[] tasks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WhenAny(Of TResult) (ParamArray tasks As Task(Of TResult)()) As Task(Of Task(Of TResult))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Threading::Tasks::Task&lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ WhenAny(... cli::array &lt;System::Threading::Tasks::Task&lt;TResult&gt; ^&gt; ^ tasks);" />
      <MemberSignature Language="F#" Value="static member WhenAny : System.Threading.Tasks.Task&lt;'Result&gt;[] -&gt; System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;'Result&gt;&gt;" Usage="System.Threading.Tasks.Task.WhenAny tasks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Tasks.Task&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="tasks" Type="System.Threading.Tasks.Task&lt;TResult&gt;[]" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="d35a0-1177">完了したタスクの型。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1177">The type of the completed task.</span></span></typeparam>
        <param name="tasks"><span data-ttu-id="d35a0-1178">完了を待機するタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1178">The tasks to wait on for completion.</span></span></param>
        <summary><span data-ttu-id="d35a0-1179">指定されたタスクのいずれかが完了してから完了するタスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1179">Creates a task that will complete when any of the supplied tasks have completed.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1180">指定されたいずれかのタスクの完了を表すタスク。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1180">A task that represents the completion of one of the supplied tasks.</span></span>  <span data-ttu-id="d35a0-1181">返されるタスクの結果は完了したタスクです。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1181">The return task's Result is the task that completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-1182">指定されたタスクのいずれかが完了すると、返されたタスクが完了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1182">The returned task will complete when any of the supplied tasks has completed.</span></span>  <span data-ttu-id="d35a0-1183">返されたタスクは、最初のタスクが完了するまでの結果セットと共に、常に RanToCompletion 状態で終了します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1183">The returned task will always end in the RanToCompletion state with its Result set to the first task to complete.</span></span> <span data-ttu-id="d35a0-1184">これは、最初のタスクが取り消された状態または Faulted 状態で終了した場合でも当てはまります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1184">This is true even if the first task to complete ended in the Canceled or Faulted state.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d35a0-1185"><paramref name="tasks" /> 引数が null でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1185">The <paramref name="tasks" /> argument was null.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d35a0-1186"><paramref name="tasks" /> 配列に null タスクが含まれていたか、空でした。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1186">The <paramref name="tasks" /> array contained a null task, or was empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public static System.Runtime.CompilerServices.YieldAwaitable Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Runtime.CompilerServices.YieldAwaitable Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Task.Yield" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Yield () As YieldAwaitable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::CompilerServices::YieldAwaitable Yield();" />
      <MemberSignature Language="F#" Value="static member Yield : unit -&gt; System.Runtime.CompilerServices.YieldAwaitable" Usage="System.Threading.Tasks.Task.Yield " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.CompilerServices.YieldAwaitable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d35a0-1187">待機されたときに現在のコンテキストに非同期的に処理を譲る awaitable タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1187">Creates an awaitable task that asynchronously yields back to the current context when awaited.</span></span></summary>
        <returns><span data-ttu-id="d35a0-1188">必要な場合は、要求時に現在のコンテキストに非同期で再度遷移するコンテキスト。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1188">A context that, when awaited, will asynchronously transition back into the current context at the time of the await.</span></span> <span data-ttu-id="d35a0-1189">現在の <see cref="T:System.Threading.SynchronizationContext" /> が null 以外の場合は、現在のコンテキストとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1189">If the current <see cref="T:System.Threading.SynchronizationContext" /> is non-null, it is treated as the current context.</span></span> <span data-ttu-id="d35a0-1190">それ以外の場合は、現在の実行タスクに関連付けられているタスク スケジューラは、現在のコンテキストとして扱われます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1190">Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d35a0-1191">非同期メソッドで `await Task.Yield();` を使用すると、メソッドを強制的に非同期に完了させることができます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1191">You can use `await Task.Yield();` in an asynchronous method to force the method to complete asynchronously.</span></span> <span data-ttu-id="d35a0-1192">現在の同期コンテキスト (<xref:System.Threading.SynchronizationContext> オブジェクト) がある場合は、メソッドの残りの実行がそのコンテキストにポストされます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1192">If there is a current synchronization context (<xref:System.Threading.SynchronizationContext> object), this will post the remainder of the method's execution back to that context.</span></span> <span data-ttu-id="d35a0-1193">ただし、コンテキストによって、保留中の他の作業と比較して、この作業の優先順位を決定する方法が決まります。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1193">However, the context will decide how to prioritize this work relative to other work that may be pending.</span></span> <span data-ttu-id="d35a0-1194">ほとんどの UI 環境で UI スレッドに存在する同期コンテキストでは、多くの場合、入力およびレンダリング作業よりも高いコンテキストにポストされた作業の優先順位が付けられます。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1194">The synchronization context that is present on a UI thread in most UI environments will often prioritize work posted to the context higher than input and rendering work.</span></span> <span data-ttu-id="d35a0-1195">このため、UI の応答性を維持するために `await Task.Yield();` に依存しないでください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1195">For this reason, do not rely on `await Task.Yield();` to keep a UI responsive.</span></span>  <span data-ttu-id="d35a0-1196">詳細については、.NET の並列プログラミングに関するブログの「 [system.threading.tasks.task.continuewith で有効な抽象化が有効になっている](https://devblogs.microsoft.com/pfxteam/useful-abstractions-enabled-with-continuewith/)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="d35a0-1196">For more information, see the entry [Useful Abstractions Enabled with ContinueWith](https://devblogs.microsoft.com/pfxteam/useful-abstractions-enabled-with-continuewith/) in the Parallel Programming with .NET blog.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
