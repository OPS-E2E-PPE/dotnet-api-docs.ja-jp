<Type Name="Parallel" FullName="System.Threading.Tasks.Parallel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bf29684e815aed5e294e6e61f312fc27bfcda657" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83544373" /></Metadata><TypeSignature Language="C#" Value="public static class Parallel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Parallel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Parallel" />
  <TypeSignature Language="VB.NET" Value="Public Class Parallel" />
  <TypeSignature Language="C++ CLI" Value="public ref class Parallel abstract sealed" />
  <TypeSignature Language="F#" Value="type Parallel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.Tasks.Parallel" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Threading.Tasks.Parallel" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="3c27e-101">並列ループおよび並列領域のサポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-101">Provides support for parallel loops and regions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-102"><xref:System.Threading.Tasks.Parallel> クラスは、for ループ、for each ループ、ステートメントセットの実行などの一般的な操作に対して、ライブラリベースのデータの並列置換を提供します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-102">The <xref:System.Threading.Tasks.Parallel> class provides library-based data parallel replacements for common operations such as for loops, for each loops, and execution of a set of statements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c27e-103">この例では、複数の言語構成要素を使用して並列ループを実装するいくつかの方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-103">This example demonstrates several approaches to implementing a parallel loop using multiple language constructs.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#07](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelintro.cs#07)]
 [!code-vb[System.Threading.Tasks.Parallel#07](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelintro.vb#07)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="3c27e-104"><see cref="T:System.Threading.Tasks.Parallel" /> のパブリックメンバーとプロテクトメンバーはすべてスレッドセーフであり、複数のスレッドから同時に使用することができます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-104">All public and protected members of <see cref="T:System.Threading.Tasks.Parallel" /> are thread-safe and may be used concurrently from multiple threads.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="3c27e-105">データの並列化 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="3c27e-105">Data Parallelism (Task Parallel Library)</span></span></related>
    <related type="ExternalDocumentation" href="https://aka.ms/dotnet-parallel-samples"><span data-ttu-id="3c27e-106">.NET Core と .NET Standard を使用した並列プログラミングのサンプル</span><span class="sxs-lookup"><span data-stu-id="3c27e-106">Samples for Parallel Programming with the .NET Core and .NET Standard</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="For">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3c27e-107">反復処理が並列で実行される可能性のある <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-107">Executes a <see langword="for" /> loop in which iterations may run in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="3c27e-108">開始インデックス。ここで指定したインデックスから処理が開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-108">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="3c27e-109">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-109">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-110">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-110">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-111">反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-111">Executes a <see langword="for" /> loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-112">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-112">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-113">`body` デリゲートは、イテレーション範囲 (`fromInclusive`、`toExclusive`) の各値に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-113">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="3c27e-114">2つの引数を使用して提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-114">It is provided with two arguments:</span></span>  
  
-   <span data-ttu-id="3c27e-115">反復回数を表す <xref:System.Int32> 値。</span><span class="sxs-lookup"><span data-stu-id="3c27e-115">An <xref:System.Int32> value that represents the iteration count.</span></span>  
  
-   <span data-ttu-id="3c27e-116">ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="3c27e-116">A <xref:System.Threading.Tasks.ParallelLoopState> instance that can be used to break out of the loop prematurely.</span></span> <span data-ttu-id="3c27e-117"><xref:System.Threading.Tasks.ParallelLoopState> オブジェクトはコンパイラによって作成されます。ユーザーコードでインスタンス化することはできません。</span><span class="sxs-lookup"><span data-stu-id="3c27e-117">The <xref:System.Threading.Tasks.ParallelLoopState> object is created by the compiler; it cannot be instantiated in user code.</span></span>  
  
 <span data-ttu-id="3c27e-118"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドを呼び出すと、現在のの後のイテレーションが実行する必要がないことを `for` 操作に通知します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-118">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to execute.</span></span> <span data-ttu-id="3c27e-119">ただし、現在のイテレーションより前のイテレーションは、まだ実行していない場合でも実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-119">However, all iterations before the current one will still have to be executed if they haven't already.</span></span>  
  
 <span data-ttu-id="3c27e-120">したがって、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> の呼び出しはC#、などの言語で従来の `for` ループ内で中断操作を使用するのと似ていますが、これは完全な代替手段ではありません。たとえば、現在のイテレーションの後のイテレーションが確実に実行されないという保証はありません。</span><span class="sxs-lookup"><span data-stu-id="3c27e-120">Therefore, calling <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="3c27e-121">現在のイテレーションより前にすべてのイテレーションを実行する必要がない場合は、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>を使用するのではなく、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-121">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="3c27e-122"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> を呼び出すと、必要なすべての作業が既に完了しているため、現在のイテレーションの前後であるかどうかに関係なく、残りのすべてのイテレーションを破棄できることが `for` ループに通知されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-122">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="3c27e-123">ただし、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>の場合と同様に、他のイテレーションが実行されないことについての保証はありません。</span><span class="sxs-lookup"><span data-stu-id="3c27e-123">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="3c27e-124">ループが途中で終了した場合、返される <xref:System.Threading.Tasks.ParallelLoopResult> 構造には、ループの完了に関する関連情報が含まれます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-124">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="3c27e-125">`fromInclusive` が `toExclusive`以上の場合、メソッドは、繰り返しを実行せずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-125">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c27e-126">次の例では、ループの最大100の反復処理を並列実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-126">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="3c27e-127">各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-127">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="3c27e-128">ランダムに生成された値によって、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> メソッドが呼び出されるループの反復処理が決定されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-128">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="3c27e-129">この例の出力に示すように、インデックスが <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> プロパティ値よりも大きいイテレーションは、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> メソッドの呼び出しの後に開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-129">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="3c27e-130"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> メソッドが呼び出されたときにループの反復処理が実行される可能性があるため、各反復処理は <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> プロパティを呼び出して、別のイテレーションが <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> メソッドを呼び出したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-130">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A?displayProperty=nameWithType> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="3c27e-131">プロパティ値が `true`場合、反復処理は <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> プロパティの値をチェックし、現在のイテレーションのインデックス値より大きい場合は、直ちにを返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-131">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A?displayProperty=nameWithType> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-132"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-132">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-133">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-133">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <altmember cref="T:System.Threading.Tasks.ParallelLoopState" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-134">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-134">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="3c27e-135">開始インデックス。ここで指定したインデックスから処理が開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-135">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="3c27e-136">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-136">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-137">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-137">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-138">反復処理が並列で実行される可能性のある <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-138">Executes a <see langword="for" /> loop in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="3c27e-139">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-139">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-140">`body` デリゲートは、イテレーション範囲 (`fromInclusive`、`toExclusive`) の各値に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-140">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="3c27e-141">これは、パラメーターとして反復回数 (<xref:System.Int32>) を使用して提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-141">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="3c27e-142">`fromInclusive` が `toExclusive`以上の場合、メソッドは、繰り返しを実行せずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-142">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c27e-143">次の例では、<xref:System.Threading.Tasks.Parallel.For%2A> メソッドを使用して、ランダムバイト値を生成し、その合計を計算するデリゲートの100呼び出しを行います。</span><span class="sxs-lookup"><span data-stu-id="3c27e-143">The following example uses the <xref:System.Threading.Tasks.Parallel.For%2A> method for 100 invocations of a delegate that generates random byte values and computes their sum.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/cs/for1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.For#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.for/vb/for1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-144"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-144">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-145">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-145">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-146">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-146">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="3c27e-147">開始インデックス。ここで指定したインデックスから処理が開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-147">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="3c27e-148">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-148">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-149">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-149">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-150">反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる、64 ビットのインデックスを持つ <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-150">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-151">完了したループの部分に関する情報を格納している <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> 構造体。</span><span class="sxs-lookup"><span data-stu-id="3c27e-151">A <see cref="T:System.Threading.Tasks.ParallelLoopResult" /> structure that contains information on what portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-152">`body` デリゲートは、イテレーション範囲 (`fromInclusive`、`toExclusive`) の各値に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-152">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="3c27e-153">これには、次のパラメーターがあります。反復回数 (<xref:System.Int64>) と、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンスです。</span><span class="sxs-lookup"><span data-stu-id="3c27e-153">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="3c27e-154"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドを呼び出すと、現在のの後のイテレーションを実行する必要がないことを `for` 操作に通知しますが、現在のイテレーションはすべて実行されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-154">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method informs the `for` operation that iterations after the current one don't have to be executed, but all iterations before the current one do.</span></span>  
  
 <span data-ttu-id="3c27e-155">したがって、Break の呼び出しはC#、などの言語の従来の `for` ループ内で break 操作を使用するのと似ていますが、これは完全な代替手段ではありません。たとえば、現在のイテレーションの後のイテレーションが確実に実行されないという保証はありません。</span><span class="sxs-lookup"><span data-stu-id="3c27e-155">Therefore, calling Break is similar to using a break operation within a conventional `for` loop in a language like C#, but it is not a perfect substitute: For example, there is no guarantee that iterations after the current one will definitely not execute.</span></span>  
  
 <span data-ttu-id="3c27e-156">現在のイテレーションより前にすべてのイテレーションを実行する必要がない場合は、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>を使用するのではなく、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-156">If executing all iterations before the current one is not necessary, use the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method instead of using <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="3c27e-157"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> を呼び出すと、必要なすべての作業が既に完了しているため、現在のイテレーションの前後であるかどうかに関係なく、残りのすべてのイテレーションを破棄できることが `for` ループに通知されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-157">Calling <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> informs the `for` loop that it may abandon all remaining iterations, regardless of whether they're before or after the current iteration, because all required work will have already been completed.</span></span> <span data-ttu-id="3c27e-158">ただし、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A>の場合と同様に、他のイテレーションが実行されないことについての保証はありません。</span><span class="sxs-lookup"><span data-stu-id="3c27e-158">However, as with <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, there are no guarantees regarding which other iterations will not execute.</span></span>  
  
 <span data-ttu-id="3c27e-159">ループが途中で終了した場合、返される <xref:System.Threading.Tasks.ParallelLoopResult> 構造には、ループの完了に関する関連情報が含まれます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-159">If a loop is ended prematurely, the <xref:System.Threading.Tasks.ParallelLoopResult> structure that is returned will contain relevant information about the loop's completion.</span></span>  
  
 <span data-ttu-id="3c27e-160">`fromInclusive` が `toExclusive`以上の場合、メソッドは、繰り返しを実行せずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-160">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-161"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-161">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-162">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-162">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-163">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-163">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="3c27e-164">開始インデックス。ここで指定したインデックスから処理が開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-164">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="3c27e-165">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-165">The end index, exclusive.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-166">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-166">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-167">反復処理が並列で実行される可能性のある、64 ビットのインデックスを持つ <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-167">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="3c27e-168">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-168">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-169">`body` デリゲートは、イテレーション範囲 (`fromInclusive`、`toExclusive`) の各値に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-169">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="3c27e-170">これは、パラメーターとして反復回数 (<xref:System.Int64>) を使用して提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-170">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="3c27e-171">`fromInclusive` が `toExclusive`以上の場合、メソッドは、繰り返しを実行せずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-171">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-172"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-172">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-173">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-173">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-174">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-174">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int32, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="3c27e-175">開始インデックス。ここで指定したインデックスから処理が開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-175">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="3c27e-176">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-176">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-177">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-177">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-178">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-178">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-179">反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-179">Executes a <see langword="for" /> loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-180">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-180">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-181">`body` デリゲートは、イテレーション範囲 (`fromInclusive`、`toExclusive`) の各値に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-181">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="3c27e-182">これには、次のパラメーターがあります。反復回数 (<xref:System.Int32>) と、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンスです。</span><span class="sxs-lookup"><span data-stu-id="3c27e-182">It is provided with the following parameters: the iteration count (<xref:System.Int32>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="3c27e-183">`fromInclusive` が `toExclusive`以上の場合、メソッドは、繰り返しを実行せずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-183">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-184"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-184">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-185"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-185">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-186">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-186">-or-</span></span> 
<span data-ttu-id="3c27e-187"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-187">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-188">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-188">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-189"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-189">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-190">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-190">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;int&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int32&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, body As Action(Of Integer)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;int&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Action&lt;int&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="3c27e-191">開始インデックス。ここで指定したインデックスから処理が開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-191">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="3c27e-192">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-192">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-193">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-193">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-194">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-194">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-195">反復処理が並列で実行される可能性があり、ループ オプションを構成できる <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-195">Executes a <see langword="for" /> loop in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="3c27e-196">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-196">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-197">`body` デリゲートは、イテレーション範囲 (`fromInclusive`、`toExclusive`) の各値に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-197">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="3c27e-198">これは、パラメーターとして反復回数 (<xref:System.Int32>) を使用して提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-198">It is provided with the iteration count (<xref:System.Int32>) as a parameter.</span></span>  
  
 <span data-ttu-id="3c27e-199">`fromInclusive` が `toExclusive`以上の場合、メソッドは、繰り返しを実行せずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-199">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c27e-200">次の例は、並列ループを取り消す方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-200">The following example shows how to cancel a parallel loop:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#05](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforcancel.cs#05)]
 [!code-vb[System.Threading.Tasks.Parallel#05](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforcancel.vb#05)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-201"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-201">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-202"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-202">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-203">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-203">-or-</span></span> 
<span data-ttu-id="3c27e-204"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-204">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-205">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-205">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-206"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-206">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-207">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-207">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;int64, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="3c27e-208">開始インデックス。ここで指定したインデックスから処理が開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-208">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="3c27e-209">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-209">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-210">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-210">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-211">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-211">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-212">反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、64 ビットのインデックスを持つ <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-212">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-213">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-213">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-214">`body` デリゲートは、イテレーション範囲 (`fromInclusive`、`toExclusive`) の各値に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-214">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="3c27e-215">これには、次のパラメーターがあります。反復回数 (<xref:System.Int64>) と、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンスです。</span><span class="sxs-lookup"><span data-stu-id="3c27e-215">It is provided with the following parameters: the iteration count (<xref:System.Int64>), and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 <span data-ttu-id="3c27e-216">`fromInclusive` が `toExclusive`以上の場合、メソッドは、繰り返しを実行せずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-216">If `fromInclusive` is greater than or equal to `toExclusive`, the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c27e-217">次の例は、<xref:System.Threading.Tasks.ParallelOptions> オブジェクトで <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> メソッドを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-217">The following example shows how to use the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method with a <xref:System.Threading.Tasks.ParallelOptions> object:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#03](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelfor.cs#03)]
 [!code-vb[System.Threading.Tasks.Parallel#03](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelfor.vb#03)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-218"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-218">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-219"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-219">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-220">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-220">-or-</span></span> 
<span data-ttu-id="3c27e-221"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-221">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-222">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-222">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-223"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-223">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-224">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-224">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For (fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, body As Action(Of Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Action&lt;int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;System.Int64&gt;" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="3c27e-225">開始インデックス。ここで指定したインデックスから処理が開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-225">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="3c27e-226">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-226">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-227">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-227">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-228">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-228">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-229">イテレーションが並列で実行される可能性があり、ループ オプションを構成できる、64 ビットのインデックスを持つ <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-229">Executes a <see langword="for" /> loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="3c27e-230">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-230">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-231">では、64ビットのインデックスをサポートしています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-231">Supports 64-bit indexes.</span></span> <span data-ttu-id="3c27e-232">`body` デリゲートは、イテレーション範囲 (`fromInclusive`、`toExclusive`) の各値に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-232">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="3c27e-233">これは、パラメーターとして反復回数 (<xref:System.Int64>) を使用して提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-233">It is provided with the iteration count (<xref:System.Int64>) as a parameter.</span></span>  
  
 <span data-ttu-id="3c27e-234">`fromInclusive` が `toExclusive`以上の場合、メソッドは、繰り返しを実行せずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-234">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c27e-235">次の例では、<xref:System.Threading.Tasks.ParallelOptions> を使用してカスタムタスクスケジューラを指定する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-235">The following example shows how to use <xref:System.Threading.Tasks.ParallelOptions> to specify a custom task scheduler:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforwithscheduler.cs#06)]
 [!code-vb[System.Threading.Tasks.Parallel#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforwithscheduler.vb#06)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-236"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-236">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-237"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-237">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-238">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-238">-or-</span></span> 
<span data-ttu-id="3c27e-239"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-239">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-240">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-240">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-241"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-241">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-242">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-242">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="3c27e-243">スレッド ローカル データの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-243">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="3c27e-244">開始インデックス。ここで指定したインデックスから処理が開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-244">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="3c27e-245">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-245">The end index, exclusive.</span></span></param>
        <param name="localInit"><span data-ttu-id="3c27e-246">各タスクのローカル データの初期状態を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-246">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-247">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-247">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="3c27e-248">各タスクのローカル状態に対して最後の操作を行うデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-248">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="3c27e-249">反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-249">Executes a <see langword="for" /> loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-250">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-250">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-251">`body` デリゲートは、イテレーション範囲 (`fromInclusive`、`toExclusive`) の各値に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-251">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="3c27e-252">これには、次のパラメーターが用意されています。反復回数 (<xref:System.Int32>)、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンス、および同じスレッドで実行される繰り返し間で共有される可能性のあるローカル状態。</span><span class="sxs-lookup"><span data-stu-id="3c27e-252">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="3c27e-253">`localInit` デリゲートは、ループの実行に参加するタスクごとに1回呼び出され、各タスクの最初のローカル状態を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-253">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="3c27e-254">これらの初期状態は、各タスクの最初の `body` 呼び出しに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-254">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="3c27e-255">次に、後続のすべての本文呼び出しで、次の本文呼び出しに渡される、変更可能な状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-255">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="3c27e-256">最後に、各タスクの最後の本文呼び出しによって、`localFinally` デリゲートに渡される状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-256">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="3c27e-257">`localFinally` デリゲートは、各タスクのローカル状態に対して最後のアクションを実行するために、タスクごとに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-257">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="3c27e-258">このデリゲートは、複数のタスクで同時に呼び出される場合があります。そのため、共有変数へのアクセスを同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-258">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="3c27e-259"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> メソッドは、既存のタスクが完了し、新しいタスクに置き換えられるため、実行の有効期間中にスレッドよりも多くのタスクを使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-259">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="3c27e-260">これにより、基になる <xref:System.Threading.Tasks.TaskScheduler> オブジェクトは、ループを処理するスレッドを追加、変更、または削除できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-260">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="3c27e-261">`fromInclusive` が `toExclusive`以上の場合、メソッドは、繰り返しを実行せずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-261">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="3c27e-262">このメソッドを使用する例については、「[方法: スレッドローカル変数を使用して Parallel ループを記述](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-262">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-263"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-263">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-264">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-264">-or-</span></span> 
<span data-ttu-id="3c27e-265"><paramref name="localInit" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-265">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-266">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-266">-or-</span></span> 
<span data-ttu-id="3c27e-267"><paramref name="localFinally" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-267">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-268">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-268">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-269">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-269">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="3c27e-270">スレッド ローカル データの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-270">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="3c27e-271">開始インデックス。ここで指定したインデックスから処理が開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-271">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="3c27e-272">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-272">The end index, exclusive.</span></span></param>
        <param name="localInit"><span data-ttu-id="3c27e-273">各タスクのローカル データの初期状態を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-273">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-274">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-274">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="3c27e-275">各タスクのローカル状態に対して最後の操作を行うデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-275">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="3c27e-276">反復処理が並列で実行される可能性があり、ループの状態を監視および操作できる、64 ビットのインデックスとスレッド ローカル データを持つ <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-276">Executes a <see langword="for" /> loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-277">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-277">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-278">`body` デリゲートは、イテレーション範囲 (`fromInclusive`、`toExclusive`) の各値に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-278">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="3c27e-279">これには、次のパラメーターが用意されています。反復回数 (<xref:System.Int64>)、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンス、および同じタスクで実行されるイテレーション間で共有される可能性のあるローカル状態。</span><span class="sxs-lookup"><span data-stu-id="3c27e-279">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="3c27e-280">`localInit` デリゲートは、ループの実行に参加するタスクごとに1回呼び出され、各タスクの最初のローカル状態を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-280">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="3c27e-281">これらの初期状態は、各タスクの最初の `body` 呼び出しに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-281">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="3c27e-282">次に、後続のすべての本文呼び出しで、次の本文呼び出しに渡される、変更可能な状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-282">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="3c27e-283">最後に、各タスクの最後の本文呼び出しによって、`localFinally` デリゲートに渡される状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-283">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="3c27e-284">`localFinally` デリゲートは、各タスクのローカル状態に対して最後のアクションを実行するために、タスクごとに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-284">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="3c27e-285">このデリゲートは、複数のタスクで同時に呼び出される場合があります。そのため、共有変数へのアクセスを同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-285">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="3c27e-286"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> メソッドは、既存のタスクが完了し、新しいタスクに置き換えられるため、実行の有効期間中にスレッドよりも多くのタスクを使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-286">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="3c27e-287">これにより、基になる <xref:System.Threading.Tasks.TaskScheduler> オブジェクトは、ループを処理するスレッドを追加、変更、または削除できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-287">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="3c27e-288">`fromInclusive` が `toExclusive`以上の場合、メソッドは、繰り返しを実行せずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-288">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 <span data-ttu-id="3c27e-289">このメソッドを使用する例については、「[方法: スレッドローカル変数を使用して Parallel ループを記述](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md)する」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-289">For an example that uses this method, see [How to: Write a Parallel.For Loop with Thread-Local Variables](~/docs/standard/parallel-programming/how-to-write-a-parallel-for-loop-with-thread-local-variables.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-290"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-290">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-291">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-291">-or-</span></span> 
<span data-ttu-id="3c27e-292"><paramref name="localInit" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-292">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-293">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-293">-or-</span></span> 
<span data-ttu-id="3c27e-294"><paramref name="localFinally" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-294">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-295">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-295">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-296">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-296">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (int fromInclusive, int toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;int,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int32 fromInclusive, int32 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int32, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(int fromInclusive, int toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;int, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int * int * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int32,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="3c27e-297">スレッド ローカル データの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-297">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="3c27e-298">開始インデックス。ここで指定したインデックスから処理が開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-298">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="3c27e-299">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-299">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-300">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-300">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="3c27e-301">各タスクのローカル データの初期状態を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-301">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-302">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-302">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="3c27e-303">各タスクのローカル状態に対して最後の操作を行うデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-303">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="3c27e-304">反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-304">Executes a <see langword="for" /> loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-305">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-305">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-306">`body` デリゲートは、イテレーション範囲 (`fromInclusive`、`toExclusive`) の各値に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-306">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="3c27e-307">これには、次のパラメーターが用意されています。反復回数 (<xref:System.Int32>)、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンス、および同じタスクで実行されるイテレーション間で共有される可能性のあるローカル状態。</span><span class="sxs-lookup"><span data-stu-id="3c27e-307">It is provided with the following parameters: the iteration count (<xref:System.Int32>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same task.</span></span>  
  
 <span data-ttu-id="3c27e-308">`localInit` デリゲートは、ループの実行に参加するタスクごとに1回呼び出され、各タスクの最初のローカル状態を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-308">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="3c27e-309">これらの初期状態は、各タスクの最初の `body` 呼び出しに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-309">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="3c27e-310">次に、後続のすべての本文呼び出しで、次の本文呼び出しに渡される、変更可能な状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-310">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="3c27e-311">最後に、各タスクの最後の本文呼び出しによって、`localFinally` デリゲートに渡される状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-311">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="3c27e-312">`localFinally` デリゲートは、各タスクのローカル状態に対して最後のアクションを実行するために、タスクごとに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-312">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="3c27e-313">このデリゲートは、複数のスレッドで同時に呼び出される場合があります。そのため、共有変数へのアクセスを同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-313">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="3c27e-314"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> メソッドは、既存のタスクが完了し、新しいタスクに置き換えられるため、実行の有効期間中にスレッドよりも多くのタスクを使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-314">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="3c27e-315">これにより、基になる <xref:System.Threading.Tasks.TaskScheduler> オブジェクトは、ループを処理するスレッドを追加、変更、または削除できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-315">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="3c27e-316">`fromInclusive` が `toExclusive`以上の場合、メソッドは、繰り返しを実行せずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-316">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c27e-317">次の例では、スレッドローカル変数を使用して、多くの長い操作の結果の合計を計算します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-317">The following example uses thread-local variables to compute the sum of the results of many lengthy operations.</span></span> <span data-ttu-id="3c27e-318">この例では、並列処理の次数を4に制限しています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-318">This example limits the degree of parallelism to four.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#04](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/threadlocalforwithoptions.cs#04)]
 [!code-vb[System.Threading.Tasks.Parallel#04](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/threadlocalforwithoptions.vb#04)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-319"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-319">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-320">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-320">-or-</span></span> 
<span data-ttu-id="3c27e-321"><paramref name="localInit" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-321">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-322">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-322">-or-</span></span> 
<span data-ttu-id="3c27e-323"><paramref name="localFinally" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-323">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-324">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-324">-or-</span></span> 
<span data-ttu-id="3c27e-325"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-325">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-326"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-326">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-327"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-327">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-328">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-328">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-329">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-329">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="For&lt;TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt; (long fromInclusive, long toExclusive, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;long,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult For&lt;TLocal&gt;(int64 fromInclusive, int64 toExclusive, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;int64, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function For(Of TLocal) (fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult For(long fromInclusive, long toExclusive, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;long, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member For : int64 * int64 * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;int64, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.For (fromInclusive, toExclusive, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;System.Int64,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TLocal"><span data-ttu-id="3c27e-330">スレッド ローカル データの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-330">The type of the thread-local data.</span></span></typeparam>
        <param name="fromInclusive"><span data-ttu-id="3c27e-331">開始インデックス。ここで指定したインデックスから処理が開始されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-331">The start index, inclusive.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="3c27e-332">終了インデックス。ここで指定したインデックスの前のインデックスまで処理が行われます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-332">The end index, exclusive.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-333">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-333">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="3c27e-334">各スレッドのローカル データの初期状態を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-334">The function delegate that returns the initial state of the local data for each thread.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-335">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-335">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="3c27e-336">各スレッドのローカル状態に対して最後の操作を行うデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-336">The delegate that performs a final action on the local state of each thread.</span></span></param>
        <summary><span data-ttu-id="3c27e-337">反復処理が並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、64 ビットのインデックスとスレッド ローカル データを持つ <see langword="for" /> ループを実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-337">Executes a <see langword="for" /> loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-338">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-338">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-339">`body` デリゲートは、イテレーション範囲 (`fromInclusive`、`toExclusive`) の各値に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-339">The `body` delegate is invoked once for each value in the iteration range (`fromInclusive`, `toExclusive`).</span></span> <span data-ttu-id="3c27e-340">これには、次のパラメーターが用意されています。反復回数 (<xref:System.Int64>)、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンス、および同じスレッドで実行される繰り返し間で共有される可能性のあるローカル状態。</span><span class="sxs-lookup"><span data-stu-id="3c27e-340">It is provided with the following parameters: the iteration count (<xref:System.Int64>), a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="3c27e-341">`localInit` デリゲートは、ループの実行に参加するスレッドごとに1回呼び出され、各スレッドの最初のローカル状態を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-341">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those threads.</span></span> <span data-ttu-id="3c27e-342">これらの初期状態は、各スレッドの最初の `body` 呼び出しに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-342">These initial states are passed to the first `body` invocations on each thread.</span></span> <span data-ttu-id="3c27e-343">次に、後続のすべての本文呼び出しで、次の本文呼び出しに渡される、変更可能な状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-343">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="3c27e-344">最後に、各スレッドの最後の本文呼び出しによって、`localFinally` デリゲートに渡される状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-344">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="3c27e-345">`localFinally` デリゲートは、各スレッドのローカル状態に対して最後のアクションを実行するために、スレッドごとに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-345">The `localFinally` delegate is invoked once per thread to perform a final action on each thread's local state.</span></span> <span data-ttu-id="3c27e-346">このデリゲートは、複数のスレッドで同時に呼び出される場合があります。そのため、共有変数へのアクセスを同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-346">This delegate might be invoked concurrently on multiple threads; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="3c27e-347"><xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> メソッドは、既存のタスクが完了し、新しいタスクに置き換えられるため、実行の有効期間中にスレッドよりも多くのタスクを使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-347">The <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="3c27e-348">これにより、基になる <xref:System.Threading.Tasks.TaskScheduler> オブジェクトは、ループを処理するスレッドを追加、変更、または削除できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-348">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 <span data-ttu-id="3c27e-349">`fromInclusive` が `toExclusive`以上の場合、メソッドは、繰り返しを実行せずにすぐに制御を戻します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-349">If `fromInclusive` is greater than or equal to `toExclusive`, then the method returns immediately without performing any iterations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-350"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-350">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-351">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-351">-or-</span></span> 
<span data-ttu-id="3c27e-352"><paramref name="localInit" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-352">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-353">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-353">-or-</span></span> 
<span data-ttu-id="3c27e-354"><paramref name="localFinally" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-354">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-355">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-355">-or-</span></span> 
<span data-ttu-id="3c27e-356"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-356">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-357"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-357">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-358"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-358">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-359">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-359">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-360">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-360">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ForEach&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3c27e-361">イテレーションが並列で実行される可能性のある <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each " />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-361">Executes a <see langword="foreach" /> (<see langword="For Each " /> in Visual Basic) operation in which iterations may run in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-362"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-362">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-363">元のデータ ソースを格納している順序付け可能なパーティショナー。</span><span class="sxs-lookup"><span data-stu-id="3c27e-363">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-364">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-364">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-365"><see langword="foreach" /> に対して、イテレーションが並列で実行される可能性があり、ループの状態を監視および操作できる <see langword="For Each" /> (Visual Basic の場合は <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-365">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-366">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-366">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-367">このオーバーロードは、既定のパーティション構成をオーバーライドする場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-367">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="3c27e-368">たとえば、小さなループ本体では、範囲をパーティション分割することによってメリットが得られる場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-368">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="3c27e-369"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドでは、動的パーティション分割をサポートするためにカスタムパーティショナーが想定されています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-369">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="3c27e-370">詳細については、「 [PLINQ および TPL のカスタムパーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 」および「[方法: 動的パーティションを実装する](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-370">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-371"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-371">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-372">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-372">-or-</span></span> 
<span data-ttu-id="3c27e-373"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-373">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c27e-374">順序付け可能のパーティショナー、<paramref name="source" /> の <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> プロパティは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-374">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="3c27e-375">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-375">-or-</span></span> 
<span data-ttu-id="3c27e-376">順序付け可能のパーティショナー、ソースの <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> プロパティは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-376">The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the source orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="3c27e-377">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-377">-or-</span></span> 
<span data-ttu-id="3c27e-378">ソースの順序付け可能なパーティショナーのすべてのメソッドは、<see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-378">Any methods in the source orderable partitioner return <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-379">指定したデリゲートのいずれかからスローされた例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-379">The exception thrown from one of the specified delegates.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-380">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-380">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-381"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-381">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-382">元のデータ ソースを格納しているパーティショナー。</span><span class="sxs-lookup"><span data-stu-id="3c27e-382">The partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-383">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-383">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-384"><see cref="T:System.Collections.Concurrent.Partitioner" /> に対して、イテレーションが並列で実行される可能性があり、ループの状態を監視および操作できる <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-384">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-385">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-385">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-386">このオーバーロードは、既定のパーティション構成をオーバーライドする場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-386">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="3c27e-387">たとえば、小さなループ本体では、範囲をパーティション分割することによってメリットが得られる場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-387">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="3c27e-388"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドでは、動的パーティション分割をサポートするためにカスタムパーティショナーが想定されています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-388">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="3c27e-389">詳細については、「 [PLINQ および TPL のカスタムパーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 」および「[方法: 動的パーティションを実装する](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-389">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-390"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-390">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-391">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-391">-or-</span></span> 
<span data-ttu-id="3c27e-392"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-392">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c27e-393"><paramref name="source" /> パーティショナーの <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> プロパティは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-393">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="3c27e-394">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-394">-or-</span></span> 
<span data-ttu-id="3c27e-395"><paramref name="source" /> パーティショナーのメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-395">A method in the <paramref name="source" /> partitioner returns <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-396">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-396">-or-</span></span> 
<span data-ttu-id="3c27e-397"><paramref name="source" /> パーティショナーの <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> メソッドが正しいパーティション数を返しません。</span><span class="sxs-lookup"><span data-stu-id="3c27e-397">The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-398">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-398">Parallel Loops</span></span></related>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-399">指定のデリゲートの 1 つからスローされる例外を含める目的でスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-399">The exception that is thrown to contain an exception thrown from one of the specified delegates.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-400"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-400">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-401">元のデータ ソースを格納しているパーティショナー。</span><span class="sxs-lookup"><span data-stu-id="3c27e-401">The partitioner that contains the original data source.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-402">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-402">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-403"><see langword="foreach" /> に対して、イテレーションが並列で実行される可能性のある <see langword="For Each" /> (Visual Basic の場合は <see cref="T:System.Collections.Concurrent.Partitioner" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-403">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="3c27e-404">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-404">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-405">このオーバーロードは、既定のパーティション構成をオーバーライドする場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-405">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="3c27e-406">たとえば、小さなループ本体では、範囲をパーティション分割することによってメリットが得られる場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-406">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="3c27e-407"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドでは、動的パーティション分割をサポートするためにカスタムパーティショナーが想定されています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-407">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="3c27e-408">詳細については、「 [PLINQ および TPL のカスタムパーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 」および「[方法: 動的パーティションを実装する](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-408">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c27e-409">次の例は、<xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>で使用する範囲パーティショナーを実装する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-409">The following example shows how to implement a range partitioner for use with <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType>:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/cs/rangepartitioner.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel_RangePartitioners#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel_rangepartitioners/vb/rangepart.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-410"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-410">The <paramref name="source" /> argument is  <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-411">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-411">-or-</span></span> 
<span data-ttu-id="3c27e-412"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-412">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c27e-413"><paramref name="source" /> パーティショナーの <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> プロパティは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-413">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="3c27e-414">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-414">-or-</span></span> 
<span data-ttu-id="3c27e-415"><paramref name="source" /> パーティショナー内のメソッドが <see langword="null" /> を返したときにスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-415">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-416">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-416">-or-</span></span> 
<span data-ttu-id="3c27e-417"><paramref name="source" /> パーティショナーの <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> メソッドが正しいパーティション数を返しません。</span><span class="sxs-lookup"><span data-stu-id="3c27e-417">The <see cref="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" /> method in the <paramref name="source" /> partitioner does not return the correct number of partitions.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-418">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-418">Parallel Loops</span></span></related>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-419">指定のデリゲートの 1 つからスローされる例外を含める目的でスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-419">The exception that is thrown to contain an exception thrown from one of the specified delegates.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-420">ソース内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-420">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-421">列挙可能なデータ ソース。</span><span class="sxs-lookup"><span data-stu-id="3c27e-421">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-422">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-422">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-423"><see cref="T:System.Collections.IEnumerable" /> に対して、イテレーションが並列で実行される可能性があり、ループの状態を監視および操作できる、64 ビットのインデックスを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-423">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-424">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-424">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-425">`body` デリゲートは、`source` 列挙可能なの各要素に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-425">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="3c27e-426">このパラメーターには、現在の要素、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンス、および現在の要素のインデックス (<xref:System.Int64>) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-426">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-427"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-427">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-428">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-428">-or-</span></span> 
<span data-ttu-id="3c27e-429"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-429">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-430">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-430">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-431">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-431">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-432">ソース内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-432">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-433">列挙可能なデータ ソース。</span><span class="sxs-lookup"><span data-stu-id="3c27e-433">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-434">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-434">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-435"><see langword="foreach" /> に対して、イテレーションが並列で実行される可能性があり、ループの状態を監視および操作できる <see langword="For Each" /> (Visual Basic の場合は <see cref="T:System.Collections.IEnumerable" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-435">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-436">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-436">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-437">`body` デリゲートは、`source` 列挙可能なの各要素に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-437">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="3c27e-438">これには、現在の要素と、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンスのパラメーターがあります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-438">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-439"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-439">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-440">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-440">-or-</span></span> 
<span data-ttu-id="3c27e-441"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-441">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-442">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-442">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-443">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-443">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-444">ソース内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-444">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-445">列挙可能なデータ ソース。</span><span class="sxs-lookup"><span data-stu-id="3c27e-445">An enumerable data source.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-446">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-446">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-447"><see langword="foreach" /> に対して、イテレーションが並列で実行される可能性のある <see langword="For Each" /> (Visual Basic の場合は <see cref="T:System.Collections.IEnumerable" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-447">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel.</span></span></summary>
        <returns><span data-ttu-id="3c27e-448">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-448">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-449">`body` デリゲートは、`source` 列挙可能なの各要素に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-449">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="3c27e-450">現在の要素がパラメーターとして提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-450">It is provided with the current element as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c27e-451">次の例では、<xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> メソッドを使用して、テキストファイル内の母音と空白以外の文字の数をカウントします。</span><span class="sxs-lookup"><span data-stu-id="3c27e-451">The following example uses the <xref:System.Threading.Tasks.Parallel.ForEach%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Action%7B%60%600%7D%29> method to count the number of vowels and non-white-space characters in a text file.</span></span> <span data-ttu-id="3c27e-452">この場合、メソッドによって返される <xref:System.Threading.Tasks.ParallelLoopResult> の値は無視されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-452">In this case, the <xref:System.Threading.Tasks.ParallelLoopResult> value returned by the method is ignored.</span></span> <span data-ttu-id="3c27e-453">操作は並列で実行できるため、カウンター変数のインクリメントがアトミック操作であること、および複数のスレッドがカウンター変数に同時にアクセスしようとしないことを確認する必要があることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-453">Note that, because operations can run in parallel, you must ensure that incrementing the counter variables is an atomic operation, and that multiple threads do not attempt to access the counter variables simultaneously.</span></span> <span data-ttu-id="3c27e-454">このため、この例では、`lock` ステートメント (でC#は) と `SyncLock` ステートメント (Visual Basic) を使用します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-454">For this purpose, the example uses the `lock` statement (in C#) and the `SyncLock` statement (in Visual Basic).</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/cs/foreach1.cs#1)]
 [!code-vb[System.Threading.Tasks.Parallel.ForEach#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel.foreach/vb/foreach1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-455"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-455">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-456">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-456">-or-</span></span> 
<span data-ttu-id="3c27e-457"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-457">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-458">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-458">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-459">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-459">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As OrderablePartitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-460"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-460">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-461">元のデータ ソースを格納している順序付け可能なパーティショナー。</span><span class="sxs-lookup"><span data-stu-id="3c27e-461">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-462">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-462">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-463">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-463">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-464"><see langword="foreach" /> に対して、イテレーションが並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる <see langword="For Each" /> (Visual Basic の場合は <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-464">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-465">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-465">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-466">このオーバーロードは、既定のパーティション構成をオーバーライドする場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-466">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="3c27e-467">たとえば、小さなループ本体では、範囲をパーティション分割することによってメリットが得られる場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-467">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="3c27e-468"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドでは、動的パーティション分割をサポートするためにカスタムパーティショナーが想定されています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-468">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="3c27e-469">詳細については、「 [PLINQ および TPL のカスタムパーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 」および「[方法: 動的パーティションを実装する](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-469">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-470"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました</span><span class="sxs-lookup"><span data-stu-id="3c27e-470">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-471"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-471">The <paramref name="source" /> argument is  <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-472">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-472">-or-</span></span> 
<span data-ttu-id="3c27e-473"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-473">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-474">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-474">-or-</span></span> 
<span data-ttu-id="3c27e-475"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-475">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-476"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-476">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c27e-477">順序付け可能のパーティショナー、<paramref name="source" /> の <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> プロパティは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-477">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="3c27e-478">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-478">-or-</span></span> 
<span data-ttu-id="3c27e-479">順序付け可能のパーティショナー、<paramref name="source" /> の <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> プロパティは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-479">The <see cref="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" /> property in the <paramref name="source" /> orderable partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="3c27e-480">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-480">-or-</span></span> 
<span data-ttu-id="3c27e-481">順序付け可能なパーティショナー、<paramref name="source" /> 内のメソッドが <see langword="null" /> を返したときにスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-481">The exception that is thrown when any methods in the <paramref name="source" /> orderable partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-482">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-482">Parallel Loops</span></span></related>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-483">指定のデリゲートの 1 つからスローされる例外を含める目的でスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-483">The exception that is thrown to contain an exception thrown from one of the specified delegates.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-484"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-484">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-485">元のデータ ソースを格納しているパーティショナー。</span><span class="sxs-lookup"><span data-stu-id="3c27e-485">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-486">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-486">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-487">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-487">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-488"><see langword="foreach" /> に対して、イテレーションが並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる <see langword="For Each" /> (Visual Basic の場合は <see cref="T:System.Collections.Concurrent.Partitioner" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-488">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-489">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-489">A  structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-490">このオーバーロードは、既定のパーティション構成をオーバーライドする場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-490">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="3c27e-491">たとえば、小さなループ本体では、範囲をパーティション分割することによってメリットが得られる場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-491">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="3c27e-492"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドでは、動的パーティション分割をサポートするためにカスタムパーティショナーが想定されています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-492">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="3c27e-493">詳細については、「 [PLINQ および TPL のカスタムパーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 」および「[方法: 動的パーティションを実装する](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-493">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-494"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-494">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-495"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-495">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-496"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-496">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-497">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-497">-or-</span></span> 
<span data-ttu-id="3c27e-498"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-498">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-499">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-499">-or-</span></span> 
<span data-ttu-id="3c27e-500"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-500">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c27e-501"><paramref name="source" /> パーティショナーの <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> プロパティは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-501">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="3c27e-502">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-502">-or-</span></span> 
<span data-ttu-id="3c27e-503"><paramref name="source" /> パーティショナー内のメソッドが <see langword="null" /> を返したときにスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-503">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-504">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-504">Parallel Loops</span></span></related>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-505">指定のデリゲートの 1 つからスローされる例外を含める目的でスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-505">The exception that is thrown to contain an exception thrown from one of the specified delegates.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As Partitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-506"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-506">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-507">元のデータ ソースを格納しているパーティショナー。</span><span class="sxs-lookup"><span data-stu-id="3c27e-507">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-508">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-508">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-509">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-509">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-510"><see cref="T:System.Collections.Concurrent.Partitioner" /> に対して、イテレーションが並列で実行される可能性があり、ループ オプションを構成できる <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-510">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="3c27e-511">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-511">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-512">このオーバーロードは、既定のパーティション構成をオーバーライドする場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-512">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="3c27e-513">たとえば、小さなループ本体では、範囲をパーティション分割することによってメリットが得られる場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-513">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="3c27e-514"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドでは、動的パーティション分割をサポートするためにカスタムパーティショナーが想定されています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-514">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="3c27e-515">詳細については、「 [PLINQ および TPL のカスタムパーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 」および「[方法: 動的パーティションを実装する](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-515">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-516"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-516">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-517"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-517">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-518"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-518">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-519">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-519">-or-</span></span> 
<span data-ttu-id="3c27e-520"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-520">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-521">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-521">-or-</span></span> 
<span data-ttu-id="3c27e-522"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-522">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c27e-523"><paramref name="source" /> パーティショナーの <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> プロパティは <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-523">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /> partitioner returns <see langword="false" />.</span></span>  
  
<span data-ttu-id="3c27e-524">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-524">-or-</span></span> 
<span data-ttu-id="3c27e-525"><paramref name="source" /> パーティショナー内のメソッドが <see langword="null" /> を返したときにスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-525">The exception that is thrown when any methods in the <paramref name="source" /> partitioner return <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-526">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-526">Parallel Loops</span></span></related>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-527">指定のデリゲートの 1 つからスローされる例外を含める目的でスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-527">The exception that is thrown to contain an exception thrown from one of the specified delegates.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,long&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`3&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-528">ソース内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-528">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-529">列挙可能なデータ ソース。</span><span class="sxs-lookup"><span data-stu-id="3c27e-529">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-530">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-530">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-531">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-531">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-532"><see langword="foreach" /> に対して、イテレーションが並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、64 ビットのインデックスを持つ <see langword="For Each" /> (Visual Basic の場合は <see cref="T:System.Collections.IEnumerable" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-532">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-533">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-533">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-534">`body` デリゲートは、`source` 列挙可能なの各要素に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-534">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="3c27e-535">このパラメーターには、現在の要素、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンス、および現在の要素のインデックス (<xref:System.Int64>) が含まれています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-535">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and the current element's index (<xref:System.Int64>).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-536"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました</span><span class="sxs-lookup"><span data-stu-id="3c27e-536">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-537"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-537">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-538">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-538">-or-</span></span> 
<span data-ttu-id="3c27e-539"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-539">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-540">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-540">-or-</span></span> 
<span data-ttu-id="3c27e-541"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-541">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-542">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-542">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-543"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-543">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-544">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-544">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`2&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource, System::Threading::Tasks::ParallelLoopState ^&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source, System.Threading.Tasks.ParallelLoopState&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource,System.Threading.Tasks.ParallelLoopState&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-545">ソース内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-545">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-546">列挙可能なデータ ソース。</span><span class="sxs-lookup"><span data-stu-id="3c27e-546">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-547">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-547">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-548">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-548">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-549"><see langword="foreach" /> に対して、イテレーションが並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる <see langword="For Each" /> (Visual Basic の場合は <see cref="T:System.Collections.IEnumerable" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-549">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-550">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-550">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-551">`body` デリゲートは、`source` 列挙可能なの各要素に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-551">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="3c27e-552">これには、現在の要素と、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンスのパラメーターがあります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-552">It is provided with the following parameters: the current element, and a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-553"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました</span><span class="sxs-lookup"><span data-stu-id="3c27e-553">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-554"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-554">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-555">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-555">-or-</span></span> 
<span data-ttu-id="3c27e-556"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-556">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-557">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-557">-or-</span></span> 
<span data-ttu-id="3c27e-558"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-558">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-559">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-559">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-560"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-560">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-561">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-561">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Action&lt;TSource&gt; body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action`1&lt;!!TSource&gt; body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource) (source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Action&lt;TSource&gt; ^ body);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Action&lt;'Source&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="body" Type="System.Action&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-562">ソース内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-562">The type of the data in the source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-563">列挙可能なデータ ソース。</span><span class="sxs-lookup"><span data-stu-id="3c27e-563">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-564">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-564">An object that configures the behavior of this operation.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-565">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-565">The delegate that is invoked once per iteration.</span></span></param>
        <summary><span data-ttu-id="3c27e-566"><see cref="T:System.Collections.IEnumerable" /> に対して、イテレーションが並列で実行される可能性があり、ループ オプションを構成できる <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-566">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and loop options can be configured.</span></span></summary>
        <returns><span data-ttu-id="3c27e-567">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-567">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-568">`body` デリゲートは、`source` 列挙可能なの各要素に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-568">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="3c27e-569">現在の要素がパラメーターとして提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-569">It is provided with the current element as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-570"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました</span><span class="sxs-lookup"><span data-stu-id="3c27e-570">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-571"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-571">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-572">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-572">-or-</span></span> 
<span data-ttu-id="3c27e-573"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-573">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-574">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-574">-or-</span></span> 
<span data-ttu-id="3c27e-575"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-575">The <paramref name="body" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-576">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-576">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-577"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-577">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-578">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-578">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-579"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-579">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="3c27e-580">スレッド ローカル データの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-580">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-581">元のデータ ソースを格納している順序付け可能なパーティショナー。</span><span class="sxs-lookup"><span data-stu-id="3c27e-581">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="3c27e-582">各タスクのローカル データの初期状態を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-582">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-583">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-583">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="3c27e-584">各タスクのローカル状態に対して最後の操作を行うデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-584">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="3c27e-585"><see langword="foreach" /> に対して、イテレーションが並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="For Each" /> (Visual Basic の場合は <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-585">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-586">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-586">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-587">このオーバーロードは、既定のパーティション構成をオーバーライドする場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-587">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="3c27e-588">たとえば、小さなループ本体では、範囲をパーティション分割することによってメリットが得られる場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-588">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="3c27e-589"><xref:System.Threading.Tasks.Parallel.ForEach%2A> メソッドでは、動的パーティション分割をサポートするためにカスタムパーティショナーが想定されています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-589">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="3c27e-590">詳細については、「 [PLINQ および TPL のカスタムパーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 」および「[方法: 動的パーティションを実装する](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-590">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="3c27e-591">`localInit` デリゲートは、ループの実行に参加するタスクごとに1回呼び出され、各タスクの最初のローカル状態を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-591">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="3c27e-592">これらの初期状態は、各タスクの最初の `body` 呼び出しに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-592">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="3c27e-593">次に、後続のすべての本文呼び出しで、次の本文呼び出しに渡される、変更可能な状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-593">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="3c27e-594">最後に、各タスクの最後の本文呼び出しによって、`localFinally` デリゲートに渡される状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-594">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="3c27e-595">`localFinally` デリゲートは、各タスクのローカル状態に対して最後のアクションを実行するために、タスクごとに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-595">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="3c27e-596">このデリゲートは、複数のタスクで同時に呼び出される場合があります。そのため、共有変数へのアクセスを同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-596">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="3c27e-597"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドは、既存のタスクが完了し、新しいタスクに置き換えられるため、実行の有効期間中にスレッドよりも多くのタスクを使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-597">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="3c27e-598">これにより、基になる <xref:System.Threading.Tasks.TaskScheduler> オブジェクトは、ループを処理するスレッドを追加、変更、または削除できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-598">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-599"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-599">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-600">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-600">-or-</span></span> 
<span data-ttu-id="3c27e-601"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-601">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-602">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-602">-or-</span></span> 
<span data-ttu-id="3c27e-603"><paramref name="localInit" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-603">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-604">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-604">-or-</span></span> 
<span data-ttu-id="3c27e-605"><paramref name="localFinally" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-605">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c27e-606"><paramref name="source" /><see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> の <see cref="T:System.Collections.Concurrent.Partitioner" /> プロパティは <see langword="false" /> を返します。またはパーティショナーは <see langword="null" /> パーティションを返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-606">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-607">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-607">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-608">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-608">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-609"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-609">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="3c27e-610">スレッド ローカル データの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-610">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-611">元のデータ ソースを格納しているパーティショナー。</span><span class="sxs-lookup"><span data-stu-id="3c27e-611">The partitioner that contains the original data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="3c27e-612">各タスクのローカル データの初期状態を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-612">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-613">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-613">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="3c27e-614">各タスクのローカル状態に対して最後の操作を行うデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-614">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="3c27e-615"><see langword="foreach" /> に対して、イテレーションが並列で実行される可能性があり、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="For Each" /> (Visual Basic の場合は <see cref="T:System.Collections.Concurrent.Partitioner" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-615">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-616">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-616">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-617">このオーバーロードは、既定のパーティション構成をオーバーライドする場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-617">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="3c27e-618">たとえば、小さなループ本体では、範囲をパーティション分割することによってメリットが得られる場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-618">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="3c27e-619"><xref:System.Threading.Tasks.Parallel.ForEach%2A> メソッドでは、動的パーティション分割をサポートするためにカスタムパーティショナーが想定されています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-619">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="3c27e-620">詳細については、「 [PLINQ および TPL のカスタムパーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 」および「[方法: 動的パーティションを実装する](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-620">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="3c27e-621">`localInit` デリゲートは、ループの実行に参加するスレッドごとに1回呼び出され、各タスクの最初のローカル状態を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-621">The `localInit` delegate is invoked once for each thread that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="3c27e-622">これらの初期状態は、各タスクの最初の `body` 呼び出しに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-622">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="3c27e-623">次に、後続のすべての本文呼び出しで、次の本文呼び出しに渡される、変更可能な状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-623">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="3c27e-624">最後に、各タスクの最後の本文呼び出しによって、`localFinally` デリゲートに渡される状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-624">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="3c27e-625">`localFinally` デリゲートは、各タスクのローカル状態に対して最後のアクションを実行するために、タスクごとに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-625">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="3c27e-626">このデリゲートは、複数のタスクで同時に呼び出される場合があります。そのため、共有変数へのアクセスを同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-626">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="3c27e-627"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドは、既存のタスクが完了し、新しいタスクに置き換えられるため、実行の有効期間中にスレッドよりも多くのタスクを使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-627">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="3c27e-628">これにより、基になる <xref:System.Threading.Tasks.TaskScheduler> オブジェクトは、ループを処理するスレッドを追加、変更、または削除できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-628">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-629"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-629">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-630">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-630">-or-</span></span> 
<span data-ttu-id="3c27e-631"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-631">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-632">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-632">-or-</span></span> 
<span data-ttu-id="3c27e-633"><paramref name="localInit" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-633">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-634">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-634">-or-</span></span> 
<span data-ttu-id="3c27e-635"><paramref name="localFinally" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-635">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c27e-636"><paramref name="source" /><see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> の <see cref="T:System.Collections.Concurrent.Partitioner" /> プロパティは <see langword="false" /> を返します。またはパーティショナーは <see langword="null" /> パーティションを返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-636">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-637">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-637">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-638">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-638">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-639">ソース内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-639">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="3c27e-640">スレッド ローカル データの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-640">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-641">列挙可能なデータ ソース。</span><span class="sxs-lookup"><span data-stu-id="3c27e-641">An enumerable data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="3c27e-642">各タスクのローカル データの初期状態を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-642">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-643">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-643">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="3c27e-644">各タスクのローカル状態に対して最後の操作を行うデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-644">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="3c27e-645"><see langword="foreach" /> に対して、イテレーションが並列で実行される可能性があり、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="For Each" /> (Visual Basic の場合は <see cref="T:System.Collections.IEnumerable" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-645">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-646">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-646">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-647">`body` デリゲートは、`source` 列挙可能なの各要素に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-647">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="3c27e-648">このパラメーターには、現在の要素、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンス、現在の要素のインデックス (<xref:System.Int64>)、および同じスレッドで実行される繰り返し間で共有される可能性があるローカルの状態があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-648">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="3c27e-649">`localInit` デリゲートは、ループの実行に参加するタスクごとに1回呼び出され、各タスクの最初のローカル状態を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-649">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="3c27e-650">これらの初期状態は、各タスクの最初の `body` 呼び出しに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-650">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="3c27e-651">次に、後続のすべての本文呼び出しで、次の本文呼び出しに渡される、変更可能な状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-651">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="3c27e-652">最後に、各タスクの最後の本文呼び出しによって、`localFinally` デリゲートに渡される状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-652">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="3c27e-653">`localFinally` デリゲートは、各タスクのローカル状態に対して最後のアクションを実行するために、タスクごとに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-653">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="3c27e-654">このデリゲートは、複数のタスクで同時に呼び出される場合があります。そのため、共有変数へのアクセスを同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-654">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="3c27e-655"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドは、既存のタスクが完了し、新しいタスクに置き換えられるため、実行の有効期間中にスレッドよりも多くのタスクを使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-655">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="3c27e-656">これにより、基になる <xref:System.Threading.Tasks.TaskScheduler> オブジェクトは、ループを処理するスレッドを追加、変更、または削除できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-656">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-657"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-657">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-658">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-658">-or-</span></span> 
<span data-ttu-id="3c27e-659"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-659">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-660">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-660">-or-</span></span> 
<span data-ttu-id="3c27e-661"><paramref name="localInit" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-661">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-662">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-662">-or-</span></span> 
<span data-ttu-id="3c27e-663"><paramref name="localFinally" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-663">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-664">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-664">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-665">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-665">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-666">ソース内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-666">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="3c27e-667">スレッド ローカル データの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-667">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-668">列挙可能なデータ ソース。</span><span class="sxs-lookup"><span data-stu-id="3c27e-668">An enumerable data source.</span></span></param>
        <param name="localInit"><span data-ttu-id="3c27e-669">各タスクのローカル データの初期状態を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-669">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-670">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-670">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="3c27e-671">各タスクのローカル状態に対して最後の操作を行うデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-671">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="3c27e-672"><see langword="foreach" /> に対して、イテレーションが並列で実行される可能性があり、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="For Each" /> (Visual Basic の場合は <see cref="T:System.Collections.IEnumerable" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-672">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-673">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-673">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-674">`body` デリゲートは、`source` 列挙可能なの各要素に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-674">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="3c27e-675">これには、現在の要素、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンス、および同じスレッドで実行される繰り返し間で共有される可能性があるローカル状態のパラメーターが含まれます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-675">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="3c27e-676">`localInit` デリゲートは、ループの実行に参加するタスクごとに1回呼び出され、各タスクの最初のローカル状態を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-676">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="3c27e-677">これらの初期状態は、各タスクの最初の `body` 呼び出しに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-677">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="3c27e-678">次に、後続のすべての本文呼び出しで、次の本文呼び出しに渡される、変更可能な状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-678">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="3c27e-679">最後に、各タスクの最後の本文呼び出しによって、`localFinally` デリゲートに渡される状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-679">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="3c27e-680">`localFinally` デリゲートは、各タスクのローカル状態に対して最後のアクションを実行するために、スレッドごとに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-680">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="3c27e-681">このデリゲートは、複数のタスクで同時に呼び出される場合があります。そのため、共有変数へのアクセスを同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-681">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="3c27e-682"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドは、既存のタスクが完了し、新しいタスクに置き換えられるため、実行の有効期間中にスレッドよりも多くのタスクを使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-682">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="3c27e-683">これにより、基になる <xref:System.Threading.Tasks.TaskScheduler> オブジェクトは、ループを処理するスレッドを追加、変更、または削除できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-683">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c27e-684">次の例は、ローカル状態で <xref:System.Threading.Tasks.Parallel.ForEach%2A> メソッドを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-684">The following example shows how to use a <xref:System.Threading.Tasks.Parallel.ForEach%2A> method with local state:</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#02](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelforeach.cs#02)]
 [!code-vb[System.Threading.Tasks.Parallel#02](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelforeach.vb#02)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-685"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-685">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-686">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-686">-or-</span></span> 
<span data-ttu-id="3c27e-687"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-687">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-688">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-688">-or-</span></span> 
<span data-ttu-id="3c27e-689"><paramref name="localInit" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-689">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-690">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-690">-or-</span></span> 
<span data-ttu-id="3c27e-691"><paramref name="localFinally" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-691">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-692">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-692">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-693">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-693">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As OrderablePartitioner(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-694"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-694">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="3c27e-695">スレッド ローカル データの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-695">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-696">元のデータ ソースを格納している順序付け可能なパーティショナー。</span><span class="sxs-lookup"><span data-stu-id="3c27e-696">The orderable partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-697">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-697">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="3c27e-698">各タスクのローカル データの初期状態を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-698">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-699">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-699">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="3c27e-700">各タスクのローカル状態に対して最後の操作を行うデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-700">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="3c27e-701"><see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> に対して、イテレーションが並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、64 ビットのインデックスとスレッド ローカル データを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-701">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-702">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-702">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-703">このオーバーロードは、既定のパーティション構成をオーバーライドする場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-703">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="3c27e-704">たとえば、小さなループ本体では、範囲をパーティション分割することによってメリットが得られる場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-704">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="3c27e-705"><xref:System.Threading.Tasks.Parallel.ForEach%2A> メソッドでは、動的パーティション分割をサポートするためにカスタムパーティショナーが想定されています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-705">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="3c27e-706">詳細については、「 [PLINQ および TPL のカスタムパーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 」および「[方法: 動的パーティションを実装する](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-706">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="3c27e-707">`localInit` デリゲートは、ループの実行に参加するタスクごとに1回呼び出され、各タスクの最初のローカル状態を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-707">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="3c27e-708">これらの初期状態は、各タスクの最初の `body` 呼び出しに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-708">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="3c27e-709">次に、後続のすべての本文呼び出しで、次の本文呼び出しに渡される、変更可能な状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-709">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="3c27e-710">最後に、各スレッドの最後の本文呼び出しによって、`localFinally` デリゲートに渡される状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-710">Finally, the last body invocation on each thread returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="3c27e-711">`localFinally` デリゲートは、各タスクのローカル状態に対して最後のアクションを実行するために、タスクごとに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-711">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="3c27e-712">このデリゲートは、複数のタスクで同時に呼び出される場合があります。そのため、共有変数へのアクセスを同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-712">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="3c27e-713"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドは、既存のタスクが完了し、新しいタスクに置き換えられるため、実行の有効期間中にスレッドよりも多くのタスクを使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-713">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="3c27e-714">これにより、基になる <xref:System.Threading.Tasks.TaskScheduler> オブジェクトは、ループを処理するスレッドを追加、変更、または削除できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-714">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-715"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-715">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-716">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-716">-or-</span></span> 
<span data-ttu-id="3c27e-717"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-717">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-718">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-718">-or-</span></span> 
<span data-ttu-id="3c27e-719"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-719">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-720">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-720">-or-</span></span> 
<span data-ttu-id="3c27e-721"><paramref name="localInit" /> または <paramref name="localFinally" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-721">The <paramref name="localInit" /> or <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c27e-722"><paramref name="source" /><see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> の <see cref="T:System.Collections.Concurrent.Partitioner" /> プロパティは <see langword="false" /> を返します。またはパーティショナーは <see langword="null" /> パーティションを返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-722">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-723">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-723">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-724"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-724">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-725"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-725">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-726">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-726">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Concurrent.Partitioner&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Concurrent.Partitioner`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As Partitioner(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Concurrent::Partitioner&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : System.Collections.Concurrent.Partitioner&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-727"><paramref name="source" /> の要素の型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-727">The type of the elements in <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="3c27e-728">スレッド ローカル データの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-728">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-729">元のデータ ソースを格納しているパーティショナー。</span><span class="sxs-lookup"><span data-stu-id="3c27e-729">The partitioner that contains the original data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-730">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-730">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="3c27e-731">各タスクのローカル データの初期状態を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-731">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-732">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-732">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="3c27e-733">各タスクのローカル状態に対して最後の操作を行うデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-733">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="3c27e-734"><see cref="T:System.Collections.Concurrent.Partitioner" /> に対して、イテレーションが並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-734">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation  with thread-local data on a <see cref="T:System.Collections.Concurrent.Partitioner" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-735">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-735">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-736">このオーバーロードは、既定のパーティション構成をオーバーライドする場合に提供されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-736">This overload is provided for scenarios where you want to override the default partitioning scheme.</span></span> <span data-ttu-id="3c27e-737">たとえば、小さなループ本体では、範囲をパーティション分割することによってメリットが得られる場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-737">For example, small loop bodies might benefit from partitioning the range.</span></span> <span data-ttu-id="3c27e-738"><xref:System.Threading.Tasks.Parallel.ForEach%2A> メソッドでは、動的パーティション分割をサポートするためにカスタムパーティショナーが想定されています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-738">The <xref:System.Threading.Tasks.Parallel.ForEach%2A> method expects custom partitioners to support dynamic partitioning.</span></span> <span data-ttu-id="3c27e-739">このオーバーロードは、静的な範囲のパーティション分割の恩恵を受ける可能性がある小さなループ本体を使用するシナリオに対して用意されています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-739">This overload is provided for scenarios with small loop bodies that might benefit from static range partitioning.</span></span> <span data-ttu-id="3c27e-740">パーティショナーは、動的パーティションをサポートする必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-740">Partitioners must support dynamic partitions.</span></span>  <span data-ttu-id="3c27e-741">詳細については、「 [PLINQ および TPL のカスタムパーティショナー](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) 」および「[方法: 動的パーティションを実装する](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-741">For more information, see [Custom Partitioners for PLINQ and TPL](~/docs/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl.md) and [How to: Implement Dynamic Partitions](~/docs/standard/parallel-programming/how-to-implement-dynamic-partitions.md).</span></span>  
  
 <span data-ttu-id="3c27e-742">`localInit` デリゲートは、ループの実行に参加するタスクごとに1回呼び出され、各タスクの最初のローカル状態を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-742">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="3c27e-743">これらの初期状態は、各タスクの最初の `body` 呼び出しに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-743">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="3c27e-744">次に、後続のすべての本文呼び出しで、次の本文呼び出しに渡される、変更可能な状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-744">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="3c27e-745">最後に、各タスクの最後の本文呼び出しによって、`localFinally` デリゲートに渡される状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-745">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="3c27e-746">`localFinally` デリゲートは、各タスクのローカル状態に対して最後のアクションを実行するために、タスクごとに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-746">The `localFinally` delegate is invoked once per task to perform a final action on each task's local state.</span></span> <span data-ttu-id="3c27e-747">このデリゲートは、複数のタスクで同時に呼び出される場合があります。そのため、共有変数へのアクセスを同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-747">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="3c27e-748"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドは、既存のタスクが完了し、新しいタスクに置き換えられるため、実行の有効期間中にスレッドよりも多くのタスクを使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-748">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="3c27e-749">これにより、基になる <xref:System.Threading.Tasks.TaskScheduler> オブジェクトは、ループを処理するスレッドを追加、変更、または削除できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-749">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-750"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-750">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-751">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-751">-or-</span></span> 
<span data-ttu-id="3c27e-752"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-752">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-753">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-753">-or-</span></span> 
<span data-ttu-id="3c27e-754"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-754">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-755">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-755">-or-</span></span> 
<span data-ttu-id="3c27e-756"><paramref name="localInit" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-756">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-757">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-757">-or-</span></span> 
<span data-ttu-id="3c27e-758"><paramref name="localFinally" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-758">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="3c27e-759"><paramref name="source" /><see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> の <see cref="T:System.Collections.Concurrent.Partitioner" /> プロパティは <see langword="false" /> を返します。またはパーティショナーは <see langword="null" /> パーティションを返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-759">The <see cref="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" /> property in the <paramref name="source" /><see cref="T:System.Collections.Concurrent.Partitioner" /> returns <see langword="false" /> or the partitioner returns <see langword="null" /> partitions.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-760">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-760">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-761"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-761">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-762"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-762">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-763">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-763">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,long,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`5&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, int64, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, long, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, int64, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,System.Int64,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-764">ソース内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-764">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="3c27e-765">スレッド ローカル データの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-765">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-766">列挙可能なデータ ソース。</span><span class="sxs-lookup"><span data-stu-id="3c27e-766">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-767">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-767">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="3c27e-768">各タスクのローカル データの初期状態を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-768">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-769">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-769">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="3c27e-770">各タスクのローカル状態に対して最後の操作を行うデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-770">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="3c27e-771"><see cref="T:System.Collections.IEnumerable" /> に対して、イテレーションが並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、スレッド ローカル データと 64 ビットのインデックスを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-771">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data and 64-bit indexes on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-772">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-772">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-773">`body` デリゲートは、`source` 列挙可能なの各要素に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-773">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="3c27e-774">このパラメーターには、現在の要素、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンス、現在の要素のインデックス (<xref:System.Int64>)、および同じスレッドで実行される繰り返し間で共有される可能性があるローカルの状態があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-774">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, the current element's index (<xref:System.Int64>), and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="3c27e-775">`localInit` デリゲートは、ループの実行に参加するタスクごとに1回呼び出され、各タスクの最初のローカル状態を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-775">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="3c27e-776">これらの初期状態は、各タスクの最初の `body` 呼び出しに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-776">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="3c27e-777">次に、後続のすべての本文呼び出しで、次の本文呼び出しに渡される、変更可能な状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-777">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="3c27e-778">最後に、各タスクの最後の本文呼び出しによって、`localFinally` デリゲートに渡される状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-778">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="3c27e-779">`localFinally` デリゲートは、各タスクのローカル状態に対して最後のアクションを実行するために、スレッドごとに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-779">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="3c27e-780">このデリゲートは、複数のタスクで同時に呼び出される場合があります。そのため、共有変数へのアクセスを同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-780">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="3c27e-781"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドは、既存のタスクが完了し、新しいタスクに置き換えられるため、実行の有効期間中にスレッドよりも多くのタスクを使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-781">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="3c27e-782">これにより、基になる <xref:System.Threading.Tasks.TaskScheduler> オブジェクトは、ループを処理するスレッドを追加、変更、または削除できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-782">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-783"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-783">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-784">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-784">-or-</span></span> 
<span data-ttu-id="3c27e-785"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-785">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-786">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-786">-or-</span></span> 
<span data-ttu-id="3c27e-787"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-787">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-788">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-788">-or-</span></span> 
<span data-ttu-id="3c27e-789"><paramref name="localInit" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-789">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-790">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-790">-or-</span></span> 
<span data-ttu-id="3c27e-791"><paramref name="localFinally" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-791">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-792"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-792">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-793"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-793">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-794">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-794">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-795">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-795">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ForEach&lt;TSource,TLocal&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource,TLocal&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Threading.Tasks.ParallelOptions parallelOptions, Func&lt;TLocal&gt; localInit, Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt; body, Action&lt;TLocal&gt; localFinally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.Tasks.ParallelLoopResult ForEach&lt;TSource, TLocal&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Func`1&lt;!!TLocal&gt; localInit, class System.Func`4&lt;!!TSource, class System.Threading.Tasks.ParallelLoopState, !!TLocal, !!TLocal&gt; body, class System.Action`1&lt;!!TLocal&gt; localFinally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ForEach(Of TSource, TLocal) (source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TLocal&gt;&#xA; static System::Threading::Tasks::ParallelLoopResult ForEach(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Threading::Tasks::ParallelOptions ^ parallelOptions, Func&lt;TLocal&gt; ^ localInit, Func&lt;TSource, System::Threading::Tasks::ParallelLoopState ^, TLocal, TLocal&gt; ^ body, Action&lt;TLocal&gt; ^ localFinally);" />
      <MemberSignature Language="F#" Value="static member ForEach : seq&lt;'Source&gt; * System.Threading.Tasks.ParallelOptions * Func&lt;'Local&gt; * Func&lt;'Source, System.Threading.Tasks.ParallelLoopState, 'Local, 'Local&gt; * Action&lt;'Local&gt; -&gt; System.Threading.Tasks.ParallelLoopResult" Usage="System.Threading.Tasks.Parallel.ForEach (source, parallelOptions, localInit, body, localFinally)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ParallelLoopResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TLocal" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="localInit" Type="System.Func&lt;TLocal&gt;" />
        <Parameter Name="body" Type="System.Func&lt;TSource,System.Threading.Tasks.ParallelLoopState,TLocal,TLocal&gt;" />
        <Parameter Name="localFinally" Type="System.Action&lt;TLocal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="3c27e-796">ソース内のデータの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-796">The type of the data in the source.</span></span></typeparam>
        <typeparam name="TLocal"><span data-ttu-id="3c27e-797">スレッド ローカル データの型。</span><span class="sxs-lookup"><span data-stu-id="3c27e-797">The type of the thread-local data.</span></span></typeparam>
        <param name="source"><span data-ttu-id="3c27e-798">列挙可能なデータ ソース。</span><span class="sxs-lookup"><span data-stu-id="3c27e-798">An enumerable data source.</span></span></param>
        <param name="parallelOptions"><span data-ttu-id="3c27e-799">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-799">An object that configures the behavior of this operation.</span></span></param>
        <param name="localInit"><span data-ttu-id="3c27e-800">各タスクのローカル データの初期状態を返す関数デリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-800">The function delegate that returns the initial state of the local data for each task.</span></span></param>
        <param name="body"><span data-ttu-id="3c27e-801">1 回のイテレーションにつき 1 回呼び出されるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-801">The delegate that is invoked once per iteration.</span></span></param>
        <param name="localFinally"><span data-ttu-id="3c27e-802">各タスクのローカル状態に対して最後の操作を行うデリゲート。</span><span class="sxs-lookup"><span data-stu-id="3c27e-802">The delegate that performs a final action on the local state of each task.</span></span></param>
        <summary><span data-ttu-id="3c27e-803"><see cref="T:System.Collections.IEnumerable" /> に対して、イテレーションが並列で実行される可能性があり、ループ オプションを構成でき、ループの状態を監視および操作できる、スレッド ローカル データを持つ <see langword="foreach" /> (Visual Basic の場合は <see langword="For Each" />) 操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-803">Executes a <see langword="foreach" /> (<see langword="For Each" /> in Visual Basic) operation with thread-local data on an <see cref="T:System.Collections.IEnumerable" /> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.</span></span></summary>
        <returns><span data-ttu-id="3c27e-804">完了したループの部分に関する情報を格納している構造。</span><span class="sxs-lookup"><span data-stu-id="3c27e-804">A structure that contains information about which portion of the loop completed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-805">`body` デリゲートは、`source` 列挙可能なの各要素に対して1回ずつ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-805">The `body` delegate is invoked once for each element in the `source` enumerable.</span></span> <span data-ttu-id="3c27e-806">これには、現在の要素、ループを途中で中断するために使用できる <xref:System.Threading.Tasks.ParallelLoopState> インスタンス、および同じスレッドで実行される繰り返し間で共有される可能性があるローカル状態のパラメーターが含まれます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-806">It is provided with the following parameters: the current element, a <xref:System.Threading.Tasks.ParallelLoopState> instance that may be used to break out of the loop prematurely, and some local state that may be shared amongst iterations that execute on the same thread.</span></span>  
  
 <span data-ttu-id="3c27e-807">`localInit` デリゲートは、ループの実行に参加するタスクごとに1回呼び出され、各タスクの最初のローカル状態を返します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-807">The `localInit` delegate is invoked once for each task that participates in the loop's execution and returns the initial local state for each of those tasks.</span></span> <span data-ttu-id="3c27e-808">これらの初期状態は、各タスクの最初の `body` 呼び出しに渡されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-808">These initial states are passed to the first `body` invocations on each task.</span></span> <span data-ttu-id="3c27e-809">次に、後続のすべての本文呼び出しで、次の本文呼び出しに渡される、変更可能な状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-809">Then, every subsequent body invocation returns a possibly modified state value that is passed to the next body invocation.</span></span> <span data-ttu-id="3c27e-810">最後に、各タスクの最後の本文呼び出しによって、`localFinally` デリゲートに渡される状態値が返されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-810">Finally, the last body invocation on each task returns a state value that is passed to the `localFinally` delegate.</span></span> <span data-ttu-id="3c27e-811">`localFinally` デリゲートは、各タスクのローカル状態に対して最後のアクションを実行するために、スレッドごとに1回呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-811">The `localFinally` delegate is invoked once per thread to perform a final action on each task's local state.</span></span> <span data-ttu-id="3c27e-812">このデリゲートは、複数のタスクで同時に呼び出される場合があります。そのため、共有変数へのアクセスを同期する必要があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-812">This delegate might be invoked concurrently on multiple tasks; therefore, you must synchronize access to any shared variables.</span></span>  
  
 <span data-ttu-id="3c27e-813"><xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドは、既存のタスクが完了し、新しいタスクに置き換えられるため、実行の有効期間中にスレッドよりも多くのタスクを使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-813">The <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method may use more tasks than threads over the lifetime of its execution, as existing tasks complete and are replaced by new tasks.</span></span> <span data-ttu-id="3c27e-814">これにより、基になる <xref:System.Threading.Tasks.TaskScheduler> オブジェクトは、ループを処理するスレッドを追加、変更、または削除できるようになります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-814">This gives the underlying <xref:System.Threading.Tasks.TaskScheduler> object the chance to add, change, or remove threads that service the loop.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-815"><paramref name="source" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-815">The <paramref name="source" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-816">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-816">-or-</span></span> 
<span data-ttu-id="3c27e-817"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-817">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-818">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-818">-or-</span></span> 
<span data-ttu-id="3c27e-819"><paramref name="body" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-819">The <paramref name="body" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-820">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-820">-or-</span></span> 
<span data-ttu-id="3c27e-821"><paramref name="localInit" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-821">The <paramref name="localInit" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-822">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-822">-or-</span></span> 
<span data-ttu-id="3c27e-823"><paramref name="localFinally" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-823">The <paramref name="localFinally" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-824"><paramref name="parallelOptions" /> 引数の <see cref="T:System.Threading.CancellationToken" /> が取り消されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-824">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> argument is canceled.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-825"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-825">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-826">すべてのスレッドでスローされたすべての個別の例外を含む例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-826">The exception that contains all the individual exceptions thrown on all threads.</span></span></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/msp-n-p/ff963552(v=pandp.10)"><span data-ttu-id="3c27e-827">並列ループ</span><span class="sxs-lookup"><span data-stu-id="3c27e-827">Parallel Loops</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3c27e-828">指定された一連のアクションの各アクションを実行します (場合によっては並列で)。</span><span class="sxs-lookup"><span data-stu-id="3c27e-828">Executes each of the provided actions, possibly in parallel.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Action[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Invoke (ParamArray actions As Action())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actions"><span data-ttu-id="3c27e-829">実行対象の <see cref="T:System.Action" /> の配列。</span><span class="sxs-lookup"><span data-stu-id="3c27e-829">An array of <see cref="T:System.Action" /> to execute.</span></span></param>
        <summary><span data-ttu-id="3c27e-830">指定された一連のアクションの各アクションを実行します (場合によっては並列で)。</span><span class="sxs-lookup"><span data-stu-id="3c27e-830">Executes each of the provided actions, possibly in parallel.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-831">このメソッドは、一連の操作を並列で実行するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-831">This method can be used to execute a set of operations, potentially in parallel.</span></span>  
  
 <span data-ttu-id="3c27e-832">操作が実行される順序や、並列で実行するかどうかは保証されません。</span><span class="sxs-lookup"><span data-stu-id="3c27e-832">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="3c27e-833">このメソッドは、指定された各操作が完了するまでは戻りません。通常または例外的な終了によって完了が発生したかどうかは関係ありません。</span><span class="sxs-lookup"><span data-stu-id="3c27e-833">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="3c27e-834">詳細については、「[How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-834">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3c27e-835">この例では、<xref:System.Threading.Tasks.Parallel.Invoke%2A> メソッドを他のメソッド、匿名デリゲート、およびラムダ式と共に使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="3c27e-835">This example demonstrates how to use the <xref:System.Threading.Tasks.Parallel.Invoke%2A> method with other methods, anonymous delegates, and lambda expressions.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.Parallel#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallel/cs/parallelinvoke.cs#01)]
 [!code-vb[System.Threading.Tasks.Parallel#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallel/vb/parallelinvoke.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-836"><paramref name="actions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-836">The <paramref name="actions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-837"><paramref name="actions" /> 配列内のアクションが例外をスローしたときにスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-837">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3c27e-838"><paramref name="actions" /> 配列に <see langword="null" /> 要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-838">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static void Invoke (System.Threading.Tasks.ParallelOptions parallelOptions, params Action[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Invoke(class System.Threading.Tasks.ParallelOptions parallelOptions, class System.Action[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Invoke (parallelOptions As ParallelOptions, ParamArray actions As Action())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Invoke(System::Threading::Tasks::ParallelOptions ^ parallelOptions, ... cli::array &lt;Action ^&gt; ^ actions);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Threading.Tasks.ParallelOptions * Action[] -&gt; unit" Usage="System.Threading.Tasks.Parallel.Invoke (parallelOptions, actions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parallelOptions" Type="System.Threading.Tasks.ParallelOptions" />
        <Parameter Name="actions" Type="System.Action[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-uwp-10.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="parallelOptions"><span data-ttu-id="3c27e-839">この操作の動作を構成するオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="3c27e-839">An object that configures the behavior of this operation.</span></span></param>
        <param name="actions"><span data-ttu-id="3c27e-840">実行対象のアクションの配列。</span><span class="sxs-lookup"><span data-stu-id="3c27e-840">An array of actions to execute.</span></span></param>
        <summary><span data-ttu-id="3c27e-841">操作がユーザーによって取り消されていない限り、指定された各アクションを実行します。アクションは並列で実行される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="3c27e-841">Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3c27e-842">このメソッドは、一連の操作を並列で実行するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-842">This method can be used to execute a set of operations, potentially in parallel.</span></span> <span data-ttu-id="3c27e-843"><xref:System.Threading.Tasks.ParallelOptions> 構造体を使用して渡されたキャンセルトークンを使用すると、呼び出し元は操作全体を取り消すことができます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-843">The cancellation token passed in with the <xref:System.Threading.Tasks.ParallelOptions> structure enables the caller to cancel the entire operation.</span></span> <span data-ttu-id="3c27e-844">詳細については、「[マネージド スレッドのキャンセル](~/docs/standard/threading/cancellation-in-managed-threads.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-844">For more information, see [Cancellation in Managed Threads](~/docs/standard/threading/cancellation-in-managed-threads.md).</span></span>  
  
 <span data-ttu-id="3c27e-845">操作が実行される順序や、並列で実行するかどうかは保証されません。</span><span class="sxs-lookup"><span data-stu-id="3c27e-845">No guarantees are made about the order in which the operations execute or whether they execute in parallel.</span></span> <span data-ttu-id="3c27e-846">このメソッドは、指定された各操作が完了するまでは戻りません。通常または例外的な終了によって完了が発生したかどうかは関係ありません。</span><span class="sxs-lookup"><span data-stu-id="3c27e-846">This method does not return until each of the provided operations has completed, regardless of whether completion occurs due to normal or exceptional termination.</span></span>  
  
 <span data-ttu-id="3c27e-847">詳細については、「[How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="3c27e-847">For more information, see [How to: Use Parallel.Invoke to Execute Parallel Operations](~/docs/standard/parallel-programming/how-to-use-parallel-invoke-to-execute-parallel-operations.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OperationCanceledException"><span data-ttu-id="3c27e-848"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationToken" /> が設定されます。</span><span class="sxs-lookup"><span data-stu-id="3c27e-848">The <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> is set.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="3c27e-849"><paramref name="actions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-849">The <paramref name="actions" /> argument is <see langword="null" />.</span></span>  
  
<span data-ttu-id="3c27e-850">または</span><span class="sxs-lookup"><span data-stu-id="3c27e-850">-or-</span></span> 
<span data-ttu-id="3c27e-851"><paramref name="parallelOptions" /> 引数が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="3c27e-851">The <paramref name="parallelOptions" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AggregateException"><span data-ttu-id="3c27e-852"><paramref name="actions" /> 配列内のアクションが例外をスローしたときにスローされる例外。</span><span class="sxs-lookup"><span data-stu-id="3c27e-852">The exception that is thrown when any action in the <paramref name="actions" /> array throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="3c27e-853"><paramref name="actions" /> 配列に <see langword="null" /> 要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="3c27e-853">The <paramref name="actions" /> array contains a <see langword="null" /> element.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="3c27e-854"><paramref name="parallelOptions" /> 内の <see cref="T:System.Threading.CancellationTokenSource" /> に関連付けられている <see cref="T:System.Threading.CancellationToken" /> は破棄されました。</span><span class="sxs-lookup"><span data-stu-id="3c27e-854">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <see cref="T:System.Threading.CancellationToken" /> in the <paramref name="parallelOptions" /> has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
