<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ad7da69e12c183a7640178f05ddcc28afb430476" /><Meta Name="ms.sourcegitcommit" Value="8ae9a18b248625c8e1851e607c00346a64849587" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2019" /><Meta Name="ms.locfileid" Value="75117542" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4c849-101">他のイテレーションと対話するように、並列ループのイテレーションを有効にします。</span><span class="sxs-lookup"><span data-stu-id="4c849-101">Enables iterations of parallel loops to interact with other iterations.</span></span> <span data-ttu-id="4c849-102">このクラスのインスタンスは、<see cref="T:System.Threading.Tasks.Parallel" /> クラスから各ループに提供されるため、コードでインスタンスを作成することはできません。</span><span class="sxs-lookup"><span data-stu-id="4c849-102">An instance of this class is provided by the <see cref="T:System.Threading.Tasks.Parallel" /> class to each loop; you can not create instances in your code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c849-103">このクラスのインスタンスをインスタンス化することはできないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="4c849-103">Note that you cannot instantiate an instance of this class.</span></span> <span data-ttu-id="4c849-104">これは、コンパイラによって、<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> または <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドの呼び出しの引数として自動的に生成されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-104">It is automatically generated by the compiler as an argument in a call to the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> or <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="4c849-105">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="4c849-105">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="4c849-106">`for`、`foreach` (では)、 C#`For` および `For Each` Visual Basic (in) などの構造体は、最も小さいインデックスから一番大きい方に、またはセット内の最初のオブジェクトから最後のに向かって順番に実行されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-106">Constructs such as `for` and `foreach` (in C#) and `For` and `For Each` (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last.</span></span> <span data-ttu-id="4c849-107">これに対し、<xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> メソッドと <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> メソッドでは実行されません。</span><span class="sxs-lookup"><span data-stu-id="4c849-107">In contrast, the <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> and <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> methods do not.</span></span> <span data-ttu-id="4c849-108">ループの個々のイテレーションは並列で実行されるため、開始と終了は任意の順序で実行できます。</span><span class="sxs-lookup"><span data-stu-id="4c849-108">Because individual iterations of the loop run in parallel, they can begin and end in any order.</span></span> <span data-ttu-id="4c849-109"><xref:System.Threading.Tasks.ParallelLoopState> クラスを使用すると、並列ループの個々のイテレーションが相互に対話できます。</span><span class="sxs-lookup"><span data-stu-id="4c849-109">The <xref:System.Threading.Tasks.ParallelLoopState> class allows individual iterations of parallel loops to interact with one another.</span></span> <span data-ttu-id="4c849-110"><xref:System.Threading.Tasks.ParallelLoopState> クラスを使用すると、次のことができます。</span><span class="sxs-lookup"><span data-stu-id="4c849-110">The <xref:System.Threading.Tasks.ParallelLoopState> class allows you to:</span></span>  
  
-   <span data-ttu-id="4c849-111">現在のイテレーションを終了し、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドを呼び出して、追加のイテレーションが開始されないようにします。</span><span class="sxs-lookup"><span data-stu-id="4c849-111">Exit the current iteration and prevent any additional iterations from starting by calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="4c849-112">これは、既に実行を開始しているイテレーションには影響しません。</span><span class="sxs-lookup"><span data-stu-id="4c849-112">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="4c849-113"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドを呼び出すことにより、現在のインデックスよりもインデックスが大きい場合に、実行されないようにします。</span><span class="sxs-lookup"><span data-stu-id="4c849-113">Prevent any iterations with an index greater than the current index from executing by calling the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="4c849-114">これは、既に実行を開始しているイテレーションには影響しません。</span><span class="sxs-lookup"><span data-stu-id="4c849-114">This does not affect iterations that have already begun execution.</span></span>  
  
-   <span data-ttu-id="4c849-115"><xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> プロパティの値を取得することによって、ループの反復処理で例外が発生したかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="4c849-115">Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> property.</span></span>  
  
-   <span data-ttu-id="4c849-116"><xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> プロパティの値を取得して、ループの反復処理によって <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドが呼び出されたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4c849-116">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property.</span></span> <span data-ttu-id="4c849-117">このプロパティを使用すると、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドの呼び出しの前に開始されたループの反復から戻ることができますが、まだ実行中であることがわかります。</span><span class="sxs-lookup"><span data-stu-id="4c849-117">You can use this property to return from iterations of the loop that started before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method but are still executing.</span></span>  
  
-   <span data-ttu-id="4c849-118">ループの反復処理で <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> または <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドが呼び出されたか、<xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> プロパティの値を取得することによって例外がスローされたかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4c849-118">Determine whether any iteration of the loop has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method or has thrown an exception by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property.</span></span>  
  
-   <span data-ttu-id="4c849-119"><xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティの値を取得することによって、Break が呼び出された反復処理のインデックスよりインデックスが大きい、実行時間の長いイテレーションから終了します。</span><span class="sxs-lookup"><span data-stu-id="4c849-119">Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c849-120">次の例では、ループの最大100の反復処理を並列実行します。</span><span class="sxs-lookup"><span data-stu-id="4c849-120">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="4c849-121">各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。</span><span class="sxs-lookup"><span data-stu-id="4c849-121">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="4c849-122">ランダムに生成された値によって、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドが呼び出されるループの反復処理が決定されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-122">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="4c849-123">この例の出力に示すように、インデックスが <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティ値よりも大きいイテレーションは、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドの呼び出しの後に開始されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-123">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="4c849-124"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドが呼び出されたときにループの反復処理が実行される可能性があるため、各反復処理は <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> プロパティを呼び出して、別のイテレーションが <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドを呼び出したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4c849-124">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="4c849-125">プロパティ値が `true`場合、反復処理は <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティの値をチェックし、現在のイテレーションのインデックス値より大きい場合は、直ちにを返します。</span><span class="sxs-lookup"><span data-stu-id="4c849-125">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="4c849-126"><see cref="T:System.Threading.Tasks.ParallelLoopState" /> インスタンスは、インスタンスが提供されたループの本体内でのみ使用されることを意図しています。</span><span class="sxs-lookup"><span data-stu-id="4c849-126">A <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance is meant to be used only within the body of the loop to which an instance was provided.</span></span>  <span data-ttu-id="4c849-127">関連するループが終了した後に、指定された <see cref="T:System.Threading.Tasks.ParallelLoopState" /> インスタンスを使用するのは安全ではありません。また、明示的に他のスレッドに渡し、そのスレッドがいつでもアクセスできるようにすることも安全ではありません。</span><span class="sxs-lookup"><span data-stu-id="4c849-127">It is not safe to use a provided <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.</span></span>  <span data-ttu-id="4c849-128">ループに含まれる各スレッドには、別の <see cref="T:System.Threading.Tasks.ParallelLoopState" /> インスタンスが提供されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-128">A different <see cref="T:System.Threading.Tasks.ParallelLoopState" /> instance will be provided to each thread involved in a loop.</span></span></threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="4c849-129">データの並列化 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="4c849-129">Data Parallelism (Task Parallel Library)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c849-130">現在のイテレーションの終了後、システムはできるだけ早く <see cref="T:System.Threading.Tasks.Parallel" /> ループの実行を終了する必要があることを通知します。</span><span class="sxs-lookup"><span data-stu-id="4c849-130">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c849-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> は、現在のイテレーションの後にイテレーションが実行されないことを示します。</span><span class="sxs-lookup"><span data-stu-id="4c849-131"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> indicates that no iterations after the current iteration should be run.</span></span> <span data-ttu-id="4c849-132">ループのその他の反復処理は実質的にキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="4c849-132">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="4c849-133">ただし、実行を既に開始しているイテレーションは停止されません。</span><span class="sxs-lookup"><span data-stu-id="4c849-133">However, it does not stop any iterations that have already begun execution.</span></span> <span data-ttu-id="4c849-134">たとえば、100が0から1000への並列ループの反復処理から呼び出され <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> た場合、100よりも前のすべてのイテレーションは実行されますが、まだ開始されていない101から1000へのイテレーションは実行されません。</span><span class="sxs-lookup"><span data-stu-id="4c849-134">For example, if <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</span></span>  
  
 <span data-ttu-id="4c849-135">実行時間の長いイテレーションの場合、現在のインデックスが <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>の現在の値よりも小さい場合、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> は <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティを現在のイテレーションのインデックスに設定します。</span><span class="sxs-lookup"><span data-stu-id="4c849-135">For long-running iterations that may already be executing, <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> sets the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property to the current iteration's index if the current index is less than the current value of <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>.</span></span> <span data-ttu-id="4c849-136">インデックスが競合している実行の最小のブレークイテレーションよりも大きいイテレーションを停止するには、次の手順を実行します。</span><span class="sxs-lookup"><span data-stu-id="4c849-136">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="4c849-137"><xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> プロパティが `true`かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4c849-137">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="4c849-138">インデックスが <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティ値よりも大きい場合は、イテレーションから終了します。</span><span class="sxs-lookup"><span data-stu-id="4c849-138">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="4c849-139">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="4c849-139">The example provides an illustration.</span></span>  
  
 <span data-ttu-id="4c849-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> は、通常、データソースに順序が存在する検索ベースのアルゴリズムで使用されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-140"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> is typically employed in search-based algorithms where an ordering is present in the data source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c849-141">次の例では、ループの最大100の反復処理を並列実行します。</span><span class="sxs-lookup"><span data-stu-id="4c849-141">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="4c849-142">各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。</span><span class="sxs-lookup"><span data-stu-id="4c849-142">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="4c849-143">ランダムに生成された値によって、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドが呼び出されるループの反復処理が決定されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-143">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="4c849-144">この例の出力に示すように、インデックスが <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティ値よりも大きいイテレーションは、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドの呼び出しの後に開始されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-144">As the output from the example shows, no iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value start after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="4c849-145"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドが呼び出されたときにループの反復処理が実行される可能性があるため、各反復処理は <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> プロパティを呼び出して、別のイテレーションが <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドを呼び出したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4c849-145">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="4c849-146">プロパティ値が `true`場合、反復処理は <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティの値をチェックし、現在のイテレーションのインデックス値より大きい場合は、直ちにを返します。</span><span class="sxs-lookup"><span data-stu-id="4c849-146">If  the property value is `true`, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4c849-147"><see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドは既に呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="4c849-147">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method was previously called.</span></span> <span data-ttu-id="4c849-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> と <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> は、同じループのイテレーションで組み合わせて使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="4c849-148"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="4c849-149">データの並列化 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="4c849-149">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c849-150">ループのいずれかのイテレーションが、そのイテレーションによって処理されなかった例外をスローしたかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="4c849-150">Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</span></span></summary>
        <value><span data-ttu-id="4c849-151">未処理の例外がスローされた場合は <see langword="true" /> します。それ以外の場合は、<see langword="false" />ます。</span><span class="sxs-lookup"><span data-stu-id="4c849-151"><see langword="true" /> if an unhandled exception was thrown; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="4c849-152">データの並列化 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="4c849-152">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c849-153">ループのいずれかのイテレーションが <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> メソッドを呼び出したかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="4c849-153">Gets whether any iteration of the loop has called the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method.</span></span></summary>
        <value><span data-ttu-id="4c849-154"><see langword="true" /> メソッドを呼び出していずれかのイテレーションが停止した場合は <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />、それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4c849-154"><see langword="true" /> if any iteration has stopped the loop by calling the <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c849-155">ループの実行時間の長い反復処理では、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> プロパティの値を取得して、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドの呼び出しが実行される前に実行を開始したループの反復があるかどうかを判断できます。</span><span class="sxs-lookup"><span data-stu-id="4c849-155">For long-running iterations of the loop, you can retrieve the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether any iterations of the loop that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method are still executing.</span></span> <span data-ttu-id="4c849-156">その後、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> プロパティの値を使用して、すぐに制御を返すか、正常に実行するかを決定できます。</span><span class="sxs-lookup"><span data-stu-id="4c849-156">You can then use the value of the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to determine whether they should return immediately or execute normally.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c849-157">次の例では、ループの最大1万の反復処理を並列実行します。</span><span class="sxs-lookup"><span data-stu-id="4c849-157">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="4c849-158">各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。</span><span class="sxs-lookup"><span data-stu-id="4c849-158">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="4c849-159">ランダムに生成された値によって、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドが呼び出されるループの反復処理が決定されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-159">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="4c849-160"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドが呼び出されると、ループの反復処理が実行される可能性が高いため、ラムダ式は <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> メソッドを呼び出して、別のイテレーションが <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドを呼び出したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4c849-160">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, the lambda expression calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="4c849-161">`true`が返された場合は、すぐにイテレーションが返されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-161">If it returns `true`, the iteration returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="4c849-162">データの並列化 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="4c849-162">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c849-163"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> を呼び出したループのイテレーションのうち、最下位のイテレーションを取得します。</span><span class="sxs-lookup"><span data-stu-id="4c849-163">Gets the lowest iteration of the loop from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span></summary>
        <value><span data-ttu-id="4c849-164"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> を呼び出したイテレーションのうち、最下位のイテレーション。</span><span class="sxs-lookup"><span data-stu-id="4c849-164">The lowest iteration from which <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> was called.</span></span> <span data-ttu-id="4c849-165"><see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> ループの場合、値は内部的に生成されたインデックスに基づきます。</span><span class="sxs-lookup"><span data-stu-id="4c849-165">In the case of a <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> loop, the value is based on an internally-generated index.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c849-166">並列ループの複数の反復処理によって、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="4c849-166">It is possible for multiple iterations of a parallel loop to call the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="4c849-167">指定されている場合、この値は <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>を呼び出したイテレーションの最小インデックスです。</span><span class="sxs-lookup"><span data-stu-id="4c849-167">If they do, this value is the smallest index of an iteration that called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>.</span></span> <span data-ttu-id="4c849-168"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A>呼び出されたループの反復がない場合、このプロパティは `null`を返します。</span><span class="sxs-lookup"><span data-stu-id="4c849-168">If no iteration of the loop called <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, this property returns `null`.</span></span> <span data-ttu-id="4c849-169">プロパティ値は、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドを呼び出すことによって影響を受けないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="4c849-169">Note that the property value is unaffected by calls to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 <span data-ttu-id="4c849-170"><xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドを呼び出すイテレーション後のすべてのイテレーションが実行されない必要がある、実行時間の長いイテレーションでは、<xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティを使用して、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドの呼び出しの前に実行を開始したイテレーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="4c849-170">In long-running iterations in which all iterations after the iteration that calls the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method need not run, the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property is used to terminate iterations that began execution before the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="4c849-171">インデックスが競合している実行の最小のブレークイテレーションよりも大きいイテレーションを停止するには、次の手順を実行します。</span><span class="sxs-lookup"><span data-stu-id="4c849-171">To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</span></span>  
  
1.  <span data-ttu-id="4c849-172"><xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> プロパティが `true`かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4c849-172">Check whether the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is `true`.</span></span>  
  
2.  <span data-ttu-id="4c849-173">インデックスが <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティ値よりも大きい場合は、イテレーションから終了します。</span><span class="sxs-lookup"><span data-stu-id="4c849-173">Exit from the iteration if its index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value.</span></span>  
  
 <span data-ttu-id="4c849-174">具体的な例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="4c849-174">The example provides an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c849-175">次の例では、ループの最大100の反復処理を並列実行します。</span><span class="sxs-lookup"><span data-stu-id="4c849-175">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="4c849-176">各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。</span><span class="sxs-lookup"><span data-stu-id="4c849-176">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="4c849-177">ランダムに生成された値によって、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドが呼び出されるループの反復処理が決定されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-177">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="4c849-178">これにより、インデックスが <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティ値よりも大きいイテレーションは、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドの呼び出しの後から開始されますが、実行を開始したイテレーションには影響しません。</span><span class="sxs-lookup"><span data-stu-id="4c849-178">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="4c849-179">これらの処理が完了しないようにするために、各イテレーションは <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> メソッドを呼び出して、別のイテレーションが <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドを呼び出したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4c849-179">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="4c849-180">その場合は、反復処理によって <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティの値がチェックされ、現在のイテレーションのインデックス値より大きい場合はが直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-180">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 <span data-ttu-id="4c849-181"><xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> 値は並列ループの外側ではスコープ外であるため、値を保持する場合は、ループの外部から参照できる変数に割り当てる必要があります。</span><span class="sxs-lookup"><span data-stu-id="4c849-181">Note that, because the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="4c849-182">データの並列化 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="4c849-182">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c849-183">このイテレーションまたは他のイテレーションからの要求に基づいて、ループの現在のイテレーションを終了する必要があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="4c849-183">Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</span></span></summary>
        <value><span data-ttu-id="4c849-184">現在のイテレーションを終了する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4c849-184"><see langword="true" /> if the current iteration should exit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c849-185"><xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> プロパティは、次のいずれかの条件下で `true` に設定されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-185">The <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property is set to `true` under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="4c849-186">ループの反復処理は、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> または <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="4c849-186">An iteration of the loop calls <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> or <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.</span></span>  
  
-   <span data-ttu-id="4c849-187">ループの反復処理では、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="4c849-187">An iteration of the loop throws an exception.</span></span>  
  
-   <span data-ttu-id="4c849-188">ループが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="4c849-188">The loop is canceled.</span></span>  
  
 <span data-ttu-id="4c849-189">このプロパティが `true`されている場合、<xref:System.Threading.Tasks.Parallel> クラスは、ループの実行開始からの追加の反復を事前に禁止しようとします。</span><span class="sxs-lookup"><span data-stu-id="4c849-189">When this property is `true`, the <xref:System.Threading.Tasks.Parallel> class will proactively attempt to prohibit additional iterations of the loop from starting execution.</span></span> <span data-ttu-id="4c849-190">ただし、追加のイテレーションが開始されるのを防ぐことができない場合もあります。</span><span class="sxs-lookup"><span data-stu-id="4c849-190">However, there may be cases where it is unable to prevent additional iterations from starting.</span></span>  
  
 <span data-ttu-id="4c849-191">また、実行時間の長いイテレーションの実行が既に開始されている場合もあります。</span><span class="sxs-lookup"><span data-stu-id="4c849-191">It may also be the case that a long-running iteration has already begun execution.</span></span> <span data-ttu-id="4c849-192">このような場合、プロパティが `true`を返す場合、イテレーションは明示的に <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> プロパティを確認し、実行を中止します。</span><span class="sxs-lookup"><span data-stu-id="4c849-192">In such cases, iterations may explicitly check the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> property and cease execution if the property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c849-193">次の例では、ループの最大100の反復処理を並列実行します。</span><span class="sxs-lookup"><span data-stu-id="4c849-193">The following example executes up to 100 iterations of a loop in parallel.</span></span> <span data-ttu-id="4c849-194">各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。</span><span class="sxs-lookup"><span data-stu-id="4c849-194">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="4c849-195">ランダムに生成された値によって、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドが呼び出されるループの反復処理が決定されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-195">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method is called.</span></span> <span data-ttu-id="4c849-196">これにより、インデックスが <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティ値よりも大きいイテレーションは、<xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドの呼び出しの後から開始されますが、実行を開始したイテレーションには影響しません。</span><span class="sxs-lookup"><span data-stu-id="4c849-196">This prevents iterations whose index is greater than the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property value from starting after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method, but it does not affect any iterations that have already begun executing.</span></span> <span data-ttu-id="4c849-197">これらの処理が完了しないようにするために、各イテレーションは <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> メソッドを呼び出して、別のイテレーションが <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> メソッドを呼び出したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4c849-197">To prevent these from completing, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> method.</span></span> <span data-ttu-id="4c849-198">その場合は、反復処理によって <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> プロパティの値がチェックされ、現在のイテレーションのインデックス値より大きい場合はが直ちに返されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-198">If so, the iteration checks the value of the <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> property and, if it is greater than the current iteration's index value, returns immediately.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="4c849-199">データの並列化 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="4c849-199">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c849-200">システムはできるだけ早く <see cref="T:System.Threading.Tasks.Parallel" /> ループの実行を終了する必要があることを通知します。</span><span class="sxs-lookup"><span data-stu-id="4c849-200">Communicates that the <see cref="T:System.Threading.Tasks.Parallel" /> loop should cease execution at the system's earliest convenience.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c849-201"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドを呼び出すと、まだ開始されていないループの反復処理を実行する必要がなくなります。</span><span class="sxs-lookup"><span data-stu-id="4c849-201">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method indicates that any iterations of the loop that have not yet started need not be run.</span></span> <span data-ttu-id="4c849-202">ループのその他の反復処理は実質的にキャンセルされます。</span><span class="sxs-lookup"><span data-stu-id="4c849-202">It effectively cancels any additional iterations of the loop.</span></span> <span data-ttu-id="4c849-203">ただし、実行を既に開始しているイテレーションは停止されません。</span><span class="sxs-lookup"><span data-stu-id="4c849-203">However, it does not stop any iterations that have already begun execution.</span></span>  
  
 <span data-ttu-id="4c849-204"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドを呼び出すと、実行中のループの反復処理に対して、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> プロパティによって `true` が返されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-204">Calling the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method causes the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property to return `true` for any iteration of the loop that is still executing.</span></span> <span data-ttu-id="4c849-205">これは、<xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> プロパティを確認し、その値が `true`場合に早期に終了できる、長時間実行されるイテレーションに特に便利です。</span><span class="sxs-lookup"><span data-stu-id="4c849-205">This is particularly useful for long-running iterations, which can check the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> property and exit early if its value is `true`.</span></span>  
  
 <span data-ttu-id="4c849-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> は通常、検索ベースのアルゴリズムで使用されます。結果が見つかった場合は、他のイテレーションを実行する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="4c849-206"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4c849-207">次の例では、ループの最大1万の反復処理を並列実行します。</span><span class="sxs-lookup"><span data-stu-id="4c849-207">The following example executes up to 10,000 iterations of a loop in parallel.</span></span> <span data-ttu-id="4c849-208">各イテレーションは、1 ~ 1000 ミリ秒のランダムな間隔で一時停止します。</span><span class="sxs-lookup"><span data-stu-id="4c849-208">Each iteration pauses for a random interval from 1 to 1,000 milliseconds.</span></span> <span data-ttu-id="4c849-209">ランダムに生成された値によって、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドが呼び出されるループの反復処理が決定されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-209">A randomly generated value determines on which iteration of the loop the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called.</span></span> <span data-ttu-id="4c849-210">この例の出力に示されているように、<xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドの呼び出しの後にイテレーションは実行されません。</span><span class="sxs-lookup"><span data-stu-id="4c849-210">As the output from the example shows, no iterations execute after the call to the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span>  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 <span data-ttu-id="4c849-211"><xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドが呼び出されたときにループの反復処理が実行される可能性があるため、各反復処理は <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> メソッドを呼び出して、別のイテレーションが <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> メソッドを呼び出したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="4c849-211">Because iterations of the loop are still likely to be executing when the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method is called, each iteration calls the <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> method to check whether another iteration has called the <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> method.</span></span> <span data-ttu-id="4c849-212">`true`が返された場合は、すぐにイテレーションが返されます。</span><span class="sxs-lookup"><span data-stu-id="4c849-212">If it returns `true`, the iteration returns immediately.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4c849-213"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> メソッドは、既に呼び出されています。</span><span class="sxs-lookup"><span data-stu-id="4c849-213">The <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> method was called previously.</span></span> <span data-ttu-id="4c849-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> と <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> は、同じループのイテレーションで組み合わせて使用することはできません。</span><span class="sxs-lookup"><span data-stu-id="4c849-214"><see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> and <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> may not be used in combination by iterations of the same loop.</span></span></exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md"><span data-ttu-id="4c849-215">データの並列化 (タスク並列ライブラリ)</span><span class="sxs-lookup"><span data-stu-id="4c849-215">Data Parallelism (Task Parallel Library)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
