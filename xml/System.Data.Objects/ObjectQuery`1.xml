<Type Name="ObjectQuery&lt;T&gt;" FullName="System.Data.Objects.ObjectQuery&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="05fd1bc2affac5635a8f6e8e08257d56834043ef" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="78957331" /></Metadata><TypeSignature Language="C#" Value="public class ObjectQuery&lt;T&gt; : System.Data.Objects.ObjectQuery, System.Collections.Generic.IEnumerable&lt;T&gt;, System.ComponentModel.IListSource, System.Linq.IOrderedQueryable&lt;T&gt;, System.Linq.IQueryable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectQuery`1&lt;T&gt; extends System.Data.Objects.ObjectQuery implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Linq.IOrderedQueryable, class System.Linq.IOrderedQueryable`1&lt;!T&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectQuery`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectQuery(Of T)&#xA;Inherits ObjectQuery&#xA;Implements IEnumerable(Of T), IListSource, IOrderedQueryable(Of T), IQueryable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ObjectQuery : System::Data::Objects::ObjectQuery, System::Collections::Generic::IEnumerable&lt;T&gt;, System::ComponentModel::IListSource, System::Linq::IOrderedQueryable&lt;T&gt;, System::Linq::IQueryable&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ObjectQuery&lt;'T&gt; = class&#xA;    inherit ObjectQuery&#xA;    interface IOrderedQueryable&lt;'T&gt;&#xA;    interface IQueryable&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IOrderedQueryable&#xA;    interface IQueryable&#xA;    interface IEnumerable&#xA;    interface IListSource" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="F#" Value="type ObjectQuery&lt;'T&gt; = class&#xA;    inherit ObjectQuery&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IOrderedQueryable&lt;'T&gt;&#xA;    interface IOrderedQueryable&#xA;    interface IListSource" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.ObjectQuery</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">クエリのエンティティ型です。</typeparam>
    <summary>指定されたオブジェクト コンテキスト内の概念モデルに対する型指定されたクエリを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601> ジェネリック クラスは、特定の型のオブジェクトを 0 個以上含んだコレクションを返すクエリを表します。 オブジェクト クエリを実行するには、事前に <xref:System.Data.Objects.ObjectContext> を定義する必要があります。 このコンテキストにより、クエリの作成と実行に必要な接続情報とメタデータ情報が取得されます。 オブジェクト クエリは次のシナリオで実行されます。

-   `foreach` (C#) や `For Each` (Visual Basic) 列挙などの操作を実行するとき。

-   <xref:System.Collections.Generic.List%601> コレクションにデータを設定するためにクエリが割り当てられているとき。

-   <xref:System.Data.Objects.ObjectQuery%601.Execute%2A> メソッドが明示的に呼び出されたとき。

 クエリは、[!INCLUDE[esql](~/includes/esql-md.md)] ステートメントまたは LINQ クエリを使用して作成するか、またはクラスに含まれているクエリ ビルダー メソッドを使用して段階的に構築できます。 いずれの場合も、結果は新しい <xref:System.Data.Objects.ObjectQuery%601> インスタンスであり、これが明示的に実行されるか列挙されることで、クエリがデータ ソースに送信されて実行され、結果が返されます。

 <xref:System.Data.Objects.ObjectQuery%601> で多いのはエンティティ型ですが、<xref:System.Data.Common.DbDataRecord> 型 (匿名型に投影する場合) またはプリミティブ型 (整数や文字列など) にすることもできます。 詳細については、「[オブジェクトクエリ](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))」を参照してください。



## Examples
 このトピックの例は、 [Microsoft SQL Server の製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。

 この例では、<xref:System.Data.Objects.ObjectQuery%601> クラスのインスタンスを作成する方法を示します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]

 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/9e7d8837-28c5-429d-a824-7bafb59724cf">Entity SQL 言語</related>
    <related type="Article" href="~/docs/framework/data/adonet/ef/language-reference/linq-to-entities.md">LINQ to Entities</related>
    <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Data.Objects.ObjectQuery`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601> は、スカラー結果のコレクションではなく単一のスカラー結果を表すように初期化できます。 一部の拡張メソッドは、入力としてコレクション結果を必要とします。 その場合は、該当するメソッドのいずれかが呼び出されたときに、<xref:System.ArgumentException> がスローされます。 詳細については、「[オブジェクトクエリ](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))」を参照してください。

 アプリケーションが実行時に Entity SQL クエリを生成する場合、データソースのコマンド長の制限事項に注意する必要があります。 Entity SQL では、クエリ内のコマンドテキストの長さに制限は適用されません。

 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリと結果の整形 (Entity Framework)</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String, context As ObjectContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
      </Parameters>
      <Docs>
        <param name="commandText">[!INCLUDE[esql](~/includes/esql-md.md)] クエリ。</param>
        <param name="context">クエリが実行される <see cref="T:System.Data.Objects.ObjectContext" />。</param>
        <summary>指定された <see cref="T:System.Data.Objects.ObjectQuery`1" /> コマンドを最初のクエリとして使用して、新しい [!INCLUDE[esql](~/includes/esql-md.md)] インスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 アプリケーションが実行時に Entity SQL クエリを生成する場合、データソースのコマンド長の制限事項に注意する必要があります。 Entity SQL では、クエリ内のコマンドテキストの長さに制限は適用されません。



## Examples
 このトピックの例は、 [Microsoft SQL Server の製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。 この例では、<xref:System.Data.Objects.ObjectQuery%601> クラスのインスタンスを作成する方法を示します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]

 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String, context As ObjectContext, mergeOption As MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext * System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context, mergeOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="commandText">[!INCLUDE[esql](~/includes/esql-md.md)] クエリ。</param>
        <param name="context">クエリが実行される <see cref="T:System.Data.Objects.ObjectContext" />。</param>
        <param name="mergeOption">このクエリによって取得されるエンティティを、同じ <see cref="T:System.Data.Objects.ObjectContext" /> に対する以前のクエリから返されたエンティティとどのようにマージするかを指定します。</param>
        <summary>指定された <see cref="T:System.Data.Objects.ObjectQuery`1" /> コマンドを最初のクエリとして使用し、さらに指定されたマージ オプションを使用して、新しい [!INCLUDE[esql](~/includes/esql-md.md)] インスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 アプリケーションが実行時に Entity SQL クエリを生成する場合、データソースのコマンド長の制限事項に注意する必要があります。 Entity SQL では、クエリ内のコマンドテキストの長さに制限は適用されません。



## Examples
 この例は、Microsoft SQL Server の[製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。 <xref:System.Data.Objects.ObjectQuery%601> は、指定されたクエリ、<xref:System.Data.Objects.ObjectContext>、および <xref:System.Data.Objects.MergeOption> で初期化されます。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Distinct">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Distinct ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Distinct() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Distinct" />
      <MemberSignature Language="VB.NET" Value="Public Function Distinct () As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Distinct();" />
      <MemberSignature Language="F#" Value="member this.Distinct : unit -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Distinct " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>結果が一意となるようにクエリを制限します。</summary>
        <returns><see cref="T:System.Data.Objects.ObjectQuery`1" />SELECT DISTINCT<see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql"> が適用された元のインスタンスに相当する新しい </see> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 このクエリビルダーメソッドは、 [SELECT DISTINCT](~/docs/framework/data/adonet/ef/language-reference/select-entity-sql.md)が適用された元のクエリに相当する <xref:System.Data.Objects.ObjectQuery%601> インスタンスを返します。

 `DISTINCT` 演算子は、データソース内の比較できない列 (ntext など) へのマッピングを含むオブジェクトには適用できません。



## Examples
 このトピックの例は、 [Microsoft SQL Server の製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。 この例では、<xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> メソッドを使用して、新しい <xref:System.Data.Objects.ObjectQuery%601> オブジェクトを作成します。 次に、新しい <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> オブジェクトで <xref:System.Data.Objects.ObjectQuery%601> を呼び出して、このクエリの一意の結果を取得します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]

 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Except (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Except(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Except (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Except(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Except : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Except query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">クエリから除外する結果を表す <see cref="T:System.Data.Objects.ObjectQuery`1" />。</param>
        <summary>別のオブジェクト クエリの結果を基に一部の結果を除外することで、クエリの結果を制限します。</summary>
        <returns>指定された <see cref="T:System.Data.Objects.ObjectQuery`1" /> に基づいて <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/except-entity-sql">EXCEPT</see> が適用された元のインスタンスに相当する、新しい <paramref name="query" /> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 除外する結果を定義する指定された `query` は、同じ型であるか、または <xref:System.Data.Objects.ObjectQuery%601>と互換性のある型である必要があります。

 指定された `query` で定義されているパラメーターは、<xref:System.Data.Objects.ObjectQuery%601> インスタンスで定義されているパラメーターとマージされます。 パラメーターは、結合された <xref:System.Data.Objects.ObjectParameterCollection> 内で一意である必要があります。 結合されたコレクション内に同じ名前のパラメーターが 2 つ存在することはできません。 詳細については、「[クエリビルダーメソッド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))」を参照してください。

 結果のクエリは、<xref:System.Data.Objects.ObjectQuery%601> が呼び出された <xref:System.Data.Objects.ObjectQuery%601.Except%2A> インスタンスから接続を継承します。



## Examples
 この例は、Microsoft SQL Server の[製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。 この例では、<xref:System.Data.Objects.ObjectQuery%601.Except%2A> メソッドを使用して新しい <xref:System.Data.Objects.ObjectQuery%601> オブジェクトを作成し、新しいクエリの結果を反復処理します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_except)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_except)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> パラメーターが <see langword="null" /> または空の文字列です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリと結果の整形 (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;T&gt; Execute (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!T&gt; Execute(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function Execute (mergeOption As MergeOption) As ObjectResult(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectResult&lt;T&gt; ^ Execute(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectResult&lt;'T&gt;" Usage="objectQuery.Execute mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">クエリの実行時に使用する <see cref="T:System.Data.Objects.MergeOption" />。 既定では、 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />です。</param>
        <summary>指定されたマージ オプションを使用してオブジェクト クエリを実行します。</summary>
        <returns>クエリによって返されるエンティティ オブジェクトのコレクションを含む <see cref="T:System.Data.Objects.ObjectResult`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 オブジェクト クエリの既定のマージ オプションは <xref:System.Data.Objects.MergeOption.AppendOnly> です。 詳細については、「 [Id 解決、状態管理、および Change Tracking](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896269(v=vs.100))」を参照してください。



## Examples
 この例は、Microsoft SQL Server の[製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。 この例では、<xref:System.Data.Objects.ObjectResult%601> メソッドから <xref:System.Data.Objects.ObjectQuery.Execute%2A> を返します。 次に、列挙子を取得し、クエリ結果を反復処理します。 最後に、列挙子と <xref:System.Data.Objects.ObjectResult%601> オブジェクトを解放します。

 [!code-csharp[DP ObjectServices Concepts#QueryResult](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#queryresult)]
 [!code-vb[DP ObjectServices Concepts#QueryResult](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#queryresult)]

 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; GroupBy (string keys, string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; GroupBy(string keys, string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupBy (keys As String, projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ GroupBy(System::String ^ keys, System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.GroupBy (keys, projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">結果のグループ化に使用するキー列。</param>
        <param name="projection">投影を定義する、選択したプロパティの一覧。</param>
        <param name="parameters">このメソッドで使用される 0 個以上のパラメーター。</param>
        <summary>指定された条件でクエリの結果をグループ化します。</summary>
        <returns><see cref="T:System.Data.Objects.ObjectQuery`1" />GROUP BY<see cref="T:System.Data.Common.DbDataRecord" /> が適用された元のインスタンスに相当する、<see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/group-by-entity-sql"> 型の新しい </see> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> は、`projection` パラメーターで指定されたプロジェクションを適用します。 つまり、<xref:System.Data.Objects.ObjectQuery%601> メソッドから返される <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> の型は、常に <xref:System.Data.Common.DbDataRecord> です。 詳細については、「[オブジェクトクエリ](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))」を参照してください。



## Examples
 この例は、Microsoft SQL Server の[製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。

 この例では、製品名でグループ化された既存のクエリの結果を含む <xref:System.Data.Objects.ObjectQuery%601> オブジェクトを新たに作成します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_groupby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_groupby)]

 この例では、`Contact.LastName`の最初の文字でグループ化され、アルファベット順に並べ替えられた、`Contact.LastName` 列を含む入れ子になったデータレコードのセットを返します。

 [!code-csharp[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_groupby)]
 [!code-vb[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_groupby)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> パラメーターが <see langword="null" /> または空の文字列です。

または

<paramref name="projection" /> パラメーターが <see langword="null" /> または空の文字列です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Include (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Include(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Include(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Include (path As String) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Include(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Include : string -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Include path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">クエリの結果で返す関連オブジェクトをドットで区切った一覧。</param>
        <summary>クエリ結果に含める関連オブジェクトを指定します。</summary>
        <returns>定義されたクエリ パスを使用する新しい <see cref="T:System.Data.Objects.ObjectQuery`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 クエリ パスは、Entity SQL および LINQ クエリで使用できます。

 パスは包括的です。 たとえば、include 呼び出しで `Include("Orders.OrderLines")`が指定されている場合、`OrderLines` だけでなく `Orders`も含まれます。 詳細については、「[関連オブジェクトの読み込み](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100))」を参照してください。

 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> メソッドを呼び出した場合、クエリ パスは <xref:System.Data.Objects.ObjectQuery%601> の返されたインスタンスでのみ有効です。 <xref:System.Data.Objects.ObjectQuery%601> の他のインスタンスとオブジェクト コンテキスト自体は影響を受けません。

 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> メソッドはクエリ オブジェクトを返すので、このメソッドを <xref:System.Data.Objects.ObjectQuery%601> で複数回呼び出すことで、次の例のようにクエリに複数のパスを指定できます。

 [!code-csharp[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#spanonlywithmultiplepaths)]
 [!code-vb[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#spanonlywithmultiplepaths)]



## Examples
 [!code-csharp[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithspan)]
 [!code-vb[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithspan)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> が <see langword="empty" /> です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Intersect (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Intersect(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Intersect(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Intersect : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Intersect query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">クエリに含める結果を表す <see cref="T:System.Data.Objects.ObjectQuery`1" />。</param>
        <summary>別のオブジェクト クエリに存在する結果のみを含めることで、クエリの結果を制限します。</summary>
        <returns>指定された <see cref="T:System.Data.Objects.ObjectQuery`1" /> に基づいて <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/intersect-entity-sql">INTERSECT</see> が適用された元のインスタンスに相当する、新しい <paramref name="query" /> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 含める結果を定義する指定された `query` は、同じ型であるか、または <xref:System.Data.Objects.ObjectQuery%601>と互換性のある型である必要があります。

 指定された `query` で定義されているパラメーターは、<xref:System.Data.Objects.ObjectQuery%601> インスタンスで定義されているパラメーターとマージされます。 パラメーターは、結合された <xref:System.Data.Objects.ObjectParameterCollection> 内で一意である必要があります。 結合されたコレクション内に同じ名前のパラメーターが 2 つ存在することはできません。 詳細については、「[クエリビルダーメソッド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))」を参照してください。

 結果のクエリは、<xref:System.Data.Objects.ObjectQuery%601> メソッドが呼び出された <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A> インスタンスから接続を継承します。



## Examples
 このトピックの例は、 [Microsoft SQL Server の製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。 この例では、他の 2 つのクエリの結果を含む <xref:System.Data.Objects.ObjectQuery%601> オブジェクトを新たに作成します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_intersect)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_intersect)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> パラメーターが <see langword="null" /> または空の文字列です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectQuery`1.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Data.Objects.ObjectQuery&lt;'T&gt;.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このオブジェクト クエリの名前を取得または設定します。</summary>
        <value>この <see langword="string" /> の名前を表す <see cref="T:System.Data.Objects.ObjectQuery`1" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 オブジェクト クエリの名前は、クエリ ビルダー メソッドの作成時に、シーケンス内の現在のオブジェクト クエリを名前で識別するために使用されます。 既定では、クエリ名は `it`です。 この名前は、<xref:System.Data.Objects.ObjectQuery`1.Where*> メソッド内の結合または <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> メソッド内で、現在のシーケンスを参照する際に便利です。 詳細については、「[クエリビルダーメソッド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))」を参照してください。

 <xref:System.Data.Objects.ObjectQuery%601.Name%2A> の <xref:System.Data.Objects.ObjectQuery%601> プロパティを設定すると、その値が後続のメソッドで別名として使用されます。

 <xref:System.Data.Objects.ObjectQuery%601.Name%2A> プロパティの値は、先頭を英字にする必要があり、英字、数字、およびアンダースコアを含めることができます。



## Examples
 この例では、最初の <xref:System.Data.Objects.ObjectQuery%601> の名前を "product" に設定し、この別名を後続の <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> メソッドで使用します。 このトピックの例は、 [Microsoft SQL Server の製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。

 [!code-csharp[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithaliasnamed)]
 [!code-vb[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithaliasnamed)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定時に指定された値が無効です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; OfType&lt;TResultType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; OfType&lt;TResultType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OfType``1" />
      <MemberSignature Language="VB.NET" Value="Public Function OfType(Of TResultType) () As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ OfType();" />
      <MemberSignature Language="F#" Value="member this.OfType : unit -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.OfType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResultType">フィルターを適用してクエリを実行したときに返された <see cref="T:System.Data.Objects.ObjectResult`1" /> の型。</typeparam>
        <summary>特定の型のみが結果となるようにクエリを制限します。</summary>
        <returns><see cref="T:System.Data.Objects.ObjectQuery`1" />OFTYPE<see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/oftype-entity-sql"> が適用された元のインスタンスに相当する、新しい </see> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<xref:System.Data.Objects.ObjectQuery`1.OfType*> は、クエリの結果を特定のエンティティ型または複合型でフィルター処理するために使用されます。 これは、オブジェクトの継承を持つ概念モデルをサポートします。 詳細については、「 [Entity Data Model: 継承](~/docs/framework/data/adonet/entity-data-model-inheritance.md)」を参照してください。

<xref:System.Data.Objects.ObjectQuery`1.OfType*> メソッドは、EDM で定義されているエンティティ型または複合型の <xref:System.Data.Objects.ObjectQuery%601> にのみ適用できます。

 ]]></format>
        </remarks>
        <exception cref="T:System.Data.EntitySqlException">指定された型が無効です。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/be01614e-070e-41be-9746-bb674b41e488(v=vs.90)">Table-Per-Hierarchy 継承を使用してオブジェクト クエリを作成および実行する方法 (Entity Framework)</related>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; OrderBy (string keys, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; OrderBy(string keys, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OrderBy (keys As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ OrderBy(System::String ^ keys, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.OrderBy (keys, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">結果の並べ替えに使用するキー列。</param>
        <param name="parameters">このメソッドで使用される 0 個以上のパラメーター。</param>
        <summary>指定された条件でクエリの結果を並べ替えます。</summary>
        <returns><see cref="T:System.Data.Objects.ObjectQuery`1" />ORDER BY<see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql"> が適用された元のインスタンスに相当する、新しい </see> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 入れ子になったクエリでの結果の並べ替えは保証されません。

 <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> は常に、シーケンス内の最終的なクエリビルダーメソッドである必要があります。



## Examples
 この例は、Microsoft SQL Server の[製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。 この例では、`ProductID`によって既存のクエリ順序の結果を含む新しい <xref:System.Data.Objects.ObjectQuery%601> オブジェクトを作成します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_orderby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_orderby)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="keys" /> パラメーターまたは <paramref name="parameters" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="key" /> が空の文字列です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; Select (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; Select(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ Select(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Select : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.Select (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="projection">投影を定義する、選択したプロパティの一覧。</param>
        <param name="parameters">このメソッドで使用される 0 個以上のパラメーター。</param>
        <summary>クエリの結果を、指定された投影で定義されているプロパティのみに制限します。</summary>
        <returns><see cref="T:System.Data.Objects.ObjectQuery`1" />SELECT<see cref="T:System.Data.Common.DbDataRecord" /> が適用された元のインスタンスに相当する、<see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql"> 型の新しい </see> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> は、`projection` パラメーターで指定されたプロジェクションを適用します。 <xref:System.Data.Objects.ObjectQuery%601> メソッドで返される <xref:System.Data.Objects.ObjectQuery%601.Select%2A> は、常に <xref:System.Data.Common.DbDataRecord> の行型です。 単純型、エンティティ型、または複合型の値を返すには、<xref:System.Data.Objects.ObjectQuery`1.SelectValue*> メソッドを使用します。 詳細については、「 [LINQ to Entities](~/docs/framework/data/adonet/ef/language-reference/linq-to-entities.md)」を参照してください。

 投影にナビゲーション プロパティが含まれている場合は、入れ子になった <xref:System.Data.Common.DbDataRecord> オブジェクトのコレクションがクエリの結果に含まれます。 詳細については、「[方法: ナビゲーションプロパティを使用してリレーションシップをナビゲートする](https://msdn.microsoft.com/library/b1d71c7d-16a7-4b46-96ac-690176bd5057)」を参照してください。



## Examples
 この例は、Microsoft SQL Server の[製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。 この例では、このクエリの結果の `ProductID` フィールドを含むデータレコードを結果とする新しい <xref:System.Data.Objects.ObjectQuery%601> を作成します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="projection" /> が <see langword="null" /> です。

または

 <paramref name="parameters" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="projection" /> が空の文字列です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="SelectValue&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; SelectValue&lt;TResultType&gt; (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; SelectValue&lt;TResultType&gt;(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectValue(Of TResultType) (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ SelectValue(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.SelectValue : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.SelectValue (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResultType"><see cref="T:System.Data.Objects.ObjectQuery`1" /> メソッドによって返された <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" /> の型。</typeparam>
        <param name="projection">投影の一覧。</param>
        <param name="parameters">解析時にスコープに含める必要があるオプションのクエリ パラメーターのセット。</param>
        <summary>クエリの結果を、投影で指定されたプロパティのみに制限します。</summary>
        <returns>特定の投影と互換性がある型の新しい <see cref="T:System.Data.Objects.ObjectQuery`1" /> インスタンス。 返される <see cref="T:System.Data.Objects.ObjectQuery`1" /> は、<see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT VALUE</see> が適用された元のインスタンスに相当します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> は、単純型、エンティティ型、または複合型の値を返す場合に使用されます。 値型ではなく行型を必要とする投影には、<xref:System.Data.Objects.ObjectQuery%601.Select%2A> メソッドを使用します。 詳細については、「[オブジェクトクエリ](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))」を参照してください。

 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> メソッドは、`projection` パラメーターによって指定されたプロジェクションを適用します。 <xref:System.Data.Objects.ObjectQuery%601> メソッドから返される <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> は、投影と互換性のある値型であり、かつ <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> と同じ型である必要があります。



## Examples
 この例は、Microsoft SQL Server の[製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。 この例では、既存のクエリの結果から投影された `ProductID` 値のシーケンスである結果を含む新しい <xref:System.Data.Objects.ObjectQuery%601> を作成します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_selectvalue)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_selectvalue)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="projection" /> が <see langword="null" /> です。

または

 <paramref name="parameters" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="projection" /> が空の文字列です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Skip (string keys, string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Skip(string keys, string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Skip (keys As String, count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Skip(System::String ^ keys, System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Skip : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Skip (keys, count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">結果の並べ替えに使用するキー列。</param>
        <param name="count">スキップする結果の数。 定数またはパラメーター参照を指定する必要があります。</param>
        <param name="parameters">解析時にスコープに含める必要があるオプションのクエリ パラメーターのセット。</param>
        <summary>指定された条件でクエリの結果を並べ替え、指定された数の結果をスキップします。</summary>
        <returns><see cref="T:System.Data.Objects.ObjectQuery`1" />ORDER BY<see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql"> と </see>SKIP[ の両方が適用された元のインスタンスに相当する、新しい ](~/docs/framework/data/adonet/ef/language-reference/skip-entity-sql.md) インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> メソッドを <xref:System.Data.Objects.ObjectQuery%601.Top%2A> メソッドの後に使用することはできません。 <xref:System.Data.Objects.ObjectQuery%601.Skip%2A>後に <xref:System.Data.Objects.ObjectQuery%601.Top%2A> を使用すると、句の[LIMIT](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md)ステートメントと同様に機能します。



## Examples
 この例では、クエリ結果の最初の3つのオブジェクトを `Product.ListPrice`で並べ替えて、5つの `Product` オブジェクトを取得します。

 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">任意の引数が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keys" /> が空の文字列です。

または

 <paramref name="count" /> が空の文字列です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="objectQuery.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クエリの結果を反復処理する列挙子を返します。</summary>
        <returns>結果の反復処理に使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A> を呼び出すとクエリが実行されます。

 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Top (string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Top(string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Top (count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Top(System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Top : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Top (count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="count">結果に文字列として返されるアイテムの数。</param>
        <param name="parameters">解析時にスコープに含める必要があるオプションのクエリ パラメーターのセット。</param>
        <summary>クエリの結果を、指定されたアイテム数に制限します。</summary>
        <returns><see cref="T:System.Data.Objects.ObjectQuery`1" />TOP<see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/top-entity-sql"> が適用された元のインスタンスに相当する、新しい </see> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> は、クエリが並べ替えられていない限り、非決定的です。

 <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> メソッドの後に <xref:System.Data.Objects.ObjectQuery%601.Top%2A> メソッドを使用すると、 [ORDER by](~/docs/framework/data/adonet/ef/language-reference/order-by-entity-sql.md)句の[LIMIT](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md)ステートメントと同様に機能します。



## Examples
 これらの例は、 [Microsoft SQL Server の製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。

 この例では、既存のクエリの最初の 2 つの結果を含む <xref:System.Data.Objects.ObjectQuery%601> を新たに作成します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_top)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_top)]

 この例では、クエリ結果の最初の3つのオブジェクトを `Product.ListPrice`で並べ替えて、5つの `Product` オブジェクトを取得します。 ページングの[制限](~/docs/framework/data/adonet/ef/language-reference/limit-entity-sql.md)ではなく <xref:System.Data.Objects.ObjectQuery%601.Top%2A> が使用されます。

 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="count" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="count" /> が空の文字列です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Union (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Union(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Union(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Union : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Union query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">追加する結果を表す <see cref="T:System.Data.Objects.ObjectQuery`1" />。</param>
        <summary>クエリの結果を、別のオブジェクト クエリの結果と重複しないように結合します。</summary>
        <returns>指定された <see cref="T:System.Data.Objects.ObjectQuery`1" /> の結果を追加するために <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/union-entity-sql">UNION</see> を適用した元のインスタンスに相当する、新しい <paramref name="query" /> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601.Union%2A> は、指定された `query` の結果を重複せずに追加します。

 追加する結果を定義する指定された `query` は、この <xref:System.Data.Objects.ObjectQuery%601>の型に昇格できる型または型と同じである必要があります。 たとえば、次の例は、`DiscontinuedProducts` を `Products`に昇格できるため、有効です。

```
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)
```

 `Products` を `DiscontinuedProducts`に昇格させることができないため、次のような例外がスローされます。

```
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)
```

 <xref:System.Data.Common.DbDataRecord>型の <xref:System.Data.Objects.ObjectQuery%601> では、両方のクエリのレコードの列数は同じである必要があります。また、渡された `query` の <xref:System.Data.Common.DbDataRecord> の列の型は、<xref:System.Data.Common.DbDataRecord> の <xref:System.Data.Objects.ObjectQuery%601>内の列の型に上位変換できる必要があります。

 指定された `query` で定義されているパラメーターは、<xref:System.Data.Objects.ObjectQuery%601> インスタンスで定義されているパラメーターとマージされます。 パラメーターは、結合された <xref:System.Data.Objects.ObjectParameterCollection> 内で一意である必要があります。 結合されたコレクション内に同じ名前のパラメーターが 2 つ存在することはできません。 詳細については、「[クエリビルダーメソッド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))」を参照してください。

 結果のクエリは、<xref:System.Data.Objects.ObjectQuery%601> が呼び出された <xref:System.Data.Objects.ObjectQuery%601.Union%2A> インスタンスから接続を継承します。



## Examples
 この例は、Microsoft SQL Server の[製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。 この例では、<xref:System.Data.Objects.ObjectQuery%601.Union%2A> メソッドを使用して、新しい <xref:System.Data.Objects.ObjectQuery%601> オブジェクトを作成します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_union)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_union)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> パラメーターが <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="UnionAll">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; UnionAll (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; UnionAll(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function UnionAll (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ UnionAll(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.UnionAll : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.UnionAll query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">追加する結果を表す <see cref="T:System.Data.Objects.ObjectQuery`1" />。</param>
        <summary>クエリの結果を、別のオブジェクト クエリの結果と、重複をすべて含めて結合します。</summary>
        <returns>指定された <see cref="T:System.Data.Objects.ObjectQuery`1" /> の結果を追加するために <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/union-entity-sql">UNION ALL</see> を適用した元のインスタンスに相当する、新しい <paramref name="query" /> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> は、指定された `query` の結果をすべての重複を含めて追加します。

 追加する結果を定義する指定された `query` は、この <xref:System.Data.Objects.ObjectQuery%601>の型に昇格できる型または型と同じである必要があります。 たとえば、次の例は、`DiscontinuedProducts` を `Products`に昇格できるため、有効です。

```
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)
```

 `Products` を `DiscontinuedProducts`に昇格させることができないため、次のような例外がスローされます。

```
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)
```

 <xref:System.Data.Common.DbDataRecord>型の <xref:System.Data.Objects.ObjectQuery%601> では、両方のクエリのレコードの列数は同じである必要があります。また、渡された `query` の <xref:System.Data.Common.DbDataRecord> の列の型は、<xref:System.Data.Common.DbDataRecord> の <xref:System.Data.Objects.ObjectQuery%601>内の列の型に上位変換できる必要があります。

 指定された `query` で定義されているパラメーターは、<xref:System.Data.Objects.ObjectQuery%601> インスタンスで定義されているパラメーターとマージされます。 パラメーターは、結合された <xref:System.Data.Objects.ObjectParameterCollection> 内で一意である必要があります。 結合されたコレクション内に同じ名前のパラメーターが 2 つ存在することはできません。 詳細については、「[クエリビルダーメソッド](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))」を参照してください。

 結果のクエリは、<xref:System.Data.Objects.ObjectQuery%601> が呼び出された <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> インスタンスから接続を継承します。



## Examples
 このトピックの例は、 [Microsoft SQL Server の製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。 この例では、<xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> メソッドを使用して、新しい <xref:System.Data.Objects.ObjectQuery%601> オブジェクトを作成します。 次に、新しい <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> オブジェクトで <xref:System.Data.Objects.ObjectQuery%601> メソッドを呼び出して、このクエリの一意の結果を取得します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> パラメーターが <see langword="null" /> です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Where (string predicate, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Where(string predicate, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Where (predicate As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Where(System::String ^ predicate, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Where : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Where (predicate, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="predicate">フィルター述語。</param>
        <param name="parameters">このメソッドで使用される 0 個以上のパラメーター。</param>
        <summary>指定されたフィルター条件と一致する結果となるようにクエリを制限します。</summary>
        <returns><see cref="T:System.Data.Objects.ObjectQuery`1" />WHERE<see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/where-entity-sql"> が適用された元のインスタンスに相当する、新しい </see> インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 この例は、Microsoft SQL Server の[製品サンプルデータベース](https://archive.codeplex.com/?p=msftdbprodsamples)に基づいています。 この例では、<xref:System.Data.Objects.ObjectQuery%601> という条件でフィルターされた既存のクエリの結果を含む `"it.ProductID = 900"` を新たに作成します。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_where)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_where)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> が <see langword="null" /> です。

または

 <paramref name="parameters" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="predicate" /> が空の文字列です。</exception>
        <related type="Article" href="~/docs/framework/data/adonet/ef/querying-a-conceptual-model.md">オブジェクトとしてのデータのクエリ (Entity Framework)</related>
      </Docs>
    </Member>
  </Members>
</Type>
