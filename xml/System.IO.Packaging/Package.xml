<Type Name="Package" FullName="System.IO.Packaging.Package">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5b68c81cb631b0817d227f7a71b1df4c7148731b" /><Meta Name="ms.sourcegitcommit" Value="b0947fed0227b6b2e292d7efb43705b488b130aa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="04/29/2020" /><Meta Name="ms.locfileid" Value="82301502" /></Metadata><TypeSignature Language="C#" Value="public abstract class Package : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Package extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Packaging.Package" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Package&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Package abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type Package = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Packaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="WindowsBase" FromVersion="5.0.0.0" To="System.IO.Packaging" ToVersion="4.0.4.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.IO.Packaging" ToVersion="4.0.4.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.IO.Packaging" ToVersion="4.0.5.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>複数のデータ オブジェクトを格納可能なコンテナーを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package> は、移植性と効率的なアクセスのために定義された物理形式の1つのエンティティにオブジェクトを編成するために使用できる抽象クラスです。  
  
 ZIP ファイルは、<xref:System.IO.Packaging.Package>のプライマリ物理フォーマットです。  その他の <xref:System.IO.Packaging.Package> 実装では、XML ドキュメント、データベース、Web サービスなどの他の物理形式を使用できます。  
  
 ファイルシステムと同様に、<xref:System.IO.Packaging.Package> に含まれる項目は、フォルダーおよびファイルの階層構造で参照されます。  
  
 <xref:System.IO.Packaging.Package> 自体は抽象クラスですが、<xref:System.IO.Packaging.Package.Open%2A> メソッドによって <xref:System.IO.Packaging.ZipPackage> 派生クラスが既定値として使用されます。  
  
 <xref:System.IO.Packaging.PackagePart> ("part") は、<xref:System.IO.Packaging.Package>に格納されているオブジェクトを表す抽象クラスです。  
  
 <xref:System.IO.Packaging.PackageRelationship> ("relationship") は、ソース <xref:System.IO.Packaging.Package> または <xref:System.IO.Packaging.PackagePart> とターゲットオブジェクトの間の関連付けを定義します。  <xref:System.IO.Packaging.PackageRelationship> には、次の2つの形式のいずれかを指定できます。  
  
-   パッケージレベルのリレーションシップ (<xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=nameWithType> メソッドによって作成される) は、次のいずれかに <xref:System.IO.Packaging.Package> を関連付けます。  
  
    -   パッケージ内のターゲットパーツ。  
  
    -   パッケージの外部のターゲットリソース。  
  
-   (<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=nameWithType> メソッドによって作成された) パーツレベルのリレーションシップでは、ソース <xref:System.IO.Packaging.PackagePart> が次のいずれかに関連付けられます。  
  
    -   パッケージ内の別のターゲットパーツ。  
  
    -   パッケージの外部のターゲットリソース。  
  
 リレーションシップのソース <xref:System.IO.Packaging.Package> またはソース <xref:System.IO.Packaging.PackagePart> は、リレーションシップの "所有者" と見なされます。  ソースオブジェクトが削除されると、ソースオブジェクトが所有するすべてのリレーションシップも削除されます。  リレーションシップを作成または削除するプロセスでは、ソースオブジェクトまたはターゲットオブジェクトのいずれも物理的に変更されることはありません。  
  
 <xref:System.IO.Packaging.PackageDigitalSignature> ("デジタル署名") は、<xref:System.IO.Packaging.Package>に含まれるデジタル署名を表すパーツおよびリレーションシップの構成です。  デジタル署名は、発信者を識別し、<xref:System.IO.Packaging.Package> に含まれる署名済みのパーツおよびリレーションシップが変更されていないことを検証します。  
  
 パッケージは、デジタル Rights Management (DRM) もサポートしており、承認されたユーザーに付与された特定のアクセス権を使用して、<xref:System.IO.Packaging.Package> 内のコンテンツ要素を暗号化することができます。  
  
 <xref:System.IO.Packaging.Package> アーキテクチャに基づいて、<xref:System.Windows.Xps.Packaging.XpsDocument> は open [XML Paper Specification (XPS)](https://go.microsoft.com/fwlink/?LinkID=65761)に基づくドキュメントを格納するために設計されたパッケージの種類です。  
  
 この .NET Framework は、既定では、標準の ZIP ファイルを使用して、ページとドキュメントのコンテンツ、リソース、および関係を格納するためにパッケージを使用します。 任意の ZIP ファイルと同様に、アプリケーションでは <xref:System.IO.Packaging> クラスを使用して、1つの効率的なコンテナー内の任意の型または数のデータファイルを格納し、必要に応じて保護することができます。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.IO.Packaging.Package>を作成するための基本的な手順を示しています。  この例では、ドキュメントの一部として表示されるグラフィックイメージと共に、ドキュメントを含むパッケージが作成されます。  (これは、外部イメージファイルを参照する \<IMG > タグが HTML ファイルに含まれている場合と似ています)。 パッケージには、2つの <xref:System.IO.Packaging.PackageRelationship> 要素も含まれています。  1つ目の "パッケージレベル" リレーションシップは、ドキュメントパーツをパッケージのルート要素として定義します。  2つ目の "パーツレベル" リレーションシップは、ドキュメントパーツ (パーツレベルリレーションシップの "ソース") とイメージパーツ (パーツレベルリレーションシップの "ターゲット") の間の関連付けを定義します。  完全なサンプルについては、「[パッケージの作成サンプル](https://go.microsoft.com/fwlink/?LinkID=160055)」を参照してください。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Packaging.PackagePart" />
    <altmember cref="T:System.Windows.Xps.Packaging.XpsDocument" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=71255">Open パッケージング規則 (OPC) の仕様</related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=74494">オープンパッケージング規則のデジタル署名フレームワーク</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.IO.Packaging.Package" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (openFileAccess As FileAccess)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Package(System::IO::FileAccess openFileAccess);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.Package : System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="new System.IO.Packaging.Package openFileAccess" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">パッケージのファイル IO アクセス許可。</param>
        <summary>指定した <see cref="T:System.IO.Packaging.Package" /> を使用する <see cref="T:System.IO.FileAccess" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.%23ctor%2A> は <xref:System.IO.Packaging.Package> 抽象基本クラスのプロテクトコンストラクターです。 派生クラスで呼び出されると、<xref:System.IO.Packaging.Package.%23ctor%2A> コンストラクターは、派生クラスの新しいインスタンスを初期化します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="openFileAccess" /> の値が有効ではありません。</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Package (System.IO.FileAccess openFileAccess, bool streaming);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.IO.FileAccess openFileAccess, bool streaming) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (openFileAccess As FileAccess, streaming As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Package(System::IO::FileAccess openFileAccess, bool streaming);" />
      <MemberSignature Language="F#" Value="new System.IO.Packaging.Package : System.IO.FileAccess * bool -&gt; System.IO.Packaging.Package" Usage="new System.IO.Packaging.Package (openFileAccess, streaming)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="openFileAccess" Type="System.IO.FileAccess" Index="0" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="streaming" Type="System.Boolean" Index="1" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="openFileAccess">パッケージのファイル IO アクセス許可。</param>
        <param name="streaming">パッケージをストリーミング用に開く場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定した <see cref="T:System.IO.Packaging.Package" /> とストリーミング オプションを使用する <see cref="T:System.IO.FileAccess" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.%23ctor%2A> は <xref:System.IO.Packaging.Package> 抽象基本の抽象基本クラスのプロテクトコンストラクターです。 派生クラスで呼び出されると、<xref:System.IO.Packaging.Package.%23ctor%2A> コンストラクターは、派生クラスの新しいインスタンスを初期化します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="openFileAccess" /> の値が有効ではありません。</exception>
        <altmember cref="P:System.IO.Packaging.Package.FileOpenAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="package.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>パッケージと、基になるすべてのパーツ ストリームを保存して閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package> クラス <xref:System.IO.Packaging.Package.Close%2A> と <xref:System.IO.Packaging.Package.Dispose%2A> 同じ操作を実行します。 <xref:System.IO.Packaging.Package.Close%2A>を呼び出した場合、またはその逆の場合に <xref:System.IO.Packaging.Package.Dispose%2A> を呼び出す必要はありません。  
  
 <xref:System.IO.Packaging.Package.Close%2A> および <xref:System.IO.Packaging.Package.Dispose%2A> 内部で <xref:System.IO.Packaging.Package.Flush%2A>を呼び出します。  
  
> [!NOTE]
>  `using` ステートメント (`using` 名前空間ディレクティブとは異なります) は、パッケージを <xref:System.IO.Packaging.Package.Close%2A> および <xref:System.IO.Packaging.Package.Dispose%2A> するために推奨される方法です。  パッケージ[サンプルの作成](https://go.microsoft.com/fwlink/?LinkID=160055)と[パッケージの読み取りサンプル](https://go.microsoft.com/fwlink/?LinkID=160034)は、`using` ステートメントを使用してパッケージを終了および破棄する方法を示しています。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreatePart">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しいパッケージ パーツを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 新しい部分の空の <xref:System.IO.Stream> を初期化します。  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType> メソッドを使用して、パートに関連付けられているストリームインスタンスへの参照を取得できます。  
  
 パッケージパーツの詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様のセクション1.1 を参照してください。  
  
   
  
## Examples  
 次の例では、新しい <xref:System.IO.Packaging.PackagePart> を作成し、その部分にデータを格納する方法を示します。  完全なサンプルについては、「[パッケージの作成サンプル](https://go.microsoft.com/fwlink/?LinkID=160055)」を参照してください。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see cref="Overload:System.IO.Packaging.Package.CreatePart" /> は、派生クラス <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> メソッドを内部で呼び出して、派生クラスに実装されている物理形式に基づいて実際にパートを作成します。</para></block>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePart (partUri As Uri, contentType As String) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ CreatePart(Uri ^ partUri, System::String ^ contentType);" />
      <MemberSignature Language="F#" Value="member this.CreatePart : Uri * string -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePart (partUri, contentType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="partUri">新しいパーツの Uniform Resource Identifier (URI)。</param>
        <param name="contentType">データ ストリームのコンテンツ タイプ。</param>
        <summary>指定した URI とコンテンツ タイプを使用して、新しい非圧縮のパーツを作成します。</summary>
        <returns>新規作成されたパーツ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 新しい部分の空の <xref:System.IO.Stream> を初期化します。  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType> メソッドを使用して、パートに関連付けられているストリームインスタンスへの参照を取得できます。  
  
 パーツ <xref:System.IO.Packaging.PackagePart.CompressionOption%2A> が <xref:System.IO.Packaging.CompressionOption.NotCompressed?displayProperty=nameWithType>。  
  
 パッケージパーツの詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様のセクション1.1 を参照してください。  
  
   
  
## Examples  
 次の例では、新しい <xref:System.IO.Packaging.PackagePart> を作成し、その部分にデータを格納する方法を示します。  完全なサンプルについては、「[パッケージの作成サンプル](https://go.microsoft.com/fwlink/?LinkID=160055)」を参照してください。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> または <paramref name="contentType" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> は有効な <see cref="T:System.IO.Packaging.PackagePart" /> URI ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">指定した <paramref name="partUri" /> を持つパーツが、既にパッケージに存在します。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは読み取り専用です (新しいパーツを追加できません)。</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)" /> は、派生クラスの <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> メソッドを内部で呼び出し、派生クラスに実装されている物理形式に基づいて実際にパートを作成します。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart CreatePart(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreatePart (partUri As Uri, contentType As String, compressionOption As CompressionOption) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ CreatePart(Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberSignature Language="F#" Value="member this.CreatePart : Uri * string * System.IO.Packaging.CompressionOption -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePart (partUri, contentType, compressionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">新しいパーツの URI。</param>
        <param name="contentType">データ ストリームのコンテンツ タイプ。</param>
        <param name="compressionOption">データ ストリームの圧縮オプション。<see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> または <see cref="F:System.IO.Packaging.CompressionOption.Normal" /> 圧縮。</param>
        <summary>指定した URI、コンテンツ タイプ、および圧縮オプションを使用して、新しいパーツを作成します。</summary>
        <returns>新規作成されたパーツ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定の <xref:System.IO.Packaging.ZipPackage> 派生クラスの場合、<xref:System.IO.Packaging.Package.CreatePart%2A> メソッドは、<xref:System.IO.Packaging.CompressionOption.NotCompressed> または <xref:System.IO.Packaging.CompressionOption.Normal> 圧縮の2つの `compressionOption` 値のみをサポートします。  <xref:System.IO.Packaging.CompressionOption.Maximum>、<xref:System.IO.Packaging.CompressionOption.Fast>、または <xref:System.IO.Packaging.CompressionOption.SuperFast> のその他の <xref:System.IO.Packaging.CompressionOption> 値には <xref:System.IO.Packaging.CompressionOption.Normal> 圧縮が使用します。  
  
 <xref:System.IO.Packaging.Package.CreatePart%2A> 新しいパートの空の <xref:System.IO.Stream> を作成します。  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=nameWithType> メソッドを使用して、パートに関連付けられているストリームインスタンスへの参照を取得できます。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
   
  
## Examples  
 次の例では、新しい <xref:System.IO.Packaging.PackagePart> を作成し、その部分にデータを格納する方法を示します。  完全なサンプルについては、「[パッケージの作成サンプル](https://go.microsoft.com/fwlink/?LinkID=160055)」を参照してください。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePart](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepart)]
 [!code-vb[PackageWrite#PackageWriteCreatePart](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepart)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> または <paramref name="contentType" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> が有効な <see cref="T:System.IO.Packaging.PackagePart" /> Uniform Resource Identifier (URI) ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">指定した <paramref name="partUri" /> を持つパーツが、既にパッケージに存在します。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="compressionOption" /> 値が有効ではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは読み取り専用です (新しいパーツを追加できません)。</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> は、派生クラスの <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> メソッドを内部で呼び出し、派生クラスに実装されている物理形式に基づいて実際にパートを作成します。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.ZipPackagePart" />
      </Docs>
    </Member>
    <Member MemberName="CreatePartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart CreatePartCore (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart CreatePartCore(class System.Uri partUri, string contentType, valuetype System.IO.Packaging.CompressionOption compressionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreatePartCore (partUri As Uri, contentType As String, compressionOption As CompressionOption) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Packaging::PackagePart ^ CreatePartCore(Uri ^ partUri, System::String ^ contentType, System::IO::Packaging::CompressionOption compressionOption);" />
      <MemberSignature Language="F#" Value="abstract member CreatePartCore : Uri * string * System.IO.Packaging.CompressionOption -&gt; System.IO.Packaging.PackagePart" Usage="package.CreatePartCore (partUri, contentType, compressionOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
        <Parameter Name="contentType" Type="System.String" />
        <Parameter Name="compressionOption" Type="System.IO.Packaging.CompressionOption" />
      </Parameters>
      <Docs>
        <param name="partUri">作成中のパーツの Uniform Resource Identifier (URI)。</param>
        <param name="contentType">データ ストリームのコンテンツ タイプ。</param>
        <param name="compressionOption">データ ストリームの圧縮オプション。</param>
        <summary>派生クラスでオーバーライドされると、新しいパーツをパッケージ内に作成します。</summary>
        <returns>作成されたパーツ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生 <xref:System.IO.Packaging.Package.CreatePartCore%2A> メソッドは、派生クラスで実装された物理形式に基づいてパーツを作成するために、<xref:System.IO.Packaging.Package.CreatePart%2A> メソッドによって呼び出されます。  
  
 既定では、抽象 <xref:System.IO.Packaging.Package> クラスの <xref:System.IO.Packaging.ZipPackage> 派生クラスの実装が提供され、使用されます。  既定の操作では、<xref:System.IO.Packaging.Package.CreatePart%2A> 内部で <xref:System.IO.Packaging.ZipPackage> クラスの <xref:System.IO.Packaging.Package.CreatePartCore%2A> を呼び出して、ZIP ファイルに新しい部分を作成します。  
  
 既定の <xref:System.IO.Packaging.ZipPackage> 派生クラスの場合、<xref:System.IO.Packaging.Package.CreatePartCore%2A> メソッドは、<xref:System.IO.Packaging.CompressionOption.NotCompressed> または <xref:System.IO.Packaging.CompressionOption.Normal> 圧縮の2つの `compressionOption` 値のみをサポートします。  <xref:System.IO.Packaging.CompressionOption.Maximum>、<xref:System.IO.Packaging.CompressionOption.Fast>、または <xref:System.IO.Packaging.CompressionOption.SuperFast> のその他の <xref:System.IO.Packaging.CompressionOption> 値には <xref:System.IO.Packaging.CompressionOption.Normal> 圧縮が使用します。  
  
 パッケージモデルとパッケージパーツの詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様の第1章を参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生 <see cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" /> の実装では、それを呼び出す <see cref="Overload:System.IO.Packaging.Package.CreatePart" /> メソッドによって実行される順序や操作について、想定しないようにする必要があります。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateRelationship">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したパーツへのパッケージ レベル リレーションシップを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パッケージレベルのリレーションシップは、パッケージと、関連付けられているターゲットパーツまたはリソースとの間の関連付けを定義します。  パッケージレベルのリレーションシップには、2つの形式のいずれかを指定できます。  
  
-   パッケージ内のターゲット <xref:System.IO.Packaging.PackagePart> への <xref:System.IO.Packaging.Package> 間。  
  
-   パッケージ外部のターゲットリソースへの <xref:System.IO.Packaging.Package>。  
  
 パッケージリレーションシップでは、パッケージはリレーションシップの "所有者" と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。  リレーションシップを作成または削除するプロセスでは、ターゲットのパーツやリソースが物理的に変更されることはありません。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.IO.Packaging.Package> とルートドキュメントパーツの間の <xref:System.IO.Packaging.PackageRelationship> を作成する方法を示しています。  完全なサンプルについては、「[パッケージの作成サンプル](https://go.microsoft.com/fwlink/?LinkID=160055)」を参照してください。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[PackageWrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateRelationship (targetUri As Uri, targetMode As TargetMode, relationshipType As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.CreateRelationship (targetUri, targetMode, relationshipType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">ターゲット パーツの Uniform Resource Identifier (URI)。</param>
        <param name="targetMode">ターゲット パーツが、パッケージに対して <see cref="F:System.IO.Packaging.TargetMode.Internal" />、<see cref="F:System.IO.Packaging.TargetMode.External" /> のいずれであるかを示します。</param>
        <param name="relationshipType">リレーションシップのロールを一意に定義する URI。</param>
        <summary>指定した URI、ターゲット モード、およびリレーションシップ型を使用して、パーツへのパッケージ レベル リレーションシップを作成します。</summary>
        <returns>指定したパーツへのパッケージ レベル リレーションシップ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パッケージレベルのリレーションシップは、パッケージと、関連付けられているターゲットパーツまたはリソースとの間の関連付けを定義します。  パッケージレベルのリレーションシップには、2つの形式のいずれかを指定できます。  
  
-   パッケージ内のターゲットパーツへの <xref:System.IO.Packaging.Package> 間。  
  
-   パッケージ外部のターゲットリソースへの <xref:System.IO.Packaging.Package>。  
  
 パッケージリレーションシップでは、パッケージはリレーションシップの "所有者" と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> によって、ターゲットのパーツやリソースが物理的に変更されることはありません。  
  
 リレーションシップのターゲットを別のリレーションシップにすることはできません。  
  
 `targetMode` が <xref:System.IO.Packaging.TargetMode.Internal>として指定されている場合、`targetUri` は[RFC 3986](https://tools.ietf.org/html/rfc3986) UNIFORM RESOURCE IDENTIFIER (URI) 汎用構文仕様に従って形成される相対 URI である必要があります。  内部相対 URI には、スラッシュ ("/") 文字で始まる絶対パス ("/page1.3 xaml" や "/images/picture4.jpg" など)、または "." などの相対パスを指定できます。/imagespicture1.jpg "は、パッケージルート ("/") に対してベース URI として解決されます。  
  
 `targetMode` が <xref:System.IO.Packaging.TargetMode.External>として指定されている場合、`targetUri` には、 [RFC 3986](https://tools.ietf.org/html/rfc3986) UNIFORM RESOURCE IDENTIFIER (URI) 汎用構文仕様に従って形成された絶対 URI または相対 URI を指定できます。 外部ターゲットリソース "page2" を参照する絶対 URI の例としては、`http://www.microsoft.com/page2.xml` があります。  "images/picture1" は、外部ターゲットリソース "1. .jpg" も参照し、パッケージ自体の URI に対して解決される相対 URI の例です。  
  
 `relationshipType` は、 [RFC 3986](https://tools.ietf.org/html/rfc3986) UNIFORM RESOURCE IDENTIFIER (Uri) 汎用構文仕様に従って形成された uri である必要があります。  次の表は、Open パッケージング規則 (OPC) 仕様で定義されているパッケージレベルの `relationshipType` Uri を示しています。  
  
|パッケージレベルのリレーションシップ|リレーションシップの種類の URI|  
|---------------------------------|---------------------------|  
|コアプロパティ|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|デジタル署名|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|デジタル署名証明書|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|デジタル署名の配信元|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|縮小表示|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 パッケージとパッケージの関係の詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様のセクション1.3 を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.IO.Packaging.Package.CreateRelationship%2A> を使用して、<xref:System.IO.Packaging.Package> とルートドキュメントパーツの間に <xref:System.IO.Packaging.PackageRelationship> を作成する方法を示しています。  完全なサンプルについては、「[パッケージの作成サンプル](https://go.microsoft.com/fwlink/?LinkID=160055)」を参照してください。  
  
 [!code-csharp[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> または <paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetUri" /> パーツが <see cref="T:System.IO.Packaging.PackageRelationship" /> です。または <paramref name="targetMode" /> が <see cref="F:System.IO.Packaging.TargetMode.Internal" /> で、<paramref name="targetUri" /> が絶対 URI です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetMode" /> の値が有効ではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは読み取り専用です。</exception>
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship CreateRelationship(class System.Uri targetUri, valuetype System.IO.Packaging.TargetMode targetMode, string relationshipType, string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateRelationship (targetUri As Uri, targetMode As TargetMode, relationshipType As String, id As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ CreateRelationship(Uri ^ targetUri, System::IO::Packaging::TargetMode targetMode, System::String ^ relationshipType, System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.CreateRelationship : Uri * System.IO.Packaging.TargetMode * string * string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.CreateRelationship (targetUri, targetMode, relationshipType, id)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetUri" Type="System.Uri" />
        <Parameter Name="targetMode" Type="System.IO.Packaging.TargetMode" />
        <Parameter Name="relationshipType" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="targetUri">ターゲット パーツの Uniform Resource Identifier (URI)。</param>
        <param name="targetMode">ターゲット パーツが、パッケージに対して <see cref="F:System.IO.Packaging.TargetMode.Internal" />、<see cref="F:System.IO.Packaging.TargetMode.External" /> のいずれであるかを示します。</param>
        <param name="relationshipType">リレーションシップのロールを一意に定義する URI。</param>
        <param name="id">一意の XML 識別子。</param>
        <summary>指定した URI、ターゲット モード、リレーションシップ型、および [!INCLUDE[TLA#tla_id](~/includes/tlasharptla-id-md.md)] を使用して、パーツへのパッケージ レベル リレーションシップを作成します。</summary>
        <returns>指定したパーツへのパッケージ レベル リレーションシップ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パッケージレベルのリレーションシップは、パッケージと、関連付けられているターゲットパーツまたはリソースとの間の関連付けを定義します。  パッケージレベルのリレーションシップには、2つの形式のいずれかを指定できます。  
  
-   パッケージ内のターゲットパーツへの <xref:System.IO.Packaging.Package> 間。  
  
-   パッケージ外部のターゲットリソースへの <xref:System.IO.Packaging.Package>。  
  
 パッケージリレーションシップでは、パッケージはリレーションシップの "所有者" と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。  
  
 <xref:System.IO.Packaging.Package.CreateRelationship%2A> によって、ターゲットのパーツやリソースが物理的に変更されることはありません。  
  
 リレーションシップのターゲットを別のリレーションシップにすることはできません。  
  
 `id` 有効な XML 識別子である必要があります。  `id` 型は xsd: ID で、XML スキーマパート 2: データ型の仕様に規定されている名前付け規則に従う必要があります ( [https://www.w3.org/TR/xmlschema-2/#ID](https://www.w3.org/TR/xmlschema-2/#ID)を参照してください)。  
  
 `id` がとして指定されている場合 `null` 一意の ID が自動的に生成されます。  空の文字列によって指定された `id` が無効です。  
  
 `targetMode` が <xref:System.IO.Packaging.TargetMode.Internal>として指定されている場合、`targetUri` は[RFC 3986](https://tools.ietf.org/html/rfc3986) UNIFORM RESOURCE IDENTIFIER (URI) 汎用構文仕様に従って形成される相対 URI である必要があります。  内部相対 URI には、スラッシュ ("/") 文字で始まる絶対パス ("/page1.3 xaml" や "/images/picture4.jpg" など)、または "." などの相対パスを指定できます。/imagespicture1.jpg "は、パッケージルート ("/") に対してベース URI として解決されます。  
  
 `targetMode` が <xref:System.IO.Packaging.TargetMode.External>として指定されている場合、`targetUri` には、 [RFC 3986](https://tools.ietf.org/html/rfc3986) UNIFORM RESOURCE IDENTIFIER (URI) 汎用構文仕様に従って形成された絶対 URI または相対 URI を指定できます。 外部ターゲットリソース "page2" を参照する絶対 URI の例としては、`http://www.microsoft.com/page2.xml` があります。  "images/picture1" は、外部ターゲットリソース "1. .jpg" も参照し、パッケージ自体の URI に対して解決される相対 URI の例です。  
  
 `relationshipType` は、 [RFC 3986](https://tools.ietf.org/html/rfc3986) UNIFORM RESOURCE IDENTIFIER (Uri) 汎用構文仕様に従って形成された uri である必要があります。  次の表は、Open パッケージング規則 (OPC) 仕様で定義されているパッケージレベルの `relationshipType` Uri を示しています。  
  
|パッケージレベルのリレーションシップ|リレーションシップの種類の URI|  
|---------------------------------|---------------------------|  
|コアプロパティ|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|デジタル署名|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|デジタル署名証明書|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|デジタル署名の配信元|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|縮小表示|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 パッケージとパッケージの関係の詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様のセクション1.3 を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.IO.Packaging.Package.CreateRelationship%2A> を使用して、<xref:System.IO.Packaging.Package> とルートドキュメントパーツの間に <xref:System.IO.Packaging.PackageRelationship> を作成する方法を示しています。  完全なサンプルについては、「[パッケージの作成サンプル](https://go.microsoft.com/fwlink/?LinkID=160055)」を参照してください。  
  
 [!code-csharp[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackagerelationship)]
 [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackagerelationship)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetUri" /> または <paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="targetUri" /> パーツが <see cref="T:System.IO.Packaging.PackageRelationship" /> です。または <paramref name="targetMode" /> が <see cref="F:System.IO.Packaging.TargetMode.Internal" /> で、<paramref name="targetUri" /> が絶対 URI です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetMode" /> の値が有効ではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは読み取り専用です。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> が有効な XML 識別子ではないか、指定した <paramref name="id" /> を持つパーツが既にパッケージ内に存在します。</exception>
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePart">
      <MemberSignature Language="C#" Value="public void DeletePart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeletePart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePart(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeletePart (partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeletePart(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="member this.DeletePart : Uri -&gt; unit" Usage="package.DeletePart partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">削除するパーツの URI。</param>
        <summary>指定した URI を持つパーツをパッケージから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` は、スラッシュ ("/") 文字で始まる絶対パスで構成される相対 URI である必要があります。  絶対パスはパッケージルートに対する相対パスであり、 [RFC 3986](https://tools.ietf.org/html/rfc3986) UNIFORM RESOURCE IDENTIFIER (URI) 汎用構文仕様に従って形成されます。  "/page1. xaml" と "/images/picture4.jpg" は、有効な部分 Uri の例です。  
  
 指定された `partUri` を持つパーツがパッケージ内に存在しない場合、例外は発生しません。  (<xref:System.IO.Packaging.Package.PartExists%2A> メソッドを使用すると、指定した `partUri` を持つパーツがパッケージ内にあるかどうかを判断できます)。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> は有効な <see cref="T:System.IO.Packaging.PackagePart" /> URI ではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは読み取り専用です。</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> は、派生クラスの <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> メソッドを内部で呼び出し、派生クラスに実装されている物理形式に基づいて、実際にその部分を削除します。</para></block>
        <altmember cref="Overload:System.IO.Packaging.Package.CreatePart" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="DeletePartCore">
      <MemberSignature Language="C#" Value="protected abstract void DeletePartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DeletePartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub DeletePartCore (partUri As Uri)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void DeletePartCore(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member DeletePartCore : Uri -&gt; unit" Usage="package.DeletePartCore partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">削除する <see cref="P:System.IO.Packaging.PackagePart.Uri" /> の <see cref="T:System.IO.Packaging.PackagePart" />。</param>
        <summary>派生クラスでオーバーライドされると、指定した URI を持つパーツを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、抽象 <xref:System.IO.Packaging.Package> クラスの <xref:System.IO.Packaging.ZipPackage> 派生クラスの実装が提供され、使用されます。  既定の操作では、<xref:System.IO.Packaging.Package.DeletePart%2A> 内部的に <xref:System.IO.Packaging.ZipPackage> クラスの <xref:System.IO.Packaging.Package.DeletePartCore%2A> を呼び出して、派生クラスに実装されている物理形式に基づいて実際の削除操作を実行します。  
  
 パッケージモデルとパッケージパーツの詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様の第1章を参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラス <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> の実装は、派生クラスで実装された物理形式に基づいて、指定したパーツに対して <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> メソッドによって呼び出されます。  
  
派生 <see cref="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)" /> の実装では、それを呼び出す <see cref="M:System.IO.Packaging.Package.DeletePart(System.Uri)" /> メソッドによって実行される順序や操作について、想定しないようにする必要があります。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteRelationship">
      <MemberSignature Language="C#" Value="public void DeleteRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteRelationship (id As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.DeleteRelationship : string -&gt; unit" Usage="package.DeleteRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">削除する <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> の <see cref="T:System.IO.Packaging.PackageRelationship" />。</param>
        <summary>パッケージ レベル リレーションシップを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パッケージレベルのリレーションシップは、パッケージと、関連付けられているターゲットパーツまたはリソースとの間の関連付けを定義します。  パッケージレベルのリレーションシップには、2つの形式のいずれかを指定できます。  
  
-   パッケージ内のターゲットパーツへの <xref:System.IO.Packaging.Package> 間。  
  
-   パッケージ外部のターゲットリソースへの <xref:System.IO.Packaging.Package>。  
  
 パッケージリレーションシップでは、パッケージはリレーションシップの "所有者" と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。  
  
 指定された `id` とのリレーションシップがパッケージ内にない場合、例外は発生しません。  
  
 <xref:System.IO.Packaging.Package.DeleteRelationship%2A> によってターゲットパーツが物理的に変更されることはありません。  
  
 パッケージリレーションシップの詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様のセクション1.3 を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは読み取り専用です。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> が有効な XML 識別子でありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="package.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>すべてのパーツおよびリレーションシップの内容をフラッシュして保存し、パッケージを閉じ、すべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての変更が正しく保存されていることを確認するために、<xref:System.IO.Packaging.Package.Dispose%2A> も、パッケージに含まれているすべてのパーツおよびリレーションシップを終了し、フラッシュし、閉じる必要があります。  
  
 <xref:System.IO.Packaging.Package> クラスの場合、<xref:System.IO.Packaging.Package.Dispose%2A> と <xref:System.IO.Packaging.Package.Close%2A> 同じ操作を実行します。 <xref:System.IO.Packaging.Package.Close%2A>を呼び出した場合、またはその逆の場合に <xref:System.IO.Packaging.Package.Dispose%2A> を呼び出す必要はありません。  
  
 <xref:System.IO.Packaging.Package.Close%2A> および <xref:System.IO.Packaging.Package.Dispose%2A> 内部で <xref:System.IO.Packaging.Package.Flush%2A>を呼び出します。  
  
 非メモリリソースを割り当てて管理する派生クラスでは、<xref:System.IO.Packaging.Package.Dispose%2A> が呼び出されたときに、リソースを解放するために、このメソッドをオーバーライドする必要があります。 派生クラスのオーバーライドでは、<xref:System.IO.Packaging.Package.Flush%2A> と基本クラス <xref:System.IO.Packaging.Package.Dispose%2A> メソッドも呼び出して、基本クラスのクリーンアップが常に実行されるようにする必要があります。  
  
> [!NOTE]
>  `using` ステートメント (`using` 名前空間ディレクティブとは異なります) は、パッケージを <xref:System.IO.Packaging.Package.Close%2A> および <xref:System.IO.Packaging.Package.Dispose%2A> するために推奨される方法です。 [パッケージの記述サンプル](https://go.microsoft.com/fwlink/?LinkID=160055)では、`using` ステートメントを使用してパッケージを終了および破棄する方法を示します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IO.Packaging.Package.Flush" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="FileOpenAccess">
      <MemberSignature Language="C#" Value="public System.IO.FileAccess FileOpenAccess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.FileAccess FileOpenAccess" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.FileOpenAccess" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileOpenAccess As FileAccess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::FileAccess FileOpenAccess { System::IO::FileAccess get(); };" />
      <MemberSignature Language="F#" Value="member this.FileOpenAccess : System.IO.FileAccess" Usage="System.IO.Packaging.Package.FileOpenAccess" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.FileAccess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パッケージのファイル アクセス設定を取得します。</summary>
        <value><see cref="T:System.IO.FileAccess" /> 値、つまり <see cref="F:System.IO.FileAccess.Read" />、<see cref="F:System.IO.FileAccess.Write" />、または <see cref="F:System.IO.FileAccess.ReadWrite" /> の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.FileOpenAccess%2A>プロパティには既定値はありません。  ファイルアクセス設定は、新しいパッケージを作成するときに <xref:System.IO.Packaging.Package.%23ctor%2A> コンストラクター呼び出しで指定されるか、または既存のパッケージを開いたときに <xref:System.IO.Packaging.Package.Open%2A> 呼び出しで指定されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Flush();" />
      <MemberSignature Language="F#" Value="member this.Flush : unit -&gt; unit" Usage="package.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>パッケージに含まれているすべてのパーツおよびリレーションシップの内容を保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.Flush%2A> は、派生クラスの <xref:System.IO.Packaging.Package.FlushCore%2A> 実装を内部で呼び出して、実際の形式固有のフラッシュ操作を実行します。  派生クラスの <xref:System.IO.Packaging.Package.FlushCore%2A> メソッドは、実際には、特定の物理派生クラスの実装にパーツおよびリレーションシップの内容を保存します。  
  
 既定では、抽象 <xref:System.IO.Packaging.Package> 基底クラスの <xref:System.IO.Packaging.ZipPackage> 派生実装が提供され、使用されます。 既定の操作では、<xref:System.IO.Packaging.Package.Flush%2A> 内部で <xref:System.IO.Packaging.Package.FlushCore%2A> を呼び出して、パーツおよびリレーションシップを ZIP ファイルパッケージに保存します。  
  
 <xref:System.IO.Packaging.Package.Flush%2A> は、<xref:System.IO.Packaging.Package.Close%2A> メソッドと <xref:System.IO.Packaging.Package.Dispose%2A> メソッドによって自動的に呼び出されます。  <xref:System.IO.Packaging.Package.Close%2A> または <xref:System.IO.Packaging.Package.Dispose%2A> が呼び出された場合、<xref:System.IO.Packaging.Package.Flush%2A> を個別に呼び出す必要はありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは読み取り専用であり、変更することはできません。</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.Flush" /> は、派生クラスの <see cref="M:System.IO.Packaging.Package.FlushCore" /> メソッドを内部的に呼び出して、派生クラスに実装されている物理形式に基づいて実際にその部分をフラッシュします。</para></block>
      </Docs>
    </Member>
    <Member MemberName="FlushCore">
      <MemberSignature Language="C#" Value="protected abstract void FlushCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void FlushCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.FlushCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub FlushCore ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void FlushCore();" />
      <MemberSignature Language="F#" Value="abstract member FlushCore : unit -&gt; unit" Usage="package.FlushCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、すべてのパーツとリレーションシップの内容を派生クラス ストアに保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.FlushCore%2A> は、派生クラスで実装された物理形式に基づいて実際のフラッシュ操作を実行するために、<xref:System.IO.Packaging.Package.Flush%2A> メソッドによって呼び出されます。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生 <see cref="M:System.IO.Packaging.Package.FlushCore" /> の実装では、それを呼び出す <see cref="M:System.IO.Packaging.Package.Flush" /> メソッドによって実行される順序や操作について、想定を行うべきではありません。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetPart">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePart GetPart (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePart GetPart(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPart (partUri As Uri) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePart ^ GetPart(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="member this.GetPart : Uri -&gt; System.IO.Packaging.PackagePart" Usage="package.GetPart partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">返されるパーツの Uniform Resource Identifier (URI)。</param>
        <summary>指定した URI を持つパーツを返します。</summary>
        <returns>指定した <paramref name="partUri" /> を持つパーツ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定した `partUri` を持つパーツが存在しない場合は、<xref:System.InvalidOperationException> がスローされます。  
  
 <xref:System.IO.Packaging.Package.PartExists%2A> メソッドは、`partUri` が既存のパーツを参照しているかどうかを判断するために使用できます。  
  
 既定では、抽象 <xref:System.IO.Packaging.Package> 基底クラスの <xref:System.IO.Packaging.ZipPackage> 派生実装が提供され、使用されます。  既定の操作では、<xref:System.IO.Packaging.Package.GetPart%2A> 内部で <xref:System.IO.Packaging.ZipPackage> クラスの <xref:System.IO.Packaging.Package.GetPartCore%2A> を呼び出して、要求されたパーツを ZIP ファイルから返します。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
   
  
## Examples  
 次の例では、パッケージに含まれている部分を検索、取得、および読み取る方法を示します。  完全なサンプルについては、「[パッケージサンプルの読み取り](https://go.microsoft.com/fwlink/?LinkID=160034)」を参照してください。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> が有効な <see cref="T:System.IO.Packaging.PackagePart" /> Uniform Resource Identifier (URI) ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">指定した <paramref name="partUri" /> を持つパーツが、パッケージ内に存在しません。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは書き込み専用です。</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> は、派生クラス <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> メソッドを内部で呼び出して、派生クラスに実装されている物理形式に基づいて実際にその部分をフラッシュします。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetParts" />
        <altmember cref="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart GetPartCore (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart GetPartCore(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPartCore (partUri As Uri) As PackagePart" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IO::Packaging::PackagePart ^ GetPartCore(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member GetPartCore : Uri -&gt; System.IO.Packaging.PackagePart" Usage="package.GetPartCore partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">取得されるパーツの Uniform Resource Identifier (URI)。</param>
        <summary>派生クラスでオーバーライドされると、指定した URI によってアドレス指定されるパーツを返します。</summary>
        <returns>要求されたパーツ。指定した <see langword="null" /> を持つパーツがパッケージ内に存在しない場合は <paramref name="partUri" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、抽象 <xref:System.IO.Packaging.Package> クラスの <xref:System.IO.Packaging.ZipPackage> 派生実装が提供され、使用されます。  既定の操作では、<xref:System.IO.Packaging.Package.GetPart%2A> 内部的に <xref:System.IO.Packaging.ZipPackage> クラスの <xref:System.IO.Packaging.Package.GetPartCore%2A> を呼び出して、ZIP ファイルからパーツを取得します。  
  
 パッケージモデルとパッケージパーツの詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様の第1章を参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラス <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> の実装は、派生クラスで実装された物理形式に基づいて、指定したパーツにアクセスして返すために、<see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> メソッドによって呼び出されます。  
  
派生 <see cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" /> の実装では、それを呼び出す <see cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" /> メソッドによって実行される順序や操作について、想定しないようにする必要があります。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartsCore" />
      </Docs>
    </Member>
    <Member MemberName="GetParts">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackagePartCollection GetParts ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackagePartCollection GetParts() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetParts" />
      <MemberSignature Language="VB.NET" Value="Public Function GetParts () As PackagePartCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackagePartCollection ^ GetParts();" />
      <MemberSignature Language="F#" Value="member this.GetParts : unit -&gt; System.IO.Packaging.PackagePartCollection" Usage="package.GetParts " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePartCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>パッケージに含まれているすべてのパーツのコレクションを返します。</summary>
        <returns>パッケージに含まれているすべての <see cref="T:System.IO.Packaging.PackagePart" /> 要素のコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetParts%2A> は、<xref:System.IO.Packaging.PackageRelationship> パーツを含むパッケージに含まれるすべての部分のコレクションを返します。  
  
 <xref:System.IO.Packaging.Package.GetParts%2A> は `null`を返しません。ただし、パッケージにパーツが含まれていない場合、返されるコレクションには0個の要素が含まれます。  
  
 既定では、抽象 <xref:System.IO.Packaging.Package> 基底クラスの <xref:System.IO.Packaging.ZipPackage> 派生実装が提供され、使用されます。  既定の操作では、<xref:System.IO.Packaging.Package.GetParts%2A> は <xref:System.IO.Packaging.ZipPackage> クラスの <xref:System.IO.Packaging.Package.GetPartsCore%2A> メソッドを呼び出して、ZIP ファイルからパーツを返します。  
  
 パッケージとパッケージパーツの詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様のセクション1.1 を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.IO.Packaging.Package.GetParts%2A> メソッドを使用して、<xref:System.IO.Packaging.Package>に含まれる部分のコレクションを取得する方法を示しています。  プログラムの完全なソースコードについては、「[デジタル署名のサンプルを使用](https://go.microsoft.com/fwlink/?LinkID=159966)したパッケージの作成」を参照してください。  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは書き込み専用です。</exception>
        <block subset="none" type="overrides"><para>
            <see cref="M:System.IO.Packaging.Package.GetParts" /> は、派生クラス <see cref="M:System.IO.Packaging.Package.GetPartsCore" /> メソッドを内部で呼び出して、派生クラスに実装されている物理形式に基づいて実際にその部分をフラッシュします。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetPart(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetPartsCore">
      <MemberSignature Language="C#" Value="protected abstract System.IO.Packaging.PackagePart[] GetPartsCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IO.Packaging.PackagePart[] GetPartsCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetPartsCore" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetPartsCore () As PackagePart()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract cli::array &lt;System::IO::Packaging::PackagePart ^&gt; ^ GetPartsCore();" />
      <MemberSignature Language="F#" Value="abstract member GetPartsCore : unit -&gt; System.IO.Packaging.PackagePart[]" Usage="package.GetPartsCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackagePart[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、パッケージ内のすべてのパーツの配列を返します。</summary>
        <returns>パッケージに含まれるすべてのパーツの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生クラス <xref:System.IO.Packaging.Package.GetPartsCore%2A> の実装は、派生クラスで実装された物理形式に基づいてパーツの配列にアクセスして返すために、<xref:System.IO.Packaging.Package.GetParts%2A> メソッドによって呼び出されます。  
  
 既定では、抽象 <xref:System.IO.Packaging.Package> クラスの <xref:System.IO.Packaging.ZipPackage> 派生実装が提供され、使用されます。  既定の操作では、<xref:System.IO.Packaging.Package.GetParts%2A> 内部的に <xref:System.IO.Packaging.ZipPackage> クラスの <xref:System.IO.Packaging.Package.GetPartCore%2A> を呼び出して、ZIP ファイルからパーツを取得します。  
  
 パッケージモデルとパッケージパーツの詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様の第1章を参照してください。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生 <see cref="M:System.IO.Packaging.Package.GetPartsCore" /> の実装では、それを呼び出す <see cref="M:System.IO.Packaging.Package.GetParts" /> メソッドによって実行される順序や操作について、想定しないようにする必要があります。</para></block>
        <altmember cref="M:System.IO.Packaging.Package.GetPartCore(System.Uri)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationship">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationship GetRelationship (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationship GetRelationship(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationship (id As String) As PackageRelationship" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationship ^ GetRelationship(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.GetRelationship : string -&gt; System.IO.Packaging.PackageRelationship" Usage="package.GetRelationship id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationship</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">返されるリレーションシップの <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>指定した ID を持つパッケージ レベル リレーションシップを返します。</summary>
        <returns>指定した <paramref name="id" /> を持つパッケージ レベル リレーションシップ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` 有効な XML 識別子である必要があります。 `id` 型は xsd: ID であり、 [「XML スキーマパート 2: データ型の仕様」の twiliojava-3.3.8-with-dependencies のセクション](https://www.w3.org/TR/xmlschema-2/#ID)で規定されている名前付け規則に従う必要があります。  
  
 パッケージとパッケージの関係の詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様のセクション1.3 を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> が有効な XML 識別子でありません。</exception>
        <exception cref="T:System.InvalidOperationException">指定した <paramref name="id" /> を持つリレーションシップがパッケージ内に存在しません。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは書き込み専用です。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationships">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationships() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationships" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationships () As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationships();" />
      <MemberSignature Language="F#" Value="member this.GetRelationships : unit -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="package.GetRelationships " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのパッケージ レベル リレーションシップのコレクションを返します。</summary>
        <returns>パッケージに含まれているすべてのパッケージ レベル リレーションシップのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> は `null`を返しません。ただし、パッケージにパッケージレベルのリレーションシップが含まれていない場合、返されるコレクションには0個の要素が含まれる可能性があります。  
  
 パッケージレベルのリレーションシップは、パッケージと、関連付けられているターゲットパーツまたはリソースとの間の関連付けを定義します。  パッケージレベルのリレーションシップには、2つの形式のいずれかを指定できます。  
  
-   パッケージ内のターゲットパーツへの <xref:System.IO.Packaging.Package> 間。  
  
-   パッケージ外部のターゲットリソースへの <xref:System.IO.Packaging.Package>。  
  
 パッケージリレーションシップでは、パッケージはリレーションシップの "所有者" と見なされます。  パッケージが削除されると、パッケージによって所有されているすべてのリレーションシップも削除されます。  リレーションシップを作成または削除するプロセスでは、ターゲットのパーツやリソースが物理的に変更されることはありません。  
  
 パッケージとパッケージの関係の詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様のセクション1.3 を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは書き込み専用です。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRelationshipsByType">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType(string relationshipType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRelationshipsByType (relationshipType As String) As PackageRelationshipCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Packaging::PackageRelationshipCollection ^ GetRelationshipsByType(System::String ^ relationshipType);" />
      <MemberSignature Language="F#" Value="member this.GetRelationshipsByType : string -&gt; System.IO.Packaging.PackageRelationshipCollection" Usage="package.GetRelationshipsByType relationshipType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageRelationshipCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relationshipType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="relationshipType">コレクションで照合を行い、結果を返す <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。</param>
        <summary>指定した <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> に一致するすべてのパッケージ レベル リレーションシップのコレクションを返します。</summary>
        <returns>指定した <paramref name="relationshipType" /> に一致するパッケージ レベル リレーションシップのコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.Package.GetRelationships%2A> は `null`を返しません。ただし、指定された `relationshipType`に一致するパッケージレベルのリレーションシップがない場合、返されるコレクションには0個の要素が含まれる可能性があります。  
  
 次の表は、Open パッケージング規則 (OPC) 仕様で定義されているパッケージレベルの `relationshipType` Uri を示しています。  
  
|パッケージレベルのリレーションシップ|リレーションシップの種類の URI|  
|---------------------------------|---------------------------|  
|コアプロパティ|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties`|  
|デジタル署名|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/signature`|  
|デジタル署名証明書|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/certificate`|  
|デジタル署名の配信元|`http://schemas.openxmlformats.org/package/2006/relationships/digital-signature/origin`|  
|縮小表示|`http://schemas.openxmlformats.org/package/2006/relationships/metadata/thumbnail`|  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
   
  
## Examples  
 次の例では、パッケージに定義されているリレーションシップを取得する方法を示します。  完全なサンプルについては、「[パッケージサンプルの読み取り](https://go.microsoft.com/fwlink/?LinkID=160034)」を参照してください。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="relationshipType" /> が空の文字列です。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは書き込み専用です。</exception>
        <altmember cref="M:System.IO.Packaging.Package.GetRelationship(System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.GetRelationships" />
        <altmember cref="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)" />
        <altmember cref="M:System.IO.Packaging.Package.DeleteRelationship(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>パッケージを開きます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> は、<xref:System.IO.Packaging.Package.Open%2A> メソッドによって使用される既定のパッケージの種類です。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.IO.Packaging.PackageRelationship> 要素と <xref:System.IO.Packaging.PackagePart> 要素を格納されたデータと共に含む新しい <xref:System.IO.Packaging.Package> を作成する方法を示しています。  完全なサンプルについては、「[パッケージの作成サンプル](https://go.microsoft.com/fwlink/?LinkID=160055)」を参照してください。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (stream As Stream) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">パッケージを開く IO ストリーム。</param>
        <summary>指定した IO ストリームでパッケージを開きます。</summary>
        <returns>開かれたパッケージ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> は、<xref:System.IO.Packaging.Package.Open%2A> メソッドによって使用される既定のパッケージの種類です。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">開くパッケージには、読み取りまたは読み取り/書き込みアクセス許可が必要であり、指定した <paramref name="stream" /> は書き込み専用です。または開くパッケージには、書き込みまたは読み取り/書き込みアクセス許可が必要であり、指定した <paramref name="stream" /> は読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path);" />
      <MemberSignature Language="F#" Value="static member Open : string -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">パッケージのパスおよびファイル名。</param>
        <summary>指定したパスとファイル名でパッケージを開きます。</summary>
        <returns>開かれたパッケージ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> は、<xref:System.IO.Packaging.Package.Open%2A> メソッドによって使用される既定のパッケージの種類です。  
  
 この <xref:System.IO.Packaging.Package.Open%2A> メソッドは、既定の属性 <xref:System.IO.FileMode.OpenOrCreate>、<xref:System.IO.FileAccess.ReadWrite>、および <xref:System.IO.FileShare.None> を使用してパッケージを開きます (異なる属性を指定するには、他の Open メソッドオーバーロードのいずれかを使用します)。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.IO.Packaging.PackageRelationship> 要素と <xref:System.IO.Packaging.PackagePart> 要素を格納されたデータと共に含む新しい <xref:System.IO.Packaging.Package> を作成する方法を示しています。  完全なサンプルについては、「[パッケージの作成サンプル](https://go.microsoft.com/fwlink/?LinkID=160055)」を参照してください。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (stream As Stream, packageMode As FileMode) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream, System::IO::FileMode packageMode);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream * System.IO.FileMode -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (stream, packageMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="stream">パッケージを開く IO ストリーム。</param>
        <param name="packageMode">パッケージを開くときのファイル モード。</param>
        <summary>指定した IO ストリームとファイル モードでパッケージを開きます。</summary>
        <returns>開かれたパッケージ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> は、<xref:System.IO.Packaging.Package.Open%2A> メソッドによって使用される既定のパッケージの種類です。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" /> の値が無効です。</exception>
        <exception cref="T:System.IO.IOException">開くパッケージには、読み取りまたは読み取り/書き込みアクセス許可が必要であり、指定した <paramref name="stream" /> は書き込み専用です。または開くパッケージには、書き込みまたは読み取り/書き込みアクセス許可が必要であり、指定した <paramref name="stream" /> は読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
      </Parameters>
      <Docs>
        <param name="path">パッケージのパスおよびファイル名。</param>
        <param name="packageMode">パッケージを開くときのファイル モード。</param>
        <summary>指定したファイル モードを使用して、指定したパスにあるパッケージを開きます。</summary>
        <returns>開かれたパッケージ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> は、<xref:System.IO.Packaging.Package.Open%2A> メソッドによって使用される既定のパッケージの種類です。  
  
 この <xref:System.IO.Packaging.Package.Open%2A> メソッドは、既定の属性 <xref:System.IO.FileAccess.ReadWrite> と <xref:System.IO.FileShare.None> を使用してパッケージを開きます (異なる属性を指定するには、他の Open メソッドオーバーロードのいずれかを使用します)。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.IO.Packaging.PackageRelationship> 要素と <xref:System.IO.Packaging.PackagePart> 要素を格納されたデータと共に含む新しい <xref:System.IO.Packaging.Package> を作成する方法を示しています。  完全なサンプルについては、「[パッケージの作成サンプル](https://go.microsoft.com/fwlink/?LinkID=160055)」を参照してください。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" /> の値が有効ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(class System.IO.Stream stream, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (stream As Stream, packageMode As FileMode, packageAccess As FileAccess) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::IO::Stream ^ stream, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess);" />
      <MemberSignature Language="F#" Value="static member Open : System.IO.Stream * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (stream, packageMode, packageAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="stream">パッケージを開く IO ストリーム。</param>
        <param name="packageMode">パッケージを開くときのファイル モード。</param>
        <param name="packageAccess">パッケージを開くときのファイル アクセス。</param>
        <summary>指定した IO ストリーム、ファイル モード、およびファイル アクセス設定でパッケージを開きます。</summary>
        <returns>開かれたパッケージ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> は、<xref:System.IO.Packaging.Package.Open%2A> メソッドによって使用される既定のパッケージの種類です。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" /> または <paramref name="packageAccess" /> の値が有効ではありません。</exception>
        <exception cref="T:System.IO.IOException">開くパッケージには、読み取りまたは読み取り/書き込みアクセス許可が必要であり、指定した <paramref name="stream" /> は書き込み専用です。または開くパッケージには、書き込みまたは読み取り/書き込みアクセス許可が必要であり、指定した <paramref name="stream" /> は読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode, packageAccess As FileAccess) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode * System.IO.FileAccess -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode, packageAccess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="path">パッケージのパスおよびファイル名。</param>
        <param name="packageMode">パッケージを開くときのファイル モード。</param>
        <param name="packageAccess">パッケージを開くときのファイル アクセス。</param>
        <summary>指定したファイル モードとファイル アクセス設定を使用して、指定したパスにあるパッケージを開きます。</summary>
        <returns>開かれたパッケージ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> は、<xref:System.IO.Packaging.Package.Open%2A> メソッドによって使用される既定のパッケージの種類です。  
  
 この <xref:System.IO.Packaging.Package.Open%2A> メソッドは、既定の <xref:System.IO.FileShare.None> 属性を使用してパッケージを開きます (別の属性を指定するには、<xref:System.IO.Packaging.Package.Open%2A> メソッドのオーバーロードを使用します)。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.IO.Packaging.PackageRelationship> と <xref:System.IO.Packaging.PackagePart> 要素を格納されているデータと共に含む <xref:System.IO.Packaging.Package> を開いて読み取る方法を示しています。  完全なサンプルについては、「[パッケージサンプルの読み取り](https://go.microsoft.com/fwlink/?LinkID=160034)」を参照してください。  
  
 [!code-csharp[PackageRead#PackageReadUsing](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageRead/CSharp/PackageRead.cs#packagereadusing)]
 [!code-vb[PackageRead#PackageReadUsing](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageRead/visualbasic/packageread.vb#packagereadusing)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" /> または <paramref name="packageAccess" /> の値が有効ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess, System.IO.FileShare packageShare);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Packaging.Package Open(string path, valuetype System.IO.FileMode packageMode, valuetype System.IO.FileAccess packageAccess, valuetype System.IO.FileShare packageShare) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (path As String, packageMode As FileMode, packageAccess As FileAccess, packageShare As FileShare) As Package" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Packaging::Package ^ Open(System::String ^ path, System::IO::FileMode packageMode, System::IO::FileAccess packageAccess, System::IO::FileShare packageShare);" />
      <MemberSignature Language="F#" Value="static member Open : string * System.IO.FileMode * System.IO.FileAccess * System.IO.FileShare -&gt; System.IO.Packaging.Package" Usage="System.IO.Packaging.Package.Open (path, packageMode, packageAccess, packageShare)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.Package</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="packageMode" Type="System.IO.FileMode" />
        <Parameter Name="packageAccess" Type="System.IO.FileAccess" />
        <Parameter Name="packageShare" Type="System.IO.FileShare" />
      </Parameters>
      <Docs>
        <param name="path">パッケージのパスおよびファイル名。</param>
        <param name="packageMode">パッケージを開くときのファイル モード。</param>
        <param name="packageAccess">パッケージを開くときのファイル アクセス。</param>
        <param name="packageShare">パッケージを開くときのファイル共有モード。</param>
        <summary>指定したファイル モード、ファイル アクセス、およびファイル共有設定を使用して、指定したパスにあるパッケージを開きます。</summary>
        <returns>開かれたパッケージ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IO.Packaging.ZipPackage> は、<xref:System.IO.Packaging.Package.Open%2A> メソッドによって使用される既定のパッケージの種類です。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
   
  
## Examples  
 次の例は、<xref:System.IO.Packaging.PackageRelationship> 要素と <xref:System.IO.Packaging.PackagePart> 要素を格納されたデータと共に含む新しい <xref:System.IO.Packaging.Package> を作成する方法を示しています。  完全なサンプルについては、「[パッケージの作成サンプル](https://go.microsoft.com/fwlink/?LinkID=160055)」を参照してください。  
  
 [!code-csharp[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/csharp/VS_Snippets_Wpf/PackageWrite/CSharp/PackageWrite.cs#packagewritecreatepackage)]
 [!code-vb[PackageWrite#PackageWriteCreatePackage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PackageWrite/visualbasic/packagewrite.vb#packagewritecreatepackage)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" />、<paramref name="packageAccess" />、または <paramref name="packageShare" /> の値が有効ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="PackageProperties">
      <MemberSignature Language="C#" Value="public System.IO.Packaging.PackageProperties PackageProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Packaging.PackageProperties PackageProperties" />
      <MemberSignature Language="DocId" Value="P:System.IO.Packaging.Package.PackageProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PackageProperties As PackageProperties" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Packaging::PackageProperties ^ PackageProperties { System::IO::Packaging::PackageProperties ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PackageProperties : System.IO.Packaging.PackageProperties" Usage="System.IO.Packaging.Package.PackageProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Packaging.PackageProperties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パッケージのコア プロパティを取得します。</summary>
        <value>パッケージのコア プロパティ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コアパッケージのプロパティの詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様のセクション3.1 を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      </Docs>
    </Member>
    <Member MemberName="PartExists">
      <MemberSignature Language="C#" Value="public virtual bool PartExists (Uri partUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PartExists(class System.Uri partUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.PartExists(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PartExists (partUri As Uri) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool PartExists(Uri ^ partUri);" />
      <MemberSignature Language="F#" Value="abstract member PartExists : Uri -&gt; bool&#xA;override this.PartExists : Uri -&gt; bool" Usage="package.PartExists partUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partUri" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="partUri">チェックするパーツの <see cref="T:System.Uri" />。</param>
        <summary>指定した URI を持つパーツがパッケージ内に存在するかどうかを示します。</summary>
        <returns>指定した <see langword="true" /> を持つパーツがパッケージ内に存在する場合は <paramref name="partUri" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `partUri` は、スラッシュ (/) で始まり、パッケージのルートからの絶対パスである必要があります。  
  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="partUri" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="partUri" /> が有効な <see cref="T:System.IO.Packaging.PackagePart" /> Uniform Resource Identifier (URI) ではありません。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは書き込み専用です (情報を読み取ることはできません)。</exception>
        <altmember cref="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)" />
        <altmember cref="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)" />
        <altmember cref="T:System.IO.Packaging.PackagePart" />
      </Docs>
    </Member>
    <Member MemberName="RelationshipExists">
      <MemberSignature Language="C#" Value="public bool RelationshipExists (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RelationshipExists(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.RelationshipExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RelationshipExists (id As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool RelationshipExists(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.RelationshipExists : string -&gt; bool" Usage="package.RelationshipExists id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">確認対象のリレーションシップの <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
        <summary>指定した ID を持つパッケージ レベル リレーションシップがパッケージに含まれているかどうかを示します。</summary>
        <returns>指定した <see langword="true" /> を持つパッケージ レベル リレーションシップがパッケージ内に存在する場合は <paramref name="id" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、<https://go.microsoft.com/fwlink/?LinkID=71255>でダウンロードできる Open パッケージング規則 (OPC) 仕様を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="id" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="id" /> が有効な XML 識別子でありません。</exception>
        <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
        <exception cref="T:System.IO.IOException">パッケージは書き込み専用です。</exception>
        <altmember cref="T:System.IO.Packaging.PackageRelationship" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Packaging.Package.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="package.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Packaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーは、[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] インフラストラクチャをサポートします。アプリケーションで使用するためのものではありません。  代わりに、タイプ セーフ <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> メソッドを使用します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
