<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="90a9f0f98e3e3dfbb3f2fe73cfa1490c77e01632" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83523652" /></Metadata><TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" FrameworkAlternate="net-5.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IEnumerable&#xA;    interface IDisposable&#xA;    interface IResourceReader" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IDisposable" FrameworkAlternate="netcore-1.0;netcore-1.1" />
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : IDisposable, System.Collections.IEnumerable, System.Resources.IResourceReader" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IDisposable, IEnumerable, IResourceReader" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : IDisposable, System::Collections::IEnumerable, System::Resources::IResourceReader" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IResourceReader&#xA;    interface IEnumerable&#xA;    interface IDisposable" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Resources.Reader" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Resources.ResourceManager" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Resources.Reader" FromVersion="4.1.0.0" To="System.Resources.ResourceManager" ToVersion="4.1.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Resources.Reader" FromVersion="4.1.1.0" To="System.Resources.ResourceManager" ToVersion="4.1.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Resources.Reader" FromVersion="4.1.2.0" To="System.Resources.ResourceManager" ToVersion="4.1.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>順次リソースの名前と値のペアを読み取って、バイナリ リソース (.resources) ファイル内のリソースを列挙します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-class-note](~/includes/untrusted-data-class-note.md)]

 <xref:System.Resources.ResourceReader> クラスは、<xref:System.Resources.IResourceReader> インターフェイスの標準的な実装を提供します。 <xref:System.Resources.ResourceReader> インスタンスは、アセンブリに埋め込まれているスタンドアロンの .resources ファイルまたは .resources ファイルのいずれかを表します。 これは、.resources ファイル内のリソースを列挙し、その名前と値のペアを取得するために使用されます。 これは <xref:System.Resources.ResourceManager> クラスとは異なり、アセンブリに埋め込まれている .resources ファイルから指定された名前付きリソースを取得するために使用されます。 <xref:System.Resources.ResourceManager> クラスは、事前に名前がわかっているリソースを取得するために使用されます。一方、<xref:System.Resources.ResourceReader> クラスは、コンパイル時に数値または正確な名前がわからないリソースを取得する場合に役立ちます。 たとえば、リソースファイルを使用して、セクション内のセクションや項目にまとめられた構成情報を格納し、セクション内のセクションの数や項目を事前に把握していない場合などです。 リソースには、汎用的な名前を付けることができます (`Section1`、`Section1Item1`、`Section1Item2`など)。また、<xref:System.Resources.ResourceReader> オブジェクトを使用して取得することもできます。  
  
> [!IMPORTANT]
>  この型は <xref:System.IDisposable> インターフェイスを実装します。 型の使用が完了したら、直接的または間接的に型を破棄する必要があります。 直接的に型を破棄するには、`try`/`catch` ブロック内で <xref:System.IDisposable.Dispose%2A> メソッドを呼び出します。 間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。 詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。  
  
 <xref:System.Resources.ResourceReader> クラスの使用方法の詳細については、次のセクションを参照してください。  
  
-   [ResourceReader オブジェクトのインスタンス化](#instantiate)  
  
-   [ResourceReader オブジェクトのリソースを列挙する](#enumerate)  
  
    -   [IDictionaryEnumerator プロパティを使用したリソースの取得](#idictionaryenumerator)  
  
    -   [GetResourceData を使用して名前でリソースを取得する](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a>ResourceReader オブジェクトのインスタンス化  
 .Resources ファイルは、 [resgen.exe (リソースファイルジェネレーター)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)によってテキストファイルまたは XML .resx ファイルからコンパイルされたバイナリファイルです。 <xref:System.Resources.ResourceReader> オブジェクトは、アセンブリに埋め込まれているスタンドアロンの .resources ファイルまたは .resources ファイルを表すことができます。  
  
 スタンドアロンの .resources ファイルから読み取る <xref:System.Resources.ResourceReader> オブジェクトをインスタンス化するには、入力ストリームまたは .resources ファイル名を含む文字列を指定して、<xref:System.Resources.ResourceReader> クラスコンストラクターを使用します。 次の例は、両方の方法を示しています。 最初のは、ファイル名を使用して `Resources1.resources` という名前の .resources ファイルを表す <xref:System.Resources.ResourceReader> オブジェクトをインスタンス化します。 2番目のインスタンスは、ファイルから作成されたストリームを使用して `Resources2.resources` という名前の .resources ファイルを表す <xref:System.Resources.ResourceReader> オブジェクトをインスタンス化します。  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 埋め込み .resources ファイルを表す <xref:System.Resources.ResourceReader> オブジェクトを作成するには、.resources ファイルが埋め込まれているアセンブリから <xref:System.Reflection.Assembly> オブジェクトをインスタンス化します。 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> メソッドは、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンストラクターに渡すことができる <xref:System.IO.Stream> オブジェクトを返します。 次の例では、埋め込み .resources ファイルを表す <xref:System.Resources.ResourceReader> オブジェクトをインスタンス化します。  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a>ResourceReader オブジェクトのリソースを列挙する  
 .Resources ファイル内のリソースを列挙するには、<xref:System.Resources.ResourceReader.GetEnumerator%2A> メソッドを呼び出します。このメソッドは、<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> オブジェクトを返します。 `IDictionaryEnumerator.MoveNext` メソッドを呼び出して、あるリソースから次のリソースに移動します。 .Resources ファイル内のすべてのリソースが列挙されている場合、メソッドは `false` を返します。  
  
> [!NOTE]
>  <xref:System.Resources.ResourceReader> クラスは <xref:System.Collections.IEnumerable> インターフェイスと <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> メソッドを実装しますが、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> メソッドでは、<xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> の実装は提供されません。 代わりに、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> メソッドは、各リソースの名前と値のペアへのアクセスを提供する <xref:System.Collections.IDictionaryEnumerator> インターフェイスオブジェクトを返します。  
  
 コレクション内の個々のリソースを取得するには、次の2つの方法があります。  
  
-   <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> コレクション内の各リソースを反復処理し、<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> のプロパティを使用してリソースの名前と値を取得できます。 すべてのリソースが同じ種類である場合、または各リソースのデータ型がわかっている場合は、この方法をお勧めします。  
  
-   <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> コレクションを反復処理し、<xref:System.Resources.ResourceReader.GetResourceData%2A> メソッドを呼び出してリソースのデータを取得するときに、各リソースの名前を取得できます。 各リソースのデータ型がわからない場合や、前の方法で例外がスローされた場合は、この方法をお勧めします。  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a>IDictionaryEnumerator プロパティを使用したリソースの取得  
 .Resources ファイル内のリソースを列挙する最初の方法では、各リソースの名前と値のペアを直接取得します。 `IDictionaryEnumerator.MoveNext` メソッドを呼び出してコレクション内の各リソースに移動した後、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> プロパティからリソース名を取得し、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> プロパティからリソースデータを取得できます。  
  
 次の例は、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> と <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> のプロパティを使用して、.resources ファイル内の各リソースの名前と値を取得する方法を示しています。 この例を実行するには、ApplicationResources という名前の次のテキストファイルを作成して、文字列リソースを定義します。  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 その後、次のコマンドを使用して、テキストリソースファイルを ApplicationResources. .resources という名前のバイナリファイルに変換できます。  
  
 **resgen.exe ApplicationResources .txt**  
  
 次の例では、<xref:System.Resources.ResourceReader> クラスを使用して、スタンドアロンのバイナリ .resources ファイル内の各リソースを列挙し、そのキー名と対応する値を表示します。  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> プロパティからリソースデータを取得しようとすると、次の例外がスローされる可能性があります。  
  
-   データが予期された形式でない場合は <xref:System.FormatException>。  
  
-   データが属する型を含むアセンブリが見つからない場合は <xref:System.IO.FileNotFoundException>。  
  
-   データが属する型が見つからない場合は <xref:System.TypeLoadException>。  
  
 通常、これらの例外は、型が定義されているアセンブリがアプリケーションに含まれていないか、誤って削除されたか、またはアセンブリが型を登場する古いバージョンである場合に、.resources ファイルが手動で変更された場合にスローされます。 これらの例外のいずれかがスローされた場合は、次のセクションに示すように、各リソースを列挙し、<xref:System.Resources.ResourceReader.GetResourceData%2A> メソッドを呼び出すことで、リソースを取得できます。 この方法では、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> プロパティによって返されるデータ型に関する情報が提供されます。  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a>GetResourceData を使用して名前でリソースを取得する  
 .Resources ファイル内のリソースを列挙する2番目の方法では、`IDictionaryEnumerator.MoveNext` メソッドを呼び出すことによって、ファイル内のリソースを移動する必要もあります。 各リソースに対して、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> プロパティからリソースの名前を取得します。このプロパティは、リソースのデータを取得するために <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> メソッドに渡されます。 これは、`resourceData` 引数のバイト配列として返されます。  
  
 この方法は、リソースの値を形成する実際のバイトを返すため、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> と <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> のプロパティからリソースの名前と値を取得するよりも扱いにくくなります。 ただし、リソースを取得しようとしたときに例外がスローされた場合、<xref:System.Resources.ResourceReader.GetResourceData%2A> メソッドを使用して、リソースのデータ型に関する情報を指定することで、例外の原因を特定できます。 リソースのデータ型を示す文字列の詳細については、「<xref:System.Resources.ResourceReader.GetResourceData%2A>」を参照してください。  
  
 次の例は、この方法を使用してリソースを取得し、スローされた例外を処理する方法を示しています。 4つの文字列、1つのブール値、1つの整数、1つのビットマップ、および1つのカスタム `DateTimeTZI` オブジェクトを含むバイナリ .resources ファイルをプログラムによって作成します。 この例を実行するには、次の手順を実行します。  
  
1.  `DateTimeTZI` 構造体を含む、Library という名前のアセンブリを作成します。 アセンブリのソースコードを次に示します。  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     次のコマンドを使用C#して、でソースコードをコンパイルします。  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     または、次のコマンドを使用して Visual Basic でコンパイルすることもできます。  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  次のソースコードをコンパイルして実行します。これにより、ContactResources という名前の .resources ファイルが作成されます。  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     ソースコードファイルには CreateResources.cs という名前が付けられています。 次のコマンドを使用C#して、でコンパイルできます。  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     または、次のコマンドを使用して Visual Basic でコンパイルすることもできます。  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  次のコードをコンパイルして実行し、ContactResources .resources ファイル内のリソースを列挙します。  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     ソースコードを変更した後 (たとえば、`try` ブロックの末尾にある <xref:System.FormatException> を意図的にスローすることによって)、またはライブラリの .dll アセンブリの名前を変更して実行時に使用できないようにするには、この例を実行して、リソース情報を取得または再作成するために <xref:System.Resources.ResourceReader.GetResourceData%2A> を呼び出す方法を確認します。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

[https://login.microsoftonline.com/consumers/]([!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)])
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : System.IO.Stream -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">リソースを読み取る入力ストリーム。</param>
        <summary>指定したストリーム用の <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンストラクターは、スタンドアロンの .resources ファイルから、またはアセンブリに埋め込まれている .resources ファイルからリソースを取得する <xref:System.Resources.ResourceReader> オブジェクトをインスタンス化します。 スタンドアロンの .resources ファイルから読み取るには、<xref:System.IO.Stream> オブジェクトをインスタンス化し、それを <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンストラクターに渡します。 埋め込み .resources ファイルから読み取るには、.resources ファイルの名前に大文字と小文字を区別して <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> メソッドを呼び出し、返された <xref:System.IO.Stream> オブジェクトを <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンストラクターに渡します。  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
## Examples  
 このセクションの例では、`PatientForm.txt` という名前の次の .txt ファイルを使用して、アプリケーションによって使用されるリソースを定義します。  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 次のコマンドを発行することで、.txt ファイルを .resources ファイルにコンパイルできます。  
  
 **resgen PatientForm .txt**  
  
 次の例では、アプリケーションの実行可能コードを含むアセンブリにリソースファイルが埋め込まれていることを前提としています。 現在実行中のアセンブリから `PatientForm.resources` という名前のリソースファイルを取得し、各リソースの名前と値を表示します。  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 このC#例に `Example.cs`という名前が付けられている場合は、次のコマンドを使用してコンパイルできます。  
  
 **csc Example.cs/res: PatientForm**  
  
 Visual Basic の例に `Example.vb`という名前が付けられている場合は、次のコマンドを使用してコンパイルできます。  
  
 **vbc.exe の例。 vb/res: PatientForm**  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="stream" /> パラメーターは読み取り可能ではありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException"><paramref name="stream" /> にアクセスしているときに、I/O エラーが発生しました。</exception>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : string -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName">読み取るリソース ファイルのパスと名前。 <c>filename</c> は大文字と小文字を区別しません。</param>
        <summary>リソース ファイルを指定して <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> コンストラクターは、スタンドアロンの .resources ファイルからリソースを取得する <xref:System.Resources.ResourceReader> オブジェクトをインスタンス化します。 埋め込み .resources ファイルからリソースを取得するには、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンストラクターを使用します。  

[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]

## Examples  
 このセクションの例では、`PatientForm.txt` という名前の次の .txt ファイルを使用して、アプリケーションによって使用されるリソースを定義します。  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 次のコマンドを発行して、この .txt ファイルを .resources ファイルにコンパイルできます。  
  
 **resgen PatientForm .txt**  
  
 次の例では、`PatientForm.resources` 内のリソースを列挙し、それぞれの名前と値を表示します。  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。</exception>
        <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
        <exception cref="T:System.BadImageFormatException">リソース ファイルの形式が無効です。 たとえば、ファイルの長さが 0 の場合などです。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="resourceReader.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトに関連付けられたすべてのオペレーティング システム リソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.Close%2A> は、安全に複数回呼び出すことができます。  
  
   
  
## Examples  
 次の例では、ファイルのリソースを移動し、検出されたすべてのキーと値のペアを表示します。 次に、このコードでは、<xref:System.Resources.ResourceReader.Close%2A> メソッドを使用して <xref:System.Resources.ResourceReader> をシャットダウンし、それによって使用されるすべてのリソースを解放します。  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="resourceReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Resources.ResourceReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この <xref:System.Resources.ResourceReader>インスタンスの使用が終了したら、<xref:System.Resources.ResourceReader.Dispose%2A> を呼び出して、このインスタンスで使用されているすべてのリソースを解放します。 ガベージコレクターがインスタンスのメモリを再利用できるように、この <xref:System.Resources.ResourceReader> インスタンスへの参照を削除する必要があります。  
  
 <xref:System.Resources.ResourceReader.Dispose%2A> は、マネージリソースとアンマネージリソースを解放するコードを含む、プライベート Dispose (Boolean) メソッドを呼び出します。 詳細については、「 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IDictionaryEnumerator ^ GetEnumerator();" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子を返します。</summary>
        <returns>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、リソースを列挙するには、<xref:System.Resources.ResourceReader.GetEnumerator%2A> メソッドを呼び出し、返された <xref:System.Collections.IDictionaryEnumerator> オブジェクトに対して、メソッドが `false`を返すまで、<xref:System.Collections.IEnumerator.MoveNext%2A> メソッドを繰り返し呼び出します。 リソース名は、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> プロパティから使用できます。<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> プロパティからの値。 この例は、この方法でリソースを列挙する方法を示しています。  
  
 <xref:System.Resources.ResourceReader> クラスによって <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> プロパティを実装すると、次の例外がスローされる可能性があります。  
  
-   <xref:System.IO.FileNotFoundException>  
  
     データが属する型を含むアセンブリが見つかりません。  
  
-   <xref:System.FormatException>  
  
     データが予期された形式ではありません。  
  
-   <xref:System.TypeLoadException>  
  
     データが属する型が見つかりません。  
  
 この例外を処理するには、<xref:System.Resources.ResourceReader.GetResourceData%2A> メソッドを呼び出して、指定したリソースに割り当てられているデータ型とバイト配列に関する情報を取得します。 詳細については、<xref:System.Resources.ResourceReader> クラスのトピックの「GetResourceData を使用してリソースを名前で取得する」セクションを参照してください。  
  
> [!IMPORTANT]
>  <xref:System.Resources.ResourceReader> クラスには、列挙子を返す2つのメソッドが含まれています。 <xref:System.Resources.ResourceReader.GetEnumerator%2A> メソッドは、<xref:System.Collections.IDictionaryEnumerator> インターフェイスオブジェクトを返します。リソースを列挙するときには、このメソッドを呼び出すことをお勧めします。  
  
   
  
## Examples  
 このセクションの例では、`PatientForm.txt` という名前の次の .txt ファイルを使用して、アプリケーションによって使用されるリソースを定義します。  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 次のコマンドを発行することで、.txt ファイルを .resources ファイルにコンパイルできます。  
  
 **resgen PatientForm .txt**  
  
 次の例では、`PatientForm.resources` 内のリソースを列挙し、それぞれの名前と値を表示します。  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">リーダーが閉じられているか、破棄されているため、アクセスできません。</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberSignature Language="F#" Value="member this.GetResourceData : string * string * Byte[] -&gt; unit" Usage="resourceReader.GetResourceData (resourceName, resourceType, resourceData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resourceType" Type="System.String" RefType="out" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resourceData" Type="System.Byte[]" RefType="out" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="resourceName">リソースの名前。</param>
        <param name="resourceType">このメソッドが返るときに、取得したリソースの型名を表す文字列が含まれます。 このパラメーターは初期化せずに渡されます。</param>
        <param name="resourceData">このメソッドから制御が戻った時点で、取得した型のバイナリ表現であるバイト配列が格納されます。 このパラメーターは初期化せずに渡されます。</param>
        <summary>オープン リソース ファイルまたはストリームから名前付きリソースの型名とデータを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.GetResourceData%2A> メソッドは、指定されたリソースの値をバイト配列として取得します。 これは通常、リソースの値を取得しようとしたときに <xref:System.Collections.IDictionaryEnumerator.Value%2A> プロパティが例外をスローした場合に使用されます。  
  
 `resourceType` は、リソースのデータ型を表す文字列です。 次のいずれかの値を指定できます。  
  
-   リソースのデータ型を示す `ResourceTypeCode` 列挙体メンバーの文字列形式。 `ResourceTypeCode` は、によって使用されるプライベート列挙体です。では、19個の共通データ型の1つを格納するために特殊なバイナリ形式が使用されることを示しています。 これには、.NET Framework のプリミティブデータ型 (<xref:System.Boolean>、<xref:System.Byte>、<xref:System.Char>、<xref:System.Decimal>、<xref:System.Double>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.Int64>、<xref:System.Single>)、<xref:System.SByte>、<xref:System.UInt16>、<xref:System.UInt32>のほか、<xref:System.UInt64>の列挙体には、次の表に示す値が含まれます。<xref:System.String><xref:System.DateTime><xref:System.TimeSpan>`ResourceTypeCode`  
  
    |ResourceTypeCode 値|説明|  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|データはバイト配列です。 このデータ型は、通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> メソッドの呼び出しの結果として返されます。|  
    |`ResourceTypeCode.Null`|データが null 参照です。 このデータ型は、通常、値が `null`オブジェクトを使用して <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> メソッドを呼び出した結果として得られます。|  
    |`ResourceTypeCode.Stream`|データはストリームに格納されます。 このデータ型は、通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> または <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> メソッドの呼び出しの結果として得られます。|  
  
     `resourceData` が破損していないと仮定した場合、通常は、<xref:System.BitConverter> または <xref:System.IO.BinaryReader> メソッドを呼び出すことにより、バイト配列から元の値に変換できます。  
  
-   シリアル化されたデータが `resourceData` 引数 (`System.String`など) に割り当てられている型の完全修飾名を含む文字列。 また、.NET Framework クラスライブラリの一部ではない型の場合、文字列には、その型を含むアセンブリの名前、バージョン、カルチャ、および公開キーが含まれます。 たとえば、次の文字列は、シリアル化されたデータが `Extensions` 名前空間の `Person` 型のインスタンスを表していることを示しています。これは、公開キーと指定されたカルチャを持たないユーティリティという名前のアセンブリのバージョン1.0 に含まれています。  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     `resourceData` が破損しておらず、ソースの種類が使用可能であることを前提として、バイト配列を <xref:System.IO.Stream> オブジェクトに変換し、ストリームを <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> メソッドに渡すことで、`resourceData` をバイト配列から元の値に変換できます。  
  
-   <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> メソッドの呼び出しでデータ型を記述するために使用される文字列。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="resourceName" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="resourceName" /> は存在しません。</exception>
        <exception cref="T:System.BadImageFormatException"><paramref name="resourceName" /> の型が無効です。</exception>
        <exception cref="T:System.FormatException">取得されたリソース データが壊れています。</exception>
        <exception cref="T:System.InvalidOperationException">現在の <see cref="T:System.Resources.ResourceReader" /> のオブジェクトは、おそらく閉じられたために初期化されません。</exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="resourceReader.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子を返します。</summary>
        <returns>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> は、明示的なインターフェイスの実装です。 これは、<xref:System.Resources.ResourceReader> のインスタンスが <xref:System.Collections.IEnumerable> インターフェイスにキャストされる場合のみ、使用できます。 .Resources ファイル内のリソースを列挙する方法としては、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> メソッドによって返される <xref:System.Collections.IDictionaryEnumerator> オブジェクトの <xref:System.Collections.IEnumerator.MoveNext%2A> メソッドを呼び出すことをお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">リーダーが既に閉じられているため、アクセスできません。</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="resourceReader.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Resources.ResourceReader" /> で使用されたリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Dispose を呼び出すと、<xref:System.Resources.ResourceReader> によって使用されるリソースを他の目的で再割り当てできます。 Dispose の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」を参照してください。

## Examples  
次のコード例では、ファイルのリソースを移動し、検出されたすべてのキーと値のペアを出力します。 次に、theIDisposable メソッドを使用して <xref:System.Resources.ResourceReader> をシャットダウンし、それによって使用されるすべてのリソースを解放します。

```vb
Imports System
Imports System.Resources
Imports System.Collections

Public Class ReadResources

    Public Shared Sub Main(args() As String)
        ' Create a resource reader for items.resources 
        ' and get an enumerator to iterate through the file. 
        Dim reader As IResourceReader = New ResourceReader("items.resources")
        Dim en As IDictionaryEnumerator = reader.GetEnumerator()

        ' Iterate through the file, printing the key and value pairs. 
        While en.MoveNext()
            Console.WriteLine()
            Console.WriteLine("Name: {0}", en.Key)
            Console.WriteLine("Value: {0}", en.Value)
        End While 

        ' Clean up all resources associated with the reader. 
        ' Calling Dispose is equivalent to calling Close.
        reader.Dispose()
    End Sub 

End Class
```

```csharp
using System;
using System.Resources;
using System.Collections;

public class ReadResources 
{
    public static void Main(string[] args) 
    {
        // Create a resource reader for items.resources 
        // and get an enumerator to iterate through the file.
        IResourceReader reader = new ResourceReader("items.resources");
        IDictionaryEnumerator en = reader.GetEnumerator();

        // Iterate through the file, printing the key/value pairs. 
        while (en.MoveNext()) 
        {
            Console.WriteLine();
            Console.WriteLine("Name: {0}", en.Key);
            Console.WriteLine("Value: {0}", en.Value);
        }

        // Clean up all resources associated with the reader. 
        // Calling Dispose is equivalent to calling Close.
        reader.Dispose();
    }
}
```

```cpp
using namespace System;
using namespace System::Resources;
using namespace System::Collections;
int main()
{
   array<String^>^args = Environment::GetCommandLineArgs();

   // Create a resource reader for items.resources 
   // and get an enumerator to iterate through the file.
   IResourceReader^ reader = gcnew ResourceReader( "items.resources" );
   IDictionaryEnumerator^ en = reader->GetEnumerator();

   // Iterate through the file, printing the key/value pairs. 
   while ( en->MoveNext() )
   {
      Console::WriteLine();
      Console::WriteLine( "Name: {0}", en->Key );
      Console::WriteLine( "Value: {0}", en->Value );
   }

   // Clean up all resources associated with the reader. 
   // Calling the destructor is equivalent to calling Close.
   reader->~IResourceReader();
}
```

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
