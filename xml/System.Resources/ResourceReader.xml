<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="537af0516a6dee143f32086ea8a0dd9a100c4795" /><Meta Name="ms.sourcegitcommit" Value="a8ff98b48bda124cfcb2605f5da9b21bc6dcd791" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/14/2020" /><Meta Name="ms.locfileid" Value="77240275" /></Metadata><TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ResourceReader&#xA;Implements IResourceReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceReader sealed : System::Resources::IResourceReader" />
  <TypeSignature Language="F#" Value="type ResourceReader = class&#xA;    interface IResourceReader&#xA;    interface IEnumerable&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a9e58-101">順次リソースの名前と値のペアを読み取って、バイナリ リソース (.resources) ファイル内のリソースを列挙します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-101">Enumerates the resources in a binary resources (.resources) file by reading sequential resource name/value pairs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-class-note](~/includes/untrusted-data-class-note.md)]

 <span data-ttu-id="a9e58-102"><xref:System.Resources.ResourceReader> クラスは、<xref:System.Resources.IResourceReader> インターフェイスの標準的な実装を提供します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-102">The <xref:System.Resources.ResourceReader> class provides a standard implementation of the <xref:System.Resources.IResourceReader> interface.</span></span> <span data-ttu-id="a9e58-103"><xref:System.Resources.ResourceReader> インスタンスは、アセンブリに埋め込まれているスタンドアロンの .resources ファイルまたは .resources ファイルのいずれかを表します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-103">A <xref:System.Resources.ResourceReader> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="a9e58-104">これは、.resources ファイル内のリソースを列挙し、その名前と値のペアを取得するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-104">It is used to enumerate the resources in a .resources file and retrieve its name/value pairs.</span></span> <span data-ttu-id="a9e58-105">これは <xref:System.Resources.ResourceManager> クラスとは異なり、アセンブリに埋め込まれている .resources ファイルから指定された名前付きリソースを取得するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-105">It differs from the <xref:System.Resources.ResourceManager> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="a9e58-106"><xref:System.Resources.ResourceManager> クラスは、事前に名前がわかっているリソースを取得するために使用されます。一方、<xref:System.Resources.ResourceReader> クラスは、コンパイル時に数値または正確な名前がわからないリソースを取得する場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-106">The <xref:System.Resources.ResourceManager> class is used to retrieve resources whose names are known in advance, whereas the <xref:System.Resources.ResourceReader> class is useful for retrieving resources whose number or precise names are not known at compile time.</span></span> <span data-ttu-id="a9e58-107">たとえば、リソースファイルを使用して、セクション内のセクションや項目にまとめられた構成情報を格納し、セクション内のセクションの数や項目を事前に把握していない場合などです。</span><span class="sxs-lookup"><span data-stu-id="a9e58-107">For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance.</span></span> <span data-ttu-id="a9e58-108">リソースには、汎用的な名前を付けることができます (`Section1`、`Section1Item1`、`Section1Item2`など)。また、<xref:System.Resources.ResourceReader> オブジェクトを使用して取得することもできます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-108">Resources can then be named generically (such as `Section1`, `Section1Item1`, `Section1Item2`, and so on) and retrieved by using a <xref:System.Resources.ResourceReader> object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9e58-109">この型は <xref:System.IDisposable> インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-109">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="a9e58-110">型の使用が完了したら、直接的または間接的に型を破棄する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a9e58-110">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="a9e58-111">直接的に型を破棄するには、<xref:System.IDisposable.Dispose%2A>`try`/ ブロック内で `catch` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-111">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="a9e58-112">間接的に型を破棄するには、`using` (C# の場合) または `Using` (Visual Basic 言語) などの言語構成要素を使用します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-112">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="a9e58-113">詳細については、<xref:System.IDisposable> インターフェイスに関するトピック内の「IDisposable を実装するオブジェクトの使用」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="a9e58-113">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="a9e58-114"><xref:System.Resources.ResourceReader> クラスの使用方法の詳細については、次のセクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="a9e58-114">For more information about using the <xref:System.Resources.ResourceReader> class, see the following sections:</span></span>  
  
-   [<span data-ttu-id="a9e58-115">ResourceReader オブジェクトのインスタンス化</span><span class="sxs-lookup"><span data-stu-id="a9e58-115">Instantiating a ResourceReader object</span></span>](#instantiate)  
  
-   [<span data-ttu-id="a9e58-116">ResourceReader オブジェクトのリソースを列挙する</span><span class="sxs-lookup"><span data-stu-id="a9e58-116">Enumerating a ResourceReader object's resources</span></span>](#enumerate)  
  
    -   [<span data-ttu-id="a9e58-117">IDictionaryEnumerator プロパティを使用したリソースの取得</span><span class="sxs-lookup"><span data-stu-id="a9e58-117">Retrieving resources by using IDictionaryEnumerator properties</span></span>](#idictionaryenumerator)  
  
    -   [<span data-ttu-id="a9e58-118">GetResourceData を使用して名前でリソースを取得する</span><span class="sxs-lookup"><span data-stu-id="a9e58-118">Retrieving resources by name with GetResourceData</span></span>](#getresourcedata)  
  
<a name="instantiate"></a>   
## <a name="instantiating-a-resourcereader-object"></a><span data-ttu-id="a9e58-119">ResourceReader オブジェクトのインスタンス化</span><span class="sxs-lookup"><span data-stu-id="a9e58-119">Instantiating a ResourceReader Object</span></span>  
 <span data-ttu-id="a9e58-120">.Resources ファイルは、 [resgen.exe (リソースファイルジェネレーター)](~/docs/framework/tools/resgen-exe-resource-file-generator.md)によってテキストファイルまたは XML .resx ファイルからコンパイルされたバイナリファイルです。</span><span class="sxs-lookup"><span data-stu-id="a9e58-120">A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by [Resgen.exe (Resource File Generator)](~/docs/framework/tools/resgen-exe-resource-file-generator.md).</span></span> <span data-ttu-id="a9e58-121"><xref:System.Resources.ResourceReader> オブジェクトは、アセンブリに埋め込まれているスタンドアロンの .resources ファイルまたは .resources ファイルを表すことができます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-121">A <xref:System.Resources.ResourceReader> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.</span></span>  
  
 <span data-ttu-id="a9e58-122">スタンドアロンの .resources ファイルから読み取る <xref:System.Resources.ResourceReader> オブジェクトをインスタンス化するには、入力ストリームまたは .resources ファイル名を含む文字列を指定して、<xref:System.Resources.ResourceReader> クラスコンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-122">To instantiate a <xref:System.Resources.ResourceReader> object that reads from a standalone .resources file, use the <xref:System.Resources.ResourceReader> class constructor with either an input stream or a string that contains the .resources file name.</span></span> <span data-ttu-id="a9e58-123">次の例は、両方の方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a9e58-123">The following example illustrates both approaches.</span></span> <span data-ttu-id="a9e58-124">最初のは、ファイル名を使用して `Resources1.resources` という名前の .resources ファイルを表す <xref:System.Resources.ResourceReader> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-124">The first instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources1.resources` by using its file name.</span></span> <span data-ttu-id="a9e58-125">2番目のインスタンスは、ファイルから作成されたストリームを使用して `Resources2.resources` という名前の .resources ファイルを表す <xref:System.Resources.ResourceReader> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-125">The second instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources2.resources` by using a stream created from the file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 <span data-ttu-id="a9e58-126">埋め込み .resources ファイルを表す <xref:System.Resources.ResourceReader> オブジェクトを作成するには、.resources ファイルが埋め込まれているアセンブリから <xref:System.Reflection.Assembly> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-126">To create a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file, instantiate an <xref:System.Reflection.Assembly> object from the assembly in which the .resources file is embedded.</span></span> <span data-ttu-id="a9e58-127"><xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> メソッドは、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンストラクターに渡すことができる <xref:System.IO.Stream> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-127">Its <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method returns a <xref:System.IO.Stream> object that can be passed to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="a9e58-128">次の例では、埋め込み .resources ファイルを表す <xref:System.Resources.ResourceReader> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-128">The following example instantiates a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## <a name="enumerating-a-resourcereader-objects-resources"></a><span data-ttu-id="a9e58-129">ResourceReader オブジェクトのリソースを列挙する</span><span class="sxs-lookup"><span data-stu-id="a9e58-129">Enumerating a ResourceReader Object's Resources</span></span>  
 <span data-ttu-id="a9e58-130">.Resources ファイル内のリソースを列挙するには、<xref:System.Resources.ResourceReader.GetEnumerator%2A> メソッドを呼び出します。このメソッドは、<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-130">To enumerate the resources in a .resources file, you call the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method, which returns an <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="a9e58-131">`IDictionaryEnumerator.MoveNext` メソッドを呼び出して、あるリソースから次のリソースに移動します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-131">You call the `IDictionaryEnumerator.MoveNext` method to move from one resource to the next.</span></span> <span data-ttu-id="a9e58-132">.Resources ファイル内のすべてのリソースが列挙されている場合、メソッドは `false` を返します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-132">The method returns `false` when all the resources in the .resources file have been enumerated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a9e58-133"><xref:System.Resources.ResourceReader> クラスは <xref:System.Collections.IEnumerable> インターフェイスと <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> メソッドを実装しますが、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> メソッドでは、<xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> の実装は提供されません。</span><span class="sxs-lookup"><span data-stu-id="a9e58-133">Although the <xref:System.Resources.ResourceReader> class implements the <xref:System.Collections.IEnumerable> interface and the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> method, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method does not provide the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="a9e58-134">代わりに、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> メソッドは、各リソースの名前と値のペアへのアクセスを提供する <xref:System.Collections.IDictionaryEnumerator> インターフェイスオブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-134">Instead, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method  returns an <xref:System.Collections.IDictionaryEnumerator> interface object that provides access to each resource's name/value pair.</span></span>  
  
 <span data-ttu-id="a9e58-135">コレクション内の個々のリソースを取得するには、次の2つの方法があります。</span><span class="sxs-lookup"><span data-stu-id="a9e58-135">You can retrieve the individual resources in the collection in two ways:</span></span>  
  
-   <span data-ttu-id="a9e58-136"><xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> コレクション内の各リソースを反復処理し、<xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> のプロパティを使用してリソースの名前と値を取得できます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-136">You can iterate each resource in the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and use <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> properties to retrieve the resource name and value.</span></span> <span data-ttu-id="a9e58-137">すべてのリソースが同じ種類である場合、または各リソースのデータ型がわかっている場合は、この方法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a9e58-137">We recommend this technique when all the resources are of the same type, or you know the data type of each resource.</span></span>  
  
-   <span data-ttu-id="a9e58-138"><xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> コレクションを反復処理し、<xref:System.Resources.ResourceReader.GetResourceData%2A> メソッドを呼び出してリソースのデータを取得するときに、各リソースの名前を取得できます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-138">You can retrieve the name of each resource when you iterate the <xref:System.Collections.IDictionaryEnumerator?displayProperty=nameWithType> collection and call the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve the resource's data.</span></span> <span data-ttu-id="a9e58-139">各リソースのデータ型がわからない場合や、前の方法で例外がスローされた場合は、この方法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a9e58-139">We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.</span></span>  
  
<a name="idictionaryenumerator"></a>   
### <a name="retrieving-resources-by-using-idictionaryenumerator-properties"></a><span data-ttu-id="a9e58-140">IDictionaryEnumerator プロパティを使用したリソースの取得</span><span class="sxs-lookup"><span data-stu-id="a9e58-140">Retrieving Resources by Using IDictionaryEnumerator Properties</span></span>  
 <span data-ttu-id="a9e58-141">.Resources ファイル内のリソースを列挙する最初の方法では、各リソースの名前と値のペアを直接取得します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-141">The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name/value pair.</span></span> <span data-ttu-id="a9e58-142">`IDictionaryEnumerator.MoveNext` メソッドを呼び出してコレクション内の各リソースに移動した後、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> プロパティからリソース名を取得し、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> プロパティからリソースデータを取得できます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-142">After you call the `IDictionaryEnumerator.MoveNext` method to move to each resource in the collection, you can retrieve the resource name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property and the resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a9e58-143">次の例は、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> と <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> のプロパティを使用して、.resources ファイル内の各リソースの名前と値を取得する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a9e58-143">The following example shows how to retrieve the name and value of each resource in a .resources file by using the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties.</span></span> <span data-ttu-id="a9e58-144">この例を実行するには、ApplicationResources という名前の次のテキストファイルを作成して、文字列リソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-144">To run the example, create the following text file named ApplicationResources.txt to define string resources.</span></span>  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 <span data-ttu-id="a9e58-145">その後、次のコマンドを使用して、テキストリソースファイルを ApplicationResources. .resources という名前のバイナリファイルに変換できます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-145">You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:</span></span>  
  
 <span data-ttu-id="a9e58-146">**resgen.exe ApplicationResources .txt**</span><span class="sxs-lookup"><span data-stu-id="a9e58-146">**resgen ApplicationResources.txt**</span></span>  
  
 <span data-ttu-id="a9e58-147">次の例では、<xref:System.Resources.ResourceReader> クラスを使用して、スタンドアロンのバイナリ .resources ファイル内の各リソースを列挙し、そのキー名と対応する値を表示します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-147">The following example then uses the <xref:System.Resources.ResourceReader> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 <span data-ttu-id="a9e58-148"><xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> プロパティからリソースデータを取得しようとすると、次の例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a9e58-148">The attempt to retrieve resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property can throw the following exceptions:</span></span>  
  
-   <span data-ttu-id="a9e58-149">データが予期された形式でない場合は <xref:System.FormatException>。</span><span class="sxs-lookup"><span data-stu-id="a9e58-149">A <xref:System.FormatException> if the data is not in the expected format.</span></span>  
  
-   <span data-ttu-id="a9e58-150">データが属する型を含むアセンブリが見つからない場合は <xref:System.IO.FileNotFoundException>。</span><span class="sxs-lookup"><span data-stu-id="a9e58-150">A <xref:System.IO.FileNotFoundException> if the assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <span data-ttu-id="a9e58-151">データが属する型が見つからない場合は <xref:System.TypeLoadException>。</span><span class="sxs-lookup"><span data-stu-id="a9e58-151">A <xref:System.TypeLoadException> if the type to which the data belongs cannot be cannot be found.</span></span>  
  
 <span data-ttu-id="a9e58-152">通常、これらの例外は、型が定義されているアセンブリがアプリケーションに含まれていないか、誤って削除されたか、またはアセンブリが登場の古いバージョンである場合に、.resources ファイルが手動で変更された場合にスローされます。型。</span><span class="sxs-lookup"><span data-stu-id="a9e58-152">Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type.</span></span> <span data-ttu-id="a9e58-153">これらの例外のいずれかがスローされた場合は、次のセクションに示すように、各リソースを列挙し、<xref:System.Resources.ResourceReader.GetResourceData%2A> メソッドを呼び出すことで、リソースを取得できます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-153">If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method, as the following section shows.</span></span> <span data-ttu-id="a9e58-154">この方法では、<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> プロパティによって返されるデータ型に関する情報が提供されます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-154">This approach provides you with some information about the data type that the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property attempted to return.</span></span>  
  
<a name="getresourcedata"></a>   
### <a name="retrieving-resources-by-name-with-getresourcedata"></a><span data-ttu-id="a9e58-155">GetResourceData を使用して名前でリソースを取得する</span><span class="sxs-lookup"><span data-stu-id="a9e58-155">Retrieving Resources by Name with GetResourceData</span></span>  
 <span data-ttu-id="a9e58-156">.Resources ファイル内のリソースを列挙する2番目の方法では、`IDictionaryEnumerator.MoveNext` メソッドを呼び出すことによって、ファイル内のリソースを移動する必要もあります。</span><span class="sxs-lookup"><span data-stu-id="a9e58-156">The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the `IDictionaryEnumerator.MoveNext` method.</span></span> <span data-ttu-id="a9e58-157">各リソースに対して、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> プロパティからリソースの名前を取得します。このプロパティは、リソースのデータを取得するために <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-157">For each resource, you retrieve the resource's name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property, which is then passed to the <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> method to retrieve the resource's data.</span></span> <span data-ttu-id="a9e58-158">これは、`resourceData` 引数のバイト配列として返されます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-158">This is returned as a byte array in the `resourceData` argument.</span></span>  
  
 <span data-ttu-id="a9e58-159">この方法は、リソースの値を形成する実際のバイトを返すため、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> と <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> のプロパティからリソースの名前と値を取得するよりも扱いにくくなります。</span><span class="sxs-lookup"><span data-stu-id="a9e58-159">This approach is more awkward than retrieving the resource name and value from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> properties, because it returns the actual bytes that form the resource value.</span></span> <span data-ttu-id="a9e58-160">ただし、リソースを取得しようとしたときに例外がスローされた場合、<xref:System.Resources.ResourceReader.GetResourceData%2A> メソッドを使用して、リソースのデータ型に関する情報を指定することで、例外の原因を特定できます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-160">However, if the attempt to retrieve the resource throws an exception, the <xref:System.Resources.ResourceReader.GetResourceData%2A> method can help identify the source of the exception by supplying information about the resource's data type.</span></span> <span data-ttu-id="a9e58-161">リソースのデータ型を示す文字列の詳細については、「<xref:System.Resources.ResourceReader.GetResourceData%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a9e58-161">For more information about the string that indicates the resource's data type, see <xref:System.Resources.ResourceReader.GetResourceData%2A>.</span></span>  
  
 <span data-ttu-id="a9e58-162">次の例は、この方法を使用してリソースを取得し、スローされた例外を処理する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a9e58-162">The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown.</span></span> <span data-ttu-id="a9e58-163">4つの文字列、1つのブール値、1つの整数、1つのビットマップ、および1つのカスタム `DateTimeTZI` オブジェクトを含むバイナリ .resources ファイルをプログラムによって作成します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-163">It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom `DateTimeTZI` object.</span></span> <span data-ttu-id="a9e58-164">この例を実行するには、次の手順を実行します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-164">To run the example, do the following:</span></span>  
  
1.  <span data-ttu-id="a9e58-165">`DateTimeTZI` 構造体を含む、Library という名前のアセンブリを作成します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-165">Create an assembly named Library.dll that contains the `DateTimeTZI` structure.</span></span> <span data-ttu-id="a9e58-166">アセンブリのソースコードを次に示します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-166">The following is the source code for the assembly.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     <span data-ttu-id="a9e58-167">次のコマンドを使用C#して、でソースコードをコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="a9e58-167">Compile the source code in C# by using the following command:</span></span>  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     <span data-ttu-id="a9e58-168">または、次のコマンドを使用して Visual Basic でコンパイルすることもできます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-168">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  <span data-ttu-id="a9e58-169">次のソースコードをコンパイルして実行します。これにより、ContactResources という名前の .resources ファイルが作成されます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-169">Compile and execute the following source code, which creates a .resources file named ContactResources.resources.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     <span data-ttu-id="a9e58-170">ソースコードファイルには CreateResources.cs という名前が付けられています。</span><span class="sxs-lookup"><span data-stu-id="a9e58-170">The source code file is named CreateResources.cs.</span></span> <span data-ttu-id="a9e58-171">次のコマンドを使用C#して、でコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-171">You can compile it in C# by using the following command:</span></span>  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     <span data-ttu-id="a9e58-172">または、次のコマンドを使用して Visual Basic でコンパイルすることもできます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-172">Or, you can compile it in Visual Basic by using the following command:</span></span>  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  <span data-ttu-id="a9e58-173">次のコードをコンパイルして実行し、ContactResources .resources ファイル内のリソースを列挙します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-173">Compile and run the following code to enumerate the resources in the ContactResources.resources file.</span></span>  
  
     [!code-csharp[System.Resources.ResourceReader.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     <span data-ttu-id="a9e58-174">ソースコードを変更した後 (たとえば、`try` ブロックの末尾にある <xref:System.FormatException> を意図的にスローすることによって)、またはライブラリの .dll アセンブリの名前を変更して実行時に使用できないようにするには、この例を実行して、リソース情報を取得または再作成するために <xref:System.Resources.ResourceReader.GetResourceData%2A> を呼び出す方法を確認します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-174">After modifying the source code (for example, by deliberately throwing a <xref:System.FormatException> at the end of the `try` block) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <xref:System.Resources.ResourceReader.GetResourceData%2A> enable you to retrieve or recreate some resource information.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a9e58-175"><see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-175">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="a9e58-176">[https://login.microsoftonline.com/consumers/]([!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)])</span><span class="sxs-lookup"><span data-stu-id="a9e58-176">[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)].</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : System.IO.Stream -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="a9e58-177">リソースを読み取る入力ストリーム。</span><span class="sxs-lookup"><span data-stu-id="a9e58-177">The input stream for reading resources.</span></span></param>
        <summary><span data-ttu-id="a9e58-178">指定したストリーム用の <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-178">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9e58-179"><xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンストラクターは、スタンドアロンの .resources ファイルから、またはアセンブリに埋め込まれている .resources ファイルからリソースを取得する <xref:System.Resources.ResourceReader> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-179">The <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources either from a standalone .resources file or from a .resources file that is embedded in an assembly.</span></span> <span data-ttu-id="a9e58-180">スタンドアロンの .resources ファイルから読み取るには、<xref:System.IO.Stream> オブジェクトをインスタンス化し、それを <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンストラクターに渡します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-180">To read from a standalone .resources file, instantiate a <xref:System.IO.Stream> object and pass it to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span> <span data-ttu-id="a9e58-181">埋め込み .resources ファイルから読み取るには、.resources ファイルの名前に大文字と小文字を区別して <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> メソッドを呼び出し、返された <xref:System.IO.Stream> オブジェクトを <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンストラクターに渡します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-181">To read from an embedded .resources file, call the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=nameWithType> method with the case-sensitive name of the .resources file, and pass the returned <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
## Examples  
 <span data-ttu-id="a9e58-182">このセクションの例では、`PatientForm.txt` という名前の次の .txt ファイルを使用して、アプリケーションによって使用されるリソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-182">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="a9e58-183">次のコマンドを発行することで、.txt ファイルを .resources ファイルにコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-183">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="a9e58-184">**resgen PatientForm .txt**</span><span class="sxs-lookup"><span data-stu-id="a9e58-184">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="a9e58-185">次の例では、アプリケーションの実行可能コードを含むアセンブリにリソースファイルが埋め込まれていることを前提としています。</span><span class="sxs-lookup"><span data-stu-id="a9e58-185">The following example assumes that the resource file is embedded in the assembly that contains the application's executable code.</span></span> <span data-ttu-id="a9e58-186">現在実行中のアセンブリから `PatientForm.resources` という名前のリソースファイルを取得し、各リソースの名前と値を表示します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-186">It retrieves a resource file named `PatientForm.resources` from the currently executing assemblies and displays the name and value of each of its resources.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 <span data-ttu-id="a9e58-187">このC#例に `Example.cs`という名前が付けられている場合は、次のコマンドを使用してコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-187">If the C# example is named `Example.cs`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="a9e58-188">**csc Example.cs/res: PatientForm**</span><span class="sxs-lookup"><span data-stu-id="a9e58-188">**csc Example.cs /res:PatientForm.resources**</span></span>  
  
 <span data-ttu-id="a9e58-189">Visual Basic の例に `Example.vb`という名前が付けられている場合は、次のコマンドを使用してコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-189">If the Visual Basic example is named `Example.vb`, you can compile it by using the following command:</span></span>  
  
 <span data-ttu-id="a9e58-190">**vbc.exe の例。 vb/res: PatientForm**</span><span class="sxs-lookup"><span data-stu-id="a9e58-190">**vbc Example.vb /res:PatientForm.resources**</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a9e58-191"><paramref name="stream" /> パラメーターは読み取り可能ではありません。</span><span class="sxs-lookup"><span data-stu-id="a9e58-191">The <paramref name="stream" /> parameter is not readable.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a9e58-192"><paramref name="stream" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a9e58-192">The <paramref name="stream" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a9e58-193"><paramref name="stream" /> にアクセスしているときに、I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="a9e58-193">An I/O error has occurred while accessing <paramref name="stream" />.</span></span></exception>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceReader(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="new System.Resources.ResourceReader : string -&gt; System.Resources.ResourceReader" Usage="new System.Resources.ResourceReader fileName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="a9e58-194">読み取るリソース ファイルのパスと名前。</span><span class="sxs-lookup"><span data-stu-id="a9e58-194">The path and name of the resource file to read.</span></span> <span data-ttu-id="a9e58-195"><c>filename</c> は大文字と小文字を区別しません。</span><span class="sxs-lookup"><span data-stu-id="a9e58-195"><c>filename</c> is not case-sensitive.</span></span></param>
        <summary><span data-ttu-id="a9e58-196">リソース ファイルを指定して <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-196">Initializes a new instance of the <see cref="T:System.Resources.ResourceReader" /> class for the specified named resource file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9e58-197"><xref:System.Resources.ResourceReader.%23ctor%28System.String%29> コンストラクターは、スタンドアロンの .resources ファイルからリソースを取得する <xref:System.Resources.ResourceReader> オブジェクトをインスタンス化します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-197">The <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> constructor instantiates a <xref:System.Resources.ResourceReader> object that retrieves resources from a standalone .resources file.</span></span> <span data-ttu-id="a9e58-198">埋め込み .resources ファイルからリソースを取得するには、<xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンストラクターを使用します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-198">To retrieve resources from an embedded .resources file, use the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor.</span></span>  

[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]

## Examples  
 <span data-ttu-id="a9e58-199">このセクションの例では、`PatientForm.txt` という名前の次の .txt ファイルを使用して、アプリケーションによって使用されるリソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-199">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="a9e58-200">次のコマンドを発行して、この .txt ファイルを .resources ファイルにコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-200">You can compile this .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="a9e58-201">**resgen PatientForm .txt**</span><span class="sxs-lookup"><span data-stu-id="a9e58-201">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="a9e58-202">次の例では、`PatientForm.resources` 内のリソースを列挙し、それぞれの名前と値を表示します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-202">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a9e58-203"><paramref name="fileName" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a9e58-203">The <paramref name="fileName" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="a9e58-204">ファイルが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="a9e58-204">The file cannot be found.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="a9e58-205">I/O エラーが発生しました。</span><span class="sxs-lookup"><span data-stu-id="a9e58-205">An I/O error has occurred.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="a9e58-206">リソース ファイルの形式が無効です。</span><span class="sxs-lookup"><span data-stu-id="a9e58-206">The resource file has an invalid format.</span></span> <span data-ttu-id="a9e58-207">たとえば、ファイルの長さが 0 の場合などです。</span><span class="sxs-lookup"><span data-stu-id="a9e58-207">For example, the length of the file may be zero.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit&#xA;override this.Close : unit -&gt; unit" Usage="resourceReader.Close " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a9e58-208">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトに関連付けられたすべてのオペレーティング システム リソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-208">Releases all operating system resources associated with this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9e58-209"><xref:System.Resources.ResourceReader.Close%2A> は、安全に複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-209"><xref:System.Resources.ResourceReader.Close%2A> can be safely called multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9e58-210">次の例では、ファイルのリソースを移動し、検出されたすべてのキーと値のペアを表示します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-210">The following example moves through a file's resources and displays all the key/value pairs it finds.</span></span> <span data-ttu-id="a9e58-211">次に、このコードでは、<xref:System.Resources.ResourceReader.Close%2A> メソッドを使用して <xref:System.Resources.ResourceReader> をシャットダウンし、それによって使用されるすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-211">The code then uses the <xref:System.Resources.ResourceReader.Close%2A> method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.</span></span>  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="resourceReader.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a9e58-212"><see cref="T:System.Resources.ResourceReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-212">Releases all resources used by the current instance of the <see cref="T:System.Resources.ResourceReader" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9e58-213">この <xref:System.Resources.ResourceReader>インスタンスの使用が終了したら、<xref:System.Resources.ResourceReader.Dispose%2A> を呼び出して、このインスタンスで使用されているすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-213">When you are finished using this instance of <xref:System.Resources.ResourceReader>, call <xref:System.Resources.ResourceReader.Dispose%2A> to release all resources used by this instance.</span></span> <span data-ttu-id="a9e58-214">ガベージコレクターがインスタンスのメモリを再利用できるように、この <xref:System.Resources.ResourceReader> インスタンスへの参照を削除する必要があります。</span><span class="sxs-lookup"><span data-stu-id="a9e58-214">You should eliminate further references to this <xref:System.Resources.ResourceReader> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.</span></span>  
  
 <span data-ttu-id="a9e58-215"><xref:System.Resources.ResourceReader.Dispose%2A> は、マネージリソースとアンマネージリソースを解放するコードを含む、プライベート Dispose (Boolean) メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-215"><xref:System.Resources.ResourceReader.Dispose%2A> calls the private Dispose(Boolean) method, which contains the code to release managed and unmanaged resources.</span></span> <span data-ttu-id="a9e58-216">詳細については、「 [Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a9e58-216">For more information, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IDictionaryEnumerator ^ GetEnumerator();" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IDictionaryEnumerator" Usage="resourceReader.GetEnumerator " FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Resources.IResourceReader.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a9e58-217">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-217">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></summary>
        <returns><span data-ttu-id="a9e58-218">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子。</span><span class="sxs-lookup"><span data-stu-id="a9e58-218">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9e58-219">通常、リソースを列挙するには、<xref:System.Resources.ResourceReader.GetEnumerator%2A> メソッドを呼び出し、返された <xref:System.Collections.IDictionaryEnumerator> オブジェクトに対して、メソッドが `false`を返すまで、<xref:System.Collections.IEnumerator.MoveNext%2A> メソッドを繰り返し呼び出します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-219">Typically, you enumerate resources by calling the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method and then repeatedly calling the <xref:System.Collections.IEnumerator.MoveNext%2A> method on the returned <xref:System.Collections.IDictionaryEnumerator> object until the method returns `false`.</span></span> <span data-ttu-id="a9e58-220">リソース名は、<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> プロパティから使用できます。<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> プロパティからの値。</span><span class="sxs-lookup"><span data-stu-id="a9e58-220">The resource name is available from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> property; its value from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="a9e58-221">この例は、この方法でリソースを列挙する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="a9e58-221">The example illustrates how to enumerate resources in this way.</span></span>  
  
 <span data-ttu-id="a9e58-222"><xref:System.Resources.ResourceReader> クラスによって <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> プロパティを実装すると、次の例外がスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="a9e58-222">The implementation of the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> property by the <xref:System.Resources.ResourceReader> class can throw the following exceptions:</span></span>  
  
-   <xref:System.IO.FileNotFoundException>  
  
     <span data-ttu-id="a9e58-223">データが属する型を含むアセンブリが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="a9e58-223">The assembly that contains the type to which the data belongs cannot be found.</span></span>  
  
-   <xref:System.FormatException>  
  
     <span data-ttu-id="a9e58-224">データが予期された形式ではありません。</span><span class="sxs-lookup"><span data-stu-id="a9e58-224">The data is not in the expected format.</span></span>  
  
-   <xref:System.TypeLoadException>  
  
     <span data-ttu-id="a9e58-225">データが属する型が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="a9e58-225">The type to which the data belongs cannot be found.</span></span>  
  
 <span data-ttu-id="a9e58-226">この例外を処理するには、<xref:System.Resources.ResourceReader.GetResourceData%2A> メソッドを呼び出して、指定したリソースに割り当てられているデータ型とバイト配列に関する情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-226">You can handle the exception by calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve information about the data type and the byte array assigned to the named resource.</span></span> <span data-ttu-id="a9e58-227">詳細については、<xref:System.Resources.ResourceReader> クラスのトピックの「GetResourceData を使用してリソースを名前で取得する」セクションを参照してください。</span><span class="sxs-lookup"><span data-stu-id="a9e58-227">For more information, see the "Retrieving Resources by Name with GetResourceData" section in the <xref:System.Resources.ResourceReader> class topic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a9e58-228"><xref:System.Resources.ResourceReader> クラスには、列挙子を返す2つのメソッドが含まれています。</span><span class="sxs-lookup"><span data-stu-id="a9e58-228">The <xref:System.Resources.ResourceReader> class includes two methods that return enumerators.</span></span> <span data-ttu-id="a9e58-229"><xref:System.Resources.ResourceReader.GetEnumerator%2A> メソッドは、<xref:System.Collections.IDictionaryEnumerator> インターフェイスオブジェクトを返します。リソースを列挙するときには、このメソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a9e58-229">The <xref:System.Resources.ResourceReader.GetEnumerator%2A> method returns an <xref:System.Collections.IDictionaryEnumerator> interface object and is the recommended method to call when enumerating resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a9e58-230">このセクションの例では、`PatientForm.txt` という名前の次の .txt ファイルを使用して、アプリケーションによって使用されるリソースを定義します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-230">The example in this section uses the following .txt file named `PatientForm.txt` to define the resources used by an application.</span></span>  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 <span data-ttu-id="a9e58-231">次のコマンドを発行することで、.txt ファイルを .resources ファイルにコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-231">You can compile the .txt file into a .resources file by issuing the following command:</span></span>  
  
 <span data-ttu-id="a9e58-232">**resgen PatientForm .txt**</span><span class="sxs-lookup"><span data-stu-id="a9e58-232">**resgen PatientForm.txt**</span></span>  
  
 <span data-ttu-id="a9e58-233">次の例では、`PatientForm.resources` 内のリソースを列挙し、それぞれの名前と値を表示します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-233">The following example enumerates the resources in `PatientForm.resources` and displays the name and value of each.</span></span>  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a9e58-234">リーダーが閉じられているか、破棄されているため、アクセスできません。</span><span class="sxs-lookup"><span data-stu-id="a9e58-234">The reader has been closed or disposed, and cannot be accessed.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, [out] string&amp; resourceType, [out] unsigned int8[]&amp; resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetResourceData (resourceName As String, ByRef resourceType As String, ByRef resourceData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetResourceData(System::String ^ resourceName, [Runtime::InteropServices::Out] System::String ^ % resourceType, [Runtime::InteropServices::Out] cli::array &lt;System::Byte&gt; ^ % resourceData);" />
      <MemberSignature Language="F#" Value="member this.GetResourceData : string * string * Byte[] -&gt; unit" Usage="resourceReader.GetResourceData (resourceName, resourceType, resourceData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="resourceType" Type="System.String" RefType="out" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
        <Parameter Name="resourceData" Type="System.Byte[]" RefType="out" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1" />
      </Parameters>
      <Docs>
        <param name="resourceName"><span data-ttu-id="a9e58-235">リソースの名前。</span><span class="sxs-lookup"><span data-stu-id="a9e58-235">The name of a resource.</span></span></param>
        <param name="resourceType"><span data-ttu-id="a9e58-236">このメソッドが返るときに、取得したリソースの型名を表す文字列が含まれます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-236">When this method returns, contains a string that represents the type name of the retrieved resource.</span></span> <span data-ttu-id="a9e58-237">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-237">This parameter is passed uninitialized.</span></span></param>
        <param name="resourceData"><span data-ttu-id="a9e58-238">このメソッドから制御が戻った時点で、取得した型のバイナリ表現であるバイト配列が格納されます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-238">When this method returns, contains a byte array that is the binary representation of the retrieved type.</span></span> <span data-ttu-id="a9e58-239">このパラメーターは初期化せずに渡されます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-239">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="a9e58-240">オープン リソース ファイルまたはストリームから名前付きリソースの型名とデータを取得します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-240">Retrieves the type name and data of a named resource from an open resource file or stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9e58-241"><xref:System.Resources.ResourceReader.GetResourceData%2A> メソッドは、指定されたリソースの値をバイト配列として取得します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-241">The <xref:System.Resources.ResourceReader.GetResourceData%2A> method retrieves the value of a named resource as a byte array.</span></span> <span data-ttu-id="a9e58-242">これは通常、リソースの値を取得しようとしたときに <xref:System.Collections.IDictionaryEnumerator.Value%2A> プロパティが例外をスローした場合に使用されます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-242">It is typically used when the <xref:System.Collections.IDictionaryEnumerator.Value%2A> property throws an exception when it tries to retrieve the value of a resource.</span></span>  
  
 <span data-ttu-id="a9e58-243">`resourceType` は、リソースのデータ型を表す文字列です。</span><span class="sxs-lookup"><span data-stu-id="a9e58-243">`resourceType` is a string that represents the data type of the resource.</span></span> <span data-ttu-id="a9e58-244">次のいずれかの値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-244">It can be any of the following values:</span></span>  
  
-   <span data-ttu-id="a9e58-245">リソースのデータ型を示す `ResourceTypeCode` 列挙体メンバーの文字列形式。</span><span class="sxs-lookup"><span data-stu-id="a9e58-245">The string representation of a `ResourceTypeCode` enumeration member that indicates the data type of the resource.</span></span> <span data-ttu-id="a9e58-246">`ResourceTypeCode` は、によって使用されるプライベート列挙体です。では、19個の共通データ型の1つを格納するために特殊なバイナリ形式が使用されることを示しています。</span><span class="sxs-lookup"><span data-stu-id="a9e58-246">`ResourceTypeCode` is a private enumeration that is used by .to indicate that a special binary format is used to store one of 19 common data types.</span></span> <span data-ttu-id="a9e58-247">これには、.NET Framework のプリミティブデータ型 (<xref:System.Boolean>、<xref:System.Byte>、<xref:System.Char>、<xref:System.Decimal>、<xref:System.Double>、<xref:System.Int16>、<xref:System.Int32>、<xref:System.Int64>、<xref:System.Single>)、<xref:System.SByte>、<xref:System.UInt16>、<xref:System.UInt32>のほか、<xref:System.UInt64>の列挙体には、次の表に示す値が含まれます。<xref:System.String><xref:System.DateTime><xref:System.TimeSpan>`ResourceTypeCode`</span><span class="sxs-lookup"><span data-stu-id="a9e58-247">These include the .NET Framework primitive data types (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), as well as <xref:System.String>, <xref:System.DateTime>, and <xref:System.TimeSpan>, In addition, the `ResourceTypeCode` enumeration includes the values shown in the following table.</span></span>  
  
    |<span data-ttu-id="a9e58-248">ResourceTypeCode 値</span><span class="sxs-lookup"><span data-stu-id="a9e58-248">ResourceTypeCode value</span></span>|<span data-ttu-id="a9e58-249">説明</span><span class="sxs-lookup"><span data-stu-id="a9e58-249">Description</span></span>|  
    |----------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|<span data-ttu-id="a9e58-250">データはバイト配列です。</span><span class="sxs-lookup"><span data-stu-id="a9e58-250">The data is a byte array.</span></span> <span data-ttu-id="a9e58-251">このデータ型は、通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> メソッドの呼び出しの結果として返されます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-251">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=nameWithType> method.</span></span>|  
    |`ResourceTypeCode.Null`|<span data-ttu-id="a9e58-252">データが null 参照です。</span><span class="sxs-lookup"><span data-stu-id="a9e58-252">The data is a null reference.</span></span> <span data-ttu-id="a9e58-253">このデータ型は、通常、値が `null`オブジェクトを使用して <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> メソッドを呼び出した結果として得られます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-253">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=nameWithType> method with an object whose value is `null`.</span></span>|  
    |`ResourceTypeCode.Stream`|<span data-ttu-id="a9e58-254">データはストリームに格納されます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-254">The data is stored in a stream.</span></span> <span data-ttu-id="a9e58-255">このデータ型は、通常、<xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> または <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> メソッドの呼び出しの結果として得られます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-255">This data type commonly results from the call to the <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=nameWithType> or <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=nameWithType> method.</span></span>|  
  
     <span data-ttu-id="a9e58-256">`resourceData` が破損していないと仮定した場合、通常は、<xref:System.BitConverter> または <xref:System.IO.BinaryReader> メソッドを呼び出すことにより、バイト配列から元の値に変換できます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-256">Assuming that `resourceData` has not been corrupted, it can usually be converted from a byte array back to its original value by calling a <xref:System.BitConverter> or <xref:System.IO.BinaryReader> method.</span></span>  
  
-   <span data-ttu-id="a9e58-257">シリアル化されたデータが `resourceData` 引数 (`System.String`など) に割り当てられている型の完全修飾名を含む文字列。</span><span class="sxs-lookup"><span data-stu-id="a9e58-257">A string that contains the fully qualified name of the type whose serialized data is assigned to the `resourceData` argument (for example, `System.String`).</span></span> <span data-ttu-id="a9e58-258">また、.NET Framework クラスライブラリの一部ではない型の場合、文字列には、その型を含むアセンブリの名前、バージョン、カルチャ、および公開キーが含まれます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-258">In addition, for types that are not part of the .NET Framework class library, the string includes the name, version, culture, and public key of the assembly that contains the type.</span></span> <span data-ttu-id="a9e58-259">たとえば、次の文字列は、シリアル化されたデータが `Extensions` 名前空間の `Person` 型のインスタンスを表していることを示しています。これは、公開キーと指定されたカルチャを持たないユーティリティという名前のアセンブリのバージョン1.0 に含まれています。</span><span class="sxs-lookup"><span data-stu-id="a9e58-259">For example, the following string indicates that the serialized data represents an instance of the `Person` type in the `Extensions` namespace, which is found in version 1.0 of an assembly named Utility that has no public key and no designated culture.</span></span>  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     <span data-ttu-id="a9e58-260">`resourceData` が破損しておらず、ソースの種類が使用可能であることを前提として、バイト配列を <xref:System.IO.Stream> オブジェクトに変換し、ストリームを <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> メソッドに渡すことで、`resourceData` をバイト配列から元の値に変換できます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-260">Assuming that `resourceData` has not been corrupted and that the source type is available, `resourceData` can be converted from a byte array back to its original value by converting the byte array to a <xref:System.IO.Stream> object and passing the stream to the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="a9e58-261"><xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> メソッドの呼び出しでデータ型を記述するために使用される文字列。</span><span class="sxs-lookup"><span data-stu-id="a9e58-261">The string used to describe the data type in the <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=nameWithType> method call.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a9e58-262"><paramref name="resourceName" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="a9e58-262"><paramref name="resourceName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="a9e58-263"><paramref name="resourceName" /> は存在しません。</span><span class="sxs-lookup"><span data-stu-id="a9e58-263"><paramref name="resourceName" /> does not exist.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="a9e58-264"><paramref name="resourceName" /> の型が無効です。</span><span class="sxs-lookup"><span data-stu-id="a9e58-264"><paramref name="resourceName" /> has an invalid type.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="a9e58-265">取得されたリソース データが壊れています。</span><span class="sxs-lookup"><span data-stu-id="a9e58-265">The retrieved resource data is corrupt.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a9e58-266">現在の <see cref="T:System.Resources.ResourceReader" /> のオブジェクトは、おそらく閉じられたために初期化されません。</span><span class="sxs-lookup"><span data-stu-id="a9e58-266">The current <see cref="T:System.Resources.ResourceReader" /> object is not initialized, probably because it is closed.</span></span></exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a9e58-267">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子を返します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-267">Returns an enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></summary>
        <returns><span data-ttu-id="a9e58-268">この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子。</span><span class="sxs-lookup"><span data-stu-id="a9e58-268">An enumerator for this <see cref="T:System.Resources.ResourceReader" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a9e58-269"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> は、明示的なインターフェイスの実装です。</span><span class="sxs-lookup"><span data-stu-id="a9e58-269"><xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=nameWithType> is an explicit interface implementation.</span></span> <span data-ttu-id="a9e58-270">これは、<xref:System.Resources.ResourceReader> のインスタンスが <xref:System.Collections.IEnumerable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-270">It can be used only when the <xref:System.Resources.ResourceReader> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span> <span data-ttu-id="a9e58-271">.Resources ファイル内のリソースを列挙する方法としては、<xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> メソッドによって返される <xref:System.Collections.IDictionaryEnumerator> オブジェクトの <xref:System.Collections.IEnumerator.MoveNext%2A> メソッドを呼び出すことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="a9e58-271">The recommended approach to enumerating the resources in a .resources file is to call the <xref:System.Collections.IEnumerator.MoveNext%2A> method of the <xref:System.Collections.IDictionaryEnumerator> object returned by the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="a9e58-272">リーダーが既に閉じられているため、アクセスできません。</span><span class="sxs-lookup"><span data-stu-id="a9e58-272">The reader has already been closed and cannot be accessed.</span></span></exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a9e58-273"><see cref="T:System.Resources.ResourceReader" /> で使用されたリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-273">Releases the resources used by the <see cref="T:System.Resources.ResourceReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="a9e58-274">Dispose を呼び出すと、<xref:System.Resources.ResourceReader> によって使用されるリソースを他の目的で再割り当てできます。</span><span class="sxs-lookup"><span data-stu-id="a9e58-274">Calling Dispose allows the resources used by the <xref:System.Resources.ResourceReader> to be reallocated for other purposes.</span></span> <span data-ttu-id="a9e58-275">Dispose の詳細については、「[アンマネージリソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="a9e58-275">For more information about Dispose, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>

## Examples  
<span data-ttu-id="a9e58-276">次のコード例では、ファイルのリソースを移動し、検出されたすべてのキーと値のペアを出力します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-276">The following code example moves through a file's resources and prints out all the key/value pairs it finds.</span></span> <span data-ttu-id="a9e58-277">次に、theIDisposable メソッドを使用して <xref:System.Resources.ResourceReader> をシャットダウンし、それによって使用されるすべてのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="a9e58-277">The code then uses theIDisposable.Dispose method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.</span></span>

```vb
Imports System
Imports System.Resources
Imports System.Collections

Public Class ReadResources

    Public Shared Sub Main(args() As String)
        ' Create a resource reader for items.resources 
        ' and get an enumerator to iterate through the file. 
        Dim reader As IResourceReader = New ResourceReader("items.resources")
        Dim en As IDictionaryEnumerator = reader.GetEnumerator()

        ' Iterate through the file, printing the key and value pairs. 
        While en.MoveNext()
            Console.WriteLine()
            Console.WriteLine("Name: {0}", en.Key)
            Console.WriteLine("Value: {0}", en.Value)
        End While 

        ' Clean up all resources associated with the reader. 
        ' Calling Dispose is equivalent to calling Close.
        reader.Dispose()
    End Sub 

End Class
```

```csharp
using System;
using System.Resources;
using System.Collections;

public class ReadResources 
{
    public static void Main(string[] args) 
    {
        // Create a resource reader for items.resources 
        // and get an enumerator to iterate through the file.
        IResourceReader reader = new ResourceReader("items.resources");
        IDictionaryEnumerator en = reader.GetEnumerator();

        // Iterate through the file, printing the key/value pairs. 
        while (en.MoveNext()) 
        {
            Console.WriteLine();
            Console.WriteLine("Name: {0}", en.Key);
            Console.WriteLine("Value: {0}", en.Value);
        }

        // Clean up all resources associated with the reader. 
        // Calling Dispose is equivalent to calling Close.
        reader.Dispose();
    }
}
```

```cpp
using namespace System;
using namespace System::Resources;
using namespace System::Collections;
int main()
{
   array<String^>^args = Environment::GetCommandLineArgs();

   // Create a resource reader for items.resources 
   // and get an enumerator to iterate through the file.
   IResourceReader^ reader = gcnew ResourceReader( "items.resources" );
   IDictionaryEnumerator^ en = reader->GetEnumerator();

   // Iterate through the file, printing the key/value pairs. 
   while ( en->MoveNext() )
   {
      Console::WriteLine();
      Console::WriteLine( "Name: {0}", en->Key );
      Console::WriteLine( "Value: {0}", en->Value );
   }

   // Clean up all resources associated with the reader. 
   // Calling the destructor is equivalent to calling Close.
   reader->~IResourceReader();
}
```

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
