<Type Name="InstancePersistenceContext" FullName="System.Runtime.DurableInstancing.InstancePersistenceContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4db0164752fb56f2e4856943dd1c36ae0bfe97c9" /><Meta Name="ms.sourcegitcommit" Value="0084afad1b3b1cb2c8ad2c142ae3597d08bad4a7" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="10/31/2019" /><Meta Name="ms.locfileid" Value="73394579" /></Metadata><TypeSignature Language="C#" Value="public sealed class InstancePersistenceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InstancePersistenceContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.DurableInstancing.InstancePersistenceContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InstancePersistenceContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class InstancePersistenceContext sealed" />
  <TypeSignature Language="F#" Value="type InstancePersistenceContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="7c050-101">永続化コマンドの実行中の実行状態情報を表します。</span><span class="sxs-lookup"><span data-stu-id="7c050-101">Represents execution state information while a persistence command is being executed.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-102">このクラスのインスタンスは、永続化プロバイダーの実装の TryCommand メソッドに渡されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-102">An instance of this class is passed to the TryCommand method of persistence provider implementations.</span></span> <span data-ttu-id="7c050-103">永続化プロバイダーは、インスタンスのメモリ内ビューを検査するためだけでなく、ビューまたはその他のメモリ内コンテキストに影響を与える可能性のある、外部ストアに対する操作の結果を示すためにも、このクラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="7c050-103">Persistence providers use this class to inspect the in-memory view of the instance as well as indicate the results of operations on the external store which may affect the view or other in-memory context.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AssociatedInstanceKey">
      <MemberSignature Language="C#" Value="public void AssociatedInstanceKey (Guid key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssociatedInstanceKey(valuetype System.Guid key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.AssociatedInstanceKey(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssociatedInstanceKey (key As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssociatedInstanceKey(Guid key);" />
      <MemberSignature Language="F#" Value="member this.AssociatedInstanceKey : Guid -&gt; unit" Usage="instancePersistenceContext.AssociatedInstanceKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="7c050-104">関連付けられたキーのインスタンス キー識別子。</span><span class="sxs-lookup"><span data-stu-id="7c050-104">The instance key identifier  for the key that has been associated.</span></span> <span data-ttu-id="7c050-105">Guid.Empty にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7c050-105">Must not be Guid.Empty.</span></span></param>
        <summary><span data-ttu-id="7c050-106">永続化プロバイダーによってインスタンス ストア内の現在のインスタンスにキーが正常に関連付けられたことを示します。</span><span class="sxs-lookup"><span data-stu-id="7c050-106">Indicates that the persistence provider has successfully associated a key to the current instance in the instance store.</span></span> <span data-ttu-id="7c050-107">キーの識別子はパラメーターとして指定されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-107">The identifier of the key is specified as a parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-108">インスタンス キーは関連付けられていない必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-108">The instance key must be unassociated.</span></span> <span data-ttu-id="7c050-109">現在のインスタンス ハンドルは、インスタンスにバインドされているだけでなく、そのインスタンスのロックにもバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-109">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginBindReclaimedLock">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginBindReclaimedLock (long instanceVersion, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginBindReclaimedLock(int64 instanceVersion, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginBindReclaimedLock (instanceVersion As Long, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginBindReclaimedLock(long instanceVersion, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginBindReclaimedLock : int64 * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="instancePersistenceContext.BeginBindReclaimedLock (instanceVersion, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceVersion" Type="System.Int64" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceVersion"><span data-ttu-id="7c050-110">インスタンスに対して保持されているロックのバージョン。または、永続化プロバイダーがロック バージョンを実装しない場合はゼロ。</span><span class="sxs-lookup"><span data-stu-id="7c050-110">The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.</span></span></param>
        <param name="timeout"><span data-ttu-id="7c050-111">非同期操作のタイムアウト期間。</span><span class="sxs-lookup"><span data-stu-id="7c050-111">The timeout period for the asynchronous operation.</span></span></param>
        <param name="callback"><span data-ttu-id="7c050-112">操作が完了した時点で呼び出すメソッド。</span><span class="sxs-lookup"><span data-stu-id="7c050-112">The method to be called when the operation is completed.</span></span></param>
        <param name="state"><span data-ttu-id="7c050-113">非同期操作に関連付けられた状態情報。</span><span class="sxs-lookup"><span data-stu-id="7c050-113">The state information associated with the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="7c050-114">インスタンスの既存のロックを現在のインスタンス ハンドルにバインドするための非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="7c050-114">Begin an asynchronous operation to bind an existing lock on an instance to the current instance handle.</span></span> <span data-ttu-id="7c050-115">既存のロックのバージョンはパラメーターとして渡されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-115">The version of the existing lock is passed as a parameter.</span></span></summary>
        <returns><span data-ttu-id="7c050-116">非同期操作のステータス。</span><span class="sxs-lookup"><span data-stu-id="7c050-116">The status of an asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-117">永続化プロバイダーは、ロックの取得を試みるときに、現在のインスタンスが現在のストアで既にロックされているものと判断する場合があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-117">When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store.</span></span> <span data-ttu-id="7c050-118">ロックトークンが現在のハンドルのロックトークンと一致する場合、永続化プロバイダーは、そのバージョンを検査して BeginBindReclaimedLock に渡すことによって、ロックの再利用を試みることができます。</span><span class="sxs-lookup"><span data-stu-id="7c050-118">If the lock token matches the current handle's lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BeginBindReclaimedLock.</span></span> <span data-ttu-id="7c050-119">永続化プロバイダーは、ロックが正常に再要求されるまで、インスタンスに変更を加えることができません。</span><span class="sxs-lookup"><span data-stu-id="7c050-119">The persistence provider must not make changes to the instance until the lock is successfully reclaimed.</span></span> <span data-ttu-id="7c050-120">ロックにバインドされているハンドルが他にない場合は、BeginBindReclaimedLock 操作が成功し、現在のハンドルがロックにバインドされるようになります。</span><span class="sxs-lookup"><span data-stu-id="7c050-120">If no other handle is bound to the lock, then the BeginBindReclaimedLock operation succeeds and the current handle becomes bound to the lock.</span></span> <span data-ttu-id="7c050-121">それ以外の場合は、BeginBindReclaimedLock または EndBindReclaimedLock が InstanceHandleConflictException をスローします。</span><span class="sxs-lookup"><span data-stu-id="7c050-121">Otherwise, BeginBindReclaimedLock or EndBindReclaimedLock throws InstanceHandleConflictException.</span></span> <span data-ttu-id="7c050-122">他のハンドルに対するコマンドが実行中の場合、ロックを再要求できるかどうかを決定するためにそれらのコマンドの結果を待つ間、操作が完了しないことがあります。</span><span class="sxs-lookup"><span data-stu-id="7c050-122">If commands are in progress on other handles, the operation may not complete while waiting for the outcome of those commands to decide whether the lock can be reclaimed.</span></span>  
  
 <span data-ttu-id="7c050-123">現在のインスタンス ハンドルはインスタンスとロックの所有者にバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-123">The current instance handle must be bound to an instance and a lock owner.</span></span> <span data-ttu-id="7c050-124">インスタンスは完了していないことが必要です。</span><span class="sxs-lookup"><span data-stu-id="7c050-124">The instance must not be completed.</span></span> <span data-ttu-id="7c050-125">ロック所有者に関連付けられたロック トークンは、ロックの所有者を識別するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-125">The lock token associated with the lock owner is used to identify the owner of the lock.</span></span>  
  
 <span data-ttu-id="7c050-126">あるロックがハンドルにバインドされると、そのロックはハンドルが有効な間バインドされたままとなります。</span><span class="sxs-lookup"><span data-stu-id="7c050-126">Once a lock is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="7c050-127">ロック トークンとインスタンス バージョンのいずれも変更できません。</span><span class="sxs-lookup"><span data-stu-id="7c050-127">Neither the lock token nor the instance version can be changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginExecute">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginExecute (System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginExecute(class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginExecute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginExecute (command As InstancePersistenceCommand, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginExecute(System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginExecute : System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="instancePersistenceContext.BeginExecute (command, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="7c050-128">実行する永続化コマンド。</span><span class="sxs-lookup"><span data-stu-id="7c050-128">The persistence command to be executed.</span></span></param>
        <param name="timeout"><span data-ttu-id="7c050-129">操作で使用するタイムアウト値。</span><span class="sxs-lookup"><span data-stu-id="7c050-129">The time-out value for the operation.</span></span></param>
        <param name="callback"><span data-ttu-id="7c050-130">要求操作が完了したという非同期受信の通知を受信するデリゲート。</span><span class="sxs-lookup"><span data-stu-id="7c050-130">The delegate that receives the notification of the asynchronous receive that a request operation completes.</span></span></param>
        <param name="state"><span data-ttu-id="7c050-131">状態情報。</span><span class="sxs-lookup"><span data-stu-id="7c050-131">The state information.</span></span></param>
        <summary><span data-ttu-id="7c050-132">永続化コマンドの非同期実行を開始します。</span><span class="sxs-lookup"><span data-stu-id="7c050-132">Begins executing a persistence command asynchronously.</span></span></summary>
        <returns><span data-ttu-id="7c050-133">非同期操作のステータス。</span><span class="sxs-lookup"><span data-stu-id="7c050-133">The status of an asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-134">永続化プロバイダーは、このメソッドを使用して、サブコマンドをコマンドの一部として実行できます。</span><span class="sxs-lookup"><span data-stu-id="7c050-134">A persistence provider can use this method to execute sub-commands as part of a command.</span></span> <span data-ttu-id="7c050-135">サブコマンドは、InstanceStore.BeginExecute に渡されるコマンドと同様に、BeginTryCommand を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-135">The sub-command will be executed using BeginTryCommand, similar to commands passed to InstanceStore.BeginExecute.</span></span> <span data-ttu-id="7c050-136">コマンドは入れ子にできますが、1 つのコマンドが一度に複数のサブコマンドを実行することはできません。</span><span class="sxs-lookup"><span data-stu-id="7c050-136">Commands can be nested, but a command must not execute more than one sub-command at a time.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindAcquiredLock">
      <MemberSignature Language="C#" Value="public void BindAcquiredLock (long instanceVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindAcquiredLock(int64 instanceVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindAcquiredLock(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindAcquiredLock (instanceVersion As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindAcquiredLock(long instanceVersion);" />
      <MemberSignature Language="F#" Value="member this.BindAcquiredLock : int64 -&gt; unit" Usage="instancePersistenceContext.BindAcquiredLock instanceVersion" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceVersion" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="instanceVersion"><span data-ttu-id="7c050-137">インスタンスに対して取得したロックのバージョン。または、永続化プロバイダーがロック バージョンを実装しない場合はゼロ。</span><span class="sxs-lookup"><span data-stu-id="7c050-137">Version of the lock acquired on the instance, or zero if the persistence provider does not implement lock versions.</span></span></param>
        <summary><span data-ttu-id="7c050-138">インスタンスに対して新しく取得したロックを現在のインスタンス ハンドルにバインドします。</span><span class="sxs-lookup"><span data-stu-id="7c050-138">Binds a newly acquired lock on an instance to the current instance handle.</span></span> <span data-ttu-id="7c050-139">取得したロックのバージョンはパラメーターとして渡されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-139">The version of the acquired lock is passed as a parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-140">永続化プロバイダーがロックのバージョン管理を実装しない場合は、インスタンスのロックが 1 つ取得されるたびに、外部ストアでバージョンを 1 ずつ増分させる必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-140">If a persistence provider implements lock versioning, then each time a lock is acquired on the instance, the version must be incremented by one in the external store.</span></span> <span data-ttu-id="7c050-141">インスタンスが初めてロックされる場合、バージョンは 1 にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-141">The first time the instance is locked, the version should be 1.</span></span> <span data-ttu-id="7c050-142">ロックが取得されるたびに、以前のロックは無効になります。</span><span class="sxs-lookup"><span data-stu-id="7c050-142">Each lock acquisition invalidates the previous lock.</span></span> <span data-ttu-id="7c050-143">現在のインスタンス ハンドルはインスタンスとロックの所有者にバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-143">The current instance handle must be bound to an instance and a lock owner.</span></span> <span data-ttu-id="7c050-144">インスタンスは完了していないことが必要です。</span><span class="sxs-lookup"><span data-stu-id="7c050-144">The instance must not be completed.</span></span> <span data-ttu-id="7c050-145">ロック所有者に関連付けられたロック トークンは、ロックの所有者を識別するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-145">The lock token associated with the lock owner is used to identify the owner of the lock</span></span>  
  
 <span data-ttu-id="7c050-146">あるロックがハンドルにバインドされると、そのロックはハンドルが有効な間バインドされたままとなります。</span><span class="sxs-lookup"><span data-stu-id="7c050-146">Once a lock is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="7c050-147">ロック トークンとインスタンス バージョンのいずれも変更できません。</span><span class="sxs-lookup"><span data-stu-id="7c050-147">Neither the lock token nor the instance version can be changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindEvent">
      <MemberSignature Language="C#" Value="public void BindEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindEvent(class System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindEvent (persistenceEvent As InstancePersistenceEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindEvent(System::Runtime::DurableInstancing::InstancePersistenceEvent ^ persistenceEvent);" />
      <MemberSignature Language="F#" Value="member this.BindEvent : System.Runtime.DurableInstancing.InstancePersistenceEvent -&gt; unit" Usage="instancePersistenceContext.BindEvent persistenceEvent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="persistenceEvent" Type="System.Runtime.DurableInstancing.InstancePersistenceEvent" />
      </Parameters>
      <Docs>
        <param name="persistenceEvent"><span data-ttu-id="7c050-148">イベントに関する情報を含んでいる <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7c050-148">An <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> object containing information about the event.</span></span></param>
        <summary><span data-ttu-id="7c050-149"><see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> をインスタンス ハンドルにバインドします。</span><span class="sxs-lookup"><span data-stu-id="7c050-149">Binds an <see cref="T:System.Runtime.DurableInstancing.InstancePersistenceEvent" /> to an instance handle.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindInstance">
      <MemberSignature Language="C#" Value="public void BindInstance (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindInstance(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstance(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindInstance (instanceId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindInstance(Guid instanceId);" />
      <MemberSignature Language="F#" Value="member this.BindInstance : Guid -&gt; unit" Usage="instancePersistenceContext.BindInstance instanceId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId"><span data-ttu-id="7c050-150">インスタンス識別子。</span><span class="sxs-lookup"><span data-stu-id="7c050-150">An instance identifier.</span></span> <span data-ttu-id="7c050-151">Guid.Empty にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7c050-151">Must not be Guid.Empty.</span></span></param>
        <summary><span data-ttu-id="7c050-152">パラメーターとして指定された識別子を持つインスタンスを現在のインスタンス ハンドルにバインドします。</span><span class="sxs-lookup"><span data-stu-id="7c050-152">Binds an instance whose identifier is specified as a parameter to the current instance handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-153">あるインスタンスがハンドルにバインドされると、そのインスタンスはハンドルが有効な間バインドされたままとなります。</span><span class="sxs-lookup"><span data-stu-id="7c050-153">Once an instance is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="7c050-154">他のインスタンスをそのハンドルにバインドすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7c050-154">No other instance can ever be bound to the handle.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindInstanceOwner">
      <MemberSignature Language="C#" Value="public void BindInstanceOwner (Guid instanceOwnerId, Guid lockToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindInstanceOwner(valuetype System.Guid instanceOwnerId, valuetype System.Guid lockToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindInstanceOwner(System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindInstanceOwner (instanceOwnerId As Guid, lockToken As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindInstanceOwner(Guid instanceOwnerId, Guid lockToken);" />
      <MemberSignature Language="F#" Value="member this.BindInstanceOwner : Guid * Guid -&gt; unit" Usage="instancePersistenceContext.BindInstanceOwner (instanceOwnerId, lockToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceOwnerId" Type="System.Guid" />
        <Parameter Name="lockToken" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceOwnerId"><span data-ttu-id="7c050-155">インスタンス所有者の識別子。</span><span class="sxs-lookup"><span data-stu-id="7c050-155">The identifier for the instance owner.</span></span></param>
        <param name="lockToken"><span data-ttu-id="7c050-156">インスタンス所有者のロック トークン。</span><span class="sxs-lookup"><span data-stu-id="7c050-156">The lock token of the instance owner.</span></span> <span data-ttu-id="7c050-157">永続化プロバイダーは、インスタンス所有者の識別子とその所有者のロック トークンに同じ値を使用する場合があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-157">A persistence provider may choose to use the same value for the instance owner identifier and the owner's lock token.</span></span></param>
        <summary><span data-ttu-id="7c050-158">インスタンス所有者を現在のインスタンス ハンドルにバインドします。</span><span class="sxs-lookup"><span data-stu-id="7c050-158">Binds an instance owner to the current instance handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-159">あるインスタンス所有者がハンドルにバインドされると、そのインスタンス所有者はハンドルが有効な間バインドされたままとなります。</span><span class="sxs-lookup"><span data-stu-id="7c050-159">Once an instance owner is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="7c050-160">他のインスタンス所有者をそのハンドルにバインドすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7c050-160">No other instance owner can ever be bound to the handle.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindReclaimedLock">
      <MemberSignature Language="C#" Value="public void BindReclaimedLock (long instanceVersion, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BindReclaimedLock(int64 instanceVersion, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BindReclaimedLock(System.Int64,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BindReclaimedLock (instanceVersion As Long, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BindReclaimedLock(long instanceVersion, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.BindReclaimedLock : int64 * TimeSpan -&gt; unit" Usage="instancePersistenceContext.BindReclaimedLock (instanceVersion, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceVersion" Type="System.Int64" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceVersion"><span data-ttu-id="7c050-161">インスタンスに対して保持されているロックのバージョン。または、永続化プロバイダーがロック バージョンを実装しない場合はゼロ。</span><span class="sxs-lookup"><span data-stu-id="7c050-161">Version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.</span></span></param>
        <param name="timeout"><span data-ttu-id="7c050-162">操作で使用するタイムアウト値。</span><span class="sxs-lookup"><span data-stu-id="7c050-162">The time-out value for the operation.</span></span></param>
        <summary><span data-ttu-id="7c050-163">インスタンスの既存のロックを現在のインスタンス ハンドルにバインドします。</span><span class="sxs-lookup"><span data-stu-id="7c050-163">Binds an existing lock on an instance to the current instance handle.</span></span> <span data-ttu-id="7c050-164">既存のロックのバージョンはパラメーターとして渡されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-164">The version of the existing lock is passed as a parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-165">永続化プロバイダーは、ロックの取得を試みるときに、現在のインスタンスが現在のストアで既にロックされているものと判断する場合があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-165">When attempting to acquire a lock, the persistence provider may decide that the current instance is already locked in the current store.</span></span> <span data-ttu-id="7c050-166">ロックトークンが現在のハンドルのロックトークンと一致する場合、永続化プロバイダーは、そのバージョンを検査して BindReclaimedLock に渡すことによって、ロックの再利用を試みることができます。</span><span class="sxs-lookup"><span data-stu-id="7c050-166">If the lock token matches the current handle's lock token, then the persistence provider can attempt to reclaim the lock by inspecting its version and passing it to BindReclaimedLock.</span></span> <span data-ttu-id="7c050-167">永続化プロバイダーは、ロックが正常に再要求されるまで、インスタンスに変更を加えることができません。</span><span class="sxs-lookup"><span data-stu-id="7c050-167">The persistence provider must not make changes to the instance until the lock is successfully reclaimed.</span></span> <span data-ttu-id="7c050-168">ロックにバインドされているハンドルが他にない場合は、BindReclaimedLock が成功し、現在のハンドルがロックにバインドされるようになります。</span><span class="sxs-lookup"><span data-stu-id="7c050-168">If no other handle is bound to the lock, then BindReclaimedLock succeeds and the current handle becomes bound to the lock.</span></span> <span data-ttu-id="7c050-169">それ以外の場合は、BindReclaimedLock が InstanceHandleConflictException をスローします。</span><span class="sxs-lookup"><span data-stu-id="7c050-169">Otherwise, BindReclaimedLock throws InstanceHandleConflictException.</span></span> <span data-ttu-id="7c050-170">他のハンドルに対するコマンドが実行中の場合、BindReclaimedLock がブロックされ、それらのコマンドの結果を待ってから、ロックを再要求できるかどうかを決定することがあります。</span><span class="sxs-lookup"><span data-stu-id="7c050-170">If commands are in progress on other handles, BindReclaimedLock may block waiting for the outcome of those commands before deciding whether the lock can be reclaimed.</span></span>  
  
 <span data-ttu-id="7c050-171">現在のインスタンス ハンドルはインスタンスとロックの所有者にバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-171">The current instance handle must be bound to an instance and a lock owner.</span></span> <span data-ttu-id="7c050-172">インスタンスは完了していないことが必要です。</span><span class="sxs-lookup"><span data-stu-id="7c050-172">The instance must not be completed.</span></span> <span data-ttu-id="7c050-173">ロック所有者に関連付けられたロック トークンは、ロックの所有者を識別するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-173">The lock token associated with the lock owner is used to identify the owner of the lock.</span></span>  
  
 <span data-ttu-id="7c050-174">あるロックがハンドルにバインドされると、そのロックはハンドルが有効な間バインドされたままとなります。</span><span class="sxs-lookup"><span data-stu-id="7c050-174">Once a lock is bound to a handle, it remains bound for the lifetime of the handle.</span></span> <span data-ttu-id="7c050-175">ロック トークンとインスタンス バージョンのいずれも変更できません。</span><span class="sxs-lookup"><span data-stu-id="7c050-175">Neither the lock token nor the instance version can be changed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedInstance">
      <MemberSignature Language="C#" Value="public void CompletedInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CompletedInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstance" />
      <MemberSignature Language="VB.NET" Value="Public Sub CompletedInstance ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CompletedInstance();" />
      <MemberSignature Language="F#" Value="member this.CompletedInstance : unit -&gt; unit" Usage="instancePersistenceContext.CompletedInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7c050-176">永続化プロバイダーによってインスタンス ストア内の現在のインスタンスに完了のマークが正常に付けられたことを示します。</span><span class="sxs-lookup"><span data-stu-id="7c050-176">Indicates that the persistence provider has successfully marked the current instance as complete in the instance store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-177">現在のインスタンス ハンドルは、インスタンスにバインドされているだけでなく、そのインスタンスのロックにもバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-177">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="7c050-178">インスタンスは、初期化されていなければならず、まだ完了していないことが必要です</span><span class="sxs-lookup"><span data-stu-id="7c050-178">The instance must be initialized and not be already completed.</span></span> <span data-ttu-id="7c050-179">インスタンスデータのセットが永続化されている場合は、インスタンスが初期化されます。インスタンスに関連付けられているすべてのキーが完了している必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-179">(An instance is initialized if a set of instance data has ever been persisted to it.) All of the keys associated to the instance must be completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletedInstanceKey">
      <MemberSignature Language="C#" Value="public void CompletedInstanceKey (Guid key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CompletedInstanceKey(valuetype System.Guid key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.CompletedInstanceKey(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CompletedInstanceKey (key As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CompletedInstanceKey(Guid key);" />
      <MemberSignature Language="F#" Value="member this.CompletedInstanceKey : Guid -&gt; unit" Usage="instancePersistenceContext.CompletedInstanceKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="7c050-180">完了したキーのインスタンス キー識別子。</span><span class="sxs-lookup"><span data-stu-id="7c050-180">The instance key identifier for the key that has been completed.</span></span> <span data-ttu-id="7c050-181">Guid.Empty にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7c050-181">Must not be Guid.Empty.</span></span></param>
        <summary><span data-ttu-id="7c050-182">永続化プロバイダーによって外部ストア内のキーに完了のマークが正常に付けられたことを示します。</span><span class="sxs-lookup"><span data-stu-id="7c050-182">Indicates that the persistence provider has successfully marked a key as complete in the external store.</span></span> <span data-ttu-id="7c050-183">キーの識別子はパラメーターとして指定されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-183">The identifier of the key is specified as a parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-184">現在のインスタンス ハンドルは、インスタンスにバインドされているだけでなく、そのインスタンスのロックにもバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-184">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="7c050-185">インスタンス キーは、現在のインスタンスに関連付けられていなければならず、まだ完了していないことが必要です。</span><span class="sxs-lookup"><span data-stu-id="7c050-185">The instance key must be associated to the current instance and not be already completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBindReclaimedLockException">
      <MemberSignature Language="C#" Value="public Exception CreateBindReclaimedLockException (long instanceVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Exception CreateBindReclaimedLockException(int64 instanceVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.CreateBindReclaimedLockException(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateBindReclaimedLockException (instanceVersion As Long) As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Exception ^ CreateBindReclaimedLockException(long instanceVersion);" />
      <MemberSignature Language="F#" Value="member this.CreateBindReclaimedLockException : int64 -&gt; Exception" Usage="instancePersistenceContext.CreateBindReclaimedLockException instanceVersion" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceVersion" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="instanceVersion"><span data-ttu-id="7c050-186">インスタンスに対して保持されているロックのバージョン。または、永続化プロバイダーがロック バージョンを実装しない場合はゼロ。</span><span class="sxs-lookup"><span data-stu-id="7c050-186">The version of the lock held on the instance, or zero if the persistence provider does not implement lock versions.</span></span></param>
        <summary><span data-ttu-id="7c050-187">BindReclaimedLock 動作をトリガーするために TryCommand からスローされる場合がある例外のインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="7c050-187">Creates an instance of an exception which can be thrown from TryCommand to trigger BindReclaimedLock behavior.</span></span></summary>
        <returns><span data-ttu-id="7c050-188">例外。</span><span class="sxs-lookup"><span data-stu-id="7c050-188">An exception.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-189">サンプル コード:</span><span class="sxs-lookup"><span data-stu-id="7c050-189">Sample code:</span></span>  
  
```  
  
protected override bool TryCommand(InstancePersistenceContext context, InstancePersistenceCommand command, TimeSpan timeout)  
{  
    throw context.CreateBindReclaimedLockException(5);  
}  
is equivalent to  
protected override bool TryCommand(InstancePersistenceContext context, InstancePersistenceCommand command, TimeSpan timeout)  
{  
    context.BindReclaimedLock(5, timeout);  
    throw new OperationCanceledException();  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBindReclaimedLock">
      <MemberSignature Language="C#" Value="public void EndBindReclaimedLock (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBindReclaimedLock(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.EndBindReclaimedLock(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBindReclaimedLock (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBindReclaimedLock(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndBindReclaimedLock : IAsyncResult -&gt; unit" Usage="instancePersistenceContext.EndBindReclaimedLock result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="7c050-190">非同期操作の結果。</span><span class="sxs-lookup"><span data-stu-id="7c050-190">The result of the asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="7c050-191"><see cref="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)" /> メソッドによって開始される非同期操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="7c050-191">Ends the asynchronous operation started by the <see cref="M:System.Runtime.DurableInstancing.InstancePersistenceContext.BeginBindReclaimedLock(System.Int64,System.TimeSpan,System.AsyncCallback,System.Object)" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndExecute">
      <MemberSignature Language="C#" Value="public void EndExecute (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndExecute(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.EndExecute(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndExecute (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndExecute(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndExecute : IAsyncResult -&gt; unit" Usage="instancePersistenceContext.EndExecute result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="7c050-192">非同期操作のステータス。</span><span class="sxs-lookup"><span data-stu-id="7c050-192">The status of an asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="7c050-193">非同期操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="7c050-193">Ends the asynchronous operation.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public void Execute (System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Execute(class System.Runtime.DurableInstancing.InstancePersistenceCommand command, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.Execute(System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Execute (command As InstancePersistenceCommand, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Execute(System::Runtime::DurableInstancing::InstancePersistenceCommand ^ command, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Execute : System.Runtime.DurableInstancing.InstancePersistenceCommand * TimeSpan -&gt; unit" Usage="instancePersistenceContext.Execute (command, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Runtime.DurableInstancing.InstancePersistenceCommand" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="7c050-194">実行する永続化コマンド。</span><span class="sxs-lookup"><span data-stu-id="7c050-194">The persistence command to be executed.</span></span></param>
        <param name="timeout"><span data-ttu-id="7c050-195">操作で使用するタイムアウト値。</span><span class="sxs-lookup"><span data-stu-id="7c050-195">The time-out value for the operation.</span></span></param>
        <summary><span data-ttu-id="7c050-196">永続化コマンドを実行します。</span><span class="sxs-lookup"><span data-stu-id="7c050-196">Executes a persistence command.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-197">永続化プロバイダーは、このメソッドを使用して、サブコマンドをコマンドの一部として実行できます。</span><span class="sxs-lookup"><span data-stu-id="7c050-197">A persistence provider can use this method to execute sub-commands as part of a command.</span></span> <span data-ttu-id="7c050-198">サブコマンドは、InstanceStore.Execute に渡されるコマンドと同様に、TryCommand を使用して実行されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-198">The sub-command will be executed using TryCommand, similar to commands passed to InstanceStore.Execute.</span></span> <span data-ttu-id="7c050-199">コマンドは入れ子にできますが、1 つのコマンドが一度に複数のサブコマンドを実行することはできません。</span><span class="sxs-lookup"><span data-stu-id="7c050-199">Commands can be nested, but a command must not execute more than one sub-command at a time.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceHandle">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceHandle InstanceHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.DurableInstancing.InstanceHandle InstanceHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceHandle As InstanceHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::DurableInstancing::InstanceHandle ^ InstanceHandle { System::Runtime::DurableInstancing::InstanceHandle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceHandle : System.Runtime.DurableInstancing.InstanceHandle" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7c050-200">現在のインスタンス ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="7c050-200">Gets the current instance handle.</span></span></summary>
        <value><span data-ttu-id="7c050-201">現在のインスタンス ハンドル。</span><span class="sxs-lookup"><span data-stu-id="7c050-201">The current instance handle.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceVersion">
      <MemberSignature Language="C#" Value="public long InstanceVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceVersion" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceVersion As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceVersion { long get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceVersion : int64" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7c050-202">現在のインスタンス ハンドルによって現在のインスタンスに保持されているロックのバージョンを取得します。</span><span class="sxs-lookup"><span data-stu-id="7c050-202">Gets the version of the lock held on the current instance by the current instance handle.</span></span></summary>
        <value><span data-ttu-id="7c050-203">現在のインスタンスハンドルにバインドされているインスタンスロックのバージョン。または、ハンドルがロックにバインドされていない場合は-1。</span><span class="sxs-lookup"><span data-stu-id="7c050-203">The version of the instance lock bound to the current instance handle, or -1 if the handle isn't bound to a lock.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-204">永続化プロバイダーは、あるロックにバインドされているハンドルを使用して、そのロックを必要とする操作 (インスタンス データの永続化など) を実行する場合は、インスタンス ストア内のインスタンスに保持されているロックのロック バージョンとこの値を比較する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-204">The persistence provider should check this value against the lock version of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock.</span></span> <span data-ttu-id="7c050-205">ロックバージョンが一致しない場合、コマンドは InstanceLockLostException で失敗します。</span><span class="sxs-lookup"><span data-stu-id="7c050-205">If the lock version doesn't match, the command should fail with InstanceLockLostException.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceView">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceView InstanceView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.DurableInstancing.InstanceView InstanceView" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceView" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceView As InstanceView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::DurableInstancing::InstanceView ^ InstanceView { System::Runtime::DurableInstancing::InstanceView ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceView : System.Runtime.DurableInstancing.InstanceView" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.InstanceView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7c050-206">現在のインスタンスのメモリ内状態を表すインスタンス ビュー オブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="7c050-206">Gets the instance view object that represents the in-memory state of the current instance.</span></span> <span data-ttu-id="7c050-207">このビューには、実行中のコマンドによって加えられた更新が反映されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-207">This view reflects updates as they are made by the command in progress.</span></span></summary>
        <value><span data-ttu-id="7c050-208">インスタンス ビュー オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="7c050-208">The instance view object.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadedInstance">
      <MemberSignature Language="C#" Value="public void LoadedInstance (System.Runtime.DurableInstancing.InstanceState state, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; instanceData, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; instanceMetadata, System.Collections.Generic.IDictionary&lt;Guid,System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;&gt; associatedInstanceKeyMetadata, System.Collections.Generic.IDictionary&lt;Guid,System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;&gt; completedInstanceKeyMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadedInstance(valuetype System.Runtime.DurableInstancing.InstanceState state, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; instanceData, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; instanceMetadata, class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt;&gt; associatedInstanceKeyMetadata, class System.Collections.Generic.IDictionary`2&lt;valuetype System.Guid, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt;&gt; completedInstanceKeyMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.LoadedInstance(System.Runtime.DurableInstancing.InstanceState,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}},System.Collections.Generic.IDictionary{System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadedInstance (state As InstanceState, instanceData As IDictionary(Of XName, InstanceValue), instanceMetadata As IDictionary(Of XName, InstanceValue), associatedInstanceKeyMetadata As IDictionary(Of Guid, IDictionary(Of XName, InstanceValue)), completedInstanceKeyMetadata As IDictionary(Of Guid, IDictionary(Of XName, InstanceValue)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadedInstance(System::Runtime::DurableInstancing::InstanceState state, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ instanceData, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ instanceMetadata, System::Collections::Generic::IDictionary&lt;Guid, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^&gt; ^ associatedInstanceKeyMetadata, System::Collections::Generic::IDictionary&lt;Guid, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^&gt; ^ completedInstanceKeyMetadata);" />
      <MemberSignature Language="F#" Value="member this.LoadedInstance : System.Runtime.DurableInstancing.InstanceState * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * System.Collections.Generic.IDictionary&lt;Guid, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt;&gt; * System.Collections.Generic.IDictionary&lt;Guid, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt;&gt; -&gt; unit" Usage="instancePersistenceContext.LoadedInstance (state, instanceData, instanceMetadata, associatedInstanceKeyMetadata, completedInstanceKeyMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Runtime.DurableInstancing.InstanceState" />
        <Parameter Name="instanceData" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="instanceMetadata" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="associatedInstanceKeyMetadata" Type="System.Collections.Generic.IDictionary&lt;System.Guid,System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;&gt;" />
        <Parameter Name="completedInstanceKeyMetadata" Type="System.Collections.Generic.IDictionary&lt;System.Guid,System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="7c050-209">インスタンス状態情報。</span><span class="sxs-lookup"><span data-stu-id="7c050-209">The instance state information.</span></span></param>
        <param name="instanceData"><span data-ttu-id="7c050-210"><see cref="T:System.Xml.Linq.XName" /> と <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> オブジェクトのディクショナリとしてのインスタンス データ。</span><span class="sxs-lookup"><span data-stu-id="7c050-210">The instance data as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <param name="instanceMetadata"><span data-ttu-id="7c050-211"><see cref="T:System.Xml.Linq.XName" /> と <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> オブジェクトのコレクションとしてのインスタンス メタデータ。</span><span class="sxs-lookup"><span data-stu-id="7c050-211">Instance metadata as a collection of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <param name="associatedInstanceKeyMetadata"><span data-ttu-id="7c050-212">インスタンス識別子とインスタンス キーのメタデータのディクショナリとして関連付けられたインスタンス キー。これは、<see cref="T:System.Xml.Linq.XName" /> と <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> オブジェクトのディクショナリです。</span><span class="sxs-lookup"><span data-stu-id="7c050-212">Associated instance key metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <param name="completedInstanceKeyMetadata"><span data-ttu-id="7c050-213">インスタンス識別子とインスタンス キーのメタデータのディクショナリとして完了済みのインスタンス メタデータ。これは、<see cref="T:System.Xml.Linq.XName" /> と <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> オブジェクトのディクショナリです。</span><span class="sxs-lookup"><span data-stu-id="7c050-213">Completed instance metadata as a dictionary of instance identifier and instance key metadata, which is a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <summary><span data-ttu-id="7c050-214">永続化プロバイダーによってインスタンス ストアから現在のインスタンスが正常に取得されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="7c050-214">Indicates that the persistence provider has successfully retrieved the current instance from the instance store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-215">現在のインスタンス ハンドルはインスタンスにバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-215">The current instance handle must be bound to an instance.</span></span> <span data-ttu-id="7c050-216">インスタンス ハンドルがロックにバインドされているか、読み込まれたインスタンスに完了のマークが付いている場合、読み込まれたデータは一貫性があると見なされます。それ以外の場合は、一貫性が不明であると見なされます。</span><span class="sxs-lookup"><span data-stu-id="7c050-216">If the instance handle is bound to a lock or the loaded instance is marked as complete, the loaded data is considered to be consistent; otherwise, it is considered to be in doubt.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LockToken">
      <MemberSignature Language="C#" Value="public Guid LockToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid LockToken" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.LockToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LockToken As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid LockToken { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.LockToken : Guid" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.LockToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7c050-217">現在のインスタンス ハンドルにバインドされているインスタンス所有者のロック トークンを取得します。</span><span class="sxs-lookup"><span data-stu-id="7c050-217">Gets the lock token of the instance owner bound to the current instance handle.</span></span></summary>
        <value><span data-ttu-id="7c050-218">現在のインスタンスハンドルにバインドされているロックトークン。または、ハンドルがインスタンス所有者にバインドされていない場合は <see cref="F:System.Guid.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="7c050-218">The lock token bound to the current instance handle, or <see cref="F:System.Guid.Empty" /> if the handle isn't bound to an instance owner.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-219">永続化プロバイダーは、あるロックにバインドされているハンドルを使用して、そのロックを必要とする操作 (インスタンス データの永続化など) を実行する場合は、インスタンス ストア内のインスタンスに保持されているロックのロック トークンとこの値を比較する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-219">The persistence provider should check this value against the lock token of the lock held on an instance in the instance store when performing an operation that requires a lock (such as persisting instance data) using a handle bound to the lock.</span></span> <span data-ttu-id="7c050-220">ロックトークンが一致しない場合、コマンドは InstanceLockLostException で失敗します。</span><span class="sxs-lookup"><span data-stu-id="7c050-220">If the lock token doesn't match, the command should fail with InstanceLockLostException.</span></span>  
  
 <span data-ttu-id="7c050-221">永続化プロバイダーは、インスタンスの新しいロックを取得する場合 (ロックにまだバインドされていないハンドルを使用してインスタンス データを永続化する場合など) に、この値をロック トークンとして使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-221">The persistence provider should use this value as the lock token when acquiring a new lock on an instance (such as persisting instance data using a handle not already bound to a lock).</span></span> <span data-ttu-id="7c050-222">インスタンスがインスタンス ストアで既にロックされており、ロック トークンがこのロック トークンと一致している場合、永続化プロバイダーは BindReclaimedLock を使用してインスタンスの再要求を試みることができます。</span><span class="sxs-lookup"><span data-stu-id="7c050-222">If the instance is already locked in the instance store and the lock token matches this lock token, the persistence provider can attempt to reclaim the instance using BindReclaimedLock.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistedInstance">
      <MemberSignature Language="C#" Value="public void PersistedInstance (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PersistedInstance(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.PersistedInstance(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue})" />
      <MemberSignature Language="VB.NET" Value="Public Sub PersistedInstance (data As IDictionary(Of XName, InstanceValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PersistedInstance(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="member this.PersistedInstance : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; -&gt; unit" Usage="instancePersistenceContext.PersistedInstance data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="7c050-223"><see cref="T:System.Xml.Linq.XName" /> と <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> オブジェクトのディクショナリとしてのインスタンス データ。</span><span class="sxs-lookup"><span data-stu-id="7c050-223">Instance data as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <summary><span data-ttu-id="7c050-224">永続化プロバイダーによってインスタンス データのセットがインスタンス ストアに正常に永続化されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="7c050-224">Indicates that the persistence provider has successfully persisted a set of instance data to the instance store.</span></span> <span data-ttu-id="7c050-225">これにより、インスタンスがまだ初期化されていない場合に、インスタンスが初期化されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-225">This has the effect of initializing the instance if it wasn't already.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-226">現在のインスタンス ハンドルは、インスタンスにバインドされているだけでなく、そのインスタンスのロックにもバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-226">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="7c050-227">インスタンス データの各セットは、以前のセットを完全に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="7c050-227">Each set of instance data completely replaces the previous set.</span></span> <span data-ttu-id="7c050-228">インスタンスデータのセットは null になる場合があります。これは空と同じです。</span><span class="sxs-lookup"><span data-stu-id="7c050-228">The set of instance data may be null - this is the same as empty.</span></span> <span data-ttu-id="7c050-229">null のインスタンス データのセットを永続化すると、既存のインスタンス データのセットは削除されます</span><span class="sxs-lookup"><span data-stu-id="7c050-229">Persisting a null set of instance data deletes the existing set of instance data.</span></span> <span data-ttu-id="7c050-230">(インスタンス データのセットを永続化しても、インスタンス メタデータは影響を受けません)。</span><span class="sxs-lookup"><span data-stu-id="7c050-230">(Persisting a set of instance data has no effect on instance metadata.)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueriedInstanceStore">
      <MemberSignature Language="C#" Value="public void QueriedInstanceStore (System.Runtime.DurableInstancing.InstanceStoreQueryResult queryResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void QueriedInstanceStore(class System.Runtime.DurableInstancing.InstanceStoreQueryResult queryResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.QueriedInstanceStore(System.Runtime.DurableInstancing.InstanceStoreQueryResult)" />
      <MemberSignature Language="VB.NET" Value="Public Sub QueriedInstanceStore (queryResult As InstanceStoreQueryResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void QueriedInstanceStore(System::Runtime::DurableInstancing::InstanceStoreQueryResult ^ queryResult);" />
      <MemberSignature Language="F#" Value="member this.QueriedInstanceStore : System.Runtime.DurableInstancing.InstanceStoreQueryResult -&gt; unit" Usage="instancePersistenceContext.QueriedInstanceStore queryResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queryResult" Type="System.Runtime.DurableInstancing.InstanceStoreQueryResult" />
      </Parameters>
      <Docs>
        <param name="queryResult"><span data-ttu-id="7c050-231">インスタンス ストアに対するクエリの結果。</span><span class="sxs-lookup"><span data-stu-id="7c050-231">The results of a query against an instance store.</span></span></param>
        <summary><span data-ttu-id="7c050-232">パラメーターとして渡される <see cref="T:System.Runtime.DurableInstancing.InstanceStoreQueryResult" /> を、<see cref="T:System.Runtime.DurableInstancing.InstanceStoreQueryResult" /> にある <see cref="T:System.Runtime.DurableInstancing.InstanceView" /> オブジェクトのリストに追加します。</span><span class="sxs-lookup"><span data-stu-id="7c050-232">Adds the <see cref="T:System.Runtime.DurableInstancing.InstanceStoreQueryResult" /> passed as a parameter to a list of <see cref="T:System.Runtime.DurableInstancing.InstanceStoreQueryResult" /> objects in an <see cref="T:System.Runtime.DurableInstancing.InstanceView" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInstanceKeyMetadata">
      <MemberSignature Language="C#" Value="public void ReadInstanceKeyMetadata (Guid key, System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadInstanceKeyMetadata(valuetype System.Guid key, class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceKeyMetadata(System.Guid,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadInstanceKeyMetadata (key As Guid, metadata As IDictionary(Of XName, InstanceValue), complete As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadInstanceKeyMetadata(Guid key, System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ metadata, bool complete);" />
      <MemberSignature Language="F#" Value="member this.ReadInstanceKeyMetadata : Guid * System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * bool -&gt; unit" Usage="instancePersistenceContext.ReadInstanceKeyMetadata (key, metadata, complete)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="complete" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="7c050-233">読み取られたメタデータを持つキーのインスタンス キー識別子。</span><span class="sxs-lookup"><span data-stu-id="7c050-233">The instance key identifier for the key whose metadata was read.</span></span> <span data-ttu-id="7c050-234">Guid.Empty にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7c050-234">Must not be Guid.Empty.</span></span></param>
        <param name="metadata"><span data-ttu-id="7c050-235"><see cref="T:System.Xml.Linq.XName" /> と <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> オブジェクトのディクショナリとしてのメタデータ。</span><span class="sxs-lookup"><span data-stu-id="7c050-235">The metadata as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <param name="complete"><span data-ttu-id="7c050-236">メタデータがインスタンス キーに関連付けられたすべてのメタデータを表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7c050-236"><see langword="true" /> if the metadata represents all of the metadata associated to the instance key; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7c050-237">永続化プロバイダーによって、現在のインスタンスに関連付けられたキーのインスタンス キー メタデータがインスタンス ストアから正常に読み取られたことを示します。</span><span class="sxs-lookup"><span data-stu-id="7c050-237">Indicates that the persistence provider has successfully read some instance key metadata for a key associated to the current instance from the instance store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-238">現在のインスタンス ハンドルはインスタンスにバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-238">The current instance handle must be bound to an instance.</span></span> <span data-ttu-id="7c050-239">インスタンス ハンドルがロックにバインドされているか、現在のインスタンスに完了のマークが付いている場合、メタデータは一貫性があると見なされます。それ以外の場合は、一貫性が不明であると見なされます。</span><span class="sxs-lookup"><span data-stu-id="7c050-239">If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInstanceMetadata">
      <MemberSignature Language="C#" Value="public void ReadInstanceMetadata (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadInstanceMetadata(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadInstanceMetadata (metadata As IDictionary(Of XName, InstanceValue), complete As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadInstanceMetadata(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ metadata, bool complete);" />
      <MemberSignature Language="F#" Value="member this.ReadInstanceMetadata : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * bool -&gt; unit" Usage="instancePersistenceContext.ReadInstanceMetadata (metadata, complete)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="complete" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="metadata"><span data-ttu-id="7c050-240"><see cref="T:System.Xml.Linq.XName" /> と <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> オブジェクトのディクショナリとしてのメタデータ。</span><span class="sxs-lookup"><span data-stu-id="7c050-240">The metadata as a dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <param name="complete"><span data-ttu-id="7c050-241">メタデータがインスタンスに関連付けられたすべてのメタデータを表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7c050-241"><see langword="true" /> if the metadata represents all of the metadata associated to the instance; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="7c050-242">永続化プロバイダーによって現在のインスタンスのインスタンス メタデータがインスタンス ストアから正常に読み取られたことを示します。</span><span class="sxs-lookup"><span data-stu-id="7c050-242">Indicates that the persistence provider has successfully read some instance metadata for the current instance from the instance store.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInstanceOwnerMetadata">
      <MemberSignature Language="C#" Value="public void ReadInstanceOwnerMetadata (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadInstanceOwnerMetadata(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, class System.Runtime.DurableInstancing.InstanceValue&gt; metadata, bool complete) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.ReadInstanceOwnerMetadata(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadInstanceOwnerMetadata (metadata As IDictionary(Of XName, InstanceValue), complete As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadInstanceOwnerMetadata(System::Collections::Generic::IDictionary&lt;System::Xml::Linq::XName ^, System::Runtime::DurableInstancing::InstanceValue ^&gt; ^ metadata, bool complete);" />
      <MemberSignature Language="F#" Value="member this.ReadInstanceOwnerMetadata : System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName, System.Runtime.DurableInstancing.InstanceValue&gt; * bool -&gt; unit" Usage="instancePersistenceContext.ReadInstanceOwnerMetadata (metadata, complete)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue&gt;" />
        <Parameter Name="complete" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="metadata"><span data-ttu-id="7c050-243"><see cref="T:System.Xml.Linq.XName" /> と <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> オブジェクトのディクショナリ。</span><span class="sxs-lookup"><span data-stu-id="7c050-243">The dictionary of <see cref="T:System.Xml.Linq.XName" /> and <see cref="T:System.Runtime.DurableInstancing.InstanceValue" /> objects.</span></span></param>
        <param name="complete"><span data-ttu-id="7c050-244">一貫性を <see cref="F:System.Runtime.DurableInstancing.InstanceValueConsistency.InDoubt" /> または <see cref="F:System.Runtime.DurableInstancing.InstanceValueConsistency.Partial" /> に設定するかどうかを指定する値。</span><span class="sxs-lookup"><span data-stu-id="7c050-244">The value to specify whether the consistency to be set to <see cref="F:System.Runtime.DurableInstancing.InstanceValueConsistency.InDoubt" /> or <see cref="F:System.Runtime.DurableInstancing.InstanceValueConsistency.Partial" />.</span></span></param>
        <summary><span data-ttu-id="7c050-245">パラメーターに渡されたデータを使用して、インスタンス所有者のメタデータを設定します。</span><span class="sxs-lookup"><span data-stu-id="7c050-245">Sets the instance owner metadata using the data passed in the parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-246">現在のインスタンス ハンドルはインスタンスにバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-246">The current instance handle must be bound to an instance.</span></span> <span data-ttu-id="7c050-247">インスタンス ハンドルがロックにバインドされているか、現在のインスタンスに完了のマークが付いている場合、メタデータは一貫性があると見なされます。それ以外の場合は、一貫性が不明であると見なされます。</span><span class="sxs-lookup"><span data-stu-id="7c050-247">If the instance handle is bound to a lock or the current instance is marked as complete, the metadata is considered to be consistent; otherwise, it is considered to be in doubt.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCancellationHandler">
      <MemberSignature Language="C#" Value="public void SetCancellationHandler (Action&lt;System.Runtime.DurableInstancing.InstancePersistenceContext&gt; cancellationHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCancellationHandler(class System.Action`1&lt;class System.Runtime.DurableInstancing.InstancePersistenceContext&gt; cancellationHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.SetCancellationHandler(System.Action{System.Runtime.DurableInstancing.InstancePersistenceContext})" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCancellationHandler (cancellationHandler As Action(Of InstancePersistenceContext))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCancellationHandler(Action&lt;System::Runtime::DurableInstancing::InstancePersistenceContext ^&gt; ^ cancellationHandler);" />
      <MemberSignature Language="F#" Value="member this.SetCancellationHandler : Action&lt;System.Runtime.DurableInstancing.InstancePersistenceContext&gt; -&gt; unit" Usage="instancePersistenceContext.SetCancellationHandler cancellationHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationHandler" Type="System.Action&lt;System.Runtime.DurableInstancing.InstancePersistenceContext&gt;" />
      </Parameters>
      <Docs>
        <param name="cancellationHandler"><span data-ttu-id="7c050-248">呼び出される関数への参照。</span><span class="sxs-lookup"><span data-stu-id="7c050-248">The reference to a function to be called.</span></span></param>
        <summary><span data-ttu-id="7c050-249">操作のキャンセルが要求された場合に呼び出されるキャンセル ハンドラーを設定します。</span><span class="sxs-lookup"><span data-stu-id="7c050-249">Sets the cancellation handler to be called when the cancel of an operation is requested.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-250">キャンセル ハンドラーが呼び出された場合、永続化プロバイダーは、保留中のすべての操作をキャンセルして、TryCommand から OperationCanceledException をスローすることによって、永続化コマンドが中断されたために完了できなかったことを示す必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-250">If the cancellation handler is called, the persistence provider should cancel all pending operations and throw OperationCanceledException from TryCommand to indicate that the persistence command was interrupted before it could be completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnassociatedInstanceKey">
      <MemberSignature Language="C#" Value="public void UnassociatedInstanceKey (Guid key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnassociatedInstanceKey(valuetype System.Guid key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.UnassociatedInstanceKey(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnassociatedInstanceKey (key As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnassociatedInstanceKey(Guid key);" />
      <MemberSignature Language="F#" Value="member this.UnassociatedInstanceKey : Guid -&gt; unit" Usage="instancePersistenceContext.UnassociatedInstanceKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="7c050-251">関連付けが解除されたキーのインスタンス キー識別子。</span><span class="sxs-lookup"><span data-stu-id="7c050-251">The instance key identifier for the key that has been unassociated.</span></span> <span data-ttu-id="7c050-252">Guid.Empty にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7c050-252">Must not be Guid.Empty.</span></span></param>
        <summary><span data-ttu-id="7c050-253">永続化プロバイダーによってインスタンス ストア内の現在のインスタンスとキーとの関連付けが正常に解除されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="7c050-253">Indicates that the persistence provider has successfully disassociated a key from the current instance in the instance store.</span></span> <span data-ttu-id="7c050-254">キーの識別子はパラメーターとして指定されます。</span><span class="sxs-lookup"><span data-stu-id="7c050-254">The identifier of the key is specified as a parameter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-255">現在のインスタンス ハンドルは、インスタンスにバインドされているだけでなく、そのインスタンスのロックにもバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-255">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="7c050-256">インスタンス キーは、現在のインスタンスに関連付けられていなければならず、完了のマークが付いていることが必要です。</span><span class="sxs-lookup"><span data-stu-id="7c050-256">The instance key must be associated to the current instance and must be marked complete.</span></span> <span data-ttu-id="7c050-257">現在のインスタンスに完了のマークを付けることはできません。</span><span class="sxs-lookup"><span data-stu-id="7c050-257">The current instance must not be marked complete.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserContext">
      <MemberSignature Language="C#" Value="public object UserContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserContext" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.DurableInstancing.InstancePersistenceContext.UserContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserContext { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserContext : obj" Usage="System.Runtime.DurableInstancing.InstancePersistenceContext.UserContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7c050-258">現在のインスタンス ハンドルにアタッチされたユーザー コンテキスト情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="7c050-258">Gets the user context information attached to the current instance handle.</span></span></summary>
        <value><span data-ttu-id="7c050-259">ユーザーのコンテキスト情報。</span><span class="sxs-lookup"><span data-stu-id="7c050-259">The user context information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-260">このオブジェクトは、現在のインスタンス ハンドルの InstanceStore.OnNewInstanceHandle から返されるオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="7c050-260">The object is the one that is returned from InstanceStore.OnNewInstanceHandle for the current instance handle.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WroteInstanceKeyMetadataValue">
      <MemberSignature Language="C#" Value="public void WroteInstanceKeyMetadataValue (Guid key, System.Xml.Linq.XName name, System.Runtime.DurableInstancing.InstanceValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WroteInstanceKeyMetadataValue(valuetype System.Guid key, class System.Xml.Linq.XName name, class System.Runtime.DurableInstancing.InstanceValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceKeyMetadataValue(System.Guid,System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WroteInstanceKeyMetadataValue (key As Guid, name As XName, value As InstanceValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WroteInstanceKeyMetadataValue(Guid key, System::Xml::Linq::XName ^ name, System::Runtime::DurableInstancing::InstanceValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.WroteInstanceKeyMetadataValue : Guid * System.Xml.Linq.XName * System.Runtime.DurableInstancing.InstanceValue -&gt; unit" Usage="instancePersistenceContext.WroteInstanceKeyMetadataValue (key, name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Guid" />
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Runtime.DurableInstancing.InstanceValue" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="7c050-261">キーのインスタンス キー識別子。</span><span class="sxs-lookup"><span data-stu-id="7c050-261">The instance key identifier for the key.</span></span> <span data-ttu-id="7c050-262">Guid.Empty にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="7c050-262">Must not be Guid.Empty.</span></span></param>
        <param name="name"><span data-ttu-id="7c050-263">メタデータ プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="7c050-263">The name of the metadata property.</span></span></param>
        <param name="value"><span data-ttu-id="7c050-264">メタデータ プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="7c050-264">The value of the metadata property.</span></span></param>
        <summary><span data-ttu-id="7c050-265">永続化プロバイダーによって、現在のインスタンスに関連付けられたインスタンス キーのメタデータ値がインスタンス ストアに正常に書き込まれたことを示します。</span><span class="sxs-lookup"><span data-stu-id="7c050-265">Indicates that the persistence provider has successfully written a metadata value for an instance key that is associated with the current instance to the instance store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-266">現在のインスタンス ハンドルは、インスタンスにバインドされているだけでなく、そのインスタンスのロックにもバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-266">The current instance handle must be bound to an instance as well as a lock on that instance.</span></span> <span data-ttu-id="7c050-267">インスタンス キーは、現在のインスタンスに関連付けられていなければならず、完了のマークが付いていないことが必要です。</span><span class="sxs-lookup"><span data-stu-id="7c050-267">The instance key must be associated with the current instance and must not be completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WroteInstanceMetadataValue">
      <MemberSignature Language="C#" Value="public void WroteInstanceMetadataValue (System.Xml.Linq.XName name, System.Runtime.DurableInstancing.InstanceValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WroteInstanceMetadataValue(class System.Xml.Linq.XName name, class System.Runtime.DurableInstancing.InstanceValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WroteInstanceMetadataValue (name As XName, value As InstanceValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WroteInstanceMetadataValue(System::Xml::Linq::XName ^ name, System::Runtime::DurableInstancing::InstanceValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.WroteInstanceMetadataValue : System.Xml.Linq.XName * System.Runtime.DurableInstancing.InstanceValue -&gt; unit" Usage="instancePersistenceContext.WroteInstanceMetadataValue (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Runtime.DurableInstancing.InstanceValue" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7c050-268">メタデータ プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="7c050-268">The name of the metadata property.</span></span></param>
        <param name="value"><span data-ttu-id="7c050-269">メタデータ プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="7c050-269">The value of the metadata property.</span></span></param>
        <summary><span data-ttu-id="7c050-270">永続化プロバイダーによって現在のインスタンスのメタデータ値が外部インスタンス ストアに正常に書き込まれたことを示します。</span><span class="sxs-lookup"><span data-stu-id="7c050-270">Indicates that the persistence provider has successfully written a metadata value for the current instance to the external instance store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-271">現在のインスタンス ハンドルは、インスタンスにバインドされているだけでなく、そのインスタンスのロックも保持している必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-271">The current instance handle must be bound to an instance as well as has a lock on that instance.</span></span> <span data-ttu-id="7c050-272">インスタンスは完了していないことが必要です。</span><span class="sxs-lookup"><span data-stu-id="7c050-272">The instance must not be completed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WroteInstanceOwnerMetadataValue">
      <MemberSignature Language="C#" Value="public void WroteInstanceOwnerMetadataValue (System.Xml.Linq.XName name, System.Runtime.DurableInstancing.InstanceValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WroteInstanceOwnerMetadataValue(class System.Xml.Linq.XName name, class System.Runtime.DurableInstancing.InstanceValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.DurableInstancing.InstancePersistenceContext.WroteInstanceOwnerMetadataValue(System.Xml.Linq.XName,System.Runtime.DurableInstancing.InstanceValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WroteInstanceOwnerMetadataValue (name As XName, value As InstanceValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WroteInstanceOwnerMetadataValue(System::Xml::Linq::XName ^ name, System::Runtime::DurableInstancing::InstanceValue ^ value);" />
      <MemberSignature Language="F#" Value="member this.WroteInstanceOwnerMetadataValue : System.Xml.Linq.XName * System.Runtime.DurableInstancing.InstanceValue -&gt; unit" Usage="instancePersistenceContext.WroteInstanceOwnerMetadataValue (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.DurableInstancing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Xml.Linq.XName" />
        <Parameter Name="value" Type="System.Runtime.DurableInstancing.InstanceValue" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="7c050-273">メタデータ プロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="7c050-273">The name of the metadata property.</span></span></param>
        <param name="value"><span data-ttu-id="7c050-274">メタデータ プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="7c050-274">The value of the metadata property.</span></span></param>
        <summary><span data-ttu-id="7c050-275">永続化プロバイダーによって現在のインスタンスの所有者のメタデータ値がインスタンス ストアに正常に書き込まれたことを示します。</span><span class="sxs-lookup"><span data-stu-id="7c050-275">Indicates that the persistence provider has successfully written a metadata value for the current instance owner to the instance store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7c050-276">現在のインスタンス ハンドルはインスタンスの所有者にバインドされている必要があります。</span><span class="sxs-lookup"><span data-stu-id="7c050-276">The current instance handle must be bound to an instance owner.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
